// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`assignment 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"2\\"",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = \\"2\\"": Object {
      "Next": "b = a",
      "Result": "2",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1": Object {
      "Next": "d = a",
      "Result": 1,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [1, 2]": Object {
      "Next": "e = a",
      "Result": Array [
        1,
        2,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "c = a",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {x: \\"val\\"}": Object {
      "Next": "return {a: a, b: b, c: c, d: d, e: e}",
      "Result": Object {
        "x": "val",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "b = a": Object {
      "InputPath": "$.a",
      "Next": "a = null",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "c = a": Object {
      "InputPath": "$.a",
      "Next": "a = 1",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "d = a": Object {
      "InputPath": "$.a",
      "Next": "a = [1, 2]",
      "ResultPath": "$.d",
      "Type": "Pass",
    },
    "e = a": Object {
      "InputPath": "$.a",
      "Next": "a = {x: \\"val\\"}",
      "ResultPath": "$.e",
      "Type": "Pass",
    },
    "return {a: a, b: b, c: c, d: d, e: e}": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.a",
        "b.$": "$.b",
        "c.$": "$.c",
        "d.$": "$.d",
        "e.$": "$.e",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binaryOps logic 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__c = input.a && input.b": Object {
      "InputPath": "$.heap0",
      "Next": "return {andVar: c, and: input.a && input.b, or: input.a || input.b, nullCoa",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "1__return {andVar: c, and: input.a && input.b, or: input.a || input.b, null": Object {
      "End": true,
      "Parameters": Object {
        "and.$": "$.heap1",
        "andVar.$": "$.c",
        "invNullCoal.$": "$.heap4",
        "nullCoal.$": "$.heap3",
        "nullNull.$": "$.heap5",
        "nullVal.$": "$.heap6",
        "or.$": "$.heap2",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "c = input.a && input.b",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "assignFalse__c = input.a && input.b": Object {
      "Next": "1__c = input.a && input.b",
      "Result": false,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "assignFalse__input.a || input.b": Object {
      "Next": "input.v ?? input.nv",
      "Result": false,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignFalse__return {andVar: c, and: input.a && input.b, or: input.a || inp": Object {
      "Next": "input.a || input.b",
      "Result": false,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "assignTrue__c = input.a && input.b": Object {
      "Next": "1__c = input.a && input.b",
      "Result": true,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "assignTrue__input.a || input.b": Object {
      "Next": "input.v ?? input.nv",
      "Result": true,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignTrue__return {andVar: c, and: input.a && input.b, or: input.a || inpu": Object {
      "Next": "input.a || input.b",
      "Result": true,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "c = input.a && input.b": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__c = input.a && input.b",
        },
      ],
      "Default": "assignFalse__c = input.a && input.b",
      "Type": "Choice",
    },
    "input.a || input.b": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.a || input.b",
          "Or": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "assignFalse__input.a || input.b",
      "Type": "Choice",
    },
    "input.nv ?? input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.nv",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.nv",
            },
          ],
          "Next": "takeLeft__input.nv ?? input.v",
        },
      ],
      "Default": "takeRight__input.nv ?? input.v",
      "Type": "Choice",
    },
    "input.nv ?? null": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.nv",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.nv",
            },
          ],
          "Next": "takeLeft__input.nv ?? null",
        },
      ],
      "Default": "takeRight__input.nv ?? null",
      "Type": "Choice",
    },
    "input.v ?? input.nv": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.v",
            },
          ],
          "Next": "takeLeft__input.v ?? input.nv",
        },
      ],
      "Default": "takeRight__input.v ?? input.nv",
      "Type": "Choice",
    },
    "null ?? input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.null",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.null",
            },
          ],
          "Next": "takeLeft__null ?? input.v",
        },
      ],
      "Default": "takeRight__null ?? input.v",
      "Type": "Choice",
    },
    "return {andVar: c, and: input.a && input.b, or: input.a || input.b, nullCoa": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__return {andVar: c, and: input.a && input.b, or: input.a || inpu",
        },
      ],
      "Default": "assignFalse__return {andVar: c, and: input.a && input.b, or: input.a || inp",
      "Type": "Choice",
    },
    "takeLeft__input.nv ?? input.v": Object {
      "InputPath": "$.fnl_context.input.nv",
      "Next": "input.nv ?? null",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "takeLeft__input.nv ?? null": Object {
      "InputPath": "$.fnl_context.input.nv",
      "Next": "null ?? input.v",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "takeLeft__input.v ?? input.nv": Object {
      "InputPath": "$.fnl_context.input.v",
      "Next": "input.nv ?? input.v",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "takeLeft__null ?? input.v": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return {andVar: c, and: input.a && input.b, or: input.a || input.b, null",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "takeRight__input.nv ?? input.v": Object {
      "InputPath": "$.fnl_context.input.v",
      "Next": "input.nv ?? null",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "takeRight__input.nv ?? null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "null ?? input.v",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "takeRight__input.v ?? input.nv": Object {
      "InputPath": "$.fnl_context.input.nv",
      "Next": "input.nv ?? input.v",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "takeRight__null ?? input.v": Object {
      "InputPath": "$.fnl_context.input.v",
      "Next": "1__return {andVar: c, and: input.a && input.b, or: input.a || input.b, null",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
  },
}
`;

exports[`binaryOps logic with calls 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await func()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__0_tmp = await func()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await func()": Object {
      "InputPath": "$.heap0",
      "Next": "1_tmp = await func()",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__1_tmp = await func()": Object {
      "InputPath": "$.heap1",
      "Next": "return {and: true && 0_tmp, or: false || 1_tmp}",
      "ResultPath": "$.1_tmp",
      "Type": "Pass",
    },
    "1__return {and: true && 0_tmp, or: false || 1_tmp}": Object {
      "End": true,
      "Parameters": Object {
        "and.$": "$.heap2",
        "or.$": "$.heap3",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1_tmp = await func()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__1_tmp = await func()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await func()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "assignFalse__false || 1_tmp": Object {
      "Next": "1__return {and: true && 0_tmp, or: false || 1_tmp}",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "assignFalse__return {and: true && 0_tmp, or: false || 1_tmp}": Object {
      "Next": "false || 1_tmp",
      "Result": false,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignTrue__false || 1_tmp": Object {
      "Next": "1__return {and: true && 0_tmp, or: false || 1_tmp}",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "assignTrue__return {and: true && 0_tmp, or: false || 1_tmp}": Object {
      "Next": "false || 1_tmp",
      "Result": true,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "false || 1_tmp": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__false || 1_tmp",
          "Or": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.0_false",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.1_tmp",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.1_tmp",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.1_tmp",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.1_tmp",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.1_tmp",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.1_tmp",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.1_tmp",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.1_tmp",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.1_tmp",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.1_tmp",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "assignFalse__false || 1_tmp",
      "Type": "Choice",
    },
    "return {and: true && 0_tmp, or: false || 1_tmp}": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.0_true",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.0_tmp",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.0_tmp",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.0_tmp",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.0_tmp",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.0_tmp",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.0_tmp",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.0_tmp",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.0_tmp",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.0_tmp",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.0_tmp",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__return {and: true && 0_tmp, or: false || 1_tmp}",
        },
      ],
      "Default": "assignFalse__return {and: true && 0_tmp, or: false || 1_tmp}",
      "Type": "Choice",
    },
  },
}
`;

exports[`call $SFN forEach 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.forEach(input.arr, function(n))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.arr, function(n))": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "return func(n)",
        "States": Object {
          "1__return func(n)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return func(n)": Object {
            "InputPath": "$.n",
            "Next": "1__return func(n)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "n.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call $SFN map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.arr, function(n))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.arr, function(n))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return $SFN.map(input.arr, function(n))": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "return n",
        "States": Object {
          "return n": Object {
            "End": true,
            "InputPath": "$.n",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.map(input.arr, function(n))",
      "Parameters": Object {
        "n.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
  },
}
`;

exports[`call $SFN parallel 1`] = `
Object {
  "StartAt": "return $SFN.parallel([function(), function()])",
  "States": Object {
    "1__return $SFN.parallel([function(), function()])": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel([function(), function()])": Object {
      "Branches": Array [
        Object {
          "StartAt": "return 1",
          "States": Object {
            "return 1": Object {
              "End": true,
              "Result": 1,
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "return 2",
          "States": Object {
            "return 2": Object {
              "End": true,
              "Result": 2,
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel([function(), function()])",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`call $SFN wait 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitFor(1)": Object {
      "Next": "return null",
      "Seconds": 1,
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitFor(1)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call lambda $AWS invoke 1`] = `
Object {
  "StartAt": "obj = {str: \\"hello world\\"}",
  "States": Object {
    "0_tmp = await $AWS.Lambda.Invoke({Function: func, Payload: obj})": Object {
      "Next": "1__0_tmp = await $AWS.Lambda.Invoke({Function: func, Payload: obj})",
      "Parameters": Object {
        "FunctionName": "__REPLACED_TOKEN",
        "Payload.$": "$.obj",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await $AWS.Lambda.Invoke({Function: func, Payload: obj})": Object {
      "InputPath": "$.heap0",
      "Next": "return 0_tmp.Payload.str",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "obj = {str: \\"hello world\\"}": Object {
      "Next": "0_tmp = await $AWS.Lambda.Invoke({Function: func, Payload: obj})",
      "Result": Object {
        "str": "hello world",
      },
      "ResultPath": "$.obj",
      "Type": "Pass",
    },
    "return 0_tmp.Payload.str": Object {
      "End": true,
      "InputPath": "$.0_tmp.Payload.str",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call lambda 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return func()": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return func()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return func()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return func()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call lambda with array parameter 1`] = `
Object {
  "StartAt": "return func([1, 2])",
  "States": Object {
    "1__return func([1, 2])": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return func([1, 2])": Object {
      "Next": "1__return func([1, 2])",
      "Parameters": Array [
        1,
        2,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call lambda with array ref 1`] = `
Object {
  "StartAt": "arr = [1, 2, 3]",
  "States": Object {
    "1__return func(arr)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "arr = [1, 2, 3]": Object {
      "Next": "return func(arr)",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.arr",
      "Type": "Pass",
    },
    "return func(arr)": Object {
      "InputPath": "$.arr",
      "Next": "1__return func(arr)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call lambda with object literal parameter 1`] = `
Object {
  "StartAt": "0_tmp = await func({str: \\"hello world\\"})",
  "States": Object {
    "0_tmp = await func({str: \\"hello world\\"})": Object {
      "Next": "1__0_tmp = await func({str: \\"hello world\\"})",
      "Parameters": Object {
        "str": "hello world",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await func({str: \\"hello world\\"})": Object {
      "InputPath": "$.heap0",
      "Next": "return 0_tmp.str",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "return 0_tmp.str": Object {
      "End": true,
      "InputPath": "$.0_tmp.str",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call lambda with object reference parameter 1`] = `
Object {
  "StartAt": "obj = {str: \\"hello world\\"}",
  "States": Object {
    "0_tmp = await func(obj)": Object {
      "InputPath": "$.obj",
      "Next": "1__0_tmp = await func(obj)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await func(obj)": Object {
      "InputPath": "$.heap0",
      "Next": "return 0_tmp.str",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "obj = {str: \\"hello world\\"}": Object {
      "Next": "0_tmp = await func(obj)",
      "Result": Object {
        "str": "hello world",
      },
      "ResultPath": "$.obj",
      "Type": "Pass",
    },
    "return 0_tmp.str": Object {
      "End": true,
      "InputPath": "$.0_tmp.str",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call lambda with string parameter 1`] = `
Object {
  "StartAt": "0_tmp = await func(\\"hello world\\")",
  "States": Object {
    "0_tmp = await func(\\"hello world\\")": Object {
      "Next": "1__0_tmp = await func(\\"hello world\\")",
      "Parameters": "hello world",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await func(\\"hello world\\")": Object {
      "InputPath": "$.heap0",
      "Next": "return 0_tmp.str",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "return 0_tmp.str": Object {
      "End": true,
      "InputPath": "$.0_tmp.str",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call lambda with string reference 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await func(event.str)": Object {
      "InputPath": "$.fnl_context.input.str",
      "Next": "1__0_tmp = await func(event.str)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await func(event.str)": Object {
      "InputPath": "$.heap0",
      "Next": "return 0_tmp.str",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await func(event.str)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return 0_tmp.str": Object {
      "End": true,
      "InputPath": "$.0_tmp.str",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionals 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if(await func())": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "IsNull": false,
              "Variable": "$.heap0",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return input.b",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.a)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(await func())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await func())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(input.a)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.a",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.a",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.fnl_context.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.fnl_context.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "if(await func())",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.b": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`duplicate nodes 1`] = `
Object {
  "StartAt": "\\"hello world\\"",
  "States": Object {
    "\\"hello world\\"": Object {
      "Next": "\\"hello world\\" 1",
      "ResultPath": null,
      "Type": "Pass",
    },
    "\\"hello world\\" 1": Object {
      "Next": "return \\"hello world\\"",
      "ResultPath": null,
      "Type": "Pass",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for loops 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await func()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__0_tmp = await func()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "1__0_tmp = await func()": Object {
      "InputPath": "$.heap3",
      "Next": "for(i of 0_tmp)",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__for(i of [1, 2, 3])": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "a = \`ai\`",
        "States": Object {
          "1__a = \`ai\`": Object {
            "End": true,
            "InputPath": "$.heap1.string",
            "ResultPath": "$.a",
            "Type": "Pass",
          },
          "1__a = \`ai\` 1": Object {
            "Next": "1__a = \`ai\`",
            "Parameters": Object {
              "string.$": "States.Format($.heap1,$.a,$.i)",
            },
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "a = \`ai\`": Object {
            "Next": "1__a = \`ai\` 1",
            "Result": "{}{}",
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "for(i of input.arr)",
      "Parameters": Object {
        "a.$": "$.a",
        "i.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"x\\"",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = \\"x\\"": Object {
      "Next": "for(i of [1, 2, 3])",
      "Result": "x",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(i of 0_tmp)": Object {
      "ItemsPath": "$.0_tmp",
      "Iterator": Object {
        "StartAt": "a = \`ai\` 2",
        "States": Object {
          "1__a = \`ai\` 2": Object {
            "End": true,
            "InputPath": "$.heap4.string",
            "ResultPath": "$.a",
            "Type": "Pass",
          },
          "1__a = \`ai\` 2 1": Object {
            "Next": "1__a = \`ai\` 2",
            "Parameters": Object {
              "string.$": "States.Format($.heap4,$.a,$.i)",
            },
            "ResultPath": "$.heap4",
            "Type": "Pass",
          },
          "a = \`ai\` 2": Object {
            "Next": "1__a = \`ai\` 2 1",
            "Result": "{}{}",
            "ResultPath": "$.heap4",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return \\"madeit\\"",
      "Parameters": Object {
        "0_tmp.$": "$.0_tmp",
        "a.$": "$.a",
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "for(i of [1, 2, 3])": Object {
      "Next": "1__for(i of [1, 2, 3])",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.arr)": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "a = \`ai\` 1",
        "States": Object {
          "1__a = \`ai\` 1 1": Object {
            "End": true,
            "InputPath": "$.heap2.string",
            "ResultPath": "$.a",
            "Type": "Pass",
          },
          "1__a = \`ai\` 1 2": Object {
            "Next": "1__a = \`ai\` 1 1",
            "Parameters": Object {
              "string.$": "States.Format($.heap2,$.a,$.i)",
            },
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
          "a = \`ai\` 1": Object {
            "Next": "1__a = \`ai\` 1 2",
            "Result": "{}{}",
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "0_tmp = await func()",
      "Parameters": Object {
        "a.$": "$.a",
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return \\"madeit\\"": Object {
      "End": true,
      "Result": "madeit",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for map conditional 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await func()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__0_tmp = await func()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "1__0_tmp = await func()": Object {
      "InputPath": "$.heap3",
      "Next": "for(i of 0_tmp)",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__for(i of [1, 2, 3])": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "a = \`ai\`",
        "States": Object {
          "1__a = \`ai\`": Object {
            "End": true,
            "InputPath": "$.heap1.string",
            "ResultPath": "$.a",
            "Type": "Pass",
          },
          "1__a = \`ai\` 1": Object {
            "Next": "1__a = \`ai\`",
            "Parameters": Object {
              "string.$": "States.Format($.heap1,$.a,$.i)",
            },
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "a = \`ai\`": Object {
            "Next": "1__a = \`ai\` 1",
            "Result": "{}{}",
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "for(i of input.arr)",
      "Parameters": Object {
        "a.$": "$.a",
        "i.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"x\\"",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = \\"x\\"": Object {
      "Next": "for(i of [1, 2, 3])",
      "Result": "x",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(i of 0_tmp)": Object {
      "ItemsPath": "$.0_tmp",
      "Iterator": Object {
        "StartAt": "a = \`ai\` 2",
        "States": Object {
          "1__a = \`ai\` 2": Object {
            "End": true,
            "InputPath": "$.heap4.string",
            "ResultPath": "$.a",
            "Type": "Pass",
          },
          "1__a = \`ai\` 2 1": Object {
            "Next": "1__a = \`ai\` 2",
            "Parameters": Object {
              "string.$": "States.Format($.heap4,$.a,$.i)",
            },
            "ResultPath": "$.heap4",
            "Type": "Pass",
          },
          "a = \`ai\` 2": Object {
            "Next": "1__a = \`ai\` 2 1",
            "Result": "{}{}",
            "ResultPath": "$.heap4",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return \\"madeit\\"",
      "Parameters": Object {
        "0_tmp.$": "$.0_tmp",
        "a.$": "$.a",
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "for(i of [1, 2, 3])": Object {
      "Next": "1__for(i of [1, 2, 3])",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.arr)": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "a = \`ai\` 1",
        "States": Object {
          "1__a = \`ai\` 1 1": Object {
            "End": true,
            "InputPath": "$.heap2.string",
            "ResultPath": "$.a",
            "Type": "Pass",
          },
          "1__a = \`ai\` 1 2": Object {
            "Next": "1__a = \`ai\` 1 1",
            "Parameters": Object {
              "string.$": "States.Format($.heap2,$.a,$.i)",
            },
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
          "a = \`ai\` 1": Object {
            "Next": "1__a = \`ai\` 1 2",
            "Result": "{}{}",
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "0_tmp = await func()",
      "Parameters": Object {
        "a.$": "$.a",
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return \\"madeit\\"": Object {
      "End": true,
      "Result": "madeit",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await func()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__0_tmp = await func()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await func()": Object {
      "InputPath": "$.heap0",
      "Next": "l = 0_tmp.map(function(x))",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__l = 0_tmp.map(function(x))": Object {
      "InputPath": "$.heap2",
      "Next": "l2 = input.arr.map(function(x))",
      "ResultPath": "$.l",
      "Type": "Pass",
    },
    "1__l2 = input.arr.map(function(x))": Object {
      "InputPath": "$.heap4",
      "Next": "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`",
      "ResultPath": "$.l2",
      "Type": "Pass",
    },
    "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`": Object {
      "End": true,
      "InputPath": "$.heap5.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1": Object {
      "Next": "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`",
      "Parameters": Object {
        "string.$": "States.Format($.heap5,$.l[0],$.l[1],$.l[2],$.l2[0],$.l2[1],$.l2[2])",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await func()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "l = 0_tmp.map(function(x))": Object {
      "ItemsPath": "$.0_tmp",
      "Iterator": Object {
        "StartAt": "return \`nx\`",
        "States": Object {
          "1__return \`nx\`": Object {
            "End": true,
            "InputPath": "$.heap1.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "1__return \`nx\` 1": Object {
            "Next": "1__return \`nx\`",
            "Parameters": Object {
              "string.$": "States.Format($.heap1,$.x)",
            },
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "return \`nx\`": Object {
            "Next": "1__return \`nx\` 1",
            "Result": "n{}",
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__l = 0_tmp.map(function(x))",
      "Parameters": Object {
        "0_tmp.$": "$.0_tmp",
        "fnl_context.$": "$.fnl_context",
        "x.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "l2 = input.arr.map(function(x))": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "return \`nx\` 1",
        "States": Object {
          "1__return \`nx\` 1 1": Object {
            "End": true,
            "InputPath": "$.heap3.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "1__return \`nx\` 1 2": Object {
            "Next": "1__return \`nx\` 1 1",
            "Parameters": Object {
              "string.$": "States.Format($.heap3,$.x)",
            },
            "ResultPath": "$.heap3",
            "Type": "Pass",
          },
          "return \`nx\` 1": Object {
            "Next": "1__return \`nx\` 1 2",
            "Result": "n{}",
            "ResultPath": "$.heap3",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__l2 = input.arr.map(function(x))",
      "Parameters": Object {
        "0_tmp.$": "$.0_tmp",
        "fnl_context.$": "$.fnl_context",
        "l.$": "$.l",
        "x.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`": Object {
      "Next": "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1",
      "Result": "{}{}{}{}{}{}",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`map uses input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await func()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__0_tmp = await func()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await func()": Object {
      "InputPath": "$.heap0",
      "Next": "l = 0_tmp.map(function(x))",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__l = 0_tmp.map(function(x))": Object {
      "InputPath": "$.heap2",
      "Next": "l2 = input.arr.map(function(x))",
      "ResultPath": "$.l",
      "Type": "Pass",
    },
    "1__l2 = input.arr.map(function(x))": Object {
      "InputPath": "$.heap4",
      "Next": "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`",
      "ResultPath": "$.l2",
      "Type": "Pass",
    },
    "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`": Object {
      "End": true,
      "InputPath": "$.heap5.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1": Object {
      "Next": "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`",
      "Parameters": Object {
        "string.$": "States.Format($.heap5,$.l[0],$.l[1],$.l[2],$.l2[0],$.l2[1],$.l2[2])",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await func()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "l = 0_tmp.map(function(x))": Object {
      "ItemsPath": "$.0_tmp",
      "Iterator": Object {
        "StartAt": "return \`input.prefixx\`",
        "States": Object {
          "1__return \`input.prefixx\`": Object {
            "End": true,
            "InputPath": "$.heap1.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "1__return \`input.prefixx\` 1": Object {
            "Next": "1__return \`input.prefixx\`",
            "Parameters": Object {
              "string.$": "States.Format($.heap1,$.fnl_context.input.prefix,$.x)",
            },
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "return \`input.prefixx\`": Object {
            "Next": "1__return \`input.prefixx\` 1",
            "Result": "{}{}",
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__l = 0_tmp.map(function(x))",
      "Parameters": Object {
        "0_tmp.$": "$.0_tmp",
        "fnl_context.$": "$.fnl_context",
        "x.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "l2 = input.arr.map(function(x))": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "return \`input.prefixx\` 1",
        "States": Object {
          "1__return \`input.prefixx\` 1 1": Object {
            "End": true,
            "InputPath": "$.heap3.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "1__return \`input.prefixx\` 1 2": Object {
            "Next": "1__return \`input.prefixx\` 1 1",
            "Parameters": Object {
              "string.$": "States.Format($.heap3,$.fnl_context.input.prefix,$.x)",
            },
            "ResultPath": "$.heap3",
            "Type": "Pass",
          },
          "return \`input.prefixx\` 1": Object {
            "Next": "1__return \`input.prefixx\` 1 2",
            "Result": "{}{}",
            "ResultPath": "$.heap3",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__l2 = input.arr.map(function(x))",
      "Parameters": Object {
        "0_tmp.$": "$.0_tmp",
        "fnl_context.$": "$.fnl_context",
        "l.$": "$.l",
        "x.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`": Object {
      "Next": "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1",
      "Result": "{}{}{}{}{}{}",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`overlapping variable with input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"2\\"",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = \\"2\\"": Object {
      "Next": "return {a: input.a, b: a}",
      "Result": "2",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return {a: input.a, b: a}": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.fnl_context.input.a",
        "b.$": "$.a",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`simple 1`] = `
Object {
  "StartAt": "return \\"hello world\\"",
  "States": Object {
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`templates 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\`": Object {
      "InputPath": "$.heap1.string",
      "Next": "result = await func(\`input.obj.str hello partOfTheTemplateString input.obj.",
      "ResultPath": "$.partOfTheTemplateString",
      "Type": "Pass",
    },
    "1__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\` 1": Object {
      "Next": "2__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\`",
      "Result": "hello {}",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "1__result = await func(\`input.obj.str hello partOfTheTemplateString input.o": Object {
      "InputPath": "$.heap3",
      "Next": "return \`the result: result.str\`",
      "ResultPath": "$.result",
      "Type": "Pass",
    },
    "1__result = await func(\`input.obj.str hello partOfTheTemplateString input.o 1": Object {
      "InputPath": "$.heap2.string",
      "Next": "1__result = await func(\`input.obj.str hello partOfTheTemplateString input.o",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "1__result = await func(\`input.obj.str hello partOfTheTemplateString input.o 2": Object {
      "Next": "1__result = await func(\`input.obj.str hello partOfTheTemplateString input.o 1",
      "Parameters": Object {
        "string.$": "States.Format($.heap2,$.fnl_context.input.obj.str,$.partOfTheTemplateString,$.fnl_context.input.obj.items[0])",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return \`the result: result.str\`": Object {
      "End": true,
      "InputPath": "$.heap4.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return \`the result: result.str\` 1": Object {
      "Next": "1__return \`the result: result.str\`",
      "Parameters": Object {
        "string.$": "States.Format($.heap4,$.result.str)",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "2__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\`": Object {
      "Next": "1__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\`",
      "Parameters": Object {
        "string.$": "States.Format($.heap1,$.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\`",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\`": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.obj.str2",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.obj.str2",
            },
          ],
          "Next": "takeLeft__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\`",
        },
      ],
      "Default": "takeRight__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\`",
      "Type": "Choice",
    },
    "result = await func(\`input.obj.str hello partOfTheTemplateString input.obj.": Object {
      "Next": "1__result = await func(\`input.obj.str hello partOfTheTemplateString input.o 2",
      "Result": "{} hello {} {}",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return \`the result: result.str\`": Object {
      "Next": "1__return \`the result: result.str\` 1",
      "Result": "the result: {}",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "takeLeft__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\`": Object {
      "InputPath": "$.fnl_context.input.obj.str2",
      "Next": "1__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\` 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "takeRight__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\`": Object {
      "Next": "1__partOfTheTemplateString = \`hello input.obj.str2 ?? \\"default\\"\` 1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`templates simple 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return \`x\`": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return \`x\` 1": Object {
      "Next": "1__return \`x\`",
      "Parameters": Object {
        "string.$": "States.Format($.heap0,$.x)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "x = input.str",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return \`x\`": Object {
      "Next": "1__return \`x\` 1",
      "Result": "{}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "x = input.str": Object {
      "InputPath": "$.fnl_context.input.str",
      "Next": "return \`x\`",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
  },
}
`;
