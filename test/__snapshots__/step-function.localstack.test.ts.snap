// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`assignment 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = null",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = 1": Object {
      "Next": "d = a",
      "Result": 1,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [1, 2]": Object {
      "Next": "e = a",
      "Result": Array [
        1,
        2,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null": Object {
      "Next": "b = a",
      "Result": "2",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null 1": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "c = a",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {x: \\"val\\"}": Object {
      "Next": "return {a: a, b: b, c: c, d: d, e: e}",
      "Result": Object {
        "x": "val",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "b = a": Object {
      "InputPath": "$.a",
      "Next": "a = null 1",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "c = a": Object {
      "InputPath": "$.a",
      "Next": "a = 1",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "d = a": Object {
      "InputPath": "$.a",
      "Next": "a = [1, 2]",
      "ResultPath": "$.d",
      "Type": "Pass",
    },
    "e = a": Object {
      "InputPath": "$.a",
      "Next": "a = {x: \\"val\\"}",
      "ResultPath": "$.e",
      "Type": "Pass",
    },
    "return {a: a, b: b, c: c, d: d, e: e}": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.a",
        "b.$": "$.b",
        "c.$": "$.c",
        "d.$": "$.d",
        "e.$": "$.e",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binary and unary comparison 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "!false": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__!false",
          "Not": Object {
            "IsNull": true,
            "Variable": "$$.Execution.Id",
          },
        },
      ],
      "Default": "assignFalse__!false",
      "Type": "Choice",
    },
    "!input.a": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__!input.a",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.a",
              },
              Object {
                "IsNull": false,
                "Variable": "$.fnl_context.input.a",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.fnl_context.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.fnl_context.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.fnl_context.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.fnl_context.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.fnl_context.input.a",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__!input.a",
      "Type": "Choice",
    },
    "!input.n": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__!input.n",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.n",
              },
              Object {
                "IsNull": false,
                "Variable": "$.fnl_context.input.n",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.input.n",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.fnl_context.input.n",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.fnl_context.input.n",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.input.n",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.fnl_context.input.n",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.fnl_context.input.n",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.input.n",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.fnl_context.input.n",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__!input.n",
      "Type": "Choice",
    },
    "!input.nv": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__!input.nv",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.nv",
              },
              Object {
                "IsNull": false,
                "Variable": "$.fnl_context.input.nv",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.fnl_context.input.nv",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.fnl_context.input.nv",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.fnl_context.input.nv",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.fnl_context.input.nv",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__!input.nv",
      "Type": "Choice",
    },
    "!input.x": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__!input.x",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.x",
              },
              Object {
                "IsNull": false,
                "Variable": "$.fnl_context.input.x",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.input.x",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.fnl_context.input.x",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.fnl_context.input.x",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.input.x",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.fnl_context.input.x",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.fnl_context.input.x",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.input.x",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.fnl_context.input.x",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__!input.x",
      "Type": "Choice",
    },
    "\\"a\\" != \\"a\\"": Object {
      "Choices": Array [
        Object {
          "IsNull": true,
          "Next": "assignTrue__\\"a\\" != \\"a\\"",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__\\"a\\" != \\"a\\"",
      "Type": "Choice",
    },
    "\\"a\\" < \\"a\\"": Object {
      "Choices": Array [
        Object {
          "IsNull": true,
          "Next": "assignTrue__\\"a\\" < \\"a\\"",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__\\"a\\" < \\"a\\"",
      "Type": "Choice",
    },
    "\\"a\\" <= \\"a\\"": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "assignTrue__\\"a\\" <= \\"a\\"",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__\\"a\\" <= \\"a\\"",
      "Type": "Choice",
    },
    "\\"a\\" > \\"a\\"": Object {
      "Choices": Array [
        Object {
          "IsNull": true,
          "Next": "assignTrue__\\"a\\" > \\"a\\"",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__\\"a\\" > \\"a\\"",
      "Type": "Choice",
    },
    "\\"a\\" >= \\"a\\"": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "assignTrue__\\"a\\" >= \\"a\\"",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__\\"a\\" >= \\"a\\"",
      "Type": "Choice",
    },
    "\\"a\\" in input.obj": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "assignTrue__\\"a\\" in input.obj",
          "Variable": "$.fnl_context.input.obj['a']",
        },
      ],
      "Default": "assignFalse__\\"a\\" in input.obj",
      "Type": "Choice",
    },
    "\\"a\\" in {a: \\"val\\"}": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "assignTrue__\\"a\\" in {a: \\"val\\"}",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__\\"a\\" in {a: \\"val\\"}",
      "Type": "Choice",
    },
    "\\"b\\" in input.obj": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "assignTrue__\\"b\\" in input.obj",
          "Variable": "$.fnl_context.input.obj['b']",
        },
      ],
      "Default": "assignFalse__\\"b\\" in input.obj",
      "Type": "Choice",
    },
    "\\"val2\\" != input.v": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__\\"val2\\" != input.v",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.v",
              },
              Object {
                "And": Array [
                  Object {
                    "IsString": true,
                    "Variable": "$.fnl_context.input.v",
                  },
                  Object {
                    "StringEquals": "val2",
                    "Variable": "$.fnl_context.input.v",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__\\"val2\\" != input.v",
      "Type": "Choice",
    },
    "\\"val2\\" < input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.v",
                },
                Object {
                  "StringGreaterThan": "val2",
                  "Variable": "$.fnl_context.input.v",
                },
              ],
            },
          ],
          "Next": "assignTrue__\\"val2\\" < input.v",
        },
      ],
      "Default": "assignFalse__\\"val2\\" < input.v",
      "Type": "Choice",
    },
    "\\"val2\\" <= input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.v",
                },
                Object {
                  "StringGreaterThanEquals": "val2",
                  "Variable": "$.fnl_context.input.v",
                },
              ],
            },
          ],
          "Next": "assignTrue__\\"val2\\" <= input.v",
        },
      ],
      "Default": "assignFalse__\\"val2\\" <= input.v",
      "Type": "Choice",
    },
    "\\"val2\\" == input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.v",
                },
                Object {
                  "StringEquals": "val2",
                  "Variable": "$.fnl_context.input.v",
                },
              ],
            },
          ],
          "Next": "assignTrue__\\"val2\\" == input.v",
        },
      ],
      "Default": "assignFalse__\\"val2\\" == input.v",
      "Type": "Choice",
    },
    "\\"val2\\" > input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.v",
                },
                Object {
                  "StringLessThan": "val2",
                  "Variable": "$.fnl_context.input.v",
                },
              ],
            },
          ],
          "Next": "assignTrue__\\"val2\\" > input.v",
        },
      ],
      "Default": "assignFalse__\\"val2\\" > input.v",
      "Type": "Choice",
    },
    "\\"val2\\" >= input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.v",
                },
                Object {
                  "StringLessThanEquals": "val2",
                  "Variable": "$.fnl_context.input.v",
                },
              ],
            },
          ],
          "Next": "assignTrue__\\"val2\\" >= input.v",
        },
      ],
      "Default": "assignFalse__\\"val2\\" >= input.v",
      "Type": "Choice",
    },
    "1 != 1": Object {
      "Choices": Array [
        Object {
          "IsNull": true,
          "Next": "assignTrue__1 != 1",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__1 != 1",
      "Type": "Choice",
    },
    "1 < 1": Object {
      "Choices": Array [
        Object {
          "IsNull": true,
          "Next": "assignTrue__1 < 1",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__1 < 1",
      "Type": "Choice",
    },
    "1 <= 1": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "assignTrue__1 <= 1",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__1 <= 1",
      "Type": "Choice",
    },
    "1 == 1": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "assignTrue__1 == 1",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__1 == 1",
      "Type": "Choice",
    },
    "1 > 1": Object {
      "Choices": Array [
        Object {
          "IsNull": true,
          "Next": "assignTrue__1 > 1",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__1 > 1",
      "Type": "Choice",
    },
    "1 >= 1": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "assignTrue__1 >= 1",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__1 >= 1",
      "Type": "Choice",
    },
    "1__return {constantStringEquals: \\"a\\" == \\"a\\", constantToVarStringEquals: inp": Object {
      "End": true,
      "Parameters": Object {
        "constantBooleanEquals.$": "$.heap48",
        "constantBooleanNotEquals.$": "$.heap52",
        "constantInConstant.$": "$.heap64",
        "constantInVar.$": "$.heap65",
        "constantNot.$": "$.heap67",
        "constantNotInVar.$": "$.heap66",
        "constantNullEquals.$": "$.heap56",
        "constantNullNotEquals.$": "$.heap60",
        "constantNumberEquals.$": "$.heap24",
        "constantNumberGreater.$": "$.heap40",
        "constantNumberGreaterEquals.$": "$.heap44",
        "constantNumberLess.$": "$.heap32",
        "constantNumberLessEquals.$": "$.heap36",
        "constantNumberNotEquals.$": "$.heap28",
        "constantStringEquals.$": "$.heap0",
        "constantStringGreater.$": "$.heap16",
        "constantStringGreaterEquals.$": "$.heap20",
        "constantStringLess.$": "$.heap8",
        "constantStringLessEquals.$": "$.heap12",
        "constantStringNotEquals.$": "$.heap4",
        "constantToVarBooleanEquals.$": "$.heap49",
        "constantToVarBooleanNotEquals.$": "$.heap53",
        "constantToVarNullEquals.$": "$.heap57",
        "constantToVarNullNotEquals.$": "$.heap61",
        "constantToVarNumberEquals.$": "$.heap25",
        "constantToVarNumberGreater.$": "$.heap41",
        "constantToVarNumberGreaterEquals.$": "$.heap45",
        "constantToVarNumberLess.$": "$.heap33",
        "constantToVarNumberLessEquals.$": "$.heap37",
        "constantToVarNumberNotEquals.$": "$.heap29",
        "constantToVarStringEquals.$": "$.heap1",
        "constantToVarStringGreater.$": "$.heap17",
        "constantToVarStringGreaterEquals.$": "$.heap21",
        "constantToVarStringLess.$": "$.heap9",
        "constantToVarStringLessEquals.$": "$.heap13",
        "constantToVarStringNotEquals.$": "$.heap5",
        "varNot.$": "$.heap68",
        "varNotNullFalse.$": "$.heap70",
        "varNotPresentFalse.$": "$.heap71",
        "varNotPresentTrue.$": "$.heap69",
        "varToConstantBooleanEquals.$": "$.heap50",
        "varToConstantBooleanNotEquals.$": "$.heap54",
        "varToConstantNullEquals.$": "$.heap58",
        "varToConstantNullNotEquals.$": "$.heap62",
        "varToConstantNumberEquals.$": "$.heap26",
        "varToConstantNumberGreater.$": "$.heap42",
        "varToConstantNumberGreaterEquals.$": "$.heap46",
        "varToConstantNumberLess.$": "$.heap34",
        "varToConstantNumberLessEquals.$": "$.heap38",
        "varToConstantNumberNotEquals.$": "$.heap30",
        "varToConstantStringEquals.$": "$.heap2",
        "varToConstantStringGreater.$": "$.heap18",
        "varToConstantStringGreaterEquals.$": "$.heap22",
        "varToConstantStringLess.$": "$.heap10",
        "varToConstantStringLessEquals.$": "$.heap14",
        "varToConstantStringNotEquals.$": "$.heap6",
        "varToVarBooleanEquals.$": "$.heap51",
        "varToVarBooleanNotEquals.$": "$.heap55",
        "varToVarNullEquals.$": "$.heap59",
        "varToVarNullNotEquals.$": "$.heap63",
        "varToVarNumberEquals.$": "$.heap27",
        "varToVarNumberGreaterE.$": "$.heap43",
        "varToVarNumberGreaterEquals.$": "$.heap47",
        "varToVarNumberLess.$": "$.heap35",
        "varToVarNumberLessEquals.$": "$.heap39",
        "varToVarNumberNotEquals.$": "$.heap31",
        "varToVarStringEquals.$": "$.heap3",
        "varToVarStringGreaterE.$": "$.heap19",
        "varToVarStringGreaterEquals.$": "$.heap23",
        "varToVarStringLess.$": "$.heap11",
        "varToVarStringLessEquals.$": "$.heap15",
        "varToVarStringNotEquals.$": "$.heap7",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "3 != input.n": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__3 != input.n",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.n",
              },
              Object {
                "And": Array [
                  Object {
                    "IsNumeric": true,
                    "Variable": "$.fnl_context.input.n",
                  },
                  Object {
                    "NumericEquals": 3,
                    "Variable": "$.fnl_context.input.n",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__3 != input.n",
      "Type": "Choice",
    },
    "3 < input.n": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.fnl_context.input.n",
                },
                Object {
                  "NumericGreaterThan": 3,
                  "Variable": "$.fnl_context.input.n",
                },
              ],
            },
          ],
          "Next": "assignTrue__3 < input.n",
        },
      ],
      "Default": "assignFalse__3 < input.n",
      "Type": "Choice",
    },
    "3 <= input.n": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.fnl_context.input.n",
                },
                Object {
                  "NumericGreaterThanEquals": 3,
                  "Variable": "$.fnl_context.input.n",
                },
              ],
            },
          ],
          "Next": "assignTrue__3 <= input.n",
        },
      ],
      "Default": "assignFalse__3 <= input.n",
      "Type": "Choice",
    },
    "3 == input.n": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.fnl_context.input.n",
                },
                Object {
                  "NumericEquals": 3,
                  "Variable": "$.fnl_context.input.n",
                },
              ],
            },
          ],
          "Next": "assignTrue__3 == input.n",
        },
      ],
      "Default": "assignFalse__3 == input.n",
      "Type": "Choice",
    },
    "3 > input.n": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.fnl_context.input.n",
                },
                Object {
                  "NumericLessThan": 3,
                  "Variable": "$.fnl_context.input.n",
                },
              ],
            },
          ],
          "Next": "assignTrue__3 > input.n",
        },
      ],
      "Default": "assignFalse__3 > input.n",
      "Type": "Choice",
    },
    "3 >= input.n": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.fnl_context.input.n",
                },
                Object {
                  "NumericLessThanEquals": 3,
                  "Variable": "$.fnl_context.input.n",
                },
              ],
            },
          ],
          "Next": "assignTrue__3 >= input.n",
        },
      ],
      "Default": "assignFalse__3 >= input.n",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {constantStringEquals: \\"a\\" == \\"a\\", constantToVarStringEquals: input.",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "assignFalse__!false": Object {
      "Next": "!input.a",
      "Result": false,
      "ResultPath": "$.heap67",
      "Type": "Pass",
    },
    "assignFalse__!input.a": Object {
      "Next": "!input.nv",
      "Result": false,
      "ResultPath": "$.heap68",
      "Type": "Pass",
    },
    "assignFalse__!input.n": Object {
      "Next": "!input.x",
      "Result": false,
      "ResultPath": "$.heap70",
      "Type": "Pass",
    },
    "assignFalse__!input.nv": Object {
      "Next": "!input.n",
      "Result": false,
      "ResultPath": "$.heap69",
      "Type": "Pass",
    },
    "assignFalse__!input.x": Object {
      "Next": "1__return {constantStringEquals: \\"a\\" == \\"a\\", constantToVarStringEquals: inp",
      "Result": false,
      "ResultPath": "$.heap71",
      "Type": "Pass",
    },
    "assignFalse__\\"a\\" != \\"a\\"": Object {
      "Next": "input.v != \\"val\\"",
      "Result": false,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "assignFalse__\\"a\\" < \\"a\\"": Object {
      "Next": "input.v < \\"val2\\"",
      "Result": false,
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "assignFalse__\\"a\\" <= \\"a\\"": Object {
      "Next": "input.v <= \\"val2\\"",
      "Result": false,
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "assignFalse__\\"a\\" > \\"a\\"": Object {
      "Next": "input.v > \\"val2\\"",
      "Result": false,
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "assignFalse__\\"a\\" >= \\"a\\"": Object {
      "Next": "input.v >= \\"val2\\"",
      "Result": false,
      "ResultPath": "$.heap20",
      "Type": "Pass",
    },
    "assignFalse__\\"a\\" in input.obj": Object {
      "Next": "\\"b\\" in input.obj",
      "Result": false,
      "ResultPath": "$.heap65",
      "Type": "Pass",
    },
    "assignFalse__\\"a\\" in {a: \\"val\\"}": Object {
      "Next": "\\"a\\" in input.obj",
      "Result": false,
      "ResultPath": "$.heap64",
      "Type": "Pass",
    },
    "assignFalse__\\"b\\" in input.obj": Object {
      "Next": "!false",
      "Result": false,
      "ResultPath": "$.heap66",
      "Type": "Pass",
    },
    "assignFalse__\\"val2\\" != input.v": Object {
      "Next": "input.v != input.v",
      "Result": false,
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "assignFalse__\\"val2\\" < input.v": Object {
      "Next": "input.v < input.v",
      "Result": false,
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "assignFalse__\\"val2\\" <= input.v": Object {
      "Next": "input.v <= input.v",
      "Result": false,
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "assignFalse__\\"val2\\" == input.v": Object {
      "Next": "input.v == input.v",
      "Result": false,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignFalse__\\"val2\\" > input.v": Object {
      "Next": "input.v > input.v",
      "Result": false,
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "assignFalse__\\"val2\\" >= input.v": Object {
      "Next": "input.v >= input.v",
      "Result": false,
      "ResultPath": "$.heap22",
      "Type": "Pass",
    },
    "assignFalse__1 != 1": Object {
      "Next": "input.n != 2",
      "Result": false,
      "ResultPath": "$.heap28",
      "Type": "Pass",
    },
    "assignFalse__1 < 1": Object {
      "Next": "input.n < 3",
      "Result": false,
      "ResultPath": "$.heap32",
      "Type": "Pass",
    },
    "assignFalse__1 <= 1": Object {
      "Next": "input.n <= 3",
      "Result": false,
      "ResultPath": "$.heap36",
      "Type": "Pass",
    },
    "assignFalse__1 == 1": Object {
      "Next": "input.n == 2",
      "Result": false,
      "ResultPath": "$.heap24",
      "Type": "Pass",
    },
    "assignFalse__1 > 1": Object {
      "Next": "input.n > 3",
      "Result": false,
      "ResultPath": "$.heap40",
      "Type": "Pass",
    },
    "assignFalse__1 >= 1": Object {
      "Next": "input.n >= 3",
      "Result": false,
      "ResultPath": "$.heap44",
      "Type": "Pass",
    },
    "assignFalse__3 != input.n": Object {
      "Next": "input.n != input.n",
      "Result": false,
      "ResultPath": "$.heap30",
      "Type": "Pass",
    },
    "assignFalse__3 < input.n": Object {
      "Next": "input.n < input.n",
      "Result": false,
      "ResultPath": "$.heap34",
      "Type": "Pass",
    },
    "assignFalse__3 <= input.n": Object {
      "Next": "input.n <= input.n",
      "Result": false,
      "ResultPath": "$.heap38",
      "Type": "Pass",
    },
    "assignFalse__3 == input.n": Object {
      "Next": "input.n == input.n",
      "Result": false,
      "ResultPath": "$.heap26",
      "Type": "Pass",
    },
    "assignFalse__3 > input.n": Object {
      "Next": "input.n > input.n",
      "Result": false,
      "ResultPath": "$.heap42",
      "Type": "Pass",
    },
    "assignFalse__3 >= input.n": Object {
      "Next": "input.n >= input.n",
      "Result": false,
      "ResultPath": "$.heap46",
      "Type": "Pass",
    },
    "assignFalse__false != input.a": Object {
      "Next": "input.a != input.a",
      "Result": false,
      "ResultPath": "$.heap54",
      "Type": "Pass",
    },
    "assignFalse__false == input.a": Object {
      "Next": "input.a == input.a",
      "Result": false,
      "ResultPath": "$.heap50",
      "Type": "Pass",
    },
    "assignFalse__input.a != input.a": Object {
      "Next": "null == null",
      "Result": false,
      "ResultPath": "$.heap55",
      "Type": "Pass",
    },
    "assignFalse__input.a != true": Object {
      "Next": "false != input.a",
      "Result": false,
      "ResultPath": "$.heap53",
      "Type": "Pass",
    },
    "assignFalse__input.a == input.a": Object {
      "Next": "true != true",
      "Result": false,
      "ResultPath": "$.heap51",
      "Type": "Pass",
    },
    "assignFalse__input.a == true": Object {
      "Next": "false == input.a",
      "Result": false,
      "ResultPath": "$.heap49",
      "Type": "Pass",
    },
    "assignFalse__input.n != 2": Object {
      "Next": "3 != input.n",
      "Result": false,
      "ResultPath": "$.heap29",
      "Type": "Pass",
    },
    "assignFalse__input.n != input.n": Object {
      "Next": "1 < 1",
      "Result": false,
      "ResultPath": "$.heap31",
      "Type": "Pass",
    },
    "assignFalse__input.n < 3": Object {
      "Next": "3 < input.n",
      "Result": false,
      "ResultPath": "$.heap33",
      "Type": "Pass",
    },
    "assignFalse__input.n < input.n": Object {
      "Next": "1 <= 1",
      "Result": false,
      "ResultPath": "$.heap35",
      "Type": "Pass",
    },
    "assignFalse__input.n <= 3": Object {
      "Next": "3 <= input.n",
      "Result": false,
      "ResultPath": "$.heap37",
      "Type": "Pass",
    },
    "assignFalse__input.n <= input.n": Object {
      "Next": "1 > 1",
      "Result": false,
      "ResultPath": "$.heap39",
      "Type": "Pass",
    },
    "assignFalse__input.n == 2": Object {
      "Next": "3 == input.n",
      "Result": false,
      "ResultPath": "$.heap25",
      "Type": "Pass",
    },
    "assignFalse__input.n == input.n": Object {
      "Next": "1 != 1",
      "Result": false,
      "ResultPath": "$.heap27",
      "Type": "Pass",
    },
    "assignFalse__input.n > 3": Object {
      "Next": "3 > input.n",
      "Result": false,
      "ResultPath": "$.heap41",
      "Type": "Pass",
    },
    "assignFalse__input.n > input.n": Object {
      "Next": "1 >= 1",
      "Result": false,
      "ResultPath": "$.heap43",
      "Type": "Pass",
    },
    "assignFalse__input.n >= 3": Object {
      "Next": "3 >= input.n",
      "Result": false,
      "ResultPath": "$.heap45",
      "Type": "Pass",
    },
    "assignFalse__input.n >= input.n": Object {
      "Next": "true == true",
      "Result": false,
      "ResultPath": "$.heap47",
      "Type": "Pass",
    },
    "assignFalse__input.nv != input.nv": Object {
      "Next": "\\"a\\" in {a: \\"val\\"}",
      "Result": false,
      "ResultPath": "$.heap63",
      "Type": "Pass",
    },
    "assignFalse__input.nv != null": Object {
      "Next": "input.v != input.nv",
      "Result": false,
      "ResultPath": "$.heap61",
      "Type": "Pass",
    },
    "assignFalse__input.nv == input.nv": Object {
      "Next": "null != null",
      "Result": false,
      "ResultPath": "$.heap59",
      "Type": "Pass",
    },
    "assignFalse__input.nv == null": Object {
      "Next": "input.v == input.nv",
      "Result": false,
      "ResultPath": "$.heap57",
      "Type": "Pass",
    },
    "assignFalse__input.v != \\"val\\"": Object {
      "Next": "\\"val2\\" != input.v",
      "Result": false,
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "assignFalse__input.v != input.nv": Object {
      "Next": "input.nv != input.nv",
      "Result": false,
      "ResultPath": "$.heap62",
      "Type": "Pass",
    },
    "assignFalse__input.v != input.v": Object {
      "Next": "\\"a\\" < \\"a\\"",
      "Result": false,
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "assignFalse__input.v < \\"val2\\"": Object {
      "Next": "\\"val2\\" < input.v",
      "Result": false,
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "assignFalse__input.v < input.v": Object {
      "Next": "\\"a\\" <= \\"a\\"",
      "Result": false,
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "assignFalse__input.v <= \\"val2\\"": Object {
      "Next": "\\"val2\\" <= input.v",
      "Result": false,
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "assignFalse__input.v <= input.v": Object {
      "Next": "\\"a\\" > \\"a\\"",
      "Result": false,
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "assignFalse__input.v == \\"val\\"": Object {
      "Next": "\\"val2\\" == input.v",
      "Result": false,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "assignFalse__input.v == input.nv": Object {
      "Next": "input.nv == input.nv",
      "Result": false,
      "ResultPath": "$.heap58",
      "Type": "Pass",
    },
    "assignFalse__input.v == input.v": Object {
      "Next": "\\"a\\" != \\"a\\"",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "assignFalse__input.v > \\"val2\\"": Object {
      "Next": "\\"val2\\" > input.v",
      "Result": false,
      "ResultPath": "$.heap17",
      "Type": "Pass",
    },
    "assignFalse__input.v > input.v": Object {
      "Next": "\\"a\\" >= \\"a\\"",
      "Result": false,
      "ResultPath": "$.heap19",
      "Type": "Pass",
    },
    "assignFalse__input.v >= \\"val2\\"": Object {
      "Next": "\\"val2\\" >= input.v",
      "Result": false,
      "ResultPath": "$.heap21",
      "Type": "Pass",
    },
    "assignFalse__input.v >= input.v": Object {
      "Next": "1 == 1",
      "Result": false,
      "ResultPath": "$.heap23",
      "Type": "Pass",
    },
    "assignFalse__null != null": Object {
      "Next": "input.nv != null",
      "Result": false,
      "ResultPath": "$.heap60",
      "Type": "Pass",
    },
    "assignFalse__null == null": Object {
      "Next": "input.nv == null",
      "Result": false,
      "ResultPath": "$.heap56",
      "Type": "Pass",
    },
    "assignFalse__return {constantStringEquals: \\"a\\" == \\"a\\", constantToVarStringE": Object {
      "Next": "input.v == \\"val\\"",
      "Result": false,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "assignFalse__true != true": Object {
      "Next": "input.a != true",
      "Result": false,
      "ResultPath": "$.heap52",
      "Type": "Pass",
    },
    "assignFalse__true == true": Object {
      "Next": "input.a == true",
      "Result": false,
      "ResultPath": "$.heap48",
      "Type": "Pass",
    },
    "assignTrue__!false": Object {
      "Next": "!input.a",
      "Result": true,
      "ResultPath": "$.heap67",
      "Type": "Pass",
    },
    "assignTrue__!input.a": Object {
      "Next": "!input.nv",
      "Result": true,
      "ResultPath": "$.heap68",
      "Type": "Pass",
    },
    "assignTrue__!input.n": Object {
      "Next": "!input.x",
      "Result": true,
      "ResultPath": "$.heap70",
      "Type": "Pass",
    },
    "assignTrue__!input.nv": Object {
      "Next": "!input.n",
      "Result": true,
      "ResultPath": "$.heap69",
      "Type": "Pass",
    },
    "assignTrue__!input.x": Object {
      "Next": "1__return {constantStringEquals: \\"a\\" == \\"a\\", constantToVarStringEquals: inp",
      "Result": true,
      "ResultPath": "$.heap71",
      "Type": "Pass",
    },
    "assignTrue__\\"a\\" != \\"a\\"": Object {
      "Next": "input.v != \\"val\\"",
      "Result": true,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "assignTrue__\\"a\\" < \\"a\\"": Object {
      "Next": "input.v < \\"val2\\"",
      "Result": true,
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "assignTrue__\\"a\\" <= \\"a\\"": Object {
      "Next": "input.v <= \\"val2\\"",
      "Result": true,
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "assignTrue__\\"a\\" > \\"a\\"": Object {
      "Next": "input.v > \\"val2\\"",
      "Result": true,
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "assignTrue__\\"a\\" >= \\"a\\"": Object {
      "Next": "input.v >= \\"val2\\"",
      "Result": true,
      "ResultPath": "$.heap20",
      "Type": "Pass",
    },
    "assignTrue__\\"a\\" in input.obj": Object {
      "Next": "\\"b\\" in input.obj",
      "Result": true,
      "ResultPath": "$.heap65",
      "Type": "Pass",
    },
    "assignTrue__\\"a\\" in {a: \\"val\\"}": Object {
      "Next": "\\"a\\" in input.obj",
      "Result": true,
      "ResultPath": "$.heap64",
      "Type": "Pass",
    },
    "assignTrue__\\"b\\" in input.obj": Object {
      "Next": "!false",
      "Result": true,
      "ResultPath": "$.heap66",
      "Type": "Pass",
    },
    "assignTrue__\\"val2\\" != input.v": Object {
      "Next": "input.v != input.v",
      "Result": true,
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "assignTrue__\\"val2\\" < input.v": Object {
      "Next": "input.v < input.v",
      "Result": true,
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "assignTrue__\\"val2\\" <= input.v": Object {
      "Next": "input.v <= input.v",
      "Result": true,
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "assignTrue__\\"val2\\" == input.v": Object {
      "Next": "input.v == input.v",
      "Result": true,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignTrue__\\"val2\\" > input.v": Object {
      "Next": "input.v > input.v",
      "Result": true,
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "assignTrue__\\"val2\\" >= input.v": Object {
      "Next": "input.v >= input.v",
      "Result": true,
      "ResultPath": "$.heap22",
      "Type": "Pass",
    },
    "assignTrue__1 != 1": Object {
      "Next": "input.n != 2",
      "Result": true,
      "ResultPath": "$.heap28",
      "Type": "Pass",
    },
    "assignTrue__1 < 1": Object {
      "Next": "input.n < 3",
      "Result": true,
      "ResultPath": "$.heap32",
      "Type": "Pass",
    },
    "assignTrue__1 <= 1": Object {
      "Next": "input.n <= 3",
      "Result": true,
      "ResultPath": "$.heap36",
      "Type": "Pass",
    },
    "assignTrue__1 == 1": Object {
      "Next": "input.n == 2",
      "Result": true,
      "ResultPath": "$.heap24",
      "Type": "Pass",
    },
    "assignTrue__1 > 1": Object {
      "Next": "input.n > 3",
      "Result": true,
      "ResultPath": "$.heap40",
      "Type": "Pass",
    },
    "assignTrue__1 >= 1": Object {
      "Next": "input.n >= 3",
      "Result": true,
      "ResultPath": "$.heap44",
      "Type": "Pass",
    },
    "assignTrue__3 != input.n": Object {
      "Next": "input.n != input.n",
      "Result": true,
      "ResultPath": "$.heap30",
      "Type": "Pass",
    },
    "assignTrue__3 < input.n": Object {
      "Next": "input.n < input.n",
      "Result": true,
      "ResultPath": "$.heap34",
      "Type": "Pass",
    },
    "assignTrue__3 <= input.n": Object {
      "Next": "input.n <= input.n",
      "Result": true,
      "ResultPath": "$.heap38",
      "Type": "Pass",
    },
    "assignTrue__3 == input.n": Object {
      "Next": "input.n == input.n",
      "Result": true,
      "ResultPath": "$.heap26",
      "Type": "Pass",
    },
    "assignTrue__3 > input.n": Object {
      "Next": "input.n > input.n",
      "Result": true,
      "ResultPath": "$.heap42",
      "Type": "Pass",
    },
    "assignTrue__3 >= input.n": Object {
      "Next": "input.n >= input.n",
      "Result": true,
      "ResultPath": "$.heap46",
      "Type": "Pass",
    },
    "assignTrue__false != input.a": Object {
      "Next": "input.a != input.a",
      "Result": true,
      "ResultPath": "$.heap54",
      "Type": "Pass",
    },
    "assignTrue__false == input.a": Object {
      "Next": "input.a == input.a",
      "Result": true,
      "ResultPath": "$.heap50",
      "Type": "Pass",
    },
    "assignTrue__input.a != input.a": Object {
      "Next": "null == null",
      "Result": true,
      "ResultPath": "$.heap55",
      "Type": "Pass",
    },
    "assignTrue__input.a != true": Object {
      "Next": "false != input.a",
      "Result": true,
      "ResultPath": "$.heap53",
      "Type": "Pass",
    },
    "assignTrue__input.a == input.a": Object {
      "Next": "true != true",
      "Result": true,
      "ResultPath": "$.heap51",
      "Type": "Pass",
    },
    "assignTrue__input.a == true": Object {
      "Next": "false == input.a",
      "Result": true,
      "ResultPath": "$.heap49",
      "Type": "Pass",
    },
    "assignTrue__input.n != 2": Object {
      "Next": "3 != input.n",
      "Result": true,
      "ResultPath": "$.heap29",
      "Type": "Pass",
    },
    "assignTrue__input.n != input.n": Object {
      "Next": "1 < 1",
      "Result": true,
      "ResultPath": "$.heap31",
      "Type": "Pass",
    },
    "assignTrue__input.n < 3": Object {
      "Next": "3 < input.n",
      "Result": true,
      "ResultPath": "$.heap33",
      "Type": "Pass",
    },
    "assignTrue__input.n < input.n": Object {
      "Next": "1 <= 1",
      "Result": true,
      "ResultPath": "$.heap35",
      "Type": "Pass",
    },
    "assignTrue__input.n <= 3": Object {
      "Next": "3 <= input.n",
      "Result": true,
      "ResultPath": "$.heap37",
      "Type": "Pass",
    },
    "assignTrue__input.n <= input.n": Object {
      "Next": "1 > 1",
      "Result": true,
      "ResultPath": "$.heap39",
      "Type": "Pass",
    },
    "assignTrue__input.n == 2": Object {
      "Next": "3 == input.n",
      "Result": true,
      "ResultPath": "$.heap25",
      "Type": "Pass",
    },
    "assignTrue__input.n == input.n": Object {
      "Next": "1 != 1",
      "Result": true,
      "ResultPath": "$.heap27",
      "Type": "Pass",
    },
    "assignTrue__input.n > 3": Object {
      "Next": "3 > input.n",
      "Result": true,
      "ResultPath": "$.heap41",
      "Type": "Pass",
    },
    "assignTrue__input.n > input.n": Object {
      "Next": "1 >= 1",
      "Result": true,
      "ResultPath": "$.heap43",
      "Type": "Pass",
    },
    "assignTrue__input.n >= 3": Object {
      "Next": "3 >= input.n",
      "Result": true,
      "ResultPath": "$.heap45",
      "Type": "Pass",
    },
    "assignTrue__input.n >= input.n": Object {
      "Next": "true == true",
      "Result": true,
      "ResultPath": "$.heap47",
      "Type": "Pass",
    },
    "assignTrue__input.nv != input.nv": Object {
      "Next": "\\"a\\" in {a: \\"val\\"}",
      "Result": true,
      "ResultPath": "$.heap63",
      "Type": "Pass",
    },
    "assignTrue__input.nv != null": Object {
      "Next": "input.v != input.nv",
      "Result": true,
      "ResultPath": "$.heap61",
      "Type": "Pass",
    },
    "assignTrue__input.nv == input.nv": Object {
      "Next": "null != null",
      "Result": true,
      "ResultPath": "$.heap59",
      "Type": "Pass",
    },
    "assignTrue__input.nv == null": Object {
      "Next": "input.v == input.nv",
      "Result": true,
      "ResultPath": "$.heap57",
      "Type": "Pass",
    },
    "assignTrue__input.v != \\"val\\"": Object {
      "Next": "\\"val2\\" != input.v",
      "Result": true,
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "assignTrue__input.v != input.nv": Object {
      "Next": "input.nv != input.nv",
      "Result": true,
      "ResultPath": "$.heap62",
      "Type": "Pass",
    },
    "assignTrue__input.v != input.v": Object {
      "Next": "\\"a\\" < \\"a\\"",
      "Result": true,
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "assignTrue__input.v < \\"val2\\"": Object {
      "Next": "\\"val2\\" < input.v",
      "Result": true,
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "assignTrue__input.v < input.v": Object {
      "Next": "\\"a\\" <= \\"a\\"",
      "Result": true,
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "assignTrue__input.v <= \\"val2\\"": Object {
      "Next": "\\"val2\\" <= input.v",
      "Result": true,
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "assignTrue__input.v <= input.v": Object {
      "Next": "\\"a\\" > \\"a\\"",
      "Result": true,
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "assignTrue__input.v == \\"val\\"": Object {
      "Next": "\\"val2\\" == input.v",
      "Result": true,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "assignTrue__input.v == input.nv": Object {
      "Next": "input.nv == input.nv",
      "Result": true,
      "ResultPath": "$.heap58",
      "Type": "Pass",
    },
    "assignTrue__input.v == input.v": Object {
      "Next": "\\"a\\" != \\"a\\"",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "assignTrue__input.v > \\"val2\\"": Object {
      "Next": "\\"val2\\" > input.v",
      "Result": true,
      "ResultPath": "$.heap17",
      "Type": "Pass",
    },
    "assignTrue__input.v > input.v": Object {
      "Next": "\\"a\\" >= \\"a\\"",
      "Result": true,
      "ResultPath": "$.heap19",
      "Type": "Pass",
    },
    "assignTrue__input.v >= \\"val2\\"": Object {
      "Next": "\\"val2\\" >= input.v",
      "Result": true,
      "ResultPath": "$.heap21",
      "Type": "Pass",
    },
    "assignTrue__input.v >= input.v": Object {
      "Next": "1 == 1",
      "Result": true,
      "ResultPath": "$.heap23",
      "Type": "Pass",
    },
    "assignTrue__null != null": Object {
      "Next": "input.nv != null",
      "Result": true,
      "ResultPath": "$.heap60",
      "Type": "Pass",
    },
    "assignTrue__null == null": Object {
      "Next": "input.nv == null",
      "Result": true,
      "ResultPath": "$.heap56",
      "Type": "Pass",
    },
    "assignTrue__return {constantStringEquals: \\"a\\" == \\"a\\", constantToVarStringEq": Object {
      "Next": "input.v == \\"val\\"",
      "Result": true,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "assignTrue__true != true": Object {
      "Next": "input.a != true",
      "Result": true,
      "ResultPath": "$.heap52",
      "Type": "Pass",
    },
    "assignTrue__true == true": Object {
      "Next": "input.a == true",
      "Result": true,
      "ResultPath": "$.heap48",
      "Type": "Pass",
    },
    "false != input.a": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__false != input.a",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.a",
              },
              Object {
                "And": Array [
                  Object {
                    "IsBoolean": true,
                    "Variable": "$.fnl_context.input.a",
                  },
                  Object {
                    "BooleanEquals": false,
                    "Variable": "$.fnl_context.input.a",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__false != input.a",
      "Type": "Choice",
    },
    "false == input.a": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.a",
            },
            Object {
              "And": Array [
                Object {
                  "IsBoolean": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "BooleanEquals": false,
                  "Variable": "$.fnl_context.input.a",
                },
              ],
            },
          ],
          "Next": "assignTrue__false == input.a",
        },
      ],
      "Default": "assignFalse__false == input.a",
      "Type": "Choice",
    },
    "input.a != input.a": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.a != input.a",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.a",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.a",
                      },
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.a",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.input.a",
                      },
                      Object {
                        "StringEqualsPath": "$.fnl_context.input.a",
                        "Variable": "$.fnl_context.input.a",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.input.a",
                      },
                      Object {
                        "BooleanEqualsPath": "$.fnl_context.input.a",
                        "Variable": "$.fnl_context.input.a",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.input.a",
                      },
                      Object {
                        "NumericEqualsPath": "$.fnl_context.input.a",
                        "Variable": "$.fnl_context.input.a",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__input.a != input.a",
      "Type": "Choice",
    },
    "input.a != true": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.a != true",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.a",
              },
              Object {
                "And": Array [
                  Object {
                    "IsBoolean": true,
                    "Variable": "$.fnl_context.input.a",
                  },
                  Object {
                    "BooleanEquals": true,
                    "Variable": "$.fnl_context.input.a",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__input.a != true",
      "Type": "Choice",
    },
    "input.a == input.a": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.a",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.input.a",
                      "Variable": "$.fnl_context.input.a",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.input.a",
                      "Variable": "$.fnl_context.input.a",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.input.a",
                      "Variable": "$.fnl_context.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.a == input.a",
        },
      ],
      "Default": "assignFalse__input.a == input.a",
      "Type": "Choice",
    },
    "input.a == true": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.a",
            },
            Object {
              "And": Array [
                Object {
                  "IsBoolean": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "BooleanEquals": true,
                  "Variable": "$.fnl_context.input.a",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.a == true",
        },
      ],
      "Default": "assignFalse__input.a == true",
      "Type": "Choice",
    },
    "input.n != 2": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.n != 2",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.n",
              },
              Object {
                "And": Array [
                  Object {
                    "IsNumeric": true,
                    "Variable": "$.fnl_context.input.n",
                  },
                  Object {
                    "NumericEquals": 2,
                    "Variable": "$.fnl_context.input.n",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__input.n != 2",
      "Type": "Choice",
    },
    "input.n != input.n": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.n != input.n",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.n",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.n",
                      },
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.n",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.input.n",
                      },
                      Object {
                        "StringEqualsPath": "$.fnl_context.input.n",
                        "Variable": "$.fnl_context.input.n",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.input.n",
                      },
                      Object {
                        "BooleanEqualsPath": "$.fnl_context.input.n",
                        "Variable": "$.fnl_context.input.n",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.input.n",
                      },
                      Object {
                        "NumericEqualsPath": "$.fnl_context.input.n",
                        "Variable": "$.fnl_context.input.n",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__input.n != input.n",
      "Type": "Choice",
    },
    "input.n < 3": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.fnl_context.input.n",
                },
                Object {
                  "NumericLessThan": 3,
                  "Variable": "$.fnl_context.input.n",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.n < 3",
        },
      ],
      "Default": "assignFalse__input.n < 3",
      "Type": "Choice",
    },
    "input.n < input.n": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "StringLessThanPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "NumericLessThanPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.n < input.n",
        },
      ],
      "Default": "assignFalse__input.n < input.n",
      "Type": "Choice",
    },
    "input.n <= 3": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.fnl_context.input.n",
                },
                Object {
                  "NumericLessThanEquals": 3,
                  "Variable": "$.fnl_context.input.n",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.n <= 3",
        },
      ],
      "Default": "assignFalse__input.n <= 3",
      "Type": "Choice",
    },
    "input.n <= input.n": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "StringLessThanEqualsPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "NumericLessThanEqualsPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.n <= input.n",
        },
      ],
      "Default": "assignFalse__input.n <= input.n",
      "Type": "Choice",
    },
    "input.n == 2": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.fnl_context.input.n",
                },
                Object {
                  "NumericEquals": 2,
                  "Variable": "$.fnl_context.input.n",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.n == 2",
        },
      ],
      "Default": "assignFalse__input.n == 2",
      "Type": "Choice",
    },
    "input.n == input.n": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.n == input.n",
        },
      ],
      "Default": "assignFalse__input.n == input.n",
      "Type": "Choice",
    },
    "input.n > 3": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.fnl_context.input.n",
                },
                Object {
                  "NumericGreaterThan": 3,
                  "Variable": "$.fnl_context.input.n",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.n > 3",
        },
      ],
      "Default": "assignFalse__input.n > 3",
      "Type": "Choice",
    },
    "input.n > input.n": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "StringGreaterThanPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "NumericGreaterThanPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.n > input.n",
        },
      ],
      "Default": "assignFalse__input.n > input.n",
      "Type": "Choice",
    },
    "input.n >= 3": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.fnl_context.input.n",
                },
                Object {
                  "NumericGreaterThanEquals": 3,
                  "Variable": "$.fnl_context.input.n",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.n >= 3",
        },
      ],
      "Default": "assignFalse__input.n >= 3",
      "Type": "Choice",
    },
    "input.n >= input.n": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.n",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "StringGreaterThanEqualsPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.n",
                    },
                    Object {
                      "NumericGreaterThanEqualsPath": "$.fnl_context.input.n",
                      "Variable": "$.fnl_context.input.n",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.n >= input.n",
        },
      ],
      "Default": "assignFalse__input.n >= input.n",
      "Type": "Choice",
    },
    "input.nv != input.nv": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.nv != input.nv",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.nv",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "StringEqualsPath": "$.fnl_context.input.nv",
                        "Variable": "$.fnl_context.input.nv",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "BooleanEqualsPath": "$.fnl_context.input.nv",
                        "Variable": "$.fnl_context.input.nv",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "NumericEqualsPath": "$.fnl_context.input.nv",
                        "Variable": "$.fnl_context.input.nv",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__input.nv != input.nv",
      "Type": "Choice",
    },
    "input.nv != null": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.nv != null",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.nv",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.null",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "StringEqualsPath": "$.fnl_context.null",
                        "Variable": "$.fnl_context.input.nv",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "BooleanEqualsPath": "$.fnl_context.null",
                        "Variable": "$.fnl_context.input.nv",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                      Object {
                        "NumericEqualsPath": "$.fnl_context.null",
                        "Variable": "$.fnl_context.input.nv",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__input.nv != null",
      "Type": "Choice",
    },
    "input.nv == input.nv": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.nv",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.nv",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.nv",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.nv",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.input.nv",
                      "Variable": "$.fnl_context.input.nv",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.nv",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.input.nv",
                      "Variable": "$.fnl_context.input.nv",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.nv",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.input.nv",
                      "Variable": "$.fnl_context.input.nv",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.nv == input.nv",
        },
      ],
      "Default": "assignFalse__input.nv == input.nv",
      "Type": "Choice",
    },
    "input.nv == null": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.nv",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.nv",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.nv",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.null",
                      "Variable": "$.fnl_context.input.nv",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.nv",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.null",
                      "Variable": "$.fnl_context.input.nv",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.nv",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.null",
                      "Variable": "$.fnl_context.input.nv",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.nv == null",
        },
      ],
      "Default": "assignFalse__input.nv == null",
      "Type": "Choice",
    },
    "input.v != \\"val\\"": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.v != \\"val\\"",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.v",
              },
              Object {
                "And": Array [
                  Object {
                    "IsString": true,
                    "Variable": "$.fnl_context.input.v",
                  },
                  Object {
                    "StringEquals": "val",
                    "Variable": "$.fnl_context.input.v",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__input.v != \\"val\\"",
      "Type": "Choice",
    },
    "input.v != input.nv": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.v != input.nv",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.v",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.v",
                      },
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.nv",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.input.v",
                      },
                      Object {
                        "StringEqualsPath": "$.fnl_context.input.nv",
                        "Variable": "$.fnl_context.input.v",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.input.v",
                      },
                      Object {
                        "BooleanEqualsPath": "$.fnl_context.input.nv",
                        "Variable": "$.fnl_context.input.v",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.input.v",
                      },
                      Object {
                        "NumericEqualsPath": "$.fnl_context.input.nv",
                        "Variable": "$.fnl_context.input.v",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__input.v != input.nv",
      "Type": "Choice",
    },
    "input.v != input.v": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.v != input.v",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.v",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.v",
                      },
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.input.v",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.input.v",
                      },
                      Object {
                        "StringEqualsPath": "$.fnl_context.input.v",
                        "Variable": "$.fnl_context.input.v",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.input.v",
                      },
                      Object {
                        "BooleanEqualsPath": "$.fnl_context.input.v",
                        "Variable": "$.fnl_context.input.v",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.input.v",
                      },
                      Object {
                        "NumericEqualsPath": "$.fnl_context.input.v",
                        "Variable": "$.fnl_context.input.v",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__input.v != input.v",
      "Type": "Choice",
    },
    "input.v < \\"val2\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.v",
                },
                Object {
                  "StringLessThan": "val2",
                  "Variable": "$.fnl_context.input.v",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v < \\"val2\\"",
        },
      ],
      "Default": "assignFalse__input.v < \\"val2\\"",
      "Type": "Choice",
    },
    "input.v < input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "StringLessThanPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "NumericLessThanPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v < input.v",
        },
      ],
      "Default": "assignFalse__input.v < input.v",
      "Type": "Choice",
    },
    "input.v <= \\"val2\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.v",
                },
                Object {
                  "StringLessThanEquals": "val2",
                  "Variable": "$.fnl_context.input.v",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v <= \\"val2\\"",
        },
      ],
      "Default": "assignFalse__input.v <= \\"val2\\"",
      "Type": "Choice",
    },
    "input.v <= input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "StringLessThanEqualsPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "NumericLessThanEqualsPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v <= input.v",
        },
      ],
      "Default": "assignFalse__input.v <= input.v",
      "Type": "Choice",
    },
    "input.v == \\"val\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.v",
                },
                Object {
                  "StringEquals": "val",
                  "Variable": "$.fnl_context.input.v",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v == \\"val\\"",
        },
      ],
      "Default": "assignFalse__input.v == \\"val\\"",
      "Type": "Choice",
    },
    "input.v == input.nv": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.nv",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.input.nv",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.input.nv",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.input.nv",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v == input.nv",
        },
      ],
      "Default": "assignFalse__input.v == input.nv",
      "Type": "Choice",
    },
    "input.v == input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v == input.v",
        },
      ],
      "Default": "assignFalse__input.v == input.v",
      "Type": "Choice",
    },
    "input.v > \\"val2\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.v",
                },
                Object {
                  "StringGreaterThan": "val2",
                  "Variable": "$.fnl_context.input.v",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v > \\"val2\\"",
        },
      ],
      "Default": "assignFalse__input.v > \\"val2\\"",
      "Type": "Choice",
    },
    "input.v > input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "StringGreaterThanPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "NumericGreaterThanPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v > input.v",
        },
      ],
      "Default": "assignFalse__input.v > input.v",
      "Type": "Choice",
    },
    "input.v >= \\"val2\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.v",
                },
                Object {
                  "StringGreaterThanEquals": "val2",
                  "Variable": "$.fnl_context.input.v",
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v >= \\"val2\\"",
        },
      ],
      "Default": "assignFalse__input.v >= \\"val2\\"",
      "Type": "Choice",
    },
    "input.v >= input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "StringGreaterThanEqualsPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.v",
                    },
                    Object {
                      "NumericGreaterThanEqualsPath": "$.fnl_context.input.v",
                      "Variable": "$.fnl_context.input.v",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__input.v >= input.v",
        },
      ],
      "Default": "assignFalse__input.v >= input.v",
      "Type": "Choice",
    },
    "null != null": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__null != null",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.null",
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.null",
                      },
                      Object {
                        "IsNull": true,
                        "Variable": "$.fnl_context.null",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.fnl_context.null",
                      },
                      Object {
                        "StringEqualsPath": "$.fnl_context.null",
                        "Variable": "$.fnl_context.null",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.fnl_context.null",
                      },
                      Object {
                        "BooleanEqualsPath": "$.fnl_context.null",
                        "Variable": "$.fnl_context.null",
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.fnl_context.null",
                      },
                      Object {
                        "NumericEqualsPath": "$.fnl_context.null",
                        "Variable": "$.fnl_context.null",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__null != null",
      "Type": "Choice",
    },
    "null == null": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.null",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.null",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.null",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.null",
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.null",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.null",
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.null",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.null",
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__null == null",
        },
      ],
      "Default": "assignFalse__null == null",
      "Type": "Choice",
    },
    "return {constantStringEquals: \\"a\\" == \\"a\\", constantToVarStringEquals: input.": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "assignTrue__return {constantStringEquals: \\"a\\" == \\"a\\", constantToVarStringEq",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__return {constantStringEquals: \\"a\\" == \\"a\\", constantToVarStringE",
      "Type": "Choice",
    },
    "true != true": Object {
      "Choices": Array [
        Object {
          "IsNull": true,
          "Next": "assignTrue__true != true",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__true != true",
      "Type": "Choice",
    },
    "true == true": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "assignTrue__true == true",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "assignFalse__true == true",
      "Type": "Choice",
    },
  },
}
`;

exports[`binaryOps logic 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {andVar: c, and: input.a && input.b, or: input.a || input.b, null": Object {
      "InputPath": "$.heap0",
      "Next": "return {andVar: c, and: input.a && input.b, or: input.a || input.b, nullCoa 1",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "1__return {andVar: c, and: input.a && input.b, or: input.a || input.b, null 1": Object {
      "End": true,
      "Parameters": Object {
        "and.$": "$.heap1",
        "andVar.$": "$.c",
        "invNullCoal.$": "$.heap4",
        "nullCoal.$": "$.heap3",
        "nullNull.$": "$.heap5",
        "nullVal.$": "$.heap6",
        "or.$": "$.heap2",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {andVar: c, and: input.a && input.b, or: input.a || input.b, nullCoa",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "assignFalse__input.a || input.b": Object {
      "Next": "input.v ?? input.nv",
      "Result": false,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignFalse__return {andVar: c, and: input.a && input.b, or: input.a || inp": Object {
      "Next": "1__return {andVar: c, and: input.a && input.b, or: input.a || input.b, null",
      "Result": false,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "assignFalse__return {andVar: c, and: input.a && input.b, or: input.a || inp 1": Object {
      "Next": "input.a || input.b",
      "Result": false,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "assignTrue__input.a || input.b": Object {
      "Next": "input.v ?? input.nv",
      "Result": true,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignTrue__return {andVar: c, and: input.a && input.b, or: input.a || inpu": Object {
      "Next": "1__return {andVar: c, and: input.a && input.b, or: input.a || input.b, null",
      "Result": true,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "assignTrue__return {andVar: c, and: input.a && input.b, or: input.a || inpu 1": Object {
      "Next": "input.a || input.b",
      "Result": true,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "input.a || input.b": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.a || input.b",
          "Or": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "assignFalse__input.a || input.b",
      "Type": "Choice",
    },
    "input.nv ?? input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.nv",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.nv",
            },
          ],
          "Next": "takeLeft__input.nv ?? input.v",
        },
      ],
      "Default": "takeRight__input.nv ?? input.v",
      "Type": "Choice",
    },
    "input.nv ?? null": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.nv",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.nv",
            },
          ],
          "Next": "takeLeft__input.nv ?? null",
        },
      ],
      "Default": "takeRight__input.nv ?? null",
      "Type": "Choice",
    },
    "input.v ?? input.nv": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.v",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.v",
            },
          ],
          "Next": "takeLeft__input.v ?? input.nv",
        },
      ],
      "Default": "takeRight__input.v ?? input.nv",
      "Type": "Choice",
    },
    "null ?? input.v": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.null",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.null",
            },
          ],
          "Next": "takeLeft__null ?? input.v",
        },
      ],
      "Default": "takeRight__null ?? input.v",
      "Type": "Choice",
    },
    "return {andVar: c, and: input.a && input.b, or: input.a || input.b, nullCoa": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__return {andVar: c, and: input.a && input.b, or: input.a || inpu",
        },
      ],
      "Default": "assignFalse__return {andVar: c, and: input.a && input.b, or: input.a || inp",
      "Type": "Choice",
    },
    "return {andVar: c, and: input.a && input.b, or: input.a || input.b, nullCoa 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__return {andVar: c, and: input.a && input.b, or: input.a || inpu 1",
        },
      ],
      "Default": "assignFalse__return {andVar: c, and: input.a && input.b, or: input.a || inp 1",
      "Type": "Choice",
    },
    "takeLeft__input.nv ?? input.v": Object {
      "InputPath": "$.fnl_context.input.nv",
      "Next": "input.nv ?? null",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "takeLeft__input.nv ?? null": Object {
      "InputPath": "$.fnl_context.input.nv",
      "Next": "null ?? input.v",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "takeLeft__input.v ?? input.nv": Object {
      "InputPath": "$.fnl_context.input.v",
      "Next": "input.nv ?? input.v",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "takeLeft__null ?? input.v": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return {andVar: c, and: input.a && input.b, or: input.a || input.b, null 1",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "takeRight__input.nv ?? input.v": Object {
      "InputPath": "$.fnl_context.input.v",
      "Next": "input.nv ?? null",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "takeRight__input.nv ?? null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "null ?? input.v",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "takeRight__input.v ?? input.nv": Object {
      "InputPath": "$.fnl_context.input.nv",
      "Next": "input.nv ?? input.v",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "takeRight__null ?? input.v": Object {
      "InputPath": "$.fnl_context.input.v",
      "Next": "1__return {andVar: c, and: input.a && input.b, or: input.a || input.b, null 1",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
  },
}
`;

exports[`binaryOps logic with calls 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__false || await func()": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__1__false || await func()",
          "Or": Array [
            Object {
              "IsNull": true,
              "Variable": "$$.Execution.Id",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.heap2",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.heap2",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.heap2",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.heap2",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.heap2",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.heap2",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.heap2",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.heap2",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "assignFalse__1__false || await func()",
      "Type": "Choice",
    },
    "1__return {and: true && await func(), or: false || await func()}": Object {
      "End": true,
      "Parameters": Object {
        "and.$": "$.heap1",
        "or.$": "$.heap3",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {and: true && await func(), or: false || await func()} 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.heap0",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.heap0",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.heap0",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.heap0",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.heap0",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.heap0",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.heap0",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.heap0",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__1__return {and: true && await func(), or: false || await func()",
        },
      ],
      "Default": "assignFalse__1__return {and: true && await func(), or: false || await func(",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {and: true && await func(), or: false || await func()}",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "assignFalse__1__false || await func()": Object {
      "Next": "1__return {and: true && await func(), or: false || await func()}",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "assignFalse__1__return {and: true && await func(), or: false || await func(": Object {
      "Next": "false || await func()",
      "Result": false,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "assignTrue__1__false || await func()": Object {
      "Next": "1__return {and: true && await func(), or: false || await func()}",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "assignTrue__1__return {and: true && await func(), or: false || await func()": Object {
      "Next": "false || await func()",
      "Result": true,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false || await func()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__false || await func()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return {and: true && await func(), or: false || await func()}": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return {and: true && await func(), or: false || await func()} 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call $SFN forEach 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.forEach(input.arr, function(n))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.arr, function(n))": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "return func(n)",
        "States": Object {
          "1__return func(n)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return func(n)": Object {
            "InputPath": "$.n",
            "Next": "1__return func(n)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "n.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call $SFN map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.arr, function(n))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.arr, function(n))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return $SFN.map(input.arr, function(n))": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "return n",
        "States": Object {
          "return n": Object {
            "End": true,
            "InputPath": "$.n",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.map(input.arr, function(n))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "n.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
  },
}
`;

exports[`call $SFN map with constant array 1`] = `
Object {
  "StartAt": "return $SFN.map([1, 2, 3], function(n))",
  "States": Object {
    "$SFN.map([1, 2, 3], function(n))": Object {
      "ItemsPath": "$.heap1",
      "Iterator": Object {
        "StartAt": "return \`nn\`",
        "States": Object {
          "1__return \`nn\`": Object {
            "End": true,
            "InputPath": "$.heap0.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`nn\`": Object {
            "Next": "1__return \`nn\`",
            "Parameters": Object {
              "string.$": "States.Format('n{}',$.n)",
            },
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.map([1, 2, 3], function(n))",
      "Parameters": Object {
        "n.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "1__return $SFN.map([1, 2, 3], function(n))": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map([1, 2, 3], function(n))": Object {
      "Next": "$SFN.map([1, 2, 3], function(n))",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`call $SFN parallel 1`] = `
Object {
  "StartAt": "return $SFN.parallel([function(), function()])",
  "States": Object {
    "1__return $SFN.parallel([function(), function()])": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel([function(), function()])": Object {
      "Branches": Array [
        Object {
          "StartAt": "return 1",
          "States": Object {
            "return 1": Object {
              "End": true,
              "Result": 1,
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "return 2",
          "States": Object {
            "return 2": Object {
              "End": true,
              "Result": 2,
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel([function(), function()])",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`call $SFN wait 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitFor(1)": Object {
      "Next": "return null",
      "Seconds": 1,
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitFor(1)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call lambda $AWS invoke 1`] = `
Object {
  "StartAt": "return await $AWS.Lambda.Invoke({Function: func, Payload: obj}).Payload.str",
  "States": Object {
    "1__return await $AWS.Lambda.Invoke({Function: func, Payload: obj}).Payload.": Object {
      "End": true,
      "InputPath": "$.heap0.Payload.str",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return await $AWS.Lambda.Invoke({Function: func, Payload: obj}).Payload.str": Object {
      "Next": "return await $AWS.Lambda.Invoke({Function: func, Payload: obj}).Payload.str 1",
      "Result": Object {
        "str": "hello world",
      },
      "ResultPath": "$.obj",
      "Type": "Pass",
    },
    "return await $AWS.Lambda.Invoke({Function: func, Payload: obj}).Payload.str 1": Object {
      "Next": "1__return await $AWS.Lambda.Invoke({Function: func, Payload: obj}).Payload.",
      "Parameters": Object {
        "FunctionName": "__REPLACED_TOKEN",
        "Payload.$": "$.obj",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call lambda 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return func()": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return func()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return func()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return func()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call lambda with array parameter 1`] = `
Object {
  "StartAt": "return func([1, 2])",
  "States": Object {
    "1__return func([1, 2])": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return func([1, 2])": Object {
      "Next": "1__return func([1, 2])",
      "Parameters": Array [
        1,
        2,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call lambda with array ref 1`] = `
Object {
  "StartAt": "return func(arr)",
  "States": Object {
    "1__return func(arr) 1": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return func(arr)": Object {
      "Next": "return func(arr) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.arr",
      "Type": "Pass",
    },
    "return func(arr) 1": Object {
      "InputPath": "$.arr",
      "Next": "1__return func(arr) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call lambda with object literal parameter 1`] = `
Object {
  "StartAt": "return await func({str: \\"hello world\\"}).str",
  "States": Object {
    "1__return await func({str: \\"hello world\\"}).str": Object {
      "End": true,
      "InputPath": "$.heap0.str",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return await func({str: \\"hello world\\"}).str": Object {
      "Next": "1__return await func({str: \\"hello world\\"}).str",
      "Parameters": Object {
        "str": "hello world",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call lambda with object reference parameter 1`] = `
Object {
  "StartAt": "return await func(obj).str",
  "States": Object {
    "1__return await func(obj).str 1": Object {
      "End": true,
      "InputPath": "$.heap0.str",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return await func(obj).str": Object {
      "Next": "return await func(obj).str 1",
      "Result": Object {
        "str": "hello world",
      },
      "ResultPath": "$.obj",
      "Type": "Pass",
    },
    "return await func(obj).str 1": Object {
      "InputPath": "$.obj",
      "Next": "1__return await func(obj).str 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call lambda with string parameter 1`] = `
Object {
  "StartAt": "return await func(\\"hello world\\").str",
  "States": Object {
    "1__return await func(\\"hello world\\").str": Object {
      "End": true,
      "InputPath": "$.heap0.str",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return await func(\\"hello world\\").str": Object {
      "Next": "1__return await func(\\"hello world\\").str",
      "Parameters": "hello world",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call lambda with string reference 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return await func(event.str).str": Object {
      "End": true,
      "InputPath": "$.heap0.str",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await func(event.str).str",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return await func(event.str).str": Object {
      "InputPath": "$.fnl_context.input.str",
      "Next": "1__return await func(event.str).str",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`conditionals 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if(await func())": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "IsNull": false,
              "Variable": "$.heap0",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return input.b",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.a)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(await func())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await func())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(input.a)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.a",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.a",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.fnl_context.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.fnl_context.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.fnl_context.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "if(await func())",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.b": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`context 1`] = `
Object {
  "StartAt": "return \`name: context.Execution.Name\`",
  "States": Object {
    "1__return \`name: context.Execution.Name\`": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \`name: context.Execution.Name\`": Object {
      "Next": "1__return \`name: context.Execution.Name\`",
      "Parameters": Object {
        "string.$": "States.Format('name: {}',$$.Execution.Name)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue break 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__a = \`a1\`": Object {
      "InputPath": "$.heap0.string",
      "Next": "if(a != \\"111\\")",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__a = \`a2\`": Object {
      "InputPath": "$.heap1.string",
      "Next": "while (true) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__await $AWS.DynamoDB.UpdateItem({Table: table, Key: {id: {S: input.id}}, ": Object {
      "Next": "if(i == 3)",
      "Parameters": Object {
        "ExpressionAttributeValues": Object {
          ":inc": Object {
            "N.$": "$.heap2.string",
          },
          ":start": Object {
            "N": "0",
          },
        },
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
        "UpdateExpression": "SET val = if_not_exists(val, :start) + :inc",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "1__item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id": Object {
      "InputPath": "$.heap5",
      "Next": "return \`aitem.Item.val.N\`",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "1__return \`aitem.Item.val.N\`": Object {
      "End": true,
      "InputPath": "$.heap6.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = \`a1\`": Object {
      "Next": "1__a = \`a1\`",
      "Parameters": Object {
        "string.$": "States.Format('{}1',$.a)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "a = \`a2\`": Object {
      "Next": "1__a = \`a2\`",
      "Parameters": Object {
        "string.$": "States.Format('{}2',$.a)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "await $AWS.DynamoDB.UpdateItem({Table: table, Key: {id: {S: input.id}}, Upd": Object {
      "Next": "1__await $AWS.DynamoDB.UpdateItem({Table: table, Key: {id: {S: input.id}}, ",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.i)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "for(i of [1, 2, 3, 4])": Object {
      "Next": "hasNext__for(i of [1, 2, 3, 4])",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "hasNext__for(i of [1, 2, 3, 4])": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}},",
      "Type": "Choice",
    },
    "i = undefined": Object {
      "InputPath": "$.heap4[0]",
      "Next": "if(i == 1)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(a != \\"111\\")": Object {
      "Choices": Array [
        Object {
          "Next": "if(a == \\"11121\\")",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.a",
              },
              Object {
                "And": Array [
                  Object {
                    "IsString": true,
                    "Variable": "$.a",
                  },
                  Object {
                    "StringEquals": "111",
                    "Variable": "$.a",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "a = \`a2\`",
      "Type": "Choice",
    },
    "if(a == \\"11121\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.a",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.a",
                },
                Object {
                  "StringEquals": "11121",
                  "Variable": "$.a",
                },
              ],
            },
          ],
          "Next": "for(i of [1, 2, 3, 4])",
        },
      ],
      "Default": "while (true) 1",
      "Type": "Choice",
    },
    "if(i == 1)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 1,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "tail__for(i of [1, 2, 3, 4])",
        },
      ],
      "Default": "await $AWS.DynamoDB.UpdateItem({Table: table, Key: {id: {S: input.id}}, Upd",
      "Type": "Choice",
    },
    "if(i == 3)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 3,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}},",
        },
      ],
      "Default": "tail__for(i of [1, 2, 3, 4])",
      "Type": "Choice",
    },
    "item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}},": Object {
      "Next": "1__item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id",
      "Parameters": Object {
        "ConsistentRead": true,
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap5",
      "Type": "Task",
    },
    "return \`aitem.Item.val.N\`": Object {
      "Next": "1__return \`aitem.Item.val.N\`",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.item.Item.val.N)",
      },
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "tail__for(i of [1, 2, 3, 4])": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for(i of [1, 2, 3, 4])",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "while (true)": Object {
      "Next": "while (true) 1",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "while (true) 1": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "a = \`a1\`",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "for(i of [1, 2, 3, 4])",
      "Type": "Choice",
    },
  },
}
`;

exports[`duplicate nodes 1`] = `
Object {
  "StartAt": "\\"hello world\\"",
  "States": Object {
    "\\"hello world\\"": Object {
      "Next": "return \\"hello world\\"",
      "ResultPath": null,
      "Type": "Pass",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__a = \`acc\`": Object {
      "InputPath": "$.heap2.string",
      "Next": "c = \`c1\`",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__a = \`anarr[0]\`": Object {
      "InputPath": "$.heap0.string",
      "Next": "arr = arr.slice(1)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__c = \`c1\`": Object {
      "InputPath": "$.heap3.string",
      "Next": "if(c == \\"1\\")",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "1__c = \`c1\` 1": Object {
      "InputPath": "$.heap1.string",
      "Next": "if(c == \\"1\\")",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "1__for(arr = input.arr;arr[0];arr = arr.slice(1)) 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.arr[0]",
            },
            Object {
              "IsNull": false,
              "Variable": "$.arr[0]",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.arr[0]",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.arr[0]",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.arr[0]",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.arr[0]",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.arr[0]",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.arr[0]",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.arr[0]",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.arr[0]",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "a = \`anarr[0]\`",
        },
      ],
      "Default": "c = \\"\\"",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(arr = input.arr;arr[0];arr = arr.slice(1))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = \`acc\`": Object {
      "Next": "1__a = \`acc\`",
      "Parameters": Object {
        "string.$": "States.Format('{}c{}',$.a,$.c)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "a = \`anarr[0]\`": Object {
      "Next": "1__a = \`anarr[0]\`",
      "Parameters": Object {
        "string.$": "States.Format('{}n{}',$.a,$.arr[0])",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "arr = arr.slice(1)": Object {
      "InputPath": "$.arr[1:]",
      "Next": "1__for(arr = input.arr;arr[0];arr = arr.slice(1)) 1",
      "ResultPath": "$.arr",
      "Type": "Pass",
    },
    "c = \\"\\"": Object {
      "Next": "if(c == \\"1\\")",
      "Result": "",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "c = \`c1\`": Object {
      "Next": "1__c = \`c1\`",
      "Parameters": Object {
        "string.$": "States.Format('{}1',$.c)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "c = \`c1\` 1": Object {
      "Next": "1__c = \`c1\` 1",
      "Parameters": Object {
        "string.$": "States.Format('{}1',$.c)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(arr = input.arr;arr[0];arr = arr.slice(1))": Object {
      "Next": "for(arr = input.arr;arr[0];arr = arr.slice(1)) 1",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(arr = input.arr;arr[0];arr = arr.slice(1)) 1": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "1__for(arr = input.arr;arr[0];arr = arr.slice(1)) 1",
      "ResultPath": "$.arr",
      "Type": "Pass",
    },
    "if(c == \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.c",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.c",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.c",
                },
              ],
            },
          ],
          "Next": "c = \`c1\` 1",
        },
      ],
      "Default": "if(c == \\"111\\")",
      "Type": "Choice",
    },
    "if(c == \\"111\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.c",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.c",
                },
                Object {
                  "StringEquals": "111",
                  "Variable": "$.c",
                },
              ],
            },
          ],
          "Next": "return a",
        },
      ],
      "Default": "a = \`acc\`",
      "Type": "Choice",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for control and assignment 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__a = \`ani\`": Object {
      "InputPath": "$.heap0.string",
      "Next": "tail__for(i in input.arr) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__a = \`ani\` 1": Object {
      "InputPath": "$.heap2.string",
      "Next": "tail__for(i in input.arr) 2",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__for(i in input.arr) 1": Object {
      "InputPath": "$.heap1",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.arr) 1",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "1__for(i in input.arr) 2": Object {
      "InputPath": "$.heap3",
      "Iterator": Object {
        "StartAt": "Default 1",
        "States": Object {
          "Default 1": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.arr) 2",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap3",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.arr)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = \`ani\`": Object {
      "Next": "1__a = \`ani\`",
      "Parameters": Object {
        "string.$": "States.Format('{}n{}',$.a,$.i)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "a = \`ani\` 1": Object {
      "Next": "1__a = \`ani\` 1",
      "Parameters": Object {
        "string.$": "States.Format('{}n{}',$.a,$.i)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignValue__i = undefined": Object {
      "InputPath": "$.heap1[0].item",
      "Next": "if(i == \\"2\\")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "assignValue__i = undefined 1": Object {
      "InputPath": "$.heap3[0].item",
      "Next": "if(i != \\"2\\")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.arr)": Object {
      "Next": "for(i in input.arr) 1",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(i in input.arr) 1": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "1__for(i in input.arr) 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(i in input.arr) 2": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "1__for(i in input.arr) 2",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "for(i of input.arr)": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "hasNext__for(i of input.arr)",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "hasNext__for(i in input.arr) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "for(i in input.arr) 2",
      "Type": "Choice",
    },
    "hasNext__for(i in input.arr) 2": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined 1",
          "Variable": "$.heap3[0]",
        },
      ],
      "Default": "for(i of input.arr)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.arr)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined 2",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "return \\"woops\\"",
      "Type": "Choice",
    },
    "i = undefined": Object {
      "InputPath": "$.heap1[0].index",
      "Next": "assignValue__i = undefined",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = undefined 1": Object {
      "InputPath": "$.heap3[0].index",
      "Next": "assignValue__i = undefined 1",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = undefined 2": Object {
      "InputPath": "$.heap4[0]",
      "Next": "if(i == 2)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i != \\"2\\")": Object {
      "Choices": Array [
        Object {
          "Next": "tail__for(i in input.arr) 2",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.i",
              },
              Object {
                "And": Array [
                  Object {
                    "IsString": true,
                    "Variable": "$.i",
                  },
                  Object {
                    "StringEquals": "2",
                    "Variable": "$.i",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "a = \`ani\` 1",
      "Type": "Choice",
    },
    "if(i == \\"2\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.i",
                },
                Object {
                  "StringEquals": "2",
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "for(i in input.arr) 2",
        },
      ],
      "Default": "a = \`ani\`",
      "Type": "Choice",
    },
    "if(i == 2)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 2,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "return a",
        },
      ],
      "Default": "tail__for(i of input.arr)",
      "Type": "Choice",
    },
    "return \\"woops\\"": Object {
      "End": true,
      "Result": "woops",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.arr) 1": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i in input.arr) 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__for(i in input.arr) 2": Object {
      "InputPath": "$.heap3[1:]",
      "Next": "hasNext__for(i in input.arr) 2",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "tail__for(i of input.arr)": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for(i of input.arr)",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`for in 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await func({n: \`input.arr[i]\`, id: input.id})": Object {
      "Next": "tail__for(i in input.arr)",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "n.$": "$.heap1.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "1__await func({n: \`input.arr[i]\`, id: input.id}) 1": Object {
      "Next": "1__await func({n: \`input.arr[i]\`, id: input.id})",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "1__await func({n: \`input.arr[i]\`, id: input.id}) 1 1": Object {
      "Next": "await func({n: i, id: input.id})",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "n.$": "$.heap5.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap6",
      "Type": "Task",
    },
    "1__await func({n: \`input.arr[i]\`, id: input.id}) 1 2": Object {
      "Next": "1__await func({n: \`input.arr[i]\`, id: input.id}) 1 1",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.heap4)",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "1__await func({n: \`input.arr[j]\`, id: input.id})": Object {
      "Next": "await func({n: j, id: input.id}) 1",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "n.$": "$.heap9.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap10",
      "Type": "Task",
    },
    "1__await func({n: \`input.arr[j]\`, id: input.id}) 1": Object {
      "Next": "1__await func({n: \`input.arr[j]\`, id: input.id})",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.heap8)",
      },
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "1__for(i in input.arr)": Object {
      "InputPath": "$.heap3",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.arr)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap3",
      "Type": "Map",
    },
    "1__for(i in input.arr) 1": Object {
      "InputPath": "$.heap14",
      "Iterator": Object {
        "StartAt": "Default 2",
        "States": Object {
          "Default 2": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.arr) 1",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap14",
      "Type": "Map",
    },
    "1__for(j in input.arr) 1": Object {
      "InputPath": "$.heap12",
      "Iterator": Object {
        "StartAt": "Default 1",
        "States": Object {
          "Default 1": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(j in input.arr) 1",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap12",
      "Type": "Map",
    },
    "1__item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id": Object {
      "InputPath": "$.heap15",
      "Next": "return item.Item.val.N",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.arr)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "assignValue__i = undefined": Object {
      "InputPath": "$.heap3[0].item",
      "Next": "await func({n: \`input.arr[i]\`, id: input.id})",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "assignValue__i = undefined 1": Object {
      "InputPath": "$.heap14[0].item",
      "Next": "for(j in input.arr)",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "assignValue__j": Object {
      "InputPath": "$.heap12[0].item",
      "Next": "await func({n: \`input.arr[i]\`, id: input.id}) 1",
      "ResultPath": "$.0__j",
      "Type": "Pass",
    },
    "await func({n: \`input.arr[i]\`, id: input.id})": Object {
      "InputPath": "$.0__i",
      "Next": "1__await func({n: \`input.arr[i]\`, id: input.id}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "await func({n: \`input.arr[i]\`, id: input.id}) 1": Object {
      "InputPath": "$.0__i",
      "Next": "1__await func({n: \`input.arr[i]\`, id: input.id}) 1 2",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "await func({n: \`input.arr[j]\`, id: input.id})": Object {
      "InputPath": "$.0__j",
      "Next": "1__await func({n: \`input.arr[j]\`, id: input.id}) 1",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "await func({n: i, id: input.id})": Object {
      "Next": "await func({n: \`input.arr[j]\`, id: input.id})",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "n.$": "$.i",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap7",
      "Type": "Task",
    },
    "await func({n: j, id: input.id})": Object {
      "Next": "tail__for(i in input.arr) 1",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "n.$": "$.j",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap13",
      "Type": "Task",
    },
    "await func({n: j, id: input.id}) 1": Object {
      "Next": "tail__for(j in input.arr) 1",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "n.$": "$.j",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap11",
      "Type": "Task",
    },
    "for(i in input.arr)": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "1__for(i in input.arr)",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "for(i in input.arr) 1": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "1__for(i in input.arr) 1",
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "for(j in input.arr)": Object {
      "Next": "for(j in input.arr) 1",
      "Result": "1",
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "for(j in input.arr) 1": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "1__for(j in input.arr) 1",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "hasNext__for(i in input.arr)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined",
          "Variable": "$.heap3[0]",
        },
      ],
      "Default": "for(i in input.arr) 1",
      "Type": "Choice",
    },
    "hasNext__for(i in input.arr) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined 1",
          "Variable": "$.heap14[0]",
        },
      ],
      "Default": "item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}},",
      "Type": "Choice",
    },
    "hasNext__for(j in input.arr) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "j",
          "Variable": "$.heap12[0]",
        },
      ],
      "Default": "await func({n: j, id: input.id})",
      "Type": "Choice",
    },
    "i = undefined": Object {
      "InputPath": "$.heap3[0].index",
      "Next": "assignValue__i = undefined",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = undefined 1": Object {
      "InputPath": "$.heap14[0].index",
      "Next": "assignValue__i = undefined 1",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}},": Object {
      "Next": "1__item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id",
      "Parameters": Object {
        "ConsistentRead": true,
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap15",
      "Type": "Task",
    },
    "j": Object {
      "InputPath": "$.heap12[0].index",
      "Next": "assignValue__j",
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "return item.Item.val.N": Object {
      "End": true,
      "InputPath": "$.item.Item.val.N",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.arr)": Object {
      "InputPath": "$.heap3[1:]",
      "Next": "hasNext__for(i in input.arr)",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "tail__for(i in input.arr) 1": Object {
      "InputPath": "$.heap14[1:]",
      "Next": "hasNext__for(i in input.arr) 1",
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "tail__for(j in input.arr) 1": Object {
      "InputPath": "$.heap12[1:]",
      "Next": "hasNext__for(j in input.arr) 1",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
  },
}
`;

exports[`for loops 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__a = \`ai\`": Object {
      "InputPath": "$.heap0.string",
      "Next": "tail__for(i of [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__a = \`ai\` 1": Object {
      "InputPath": "$.heap2.string",
      "Next": "tail__for(i of input.arr)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__a = \`ai\` 2": Object {
      "InputPath": "$.heap5.string",
      "Next": "tail__for(i of await func()) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i of [1, 2, 3])",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = \`ai\`": Object {
      "Next": "1__a = \`ai\`",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.i)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "a = \`ai\` 1": Object {
      "Next": "1__a = \`ai\` 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.i)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "a = \`ai\` 2": Object {
      "Next": "1__a = \`ai\` 2",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.i)",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "for(i of [1, 2, 3])": Object {
      "Next": "for(i of [1, 2, 3]) 1",
      "Result": "x",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(i of [1, 2, 3]) 1": Object {
      "Next": "hasNext__for(i of [1, 2, 3]) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(i of await func())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "for(i of await func()) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "for(i of await func()) 1": Object {
      "InputPath": "$.heap4",
      "Next": "hasNext__for(i of await func()) 1",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "for(i of input.arr)": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "hasNext__for(i of input.arr)",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "hasNext__for(i of [1, 2, 3]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "for(i of input.arr)",
      "Type": "Choice",
    },
    "hasNext__for(i of await func()) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined 2",
          "Variable": "$.heap6[0]",
        },
      ],
      "Default": "return \\"madeit\\"",
      "Type": "Choice",
    },
    "hasNext__for(i of input.arr)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined 1",
          "Variable": "$.heap3[0]",
        },
      ],
      "Default": "for(i of await func())",
      "Type": "Choice",
    },
    "i = undefined": Object {
      "InputPath": "$.heap1[0]",
      "Next": "a = \`ai\`",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = undefined 1": Object {
      "InputPath": "$.heap3[0]",
      "Next": "a = \`ai\` 1",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = undefined 2": Object {
      "InputPath": "$.heap6[0]",
      "Next": "a = \`ai\` 2",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return \\"madeit\\"": Object {
      "End": true,
      "Result": "madeit",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i of [1, 2, 3]) 1": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i of [1, 2, 3]) 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__for(i of await func()) 1": Object {
      "InputPath": "$.heap6[1:]",
      "Next": "hasNext__for(i of await func()) 1",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "tail__for(i of input.arr)": Object {
      "InputPath": "$.heap3[1:]",
      "Next": "hasNext__for(i of input.arr)",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`for map conditional 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__b = [\\"b\\"].map(function(v))": Object {
      "InputPath": "$.heap3",
      "Next": "c = [\\"c\\"].map(function(v))",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "1__b = [\\"b\\"].map(function(v)) 1": Object {
      "ItemsPath": "$.heap2",
      "Iterator": Object {
        "StartAt": "for(i of [1, 2, 3])",
        "States": Object {
          "1__return \`vai\`": Object {
            "End": true,
            "InputPath": "$.heap0.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "for(i of [1, 2, 3])": Object {
            "Next": "hasNext__for(i of [1, 2, 3])",
            "Result": Array [
              1,
              2,
              3,
            ],
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "hasNext__for(i of [1, 2, 3])": Object {
            "Choices": Array [
              Object {
                "IsPresent": true,
                "Next": "i = undefined",
                "Variable": "$.heap1[0]",
              },
            ],
            "Default": "return \\"boo\\"",
            "Type": "Choice",
          },
          "i = undefined": Object {
            "InputPath": "$.heap1[0]",
            "Next": "if(i == 3)",
            "ResultPath": "$.i",
            "Type": "Pass",
          },
          "if(i == 3)": Object {
            "Choices": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.i",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.i",
                      },
                      Object {
                        "NumericEquals": 3,
                        "Variable": "$.i",
                      },
                    ],
                  },
                ],
                "Next": "return \`vai\`",
              },
            ],
            "Default": "tail__for(i of [1, 2, 3])",
            "Type": "Choice",
          },
          "return \\"boo\\"": Object {
            "End": true,
            "Result": "boo",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`vai\`": Object {
            "Next": "1__return \`vai\`",
            "Parameters": Object {
              "string.$": "States.Format('{}{}{}',$.v,$.a,$.i)",
            },
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
          "tail__for(i of [1, 2, 3])": Object {
            "InputPath": "$.heap1[1:]",
            "Next": "hasNext__for(i of [1, 2, 3])",
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__b = [\\"b\\"].map(function(v))",
      "Parameters": Object {
        "a.$": "$.a",
        "v.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap3",
      "Type": "Map",
    },
    "1__c = [\\"c\\"].map(function(v))": Object {
      "InputPath": "$.heap7",
      "Next": "d = await Promise.all([\\"d\\"].map(function(v)))",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "1__c = [\\"c\\"].map(function(v)) 1": Object {
      "ItemsPath": "$.heap6",
      "Iterator": Object {
        "StartAt": "for(i of input.arr)",
        "States": Object {
          "1__return \`vai\` 1": Object {
            "End": true,
            "InputPath": "$.heap4.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "for(i of input.arr)": Object {
            "InputPath": "$.fnl_context.input.arr",
            "Next": "hasNext__for(i of input.arr)",
            "ResultPath": "$.heap5",
            "Type": "Pass",
          },
          "hasNext__for(i of input.arr)": Object {
            "Choices": Array [
              Object {
                "IsPresent": true,
                "Next": "i = undefined 1",
                "Variable": "$.heap5[0]",
              },
            ],
            "Default": "return \\"boo\\" 1",
            "Type": "Choice",
          },
          "i = undefined 1": Object {
            "InputPath": "$.heap5[0]",
            "Next": "if(i == 3) 1",
            "ResultPath": "$.i",
            "Type": "Pass",
          },
          "if(i == 3) 1": Object {
            "Choices": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.i",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.i",
                      },
                      Object {
                        "NumericEquals": 3,
                        "Variable": "$.i",
                      },
                    ],
                  },
                ],
                "Next": "return \`vai\` 1",
              },
            ],
            "Default": "tail__for(i of input.arr)",
            "Type": "Choice",
          },
          "return \\"boo\\" 1": Object {
            "End": true,
            "Result": "boo",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`vai\` 1": Object {
            "Next": "1__return \`vai\` 1",
            "Parameters": Object {
              "string.$": "States.Format('{}{}{}',$.v,$.a,$.i)",
            },
            "ResultPath": "$.heap4",
            "Type": "Pass",
          },
          "tail__for(i of input.arr)": Object {
            "InputPath": "$.heap5[1:]",
            "Next": "hasNext__for(i of input.arr)",
            "ResultPath": "$.heap5",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__c = [\\"c\\"].map(function(v))",
      "Parameters": Object {
        "a.$": "$.a",
        "b.$": "$.b",
        "fnl_context.$": "$.fnl_context",
        "v.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap7",
      "Type": "Map",
    },
    "1__d = await Promise.all([\\"d\\"].map(function(v)))": Object {
      "InputPath": "$.heap12",
      "Next": "return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1",
      "ResultPath": "$.d",
      "Type": "Pass",
    },
    "1__d = await Promise.all([\\"d\\"].map(function(v))) 1": Object {
      "ItemsPath": "$.heap11",
      "Iterator": Object {
        "StartAt": "for(i of await func())",
        "States": Object {
          "1__return \`vai\` 2": Object {
            "End": true,
            "InputPath": "$.heap9.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "for(i of await func())": Object {
            "InputPath": "$.fnl_context.null",
            "Next": "for(i of await func()) 1",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap8",
            "Type": "Task",
          },
          "for(i of await func()) 1": Object {
            "InputPath": "$.heap8",
            "Next": "hasNext__for(i of await func()) 1",
            "ResultPath": "$.heap10",
            "Type": "Pass",
          },
          "hasNext__for(i of await func()) 1": Object {
            "Choices": Array [
              Object {
                "IsPresent": true,
                "Next": "i = undefined 2",
                "Variable": "$.heap10[0]",
              },
            ],
            "Default": "return \\"boo\\" 2",
            "Type": "Choice",
          },
          "i = undefined 2": Object {
            "InputPath": "$.heap10[0]",
            "Next": "if(i == 3) 2",
            "ResultPath": "$.i",
            "Type": "Pass",
          },
          "if(i == 3) 2": Object {
            "Choices": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.i",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.i",
                      },
                      Object {
                        "NumericEquals": 3,
                        "Variable": "$.i",
                      },
                    ],
                  },
                ],
                "Next": "return \`vai\` 2",
              },
            ],
            "Default": "tail__for(i of await func()) 1",
            "Type": "Choice",
          },
          "return \\"boo\\" 2": Object {
            "End": true,
            "Result": "boo",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`vai\` 2": Object {
            "Next": "1__return \`vai\` 2",
            "Parameters": Object {
              "string.$": "States.Format('{}{}{}',$.v,$.a,$.i)",
            },
            "ResultPath": "$.heap9",
            "Type": "Pass",
          },
          "tail__for(i of await func()) 1": Object {
            "InputPath": "$.heap10[1:]",
            "Next": "hasNext__for(i of await func()) 1",
            "ResultPath": "$.heap10",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__d = await Promise.all([\\"d\\"].map(function(v)))",
      "Parameters": Object {
        "a.$": "$.a",
        "b.$": "$.b",
        "c.$": "$.c",
        "fnl_context.$": "$.fnl_context",
        "v.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap12",
      "Type": "Map",
    },
    "1__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1": Object {
      "End": true,
      "InputPath": "$.heap19.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\`",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "\`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\`": Object {
      "Next": "1__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}',$.heap14.string,$.heap16.string,$.heap18.string)",
      },
      "ResultPath": "$.heap19",
      "Type": "Pass",
    },
    "append__c.join(\\"\\")": Object {
      "Next": "tail__c.join(\\"\\")",
      "Parameters": Object {
        "string.$": "States.Format('{}{}', $.heap16.string, $.heap15[0])",
      },
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "append__d.join(\\"\\")": Object {
      "Next": "tail__d.join(\\"\\")",
      "Parameters": Object {
        "string.$": "States.Format('{}{}', $.heap18.string, $.heap17[0])",
      },
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "append__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1": Object {
      "Next": "tail__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}', $.heap14.string, $.heap13[0])",
      },
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "b = [\\"b\\"].map(function(v))": Object {
      "Next": "1__b = [\\"b\\"].map(function(v)) 1",
      "Result": Array [
        "b",
      ],
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "c = [\\"c\\"].map(function(v))": Object {
      "Next": "1__c = [\\"c\\"].map(function(v)) 1",
      "Result": Array [
        "c",
      ],
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "c.join(\\"\\")": Object {
      "InputPath": "$.c",
      "Next": "hasNext__c.join(\\"\\")",
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "d = await Promise.all([\\"d\\"].map(function(v)))": Object {
      "Next": "1__d = await Promise.all([\\"d\\"].map(function(v))) 1",
      "Result": Array [
        "d",
      ],
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "d.join(\\"\\")": Object {
      "InputPath": "$.d",
      "Next": "hasNext__d.join(\\"\\")",
      "ResultPath": "$.heap17",
      "Type": "Pass",
    },
    "hasNext__c.join(\\"\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap15[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap16",
              },
            },
          ],
          "Next": "initValue__c.join(\\"\\")",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap15[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap16",
              },
            },
          ],
          "Next": "returnEmpty__c.join(\\"\\")",
        },
        Object {
          "IsPresent": true,
          "Next": "append__c.join(\\"\\")",
          "Variable": "$.heap15[0]",
        },
      ],
      "Default": "d.join(\\"\\")",
      "Type": "Choice",
    },
    "hasNext__d.join(\\"\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap17[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap18",
              },
            },
          ],
          "Next": "initValue__d.join(\\"\\")",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap17[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap18",
              },
            },
          ],
          "Next": "returnEmpty__d.join(\\"\\")",
        },
        Object {
          "IsPresent": true,
          "Next": "append__d.join(\\"\\")",
          "Variable": "$.heap17[0]",
        },
      ],
      "Default": "\`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\`",
      "Type": "Choice",
    },
    "hasNext__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap13[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap14",
              },
            },
          ],
          "Next": "initValue__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap13[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap14",
              },
            },
          ],
          "Next": "returnEmpty__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1",
        },
        Object {
          "IsPresent": true,
          "Next": "append__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1",
          "Variable": "$.heap13[0]",
        },
      ],
      "Default": "c.join(\\"\\")",
      "Type": "Choice",
    },
    "initValue__c.join(\\"\\")": Object {
      "InputPath": "$.heap15[0]",
      "Next": "tail__c.join(\\"\\")",
      "ResultPath": "$.heap16.string",
      "Type": "Pass",
    },
    "initValue__d.join(\\"\\")": Object {
      "InputPath": "$.heap17[0]",
      "Next": "tail__d.join(\\"\\")",
      "ResultPath": "$.heap18.string",
      "Type": "Pass",
    },
    "initValue__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1": Object {
      "InputPath": "$.heap13[0]",
      "Next": "tail__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1",
      "ResultPath": "$.heap14.string",
      "Type": "Pass",
    },
    "return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\`": Object {
      "Next": "b = [\\"b\\"].map(function(v))",
      "Result": "x",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1": Object {
      "InputPath": "$.b",
      "Next": "hasNext__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1",
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "returnEmpty__c.join(\\"\\")": Object {
      "Next": "d.join(\\"\\")",
      "Result": "",
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "returnEmpty__d.join(\\"\\")": Object {
      "Next": "\`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\`",
      "Result": "",
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "returnEmpty__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1": Object {
      "Next": "c.join(\\"\\")",
      "Result": "",
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "tail__c.join(\\"\\")": Object {
      "InputPath": "$.heap15[1:]",
      "Next": "hasNext__c.join(\\"\\")",
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "tail__d.join(\\"\\")": Object {
      "InputPath": "$.heap17[1:]",
      "Next": "hasNext__d.join(\\"\\")",
      "ResultPath": "$.heap17",
      "Type": "Pass",
    },
    "tail__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1": Object {
      "InputPath": "$.heap13[1:]",
      "Next": "hasNext__return \`b.join(\\"\\")c.join(\\"\\")d.join(\\"\\")\` 1",
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
  },
}
`;

exports[`for of 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await func({n: \`i\`, id: input.id})": Object {
      "Next": "tail__for(i of input.arr)",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "n.$": "$.heap0.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "1__await func({n: \`i\`, id: input.id}) 1": Object {
      "Next": "await func({n: \`j\`, id: input.id}) 1",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "n.$": "$.heap3.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "1__await func({n: \`j\`, id: input.id})": Object {
      "Next": "tail__for(i of input.arr) 1",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "n.$": "$.heap8.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap9",
      "Type": "Task",
    },
    "1__await func({n: \`j\`, id: input.id}) 1": Object {
      "Next": "tail__for(j of input.arr) 1",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "n.$": "$.heap5.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap6",
      "Type": "Task",
    },
    "1__item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id": Object {
      "InputPath": "$.heap11",
      "Next": "return item.Item.val.N",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i of input.arr)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await func({n: \`i\`, id: input.id})": Object {
      "Next": "1__await func({n: \`i\`, id: input.id})",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.i)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "await func({n: \`i\`, id: input.id}) 1": Object {
      "Next": "1__await func({n: \`i\`, id: input.id}) 1",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.i)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "await func({n: \`j\`, id: input.id})": Object {
      "Next": "1__await func({n: \`j\`, id: input.id})",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.j)",
      },
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "await func({n: \`j\`, id: input.id}) 1": Object {
      "Next": "1__await func({n: \`j\`, id: input.id}) 1",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.j)",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "for(i of input.arr)": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "hasNext__for(i of input.arr)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "for(i of input.arr) 1": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "hasNext__for(i of input.arr) 1",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "for(j of input.arr)": Object {
      "Next": "for(j of input.arr) 1",
      "Result": 1,
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "for(j of input.arr) 1": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "hasNext__for(j of input.arr) 1",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "hasNext__for(i of input.arr)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "for(i of input.arr) 1",
      "Type": "Choice",
    },
    "hasNext__for(i of input.arr) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i = undefined 1",
          "Variable": "$.heap10[0]",
        },
      ],
      "Default": "item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}},",
      "Type": "Choice",
    },
    "hasNext__for(j of input.arr) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "j",
          "Variable": "$.heap7[0]",
        },
      ],
      "Default": "await func({n: \`j\`, id: input.id})",
      "Type": "Choice",
    },
    "i = undefined": Object {
      "InputPath": "$.heap2[0]",
      "Next": "await func({n: \`i\`, id: input.id})",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = undefined 1": Object {
      "InputPath": "$.heap10[0]",
      "Next": "for(j of input.arr)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}},": Object {
      "Next": "1__item = await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id",
      "Parameters": Object {
        "ConsistentRead": true,
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap11",
      "Type": "Task",
    },
    "j": Object {
      "InputPath": "$.heap7[0]",
      "Next": "await func({n: \`i\`, id: input.id}) 1",
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "return item.Item.val.N": Object {
      "End": true,
      "InputPath": "$.item.Item.val.N",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i of input.arr)": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(i of input.arr)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "tail__for(i of input.arr) 1": Object {
      "InputPath": "$.heap10[1:]",
      "Next": "hasNext__for(i of input.arr) 1",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "tail__for(j of input.arr) 1": Object {
      "InputPath": "$.heap7[1:]",
      "Next": "hasNext__for(j of input.arr) 1",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
  },
}
`;

exports[`join 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return resultArr.join(\\"#\\")": Object {
      "InputPath": "$.heap8.arr",
      "Next": "return resultArr.join(\\"#\\") 1",
      "ResultPath": "$.resultArr",
      "Type": "Pass",
    },
    "1__return resultArr.join(\\"#\\") 1": Object {
      "End": true,
      "InputPath": "$.heap10.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return resultArr.join(\\"#\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)": Object {
      "Next": "hasNext__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)",
      "Result": Array [
        "d",
        "e",
        "f",
      ],
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "[[\\"a\\", \\"b\\", \\"c\\"].join(\\"/\\"), input.arr.join(\\"-\\"), input.arr.join(input.sep),": Object {
      "Next": "1__return resultArr.join(\\"#\\")",
      "Parameters": Object {
        "arr.$": "States.Array('a/b/c', $.heap1.string, $.heap3.string, $.heap5.string, '', $.heap7.string)",
      },
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "append__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)": Object {
      "Next": "tail__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}', $.heap5.string, $.fnl_context.input.sep, $.heap4[0])",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "append__input.arr.join()": Object {
      "Next": "tail__input.arr.join()",
      "Parameters": Object {
        "string.$": "States.Format('{},{}', $.heap7.string, $.heap6[0])",
      },
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "append__input.arr.join(input.sep)": Object {
      "Next": "tail__input.arr.join(input.sep)",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}', $.heap3.string, $.fnl_context.input.sep, $.heap2[0])",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "append__return resultArr.join(\\"#\\")": Object {
      "Next": "tail__return resultArr.join(\\"#\\")",
      "Parameters": Object {
        "string.$": "States.Format('{}-{}', $.heap1.string, $.heap0[0])",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "append__return resultArr.join(\\"#\\") 1": Object {
      "Next": "tail__return resultArr.join(\\"#\\") 1",
      "Parameters": Object {
        "string.$": "States.Format('{}#{}', $.heap10.string, $.heap9[0])",
      },
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "hasNext__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap5",
              },
            },
          ],
          "Next": "initValue__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap4[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap5",
              },
            },
          ],
          "Next": "returnEmpty__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)",
        },
        Object {
          "IsPresent": true,
          "Next": "append__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "input.arr.join()",
      "Type": "Choice",
    },
    "hasNext__input.arr.join()": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap6[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap7",
              },
            },
          ],
          "Next": "initValue__input.arr.join()",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap6[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap7",
              },
            },
          ],
          "Next": "returnEmpty__input.arr.join()",
        },
        Object {
          "IsPresent": true,
          "Next": "append__input.arr.join()",
          "Variable": "$.heap6[0]",
        },
      ],
      "Default": "[[\\"a\\", \\"b\\", \\"c\\"].join(\\"/\\"), input.arr.join(\\"-\\"), input.arr.join(input.sep),",
      "Type": "Choice",
    },
    "hasNext__input.arr.join(input.sep)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap3",
              },
            },
          ],
          "Next": "initValue__input.arr.join(input.sep)",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap2[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap3",
              },
            },
          ],
          "Next": "returnEmpty__input.arr.join(input.sep)",
        },
        Object {
          "IsPresent": true,
          "Next": "append__input.arr.join(input.sep)",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)",
      "Type": "Choice",
    },
    "hasNext__return resultArr.join(\\"#\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap1",
              },
            },
          ],
          "Next": "initValue__return resultArr.join(\\"#\\")",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap0[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap1",
              },
            },
          ],
          "Next": "returnEmpty__return resultArr.join(\\"#\\")",
        },
        Object {
          "IsPresent": true,
          "Next": "append__return resultArr.join(\\"#\\")",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "input.arr.join(input.sep)",
      "Type": "Choice",
    },
    "hasNext__return resultArr.join(\\"#\\") 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap9[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap10",
              },
            },
          ],
          "Next": "initValue__return resultArr.join(\\"#\\") 1",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap9[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap10",
              },
            },
          ],
          "Next": "returnEmpty__return resultArr.join(\\"#\\") 1",
        },
        Object {
          "IsPresent": true,
          "Next": "append__return resultArr.join(\\"#\\") 1",
          "Variable": "$.heap9[0]",
        },
      ],
      "Default": "1__return resultArr.join(\\"#\\") 1",
      "Type": "Choice",
    },
    "initValue__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)": Object {
      "InputPath": "$.heap4[0]",
      "Next": "tail__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "initValue__input.arr.join()": Object {
      "InputPath": "$.heap6[0]",
      "Next": "tail__input.arr.join()",
      "ResultPath": "$.heap7.string",
      "Type": "Pass",
    },
    "initValue__input.arr.join(input.sep)": Object {
      "InputPath": "$.heap2[0]",
      "Next": "tail__input.arr.join(input.sep)",
      "ResultPath": "$.heap3.string",
      "Type": "Pass",
    },
    "initValue__return resultArr.join(\\"#\\")": Object {
      "InputPath": "$.heap0[0]",
      "Next": "tail__return resultArr.join(\\"#\\")",
      "ResultPath": "$.heap1.string",
      "Type": "Pass",
    },
    "initValue__return resultArr.join(\\"#\\") 1": Object {
      "InputPath": "$.heap9[0]",
      "Next": "tail__return resultArr.join(\\"#\\") 1",
      "ResultPath": "$.heap10.string",
      "Type": "Pass",
    },
    "input.arr.join()": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "hasNext__input.arr.join()",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "input.arr.join(input.sep)": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "hasNext__input.arr.join(input.sep)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return resultArr.join(\\"#\\")": Object {
      "InputPath": "$.fnl_context.input.arr",
      "Next": "hasNext__return resultArr.join(\\"#\\")",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return resultArr.join(\\"#\\") 1": Object {
      "InputPath": "$.resultArr",
      "Next": "hasNext__return resultArr.join(\\"#\\") 1",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "returnEmpty__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)": Object {
      "Next": "input.arr.join()",
      "Result": "",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "returnEmpty__input.arr.join()": Object {
      "Next": "[[\\"a\\", \\"b\\", \\"c\\"].join(\\"/\\"), input.arr.join(\\"-\\"), input.arr.join(input.sep),",
      "Result": "",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "returnEmpty__input.arr.join(input.sep)": Object {
      "Next": "[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)",
      "Result": "",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "returnEmpty__return resultArr.join(\\"#\\")": Object {
      "Next": "input.arr.join(input.sep)",
      "Result": "",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "returnEmpty__return resultArr.join(\\"#\\") 1": Object {
      "Next": "1__return resultArr.join(\\"#\\") 1",
      "Result": "",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "tail__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__[\\"d\\", \\"e\\", \\"f\\"].join(input.sep)",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "tail__input.arr.join()": Object {
      "InputPath": "$.heap6[1:]",
      "Next": "hasNext__input.arr.join()",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "tail__input.arr.join(input.sep)": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__input.arr.join(input.sep)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "tail__return resultArr.join(\\"#\\")": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__return resultArr.join(\\"#\\")",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__return resultArr.join(\\"#\\") 1": Object {
      "InputPath": "$.heap9[1:]",
      "Next": "hasNext__return resultArr.join(\\"#\\") 1",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
  },
}
`;

exports[`json parse and stringify 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__obj = JSON.parse(str)": Object {
      "InputPath": "$.heap1.string",
      "Next": "return {str: str, obj: obj, a: obj.a} 1",
      "ResultPath": "$.obj",
      "Type": "Pass",
    },
    "1__return {str: str, obj: obj, a: obj.a}": Object {
      "InputPath": "$.heap0.string",
      "Next": "obj = JSON.parse(str)",
      "ResultPath": "$.str",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {str: str, obj: obj, a: obj.a}",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "obj = JSON.parse(str)": Object {
      "Next": "1__obj = JSON.parse(str)",
      "Parameters": Object {
        "string.$": "States.StringToJson($.str)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return {str: str, obj: obj, a: obj.a}": Object {
      "Next": "1__return {str: str, obj: obj, a: obj.a}",
      "Parameters": Object {
        "string.$": "States.JsonToString($.fnl_context.input)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return {str: str, obj: obj, a: obj.a} 1": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.obj.a",
        "obj.$": "$.obj",
        "str.$": "$.str",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__l2 = input.arr.map(function(x))": Object {
      "InputPath": "$.heap4",
      "Next": "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1",
      "ResultPath": "$.l2",
      "Type": "Pass",
    },
    "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`": Object {
      "InputPath": "$.heap2",
      "Next": "l2 = input.arr.map(function(x))",
      "ResultPath": "$.l",
      "Type": "Pass",
    },
    "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1": Object {
      "ItemsPath": "$.heap1",
      "Iterator": Object {
        "StartAt": "return \`nx\`",
        "States": Object {
          "1__return \`nx\`": Object {
            "End": true,
            "InputPath": "$.heap0.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`nx\`": Object {
            "Next": "1__return \`nx\`",
            "Parameters": Object {
              "string.$": "States.Format('n{}',$.x)",
            },
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "x.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1 1": Object {
      "End": true,
      "InputPath": "$.heap5.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "l2 = input.arr.map(function(x))": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "return \`nx\` 1",
        "States": Object {
          "1__return \`nx\` 1": Object {
            "End": true,
            "InputPath": "$.heap3.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`nx\` 1": Object {
            "Next": "1__return \`nx\` 1",
            "Parameters": Object {
              "string.$": "States.Format('n{}',$.x)",
            },
            "ResultPath": "$.heap3",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__l2 = input.arr.map(function(x))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "l.$": "$.l",
        "x.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1": Object {
      "Next": "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}{}{}{}',$.l[0],$.l[1],$.l[2],$.l2[0],$.l2[1],$.l2[2])",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`map uses input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__l2 = input.arr.map(function(x))": Object {
      "InputPath": "$.heap4",
      "Next": "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1",
      "ResultPath": "$.l2",
      "Type": "Pass",
    },
    "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`": Object {
      "InputPath": "$.heap2",
      "Next": "l2 = input.arr.map(function(x))",
      "ResultPath": "$.l",
      "Type": "Pass",
    },
    "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1": Object {
      "ItemsPath": "$.heap1",
      "Iterator": Object {
        "StartAt": "return \`input.prefixx\`",
        "States": Object {
          "1__return \`input.prefixx\`": Object {
            "End": true,
            "InputPath": "$.heap0.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`input.prefixx\`": Object {
            "Next": "1__return \`input.prefixx\`",
            "Parameters": Object {
              "string.$": "States.Format('{}{}',$.fnl_context.input.prefix,$.x)",
            },
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "x.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1 1": Object {
      "End": true,
      "InputPath": "$.heap5.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "l2 = input.arr.map(function(x))": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "return \`input.prefixx\` 1",
        "States": Object {
          "1__return \`input.prefixx\` 1": Object {
            "End": true,
            "InputPath": "$.heap3.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`input.prefixx\` 1": Object {
            "Next": "1__return \`input.prefixx\` 1",
            "Parameters": Object {
              "string.$": "States.Format('{}{}',$.fnl_context.input.prefix,$.x)",
            },
            "ResultPath": "$.heap3",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__l2 = input.arr.map(function(x))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "l.$": "$.l",
        "x.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\`": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1": Object {
      "Next": "1__return \`l[0]l[1]l[2]l2[0]l2[1]l2[2]\` 1 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}{}{}{}',$.l[0],$.l[1],$.l[2],$.l2[0],$.l2[1],$.l2[2])",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`map with dynamic for loops 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__a = \`ax\`": Object {
      "InputPath": "$.heap5.string",
      "Next": "tail__for(x of l) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__a = \`ax\` 1": Object {
      "InputPath": "$.heap7.string",
      "Next": "tail__for(x of l2)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__for(x of l)": Object {
      "InputPath": "$.heap2",
      "Next": "l2 = input.arr.map(function(x))",
      "ResultPath": "$.l",
      "Type": "Pass",
    },
    "1__for(x of l) 1": Object {
      "ItemsPath": "$.heap1",
      "Iterator": Object {
        "StartAt": "return \`nx\`",
        "States": Object {
          "1__return \`nx\`": Object {
            "End": true,
            "InputPath": "$.heap0.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`nx\`": Object {
            "Next": "1__return \`nx\`",
            "Parameters": Object {
              "string.$": "States.Format('n{}',$.x)",
            },
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__for(x of l)",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "x.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "1__l2 = input.arr.map(function(x))": Object {
      "InputPath": "$.heap4",
      "Next": "a = \\"\\"",
      "ResultPath": "$.l2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(x of l)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "for(x of l) 1",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \`ax\`": Object {
      "Next": "1__a = \`ax\`",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.x)",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "a = \`ax\` 1": Object {
      "Next": "1__a = \`ax\` 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.x)",
      },
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "for(x of l)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__for(x of l) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "for(x of l) 1": Object {
      "InputPath": "$.l",
      "Next": "hasNext__for(x of l) 1",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "for(x of l2)": Object {
      "InputPath": "$.l2",
      "Next": "hasNext__for(x of l2)",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "hasNext__for(x of l) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "x = undefined",
          "Variable": "$.heap6[0]",
        },
      ],
      "Default": "for(x of l2)",
      "Type": "Choice",
    },
    "hasNext__for(x of l2)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "x = undefined 1",
          "Variable": "$.heap8[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "l2 = input.arr.map(function(x))": Object {
      "ItemsPath": "$.fnl_context.input.arr",
      "Iterator": Object {
        "StartAt": "return \`nx\` 1",
        "States": Object {
          "1__return \`nx\` 1": Object {
            "End": true,
            "InputPath": "$.heap3.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`nx\` 1": Object {
            "Next": "1__return \`nx\` 1",
            "Parameters": Object {
              "string.$": "States.Format('n{}',$.x)",
            },
            "ResultPath": "$.heap3",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__l2 = input.arr.map(function(x))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "l.$": "$.l",
        "x.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(x of l) 1": Object {
      "InputPath": "$.heap6[1:]",
      "Next": "hasNext__for(x of l) 1",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "tail__for(x of l2)": Object {
      "InputPath": "$.heap8[1:]",
      "Next": "hasNext__for(x of l2)",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "x = undefined": Object {
      "InputPath": "$.heap6[0]",
      "Next": "a = \`ax\`",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
    "x = undefined 1": Object {
      "InputPath": "$.heap8[0]",
      "Next": "a = \`ax\` 1",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
  },
}
`;

exports[`overlapping variable with input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return {a: input.a, b: a}",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return {a: input.a, b: a}": Object {
      "Next": "return {a: input.a, b: a} 1",
      "Result": "2",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return {a: input.a, b: a} 1": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.fnl_context.input.a",
        "b.$": "$.a",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`simple 1`] = `
Object {
  "StartAt": "return \\"hello world\\"",
  "States": Object {
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`templates 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__result = await func(\`input.obj.str hello partOfTheTemplateString input.o": Object {
      "InputPath": "$.heap3",
      "Next": "return \`the result: result.str\` 1",
      "ResultPath": "$.result",
      "Type": "Pass",
    },
    "1__result = await func(\`input.obj.str hello partOfTheTemplateString input.o 1": Object {
      "InputPath": "$.heap2.string",
      "Next": "1__result = await func(\`input.obj.str hello partOfTheTemplateString input.o",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "1__return \`the result: result.str\`": Object {
      "InputPath": "$.heap1.string",
      "Next": "result = await func(\`input.obj.str hello partOfTheTemplateString input.obj.",
      "ResultPath": "$.partOfTheTemplateString",
      "Type": "Pass",
    },
    "1__return \`the result: result.str\` 1": Object {
      "End": true,
      "InputPath": "$.heap4.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return \`the result: result.str\`",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "\`hello input.obj.str2 ?? \\"default\\"\`": Object {
      "Next": "1__return \`the result: result.str\`",
      "Parameters": Object {
        "string.$": "States.Format('hello {}',$.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "result = await func(\`input.obj.str hello partOfTheTemplateString input.obj.": Object {
      "Next": "1__result = await func(\`input.obj.str hello partOfTheTemplateString input.o 1",
      "Parameters": Object {
        "string.$": "States.Format('{} hello {} {}',$.fnl_context.input.obj.str,$.partOfTheTemplateString,$.fnl_context.input.obj.items[0])",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return \`the result: result.str\`": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.obj.str2",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.obj.str2",
            },
          ],
          "Next": "takeLeft__return \`the result: result.str\`",
        },
      ],
      "Default": "takeRight__return \`the result: result.str\`",
      "Type": "Choice",
    },
    "return \`the result: result.str\` 1": Object {
      "Next": "1__return \`the result: result.str\` 1",
      "Parameters": Object {
        "string.$": "States.Format('the result: {}',$.result.str)",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "takeLeft__return \`the result: result.str\`": Object {
      "InputPath": "$.fnl_context.input.obj.str2",
      "Next": "\`hello input.obj.str2 ?? \\"default\\"\`",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "takeRight__return \`the result: result.str\`": Object {
      "Next": "\`hello input.obj.str2 ?? \\"default\\"\`",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`templates simple 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return \`x\` 1": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return \`x\`",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return \`x\`": Object {
      "InputPath": "$.fnl_context.input.str",
      "Next": "return \`x\` 1",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
    "return \`x\` 1": Object {
      "Next": "1__return \`x\` 1",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.x)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`ternary 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {true: if(input.t), false: if(input.f), constantTrue: if(true), c": Object {
      "End": true,
      "Parameters": Object {
        "constantFalse.$": "$.heap10",
        "constantTrue.$": "$.heap9",
        "false.$": "$.heap8",
        "result.$": "$.heap12",
        "true.$": "$.heap7",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.t)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "assign__doFalse__if(input.f)": Object {
      "InputPath": "$.heap3",
      "Next": "if(input.t) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "assign__doFalse__if(input.t) 1": Object {
      "InputPath": "$.heap5",
      "Next": "return {true: if(input.t), false: if(input.f), constantTrue: if(true), cons",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "assign__doTrue__if(input.f)": Object {
      "InputPath": "$.heap2",
      "Next": "if(input.t) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "assign__doTrue__if(input.t)": Object {
      "InputPath": "$.heap0",
      "Next": "if(input.f)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}}}).Item.": Object {
      "Next": "await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}}}).Item. 1",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap11",
      "Type": "Task",
    },
    "await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}}}).Item. 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap11.Item.val.N",
            },
            Object {
              "IsNull": false,
              "Variable": "$.heap11.Item.val.N",
            },
          ],
          "Next": "takeLeft__await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id",
        },
      ],
      "Default": "takeRight__await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.i",
      "Type": "Choice",
    },
    "doFalse__if(false)": Object {
      "Next": "await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}}}).Item.",
      "Result": "d",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "doFalse__if(input.f)": Object {
      "Next": "assign__doFalse__if(input.f)",
      "Parameters": Object {
        "ExpressionAttributeValues": Object {
          ":inc": Object {
            "N": "3",
          },
          ":start": Object {
            "N": "0",
          },
        },
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
        "UpdateExpression": "SET val = if_not_exists(val, :start) + :inc",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "doFalse__if(input.f) 1": Object {
      "Next": "if(true)",
      "Result": "b",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "doFalse__if(input.t)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "if(input.f)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "doFalse__if(input.t) 1": Object {
      "Next": "assign__doFalse__if(input.t) 1",
      "Parameters": Object {
        "ExpressionAttributeValues": Object {
          ":inc": Object {
            "N": "4",
          },
          ":start": Object {
            "N": "0",
          },
        },
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
        "UpdateExpression": "SET val = if_not_exists(val, :start) + :inc",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap5",
      "Type": "Task",
    },
    "doFalse__if(true)": Object {
      "Next": "if(false)",
      "Result": "d",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "doFalse__return {true: if(input.t), false: if(input.f), constantTrue: if(tr": Object {
      "Next": "if(input.f) 1",
      "Result": "b",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "doTrue__if(false)": Object {
      "Next": "await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id}}}).Item.",
      "Result": "c",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "doTrue__if(input.f)": Object {
      "Next": "assign__doTrue__if(input.f)",
      "Parameters": Object {
        "ExpressionAttributeValues": Object {
          ":inc": Object {
            "N": "2",
          },
          ":start": Object {
            "N": "0",
          },
        },
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
        "UpdateExpression": "SET val = if_not_exists(val, :start) + :inc",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "doTrue__if(input.f) 1": Object {
      "Next": "if(true)",
      "Result": "a",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "doTrue__if(input.t)": Object {
      "Next": "assign__doTrue__if(input.t)",
      "Parameters": Object {
        "ExpressionAttributeValues": Object {
          ":inc": Object {
            "N": "1",
          },
          ":start": Object {
            "N": "0",
          },
        },
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
        "UpdateExpression": "SET val = if_not_exists(val, :start) + :inc",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "doTrue__if(input.t) 1": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "return {true: if(input.t), false: if(input.f), constantTrue: if(true), cons",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "doTrue__if(true)": Object {
      "Next": "if(false)",
      "Result": "c",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "doTrue__return {true: if(input.t), false: if(input.f), constantTrue: if(tru": Object {
      "Next": "if(input.f) 1",
      "Result": "a",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "if(false)": Object {
      "Choices": Array [
        Object {
          "IsNull": true,
          "Next": "doTrue__if(false)",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "doFalse__if(false)",
      "Type": "Choice",
    },
    "if(input.f)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.f",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.f",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.f",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.f",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.fnl_context.input.f",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.f",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.f",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.fnl_context.input.f",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.f",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.fnl_context.input.f",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "doTrue__if(input.f)",
        },
      ],
      "Default": "doFalse__if(input.f)",
      "Type": "Choice",
    },
    "if(input.f) 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.f",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.f",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.f",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.f",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.fnl_context.input.f",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.f",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.f",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.fnl_context.input.f",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.f",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.fnl_context.input.f",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "doTrue__if(input.f) 1",
        },
      ],
      "Default": "doFalse__if(input.f) 1",
      "Type": "Choice",
    },
    "if(input.t)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.t",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.t",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.t",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.fnl_context.input.t",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.t",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.fnl_context.input.t",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "doTrue__if(input.t)",
        },
      ],
      "Default": "doFalse__if(input.t)",
      "Type": "Choice",
    },
    "if(input.t) 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.t",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.t",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.t",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.fnl_context.input.t",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.t",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.fnl_context.input.t",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "doTrue__if(input.t) 1",
        },
      ],
      "Default": "doFalse__if(input.t) 1",
      "Type": "Choice",
    },
    "if(true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "doTrue__if(true)",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "doFalse__if(true)",
      "Type": "Choice",
    },
    "return {true: if(input.t), false: if(input.f), constantTrue: if(true), cons": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.t",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.t",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.t",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.fnl_context.input.t",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.t",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.fnl_context.input.t",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.fnl_context.input.t",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "doTrue__return {true: if(input.t), false: if(input.f), constantTrue: if(tru",
        },
      ],
      "Default": "doFalse__return {true: if(input.t), false: if(input.f), constantTrue: if(tr",
      "Type": "Choice",
    },
    "takeLeft__await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.id": Object {
      "InputPath": "$.heap11.Item.val.N",
      "Next": "1__return {true: if(input.t), false: if(input.f), constantTrue: if(true), c",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "takeRight__await $AWS.DynamoDB.GetItem({Table: table, Key: {id: {S: input.i": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return {true: if(input.t), false: if(input.f), constantTrue: if(true), c",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
  },
}
`;

exports[`throw catch finally 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.map([1], function())": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 10",
          "ResultPath": "$.err",
        },
      ],
      "ItemsPath": "$.heap20",
      "Iterator": Object {
        "StartAt": "return func()",
        "States": Object {
          "1__return func()": Object {
            "End": true,
            "InputPath": "$.heap19",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return func()": Object {
            "InputPath": "$.fnl_context.null",
            "Next": "1__return func()",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap19",
            "Type": "Task",
          },
        },
      },
      "Next": "try 11",
      "Parameters": Object {
        "a.$": "$.a",
        "fnl_context.$": "$.fnl_context",
      },
      "ResultPath": "$.heap21",
      "Type": "Map",
    },
    "1__a = \`afinally1\`": Object {
      "InputPath": "$.heap3.string",
      "Next": "try 3",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__a = \`afinally2\`": Object {
      "InputPath": "$.heap5.string",
      "Next": "try 4",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch(err)": Object {
      "InputPath": "$.heap9.string",
      "Next": "try 6",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch(err) 1": Object {
      "InputPath": "$.heap12.string",
      "Next": "try 7",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch(err) 2": Object {
      "InputPath": "$.heap16.string",
      "Next": "try 9",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch(err) 3": Object {
      "InputPath": "$.heap18.string",
      "Next": "try 10",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch(err) 4": Object {
      "InputPath": "$.heap22.string",
      "Next": "try 11",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch(err) 5": Object {
      "InputPath": "$.heap26.string",
      "Next": "return a",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch__try": Object {
      "InputPath": "$.heap0.string",
      "Next": "try 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch__try 1": Object {
      "InputPath": "$.heap1.string",
      "Next": "try 2",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch__try 10": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err) 4",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__catch__try 11": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err) 5",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__catch__try 2": Object {
      "InputPath": "$.heap2.string",
      "Next": "a = \`afinally1\`",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch__try 4": Object {
      "InputPath": "$.heap7.string",
      "Next": "try 5",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch__try 5": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__catch__try 6": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err) 1",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__catch__try 7": Object {
      "InputPath": "$.heap14.string",
      "Next": "try 8",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__catch__try 8": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err) 2",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__catch__try 9": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err) 3",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.0_tmp",
        },
      ],
      "Default": "try 8",
      "Type": "Choice",
    },
    "1__finally 1": Object {
      "InputPath": "$.heap13.string",
      "Next": "1__finally",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__try 11": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 11",
          "ResultPath": "$.err",
        },
      ],
      "ItemsPath": "$.heap24",
      "Iterator": Object {
        "StartAt": "return func() 1",
        "States": Object {
          "1__return func() 1": Object {
            "End": true,
            "InputPath": "$.heap23",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return func() 1": Object {
            "InputPath": "$.fnl_context.null",
            "Next": "1__return func() 1",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap23",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return a",
      "Parameters": Object {
        "a.$": "$.a",
        "fnl_context.$": "$.fnl_context",
      },
      "ResultPath": "$.heap25",
      "Type": "Map",
    },
    "1__try 3": Object {
      "InputPath": "$.heap4.string",
      "Next": "a = \`afinally2\`",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "1__try 6": Object {
      "InputPath": "$.heap11",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__try 6",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap11",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "throw new Error(\\"Error1\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "_ = undefined": Object {
      "InputPath": "$.heap11[0].index",
      "Next": "assignValue___ = undefined",
      "ResultPath": "$._",
      "Type": "Pass",
    },
    "a = \`afinally1\`": Object {
      "Next": "1__a = \`afinally1\`",
      "Parameters": Object {
        "string.$": "States.Format('{}finally1',$.a)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "a = \`afinally2\`": Object {
      "Next": "1__a = \`afinally2\`",
      "Parameters": Object {
        "string.$": "States.Format('{}finally2',$.a)",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "assignValue___ = undefined": Object {
      "InputPath": "$.heap11[0].item",
      "Next": "await func()",
      "ResultPath": "$.0___",
      "Type": "Pass",
    },
    "await func()": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 6",
          "ResultPath": "$.err",
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "tail__try 6",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap10",
      "Type": "Task",
    },
    "await func() 1": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 8",
          "ResultPath": "$.err",
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "try 8",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap15",
      "Type": "Task",
    },
    "await func() 2": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 9",
          "ResultPath": "$.err",
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "try 9",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap17",
      "Type": "Task",
    },
    "catch(err)": Object {
      "Next": "1__catch(err)",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.err.errorMessage)",
      },
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "catch(err) 1": Object {
      "Next": "1__catch(err) 1",
      "Parameters": Object {
        "string.$": "States.Format('{}for{}',$.a,$.err.errorMessage)",
      },
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "catch(err) 2": Object {
      "Next": "1__catch(err) 2",
      "Parameters": Object {
        "string.$": "States.Format('{}while{}',$.a,$.err.errorMessage)",
      },
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "catch(err) 3": Object {
      "Next": "1__catch(err) 3",
      "Parameters": Object {
        "string.$": "States.Format('{}do{}',$.a,$.err.errorMessage)",
      },
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "catch(err) 4": Object {
      "Next": "1__catch(err) 4",
      "Parameters": Object {
        "string.$": "States.Format('{}sfnmap{}',$.a,$.err.errorMessage)",
      },
      "ResultPath": "$.heap22",
      "Type": "Pass",
    },
    "catch(err) 5": Object {
      "Next": "1__catch(err) 5",
      "Parameters": Object {
        "string.$": "States.Format('{}arrmap{}',$.a,$.err.errorMessage)",
      },
      "ResultPath": "$.heap26",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "string.$": "States.Format('{}error1',$.a)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "catch__try 1": Object {
      "Next": "1__catch__try 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.err.message)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "catch__try 10": Object {
      "Next": "1__catch__try 10",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try 11": Object {
      "Next": "1__catch__try 11",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try 2": Object {
      "Next": "1__catch__try 2",
      "Parameters": Object {
        "string.$": "States.Format('{}error3',$.a)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "catch__try 4": Object {
      "Next": "1__catch__try 4",
      "Parameters": Object {
        "string.$": "States.Format('{}error4',$.a)",
      },
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "catch__try 5": Object {
      "Next": "1__catch__try 5",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try 6": Object {
      "Next": "1__catch__try 6",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try 7": Object {
      "Next": "1__catch__try 7",
      "Parameters": Object {
        "string.$": "States.Format('{}recatch{}',$.a,$.err.message)",
      },
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "catch__try 7 1": Object {
      "Next": "finally",
      "Result": Object {
        "message": "error6",
      },
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "catch__try 8": Object {
      "Next": "1__catch__try 8",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try 9": Object {
      "Next": "1__catch__try 9",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally 1",
      "Parameters": Object {
        "string.$": "States.Format('{}finally',$.a)",
      },
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "hasNext__try 6": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "_ = undefined",
          "Variable": "$.heap11[0]",
        },
      ],
      "Default": "try 7",
      "Type": "Choice",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__try 6": Object {
      "InputPath": "$.heap11[1:]",
      "Next": "hasNext__try 6",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "throw new Error(\\"Error1\\")": Object {
      "Next": "try",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "InputPath": "$.0_tmp",
      "Next": "catch__try 7",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "Error1",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try 1": Object {
      "Next": "catch__try 1",
      "Result": Object {
        "message": "Error2",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "try 10": Object {
      "Next": "$SFN.map([1], function())",
      "Result": Array [
        1,
      ],
      "ResultPath": "$.heap20",
      "Type": "Pass",
    },
    "try 11": Object {
      "Next": "1__try 11",
      "Result": Array [
        1,
      ],
      "ResultPath": "$.heap24",
      "Type": "Pass",
    },
    "try 2": Object {
      "Next": "catch__try 2",
      "Result": Object {},
      "ResultPath": null,
      "Type": "Pass",
    },
    "try 3": Object {
      "Next": "1__try 3",
      "Parameters": Object {
        "string.$": "States.Format('{}set',$.a)",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "try 4": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 4",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "try 5",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap6",
      "Type": "Task",
    },
    "try 5": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 5",
          "ResultPath": "$.err",
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "try 6",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap8",
      "Type": "Task",
    },
    "try 6": Object {
      "Next": "1__try 6",
      "Result": Array [
        1,
      ],
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "try 7": Object {
      "Next": "catch__try 7 1",
      "Result": Object {
        "message": "error5",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try 8": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "await func() 1",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "try 9",
      "Type": "Choice",
    },
    "try 9": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "await func() 2",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "try 10",
      "Type": "Choice",
    },
  },
}
`;

exports[`typeof 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input": Object {
      "End": true,
      "Parameters": Object {
        "arrType.$": "$.heap12",
        "booleanType.$": "$.heap5",
        "isBool.$": "$.heap4",
        "isNumber.$": "$.heap7",
        "isObject.$": "$.heap10",
        "isString.$": "$.heap1",
        "numberType.$": "$.heap8",
        "objectType.$": "$.heap11",
        "stringType.$": "$.heap2",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "StringEquals": "string",
                  "Variable": "$.heap0",
                },
              ],
            },
          ],
          "Next": "assignTrue__1__return {isString: typeof input.str == \\"string\\", stringType: ",
        },
      ],
      "Default": "assignFalse__1__return {isString: typeof input.str == \\"string\\", stringType:",
      "Type": "Choice",
    },
    "1__typeof input.bool == \\"boolean\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap3",
                },
                Object {
                  "StringEquals": "boolean",
                  "Variable": "$.heap3",
                },
              ],
            },
          ],
          "Next": "assignTrue__1__typeof input.bool == \\"boolean\\"",
        },
      ],
      "Default": "assignFalse__1__typeof input.bool == \\"boolean\\"",
      "Type": "Choice",
    },
    "1__typeof input.num == \\"number\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap6",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap6",
                },
                Object {
                  "StringEquals": "number",
                  "Variable": "$.heap6",
                },
              ],
            },
          ],
          "Next": "assignTrue__1__typeof input.num == \\"number\\"",
        },
      ],
      "Default": "assignFalse__1__typeof input.num == \\"number\\"",
      "Type": "Choice",
    },
    "1__typeof input.obj == \\"object\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap9",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap9",
                },
                Object {
                  "StringEquals": "object",
                  "Variable": "$.heap9",
                },
              ],
            },
          ],
          "Next": "assignTrue__1__typeof input.obj == \\"object\\"",
        },
      ],
      "Default": "assignFalse__1__typeof input.obj == \\"object\\"",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {isString: typeof input.str == \\"string\\", stringType: typeof input.st",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "assignFalse__1__return {isString: typeof input.str == \\"string\\", stringType:": Object {
      "Next": "input.str",
      "Result": false,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "assignFalse__1__typeof input.bool == \\"boolean\\"": Object {
      "Next": "input.bool",
      "Result": false,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "assignFalse__1__typeof input.num == \\"number\\"": Object {
      "Next": "input.num",
      "Result": false,
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "assignFalse__1__typeof input.obj == \\"object\\"": Object {
      "Next": "input.obj",
      "Result": false,
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "assignTrue__1__return {isString: typeof input.str == \\"string\\", stringType: ": Object {
      "Next": "input.str",
      "Result": true,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "assignTrue__1__typeof input.bool == \\"boolean\\"": Object {
      "Next": "input.bool",
      "Result": true,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "assignTrue__1__typeof input.num == \\"number\\"": Object {
      "Next": "input.num",
      "Result": true,
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "assignTrue__1__typeof input.obj == \\"object\\"": Object {
      "Next": "input.obj",
      "Result": true,
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "boolean__input.arr": Object {
      "Next": "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input",
      "Result": "boolean",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "boolean__input.bool": Object {
      "Next": "typeof input.num == \\"number\\"",
      "Result": "boolean",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "boolean__input.num": Object {
      "Next": "typeof input.obj == \\"object\\"",
      "Result": "boolean",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "boolean__input.obj": Object {
      "Next": "input.arr",
      "Result": "boolean",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "boolean__input.str": Object {
      "Next": "typeof input.bool == \\"boolean\\"",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__return {isString: typeof input.str == \\"string\\", stringType: typeof": Object {
      "Next": "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input 1",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__typeof input.bool == \\"boolean\\"": Object {
      "Next": "1__typeof input.bool == \\"boolean\\"",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__typeof input.num == \\"number\\"": Object {
      "Next": "1__typeof input.num == \\"number\\"",
      "Result": "boolean",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "boolean__typeof input.obj == \\"object\\"": Object {
      "Next": "1__typeof input.obj == \\"object\\"",
      "Result": "boolean",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "input.arr": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.arr",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.arr",
            },
          ],
          "Next": "string__input.arr",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.arr",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.arr",
            },
          ],
          "Next": "boolean__input.arr",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.arr",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.arr",
            },
          ],
          "Next": "number__input.arr",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.arr",
          "Variable": "$.fnl_context.input.arr",
        },
      ],
      "Default": "undefined__input.arr",
      "Type": "Choice",
    },
    "input.bool": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.bool",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.bool",
            },
          ],
          "Next": "string__input.bool",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.bool",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.bool",
            },
          ],
          "Next": "boolean__input.bool",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.bool",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.bool",
            },
          ],
          "Next": "number__input.bool",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.bool",
          "Variable": "$.fnl_context.input.bool",
        },
      ],
      "Default": "undefined__input.bool",
      "Type": "Choice",
    },
    "input.num": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.num",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.num",
            },
          ],
          "Next": "string__input.num",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.num",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.num",
            },
          ],
          "Next": "boolean__input.num",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.num",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.num",
            },
          ],
          "Next": "number__input.num",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.num",
          "Variable": "$.fnl_context.input.num",
        },
      ],
      "Default": "undefined__input.num",
      "Type": "Choice",
    },
    "input.obj": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.obj",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.obj",
            },
          ],
          "Next": "string__input.obj",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.obj",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.obj",
            },
          ],
          "Next": "boolean__input.obj",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.obj",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.obj",
            },
          ],
          "Next": "number__input.obj",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.obj",
          "Variable": "$.fnl_context.input.obj",
        },
      ],
      "Default": "undefined__input.obj",
      "Type": "Choice",
    },
    "input.str": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.str",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.str",
            },
          ],
          "Next": "string__input.str",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.str",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.str",
            },
          ],
          "Next": "boolean__input.str",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.str",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.str",
            },
          ],
          "Next": "number__input.str",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.str",
          "Variable": "$.fnl_context.input.str",
        },
      ],
      "Default": "undefined__input.str",
      "Type": "Choice",
    },
    "number__input.arr": Object {
      "Next": "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input",
      "Result": "number",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "number__input.bool": Object {
      "Next": "typeof input.num == \\"number\\"",
      "Result": "number",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "number__input.num": Object {
      "Next": "typeof input.obj == \\"object\\"",
      "Result": "number",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "number__input.obj": Object {
      "Next": "input.arr",
      "Result": "number",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "number__input.str": Object {
      "Next": "typeof input.bool == \\"boolean\\"",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__return {isString: typeof input.str == \\"string\\", stringType: typeof ": Object {
      "Next": "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input 1",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__typeof input.bool == \\"boolean\\"": Object {
      "Next": "1__typeof input.bool == \\"boolean\\"",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__typeof input.num == \\"number\\"": Object {
      "Next": "1__typeof input.num == \\"number\\"",
      "Result": "number",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "number__typeof input.obj == \\"object\\"": Object {
      "Next": "1__typeof input.obj == \\"object\\"",
      "Result": "number",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "object__input.arr": Object {
      "Next": "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input",
      "Result": "object",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "object__input.bool": Object {
      "Next": "typeof input.num == \\"number\\"",
      "Result": "object",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "object__input.num": Object {
      "Next": "typeof input.obj == \\"object\\"",
      "Result": "object",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "object__input.obj": Object {
      "Next": "input.arr",
      "Result": "object",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "object__input.str": Object {
      "Next": "typeof input.bool == \\"boolean\\"",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__return {isString: typeof input.str == \\"string\\", stringType: typeof ": Object {
      "Next": "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input 1",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__typeof input.bool == \\"boolean\\"": Object {
      "Next": "1__typeof input.bool == \\"boolean\\"",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__typeof input.num == \\"number\\"": Object {
      "Next": "1__typeof input.num == \\"number\\"",
      "Result": "object",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "object__typeof input.obj == \\"object\\"": Object {
      "Next": "1__typeof input.obj == \\"object\\"",
      "Result": "object",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "return {isString: typeof input.str == \\"string\\", stringType: typeof input.st": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.str",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.str",
            },
          ],
          "Next": "string__return {isString: typeof input.str == \\"string\\", stringType: typeof ",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.str",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.str",
            },
          ],
          "Next": "boolean__return {isString: typeof input.str == \\"string\\", stringType: typeof",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.str",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.str",
            },
          ],
          "Next": "number__return {isString: typeof input.str == \\"string\\", stringType: typeof ",
        },
        Object {
          "IsPresent": true,
          "Next": "object__return {isString: typeof input.str == \\"string\\", stringType: typeof ",
          "Variable": "$.fnl_context.input.str",
        },
      ],
      "Default": "undefined__return {isString: typeof input.str == \\"string\\", stringType: type",
      "Type": "Choice",
    },
    "string__input.arr": Object {
      "Next": "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input",
      "Result": "string",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "string__input.bool": Object {
      "Next": "typeof input.num == \\"number\\"",
      "Result": "string",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "string__input.num": Object {
      "Next": "typeof input.obj == \\"object\\"",
      "Result": "string",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "string__input.obj": Object {
      "Next": "input.arr",
      "Result": "string",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "string__input.str": Object {
      "Next": "typeof input.bool == \\"boolean\\"",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__return {isString: typeof input.str == \\"string\\", stringType: typeof ": Object {
      "Next": "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input 1",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__typeof input.bool == \\"boolean\\"": Object {
      "Next": "1__typeof input.bool == \\"boolean\\"",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__typeof input.num == \\"number\\"": Object {
      "Next": "1__typeof input.num == \\"number\\"",
      "Result": "string",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "string__typeof input.obj == \\"object\\"": Object {
      "Next": "1__typeof input.obj == \\"object\\"",
      "Result": "string",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "typeof input.bool == \\"boolean\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.bool",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.bool",
            },
          ],
          "Next": "string__typeof input.bool == \\"boolean\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.bool",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.bool",
            },
          ],
          "Next": "boolean__typeof input.bool == \\"boolean\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.bool",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.bool",
            },
          ],
          "Next": "number__typeof input.bool == \\"boolean\\"",
        },
        Object {
          "IsPresent": true,
          "Next": "object__typeof input.bool == \\"boolean\\"",
          "Variable": "$.fnl_context.input.bool",
        },
      ],
      "Default": "undefined__typeof input.bool == \\"boolean\\"",
      "Type": "Choice",
    },
    "typeof input.num == \\"number\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.num",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.num",
            },
          ],
          "Next": "string__typeof input.num == \\"number\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.num",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.num",
            },
          ],
          "Next": "boolean__typeof input.num == \\"number\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.num",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.num",
            },
          ],
          "Next": "number__typeof input.num == \\"number\\"",
        },
        Object {
          "IsPresent": true,
          "Next": "object__typeof input.num == \\"number\\"",
          "Variable": "$.fnl_context.input.num",
        },
      ],
      "Default": "undefined__typeof input.num == \\"number\\"",
      "Type": "Choice",
    },
    "typeof input.obj == \\"object\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.obj",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.obj",
            },
          ],
          "Next": "string__typeof input.obj == \\"object\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.obj",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.obj",
            },
          ],
          "Next": "boolean__typeof input.obj == \\"object\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.obj",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.obj",
            },
          ],
          "Next": "number__typeof input.obj == \\"object\\"",
        },
        Object {
          "IsPresent": true,
          "Next": "object__typeof input.obj == \\"object\\"",
          "Variable": "$.fnl_context.input.obj",
        },
      ],
      "Default": "undefined__typeof input.obj == \\"object\\"",
      "Type": "Choice",
    },
    "undefined__input.arr": Object {
      "Next": "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input",
      "Result": "undefined",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "undefined__input.bool": Object {
      "Next": "typeof input.num == \\"number\\"",
      "Result": "undefined",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "undefined__input.num": Object {
      "Next": "typeof input.obj == \\"object\\"",
      "Result": "undefined",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "undefined__input.obj": Object {
      "Next": "input.arr",
      "Result": "undefined",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "undefined__input.str": Object {
      "Next": "typeof input.bool == \\"boolean\\"",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__return {isString: typeof input.str == \\"string\\", stringType: type": Object {
      "Next": "1__return {isString: typeof input.str == \\"string\\", stringType: typeof input 1",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__typeof input.bool == \\"boolean\\"": Object {
      "Next": "1__typeof input.bool == \\"boolean\\"",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__typeof input.num == \\"number\\"": Object {
      "Next": "1__typeof input.num == \\"number\\"",
      "Result": "undefined",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "undefined__typeof input.obj == \\"object\\"": Object {
      "Next": "1__typeof input.obj == \\"object\\"",
      "Result": "undefined",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
  },
}
`;
