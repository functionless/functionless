// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`all observers of a free variable share the same reference 1`] = `
"// <stdin>
var v3 = 0;
var v2 = function up() {
  v3 += 2;
};
var v4 = {};
v2.prototype = v4;
var v1 = v2;
var v6 = function down() {
  v3 -= 1;
};
var v7 = {};
v6.prototype = v7;
var v5 = v6;
var v0 = () => {
  v1();
  v5();
  return v3;
};
exports.handler = v0;
"
`;

exports[`all observers of a free variable share the same reference even when two instances 1`] = `
"// <stdin>
var v2 = [];
var v6 = 0;
var v5 = function up() {
  v6 += 2;
};
var v7 = {};
v5.prototype = v7;
var v4 = v5;
var v9 = function down() {
  v6 -= 1;
};
var v10 = {};
v9.prototype = v10;
var v8 = v9;
var v3 = () => {
  v4();
  v8();
  return v6;
};
var v14 = 0;
var v13 = function up2() {
  v14 += 2;
};
var v15 = {};
v13.prototype = v15;
var v12 = v13;
var v17 = function down2() {
  v14 -= 1;
};
var v18 = {};
v17.prototype = v18;
var v16 = v17;
var v11 = () => {
  v12();
  v16();
  return v14;
};
v2.push(v3, v11);
var v1 = v2;
var v0 = () => {
  return v1.map((closure) => {
    return closure();
  });
};
exports.handler = v0;
"
`;

exports[`avoid name collision with a closure's lexical scope 1`] = `
"// <stdin>
var v6 = 0;
var v5 = class v1 {
  foo() {
    return v6 += 1;
  }
};
var v4 = v5;
var v3 = class v2 extends v4 {
};
var v12 = v3;
var v0 = () => {
  const v32 = new v12();
  return v32.foo();
};
exports.handler = v0;
"
`;

exports[`instantiating the AWS SDK 1`] = `
"// <stdin>
var v2 = require(\\"aws-sdk\\");
var v3 = v2;
var v1 = v3;
var v0 = () => {
  const client = new v1.DynamoDB();
  return client.config.endpoint;
};
exports.handler = v0;
"
`;

exports[`instantiating the AWS SDK v3 1`] = `
"var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  \\"node_modules/tslib/tslib.js\\"(exports2, module2) {
    var __extends;
    var __assign;
    var __rest;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter;
    var __generator;
    var __exportStar;
    var __values;
    var __read;
    var __spread;
    var __spreadArrays;
    var __spreadArray;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __classPrivateFieldIn;
    var __createBinding;
    (function(factory) {
      var root = typeof global === \\"object\\" ? global : typeof self === \\"object\\" ? self : typeof this === \\"object\\" ? this : {};
      if (typeof define === \\"function\\" && define.amd) {
        define(\\"tslib\\", [\\"exports\\"], function(exports3) {
          factory(createExporter(root, createExporter(exports3)));
        });
      } else if (typeof module2 === \\"object\\" && typeof module2.exports === \\"object\\") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports3, previous) {
        if (exports3 !== root) {
          if (typeof Object.create === \\"function\\") {
            Object.defineProperty(exports3, \\"__esModule\\", { value: true });
          } else {
            exports3.__esModule = true;
          }
        }
        return function(id, v) {
          return exports3[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== \\"function\\" && b !== null)
          throw new TypeError(\\"Class extends value \\" + String(b) + \\" is not a constructor or null\\");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      __rest = function(s, e) {
        var t = {};
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === \\"function\\")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === \\"object\\" && typeof Reflect.decorate === \\"function\\")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === \\"object\\" && typeof Reflect.metadata === \\"function\\")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator[\\"throw\\"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), \\"throw\\": verb(1), \\"return\\": verb(2) }, typeof Symbol === \\"function\\" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError(\\"Generator is already executing.\\");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y[\\"return\\"] : op[0] ? y[\\"throw\\"] || ((t = y[\\"return\\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== \\"default\\" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || (\\"get\\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values = function(o) {
        var s = typeof Symbol === \\"function\\" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === \\"number\\")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s ? \\"Object is not iterable.\\" : \\"Symbol.iterator is not defined.\\");
      };
      __read = function(o, n) {
        var m = typeof Symbol === \\"function\\" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error) {
          e = { error };
        } finally {
          try {
            if (r && !r.done && (m = i[\\"return\\"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
          s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError(\\"Symbol.asyncIterator is not defined.\\");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb(\\"next\\"), verb(\\"throw\\"), verb(\\"return\\"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume(\\"next\\", value);
        }
        function reject(value) {
          resume(\\"throw\\", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb(\\"next\\"), verb(\\"throw\\", function(e) {
          throw e;
        }), verb(\\"return\\"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === \\"return\\" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError(\\"Symbol.asyncIterator is not defined.\\");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === \\"function\\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\\"next\\"), verb(\\"throw\\"), verb(\\"return\\"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
              v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve, reject, d, v) {
          Promise.resolve(v).then(function(v4) {
            resolve({ value: v4, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, \\"raw\\", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, \\"default\\", { enumerable: true, value: v });
      } : function(o, v) {
        o[\\"default\\"] = v;
      };
      __importStar = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== \\"default\\" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault = function(mod) {
        return mod && mod.__esModule ? mod : { \\"default\\": mod };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === \\"a\\" && !f)
          throw new TypeError(\\"Private accessor was defined without a getter\\");
        if (typeof state === \\"function\\" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError(\\"Cannot read private member from an object whose class did not declare it\\");
        return kind === \\"m\\" ? f : kind === \\"a\\" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === \\"m\\")
          throw new TypeError(\\"Private method is not writable\\");
        if (kind === \\"a\\" && !f)
          throw new TypeError(\\"Private accessor was defined without a setter\\");
        if (typeof state === \\"function\\" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError(\\"Cannot write private member to an object whose class did not declare it\\");
        return kind === \\"a\\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      __classPrivateFieldIn = function(state, receiver) {
        if (receiver === null || typeof receiver !== \\"object\\" && typeof receiver !== \\"function\\")
          throw new TypeError(\\"Cannot use 'in' operator on non-object\\");
        return typeof state === \\"function\\" ? receiver === state : state.has(receiver);
      };
      exporter(\\"__extends\\", __extends);
      exporter(\\"__assign\\", __assign);
      exporter(\\"__rest\\", __rest);
      exporter(\\"__decorate\\", __decorate);
      exporter(\\"__param\\", __param);
      exporter(\\"__metadata\\", __metadata);
      exporter(\\"__awaiter\\", __awaiter);
      exporter(\\"__generator\\", __generator);
      exporter(\\"__exportStar\\", __exportStar);
      exporter(\\"__createBinding\\", __createBinding);
      exporter(\\"__values\\", __values);
      exporter(\\"__read\\", __read);
      exporter(\\"__spread\\", __spread);
      exporter(\\"__spreadArrays\\", __spreadArrays);
      exporter(\\"__spreadArray\\", __spreadArray);
      exporter(\\"__await\\", __await);
      exporter(\\"__asyncGenerator\\", __asyncGenerator);
      exporter(\\"__asyncDelegator\\", __asyncDelegator);
      exporter(\\"__asyncValues\\", __asyncValues);
      exporter(\\"__makeTemplateObject\\", __makeTemplateObject);
      exporter(\\"__importStar\\", __importStar);
      exporter(\\"__importDefault\\", __importDefault);
      exporter(\\"__classPrivateFieldGet\\", __classPrivateFieldGet);
      exporter(\\"__classPrivateFieldSet\\", __classPrivateFieldSet);
      exporter(\\"__classPrivateFieldIn\\", __classPrivateFieldIn);
    });
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js
var require_deserializerMiddleware = __commonJS({
  \\"node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, \\"$response\\", {
          value: response
        });
        throw error;
      }
    };
    exports2.deserializerMiddleware = deserializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js
var require_serializerMiddleware = __commonJS({
  \\"node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      const request = await serializer(args.input, options);
      return next({
        ...args,
        request
      });
    };
    exports2.serializerMiddleware = serializerMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js
var require_serdePlugin = __commonJS({
  \\"node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getSerdePlugin = exports2.serializerMiddlewareOption = exports2.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports2.deserializerMiddlewareOption = {
      name: \\"deserializerMiddleware\\",
      step: \\"deserialize\\",
      tags: [\\"DESERIALIZER\\"],
      override: true
    };
    exports2.serializerMiddlewareOption = {
      name: \\"serializerMiddleware\\",
      step: \\"serialize\\",
      tags: [\\"SERIALIZER\\"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports2.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports2.serializerMiddlewareOption);
        }
      };
    }
    exports2.getSerdePlugin = getSerdePlugin;
  }
});

// node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js
var require_dist_cjs = __commonJS({
  \\"node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_deserializerMiddleware(), exports2);
    tslib_1.__exportStar(require_serdePlugin(), exports2);
    tslib_1.__exportStar(require_serializerMiddleware(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js
var require_MiddlewareStack = __commonJS({
  \\"node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || \\"normal\\"] - priorityWeights[a.priority || \\"normal\\"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = () => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              throw new Error(\`\${entry.toMiddleware} is not found when adding \${entry.name || \\"anonymous\\"} middleware \${entry.relation} \${entry.toMiddleware}\`);
            }
            if (entry.relation === \\"after\\") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === \\"before\\") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
          wholeList.push(...expendedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain.map((entry) => entry.middleware);
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: \\"initialize\\",
            priority: \\"normal\\",
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(\`Duplicate middleware name '\${name}'\`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(\`\\"\${name}\\" middleware with \${toOverride.priority} priority in \${toOverride.step} step cannot be overridden by same-name middleware with \${entry.priority} priority in \${entry.step} step.\`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(\`Duplicate middleware name '\${name}'\`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(\`\\"\${name}\\" middleware \${toOverride.relation} \\"\${toOverride.toMiddleware}\\" middleware cannot be overridden by same-name middleware \${entry.relation} \\"\${entry.toMiddleware}\\" middleware.\`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports2.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === \\"string\\")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports2.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().reverse()) {
            handler = middleware(handler, context);
          }
          return handler;
        }
      };
      return stack;
    };
    exports2.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

// node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js
var require_dist_cjs2 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_MiddlewareStack(), exports2);
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/client.js
var require_client = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/client.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.Client = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== \\"function\\" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === \\"function\\" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports2.Client = Client;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/command.js
var require_command = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/command.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.Command = void 0;
    var middleware_stack_1 = require_dist_cjs2();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports2.Command = Command;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js
var require_constants = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.SENSITIVE_STRING = void 0;
    exports2.SENSITIVE_STRING = \\"***SensitiveInformation***\\";
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js
var require_parse_utils = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.strictParseByte = exports2.strictParseShort = exports2.strictParseInt32 = exports2.strictParseInt = exports2.strictParseLong = exports2.limitedParseFloat32 = exports2.limitedParseFloat = exports2.handleFloat = exports2.limitedParseDouble = exports2.strictParseFloat32 = exports2.strictParseFloat = exports2.strictParseDouble = exports2.expectUnion = exports2.expectString = exports2.expectObject = exports2.expectNonNull = exports2.expectByte = exports2.expectShort = exports2.expectInt32 = exports2.expectInt = exports2.expectLong = exports2.expectFloat32 = exports2.expectNumber = exports2.expectBoolean = exports2.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case \\"true\\":
          return true;
        case \\"false\\":
          return false;
        default:
          throw new Error(\`Unable to parse boolean value \\"\${value}\\"\`);
      }
    };
    exports2.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === \\"boolean\\") {
        return value;
      }
      throw new TypeError(\`Expected boolean, got \${typeof value}\`);
    };
    exports2.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === \\"number\\") {
        return value;
      }
      throw new TypeError(\`Expected number, got \${typeof value}\`);
    };
    exports2.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports2.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(\`Expected 32-bit float, got \${value}\`);
        }
      }
      return expected;
    };
    exports2.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(\`Expected integer, got \${typeof value}\`);
    };
    exports2.expectLong = expectLong;
    exports2.expectInt = exports2.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports2.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports2.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports2.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports2.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(\`Expected \${size}-bit integer, got \${value}\`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(\`Expected a non-null value for \${location}\`);
        }
        throw new TypeError(\\"Expected a non-null value\\");
      }
      return value;
    };
    exports2.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === \\"object\\" && !Array.isArray(value)) {
        return value;
      }
      throw new TypeError(\`Expected object, got \${typeof value}\`);
    };
    exports2.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === \\"string\\") {
        return value;
      }
      throw new TypeError(\`Expected string, got \${typeof value}\`);
    };
    exports2.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports2.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([_, v]) => v !== null && v !== void 0).map(([k, _]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(\`Unions must have exactly one non-null member\`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(\`Unions must have exactly one non-null member. Keys \${setKeys} were not null.\`);
      }
      return asObject;
    };
    exports2.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == \\"string\\") {
        return (0, exports2.expectNumber)(parseNumber(value));
      }
      return (0, exports2.expectNumber)(value);
    };
    exports2.strictParseDouble = strictParseDouble;
    exports2.strictParseFloat = exports2.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == \\"string\\") {
        return (0, exports2.expectFloat32)(parseNumber(value));
      }
      return (0, exports2.expectFloat32)(value);
    };
    exports2.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\\\\d*)(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(\`Expected real number, got implicit NaN\`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == \\"string\\") {
        return parseFloatString(value);
      }
      return (0, exports2.expectNumber)(value);
    };
    exports2.limitedParseDouble = limitedParseDouble;
    exports2.handleFloat = exports2.limitedParseDouble;
    exports2.limitedParseFloat = exports2.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == \\"string\\") {
        return parseFloatString(value);
      }
      return (0, exports2.expectFloat32)(value);
    };
    exports2.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case \\"NaN\\":
          return NaN;
        case \\"Infinity\\":
          return Infinity;
        case \\"-Infinity\\":
          return -Infinity;
        default:
          throw new Error(\`Unable to parse float value: \${value}\`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === \\"string\\") {
        return (0, exports2.expectLong)(parseNumber(value));
      }
      return (0, exports2.expectLong)(value);
    };
    exports2.strictParseLong = strictParseLong;
    exports2.strictParseInt = exports2.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === \\"string\\") {
        return (0, exports2.expectInt32)(parseNumber(value));
      }
      return (0, exports2.expectInt32)(value);
    };
    exports2.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === \\"string\\") {
        return (0, exports2.expectShort)(parseNumber(value));
      }
      return (0, exports2.expectShort)(value);
    };
    exports2.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === \\"string\\") {
        return (0, exports2.expectByte)(parseNumber(value));
      }
      return (0, exports2.expectByte)(value);
    };
    exports2.strictParseByte = strictParseByte;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js
var require_date_utils = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.parseEpochTimestamp = exports2.parseRfc7231DateTime = exports2.parseRfc3339DateTime = exports2.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = [\\"Sun\\", \\"Mon\\", \\"Tue\\", \\"Wed\\", \\"Thu\\", \\"Fri\\", \\"Sat\\"];
    var MONTHS = [\\"Jan\\", \\"Feb\\", \\"Mar\\", \\"Apr\\", \\"May\\", \\"Jun\\", \\"Jul\\", \\"Aug\\", \\"Sep\\", \\"Oct\\", \\"Nov\\", \\"Dec\\"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? \`0\${dayOfMonthInt}\` : \`\${dayOfMonthInt}\`;
      const hoursString = hoursInt < 10 ? \`0\${hoursInt}\` : \`\${hoursInt}\`;
      const minutesString = minutesInt < 10 ? \`0\${minutesInt}\` : \`\${minutesInt}\`;
      const secondsString = secondsInt < 10 ? \`0\${secondsInt}\` : \`\${secondsInt}\`;
      return \`\${DAYS[dayOfWeek]}, \${dayOfMonthString} \${MONTHS[month]} \${year} \${hoursString}:\${minutesString}:\${secondsString} GMT\`;
    }
    exports2.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\\\\d{4})-(\\\\d{2})-(\\\\d{2})[tT](\\\\d{2}):(\\\\d{2}):(\\\\d{2})(?:\\\\.(\\\\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== \\"string\\") {
        throw new TypeError(\\"RFC-3339 date-times must be expressed as strings\\");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError(\\"Invalid RFC-3339 date-time value\\");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, \\"month\\", 1, 12);
      const day = parseDateValue(dayStr, \\"day\\", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports2.parseRfc3339DateTime = parseRfc3339DateTime;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\\\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\\\d{4}) (\\\\d{1,2}):(\\\\d{2}):(\\\\d{2})(?:\\\\.(\\\\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\\\\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\\\d{2}) (\\\\d{1,2}):(\\\\d{2}):(\\\\d{2})(?:\\\\.(\\\\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\\\\d{2}) (\\\\d{1,2}):(\\\\d{2}):(\\\\d{2})(?:\\\\.(\\\\d+))? (\\\\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== \\"string\\") {
        throw new TypeError(\\"RFC-7231 date-times must be expressed as strings\\");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, \\"day\\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, \\"day\\", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), \\"day\\", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError(\\"Invalid RFC-7231 date-time value\\");
    };
    exports2.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === \\"number\\") {
        valueAsDouble = value;
      } else if (typeof value === \\"string\\") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError(\\"Epoch timestamps must be expressed as floating point numbers or their string representation\\");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError(\\"Epoch timestamps must be valid, non-Infinite, non-NaN numerics\\");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports2.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, \\"hour\\", 0, 23), parseDateValue(time.minutes, \\"minute\\", 0, 59), parseDateValue(time.seconds, \\"seconds\\", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = new Date().getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(\`Invalid month: \${value}\`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(\`Invalid day for \${MONTHS[month]} in \${year}: \${day}\`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(\`\${type} must be between \${lower} and \${upper}, inclusive\`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)(\\"0.\\" + value) * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === \\"0\\") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js
var require_exceptions = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.decorateServiceException = exports2.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports2.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === \\"\\") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || \\"UnknownError\\";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports2.decorateServiceException = decorateServiceException;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js
var require_default_error_handler = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + \\"\\" : void 0;
      const response = new exceptionCtor({
        name: parsedBody.code || parsedBody.Code || errorCode || statusCode || \\"UnknowError\\",
        $fault: \\"client\\",
        $metadata
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    };
    exports2.throwDefaultError = throwDefaultError;
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers[\\"x-amzn-requestid\\"]) !== null && _a !== void 0 ? _a : output.headers[\\"x-amzn-request-id\\"],
        extendedRequestId: output.headers[\\"x-amz-id-2\\"],
        cfId: output.headers[\\"x-amz-cf-id\\"]
      };
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js
var require_defaults_mode = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case \\"standard\\":
          return {
            retryMode: \\"standard\\",
            connectionTimeout: 3100
          };
        case \\"in-region\\":
          return {
            retryMode: \\"standard\\",
            connectionTimeout: 1100
          };
        case \\"cross-region\\":
          return {
            retryMode: \\"standard\\",
            connectionTimeout: 3100
          };
        case \\"mobile\\":
          return {
            retryMode: \\"standard\\",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports2.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js
var require_emitWarningIfUnsupportedVersion = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version) => {
      if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf(\\".\\"))) < 14) {
        warningEmitted = true;
        process.emitWarning(\`The AWS SDK for JavaScript (v3) will
no longer support Node.js \${version} on November 1, 2022.

To continue receiving updates to AWS services, bug fixes, and security
updates please upgrade to Node.js 14.x or later.

For details, please refer our blog post: https://a.co/48dbdYz\`, \`NodeDeprecationWarning\`);
      }
    };
    exports2.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js
var require_extended_encode_uri_component = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return \\"%\\" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports2.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js
var require_get_array_if_single_item = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports2.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js
var require_get_value_from_text_node = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = \\"#text\\";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === \\"object\\" && obj[key] !== null) {
          obj[key] = (0, exports2.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports2.getValueFromTextNode = getValueFromTextNode;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js
var require_lazy_json = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.LazyJsonString = exports2.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports2.StringWrapper = StringWrapper;
    exports2.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports2.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports2.StringWrapper, String);
    var LazyJsonString = class extends exports2.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === \\"string\\") {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports2.LazyJsonString = LazyJsonString;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js
var require_object_mapping = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.convertMap = exports2.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === \\"undefined\\" && typeof arg2 === \\"undefined\\") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === \\"function\\") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        let [filter2, value] = instructions[key];
        if (typeof value === \\"function\\") {
          let _value;
          const defaultFilterPassed = filter2 === void 0 && (_value = value()) != null;
          const customFilterPassed = typeof filter2 === \\"function\\" && !!filter2(void 0) || typeof filter2 !== \\"function\\" && !!filter2;
          if (defaultFilterPassed) {
            target[key] = _value;
          } else if (customFilterPassed) {
            target[key] = value();
          }
        } else {
          const defaultFilterPassed = filter2 === void 0 && value != null;
          const customFilterPassed = typeof filter2 === \\"function\\" && !!filter2(value) || typeof filter2 !== \\"function\\" && !!filter2;
          if (defaultFilterPassed || customFilterPassed) {
            target[key] = value;
          }
        }
      }
      return target;
    }
    exports2.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports2.convertMap = convertMap;
    var mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === \\"function\\") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js
var require_resolve_path = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolvedPath = void 0;
    var extended_encode_uri_component_1 = require_extended_encode_uri_component();
    var resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error(\\"Empty value provided for input HTTP label: \\" + memberName + \\".\\");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split(\\"/\\").map((segment) => (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join(\\"/\\") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
      } else {
        throw new Error(\\"No value provided for input HTTP label: \\" + memberName + \\".\\");
      }
      return resolvedPath2;
    };
    exports2.resolvedPath = resolvedPath;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js
var require_ser_utils = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return \\"NaN\\";
      }
      switch (value) {
        case Infinity:
          return \\"Infinity\\";
        case -Infinity:
          return \\"-Infinity\\";
        default:
          return value;
      }
    };
    exports2.serializeFloat = serializeFloat;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js
var require_split_every = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error(\\"Invalid number of delimiters (\\" + numDelimiters + \\") for splitEvery.\\");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = \\"\\";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === \\"\\") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = \\"\\";
        }
      }
      if (currentSegment !== \\"\\") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports2.splitEvery = splitEvery;
  }
});

// node_modules/@aws-sdk/smithy-client/dist-cjs/index.js
var require_dist_cjs3 = __commonJS({
  \\"node_modules/@aws-sdk/smithy-client/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_client(), exports2);
    tslib_1.__exportStar(require_command(), exports2);
    tslib_1.__exportStar(require_constants(), exports2);
    tslib_1.__exportStar(require_date_utils(), exports2);
    tslib_1.__exportStar(require_default_error_handler(), exports2);
    tslib_1.__exportStar(require_defaults_mode(), exports2);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports2);
    tslib_1.__exportStar(require_exceptions(), exports2);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports2);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports2);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports2);
    tslib_1.__exportStar(require_lazy_json(), exports2);
    tslib_1.__exportStar(require_object_mapping(), exports2);
    tslib_1.__exportStar(require_parse_utils(), exports2);
    tslib_1.__exportStar(require_resolve_path(), exports2);
    tslib_1.__exportStar(require_ser_utils(), exports2);
    tslib_1.__exportStar(require_split_every(), exports2);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js
var require_DynamoDBServiceException = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/DynamoDBServiceException.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DynamoDBServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var DynamoDBServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, DynamoDBServiceException.prototype);
      }
    };
    exports2.DynamoDBServiceException = DynamoDBServiceException;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js
var require_models_0 = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/models_0.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ProjectionFilterSensitiveLog = exports2.SourceTableDetailsFilterSensitiveLog = exports2.ProvisionedThroughputFilterSensitiveLog = exports2.KeySchemaElementFilterSensitiveLog = exports2.BackupDetailsFilterSensitiveLog = exports2.AutoScalingSettingsUpdateFilterSensitiveLog = exports2.AutoScalingSettingsDescriptionFilterSensitiveLog = exports2.AutoScalingPolicyUpdateFilterSensitiveLog = exports2.AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog = exports2.AutoScalingPolicyDescriptionFilterSensitiveLog = exports2.AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog = exports2.AttributeDefinitionFilterSensitiveLog = exports2.ArchivalSummaryFilterSensitiveLog = exports2.TransactionCanceledException = exports2.AttributeValue = exports2.IndexNotFoundException = exports2.ReplicaNotFoundException = exports2.ReplicaAlreadyExistsException = exports2.InvalidRestoreTimeException = exports2.TableAlreadyExistsException = exports2.PointInTimeRecoveryUnavailableException = exports2.InvalidExportTimeException = exports2.ExportConflictException = exports2.TransactionInProgressException = exports2.IdempotentParameterMismatchException = exports2.DuplicateItemException = exports2.GlobalTableNotFoundException = exports2.ExportNotFoundException = exports2.ExportStatus = exports2.ExportFormat = exports2.TransactionConflictException = exports2.ResourceInUseException = exports2.GlobalTableAlreadyExistsException = exports2.TableClass = exports2.TableNotFoundException = exports2.TableInUseException = exports2.LimitExceededException = exports2.ContinuousBackupsUnavailableException = exports2.ConditionalCheckFailedException = exports2.ItemCollectionSizeLimitExceededException = exports2.ResourceNotFoundException = exports2.ProvisionedThroughputExceededException = exports2.InvalidEndpointException = exports2.RequestLimitExceeded = exports2.InternalServerError = exports2.BatchStatementErrorCodeEnum = exports2.BackupTypeFilter = exports2.BackupNotFoundException = exports2.BackupInUseException = exports2.BackupType = void 0;
    exports2.DescribeContinuousBackupsInputFilterSensitiveLog = exports2.DescribeBackupOutputFilterSensitiveLog = exports2.DescribeBackupInputFilterSensitiveLog = exports2.DeleteTableOutputFilterSensitiveLog = exports2.DeleteTableInputFilterSensitiveLog = exports2.DeleteReplicationGroupMemberActionFilterSensitiveLog = exports2.DeleteReplicaActionFilterSensitiveLog = exports2.DeleteGlobalSecondaryIndexActionFilterSensitiveLog = exports2.DeleteBackupOutputFilterSensitiveLog = exports2.DeleteBackupInputFilterSensitiveLog = exports2.CreateTableOutputFilterSensitiveLog = exports2.TableDescriptionFilterSensitiveLog = exports2.RestoreSummaryFilterSensitiveLog = exports2.LocalSecondaryIndexDescriptionFilterSensitiveLog = exports2.GlobalSecondaryIndexDescriptionFilterSensitiveLog = exports2.ProvisionedThroughputDescriptionFilterSensitiveLog = exports2.CreateTableInputFilterSensitiveLog = exports2.TagFilterSensitiveLog = exports2.SSESpecificationFilterSensitiveLog = exports2.LocalSecondaryIndexFilterSensitiveLog = exports2.GlobalSecondaryIndexFilterSensitiveLog = exports2.CreateReplicationGroupMemberActionFilterSensitiveLog = exports2.ReplicaGlobalSecondaryIndexFilterSensitiveLog = exports2.CreateReplicaActionFilterSensitiveLog = exports2.CreateGlobalTableOutputFilterSensitiveLog = exports2.GlobalTableDescriptionFilterSensitiveLog = exports2.ReplicaDescriptionFilterSensitiveLog = exports2.TableClassSummaryFilterSensitiveLog = exports2.ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog = exports2.ProvisionedThroughputOverrideFilterSensitiveLog = exports2.CreateGlobalTableInputFilterSensitiveLog = exports2.ReplicaFilterSensitiveLog = exports2.CreateGlobalSecondaryIndexActionFilterSensitiveLog = exports2.CreateBackupOutputFilterSensitiveLog = exports2.CreateBackupInputFilterSensitiveLog = exports2.ContributorInsightsSummaryFilterSensitiveLog = exports2.ContinuousBackupsDescriptionFilterSensitiveLog = exports2.PointInTimeRecoveryDescriptionFilterSensitiveLog = exports2.BillingModeSummaryFilterSensitiveLog = exports2.BatchStatementErrorFilterSensitiveLog = exports2.ConsumedCapacityFilterSensitiveLog = exports2.CapacityFilterSensitiveLog = exports2.BackupSummaryFilterSensitiveLog = exports2.BackupDescriptionFilterSensitiveLog = exports2.SourceTableFeatureDetailsFilterSensitiveLog = exports2.TimeToLiveDescriptionFilterSensitiveLog = exports2.StreamSpecificationFilterSensitiveLog = exports2.SSEDescriptionFilterSensitiveLog = exports2.LocalSecondaryIndexInfoFilterSensitiveLog = exports2.GlobalSecondaryIndexInfoFilterSensitiveLog = void 0;
    exports2.RestoreTableFromBackupOutputFilterSensitiveLog = exports2.RestoreTableFromBackupInputFilterSensitiveLog = exports2.ListTagsOfResourceOutputFilterSensitiveLog = exports2.ListTagsOfResourceInputFilterSensitiveLog = exports2.ListTablesOutputFilterSensitiveLog = exports2.ListTablesInputFilterSensitiveLog = exports2.ListGlobalTablesOutputFilterSensitiveLog = exports2.GlobalTableFilterSensitiveLog = exports2.ListGlobalTablesInputFilterSensitiveLog = exports2.ListExportsOutputFilterSensitiveLog = exports2.ExportSummaryFilterSensitiveLog = exports2.ListExportsInputFilterSensitiveLog = exports2.ListContributorInsightsOutputFilterSensitiveLog = exports2.ListContributorInsightsInputFilterSensitiveLog = exports2.ListBackupsOutputFilterSensitiveLog = exports2.ListBackupsInputFilterSensitiveLog = exports2.ExportTableToPointInTimeOutputFilterSensitiveLog = exports2.ExportTableToPointInTimeInputFilterSensitiveLog = exports2.KinesisStreamingDestinationOutputFilterSensitiveLog = exports2.KinesisStreamingDestinationInputFilterSensitiveLog = exports2.DescribeTimeToLiveOutputFilterSensitiveLog = exports2.DescribeTimeToLiveInputFilterSensitiveLog = exports2.DescribeTableReplicaAutoScalingOutputFilterSensitiveLog = exports2.TableAutoScalingDescriptionFilterSensitiveLog = exports2.ReplicaAutoScalingDescriptionFilterSensitiveLog = exports2.ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog = exports2.DescribeTableReplicaAutoScalingInputFilterSensitiveLog = exports2.DescribeTableOutputFilterSensitiveLog = exports2.DescribeTableInputFilterSensitiveLog = exports2.DescribeLimitsOutputFilterSensitiveLog = exports2.DescribeLimitsInputFilterSensitiveLog = exports2.DescribeKinesisStreamingDestinationOutputFilterSensitiveLog = exports2.KinesisDataStreamDestinationFilterSensitiveLog = exports2.DescribeKinesisStreamingDestinationInputFilterSensitiveLog = exports2.DescribeGlobalTableSettingsOutputFilterSensitiveLog = exports2.ReplicaSettingsDescriptionFilterSensitiveLog = exports2.ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog = exports2.DescribeGlobalTableSettingsInputFilterSensitiveLog = exports2.DescribeGlobalTableOutputFilterSensitiveLog = exports2.DescribeGlobalTableInputFilterSensitiveLog = exports2.DescribeExportOutputFilterSensitiveLog = exports2.ExportDescriptionFilterSensitiveLog = exports2.DescribeExportInputFilterSensitiveLog = exports2.DescribeEndpointsResponseFilterSensitiveLog = exports2.EndpointFilterSensitiveLog = exports2.DescribeEndpointsRequestFilterSensitiveLog = exports2.DescribeContributorInsightsOutputFilterSensitiveLog = exports2.FailureExceptionFilterSensitiveLog = exports2.DescribeContributorInsightsInputFilterSensitiveLog = exports2.DescribeContinuousBackupsOutputFilterSensitiveLog = void 0;
    exports2.BatchExecuteStatementOutputFilterSensitiveLog = exports2.BatchExecuteStatementInputFilterSensitiveLog = exports2.TransactGetItemFilterSensitiveLog = exports2.KeysAndAttributesFilterSensitiveLog = exports2.PutRequestFilterSensitiveLog = exports2.ParameterizedStatementFilterSensitiveLog = exports2.ItemResponseFilterSensitiveLog = exports2.ItemCollectionMetricsFilterSensitiveLog = exports2.GetItemOutputFilterSensitiveLog = exports2.GetItemInputFilterSensitiveLog = exports2.GetFilterSensitiveLog = exports2.ExecuteStatementInputFilterSensitiveLog = exports2.DeleteRequestFilterSensitiveLog = exports2.ConditionFilterSensitiveLog = exports2.CancellationReasonFilterSensitiveLog = exports2.BatchStatementResponseFilterSensitiveLog = exports2.BatchStatementRequestFilterSensitiveLog = exports2.AttributeValueUpdateFilterSensitiveLog = exports2.AttributeValueFilterSensitiveLog = exports2.UpdateTimeToLiveOutputFilterSensitiveLog = exports2.UpdateTimeToLiveInputFilterSensitiveLog = exports2.TimeToLiveSpecificationFilterSensitiveLog = exports2.UpdateTableReplicaAutoScalingOutputFilterSensitiveLog = exports2.UpdateTableReplicaAutoScalingInputFilterSensitiveLog = exports2.ReplicaAutoScalingUpdateFilterSensitiveLog = exports2.ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog = exports2.GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog = exports2.UpdateTableOutputFilterSensitiveLog = exports2.UpdateTableInputFilterSensitiveLog = exports2.ReplicationGroupUpdateFilterSensitiveLog = exports2.UpdateReplicationGroupMemberActionFilterSensitiveLog = exports2.GlobalSecondaryIndexUpdateFilterSensitiveLog = exports2.UpdateGlobalSecondaryIndexActionFilterSensitiveLog = exports2.UpdateGlobalTableSettingsOutputFilterSensitiveLog = exports2.UpdateGlobalTableSettingsInputFilterSensitiveLog = exports2.ReplicaSettingsUpdateFilterSensitiveLog = exports2.ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog = exports2.GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog = exports2.UpdateGlobalTableOutputFilterSensitiveLog = exports2.UpdateGlobalTableInputFilterSensitiveLog = exports2.ReplicaUpdateFilterSensitiveLog = exports2.UpdateContributorInsightsOutputFilterSensitiveLog = exports2.UpdateContributorInsightsInputFilterSensitiveLog = exports2.UpdateContinuousBackupsOutputFilterSensitiveLog = exports2.UpdateContinuousBackupsInputFilterSensitiveLog = exports2.PointInTimeRecoverySpecificationFilterSensitiveLog = exports2.UntagResourceInputFilterSensitiveLog = exports2.TagResourceInputFilterSensitiveLog = exports2.RestoreTableToPointInTimeOutputFilterSensitiveLog = exports2.RestoreTableToPointInTimeInputFilterSensitiveLog = void 0;
    exports2.TransactWriteItemsInputFilterSensitiveLog = exports2.TransactWriteItemFilterSensitiveLog = exports2.UpdateItemInputFilterSensitiveLog = exports2.BatchWriteItemOutputFilterSensitiveLog = exports2.QueryInputFilterSensitiveLog = exports2.PutItemInputFilterSensitiveLog = exports2.DeleteItemInputFilterSensitiveLog = exports2.BatchWriteItemInputFilterSensitiveLog = exports2.ScanInputFilterSensitiveLog = exports2.BatchGetItemOutputFilterSensitiveLog = exports2.WriteRequestFilterSensitiveLog = exports2.UpdateItemOutputFilterSensitiveLog = exports2.ScanOutputFilterSensitiveLog = exports2.QueryOutputFilterSensitiveLog = exports2.PutItemOutputFilterSensitiveLog = exports2.ExecuteStatementOutputFilterSensitiveLog = exports2.DeleteItemOutputFilterSensitiveLog = exports2.UpdateFilterSensitiveLog = exports2.PutFilterSensitiveLog = exports2.DeleteFilterSensitiveLog = exports2.ConditionCheckFilterSensitiveLog = exports2.TransactWriteItemsOutputFilterSensitiveLog = exports2.TransactGetItemsInputFilterSensitiveLog = exports2.ExpectedAttributeValueFilterSensitiveLog = exports2.BatchGetItemInputFilterSensitiveLog = exports2.TransactGetItemsOutputFilterSensitiveLog = exports2.ExecuteTransactionOutputFilterSensitiveLog = exports2.ExecuteTransactionInputFilterSensitiveLog = void 0;
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    var BackupType;
    (function(BackupType2) {
      BackupType2[\\"AWS_BACKUP\\"] = \\"AWS_BACKUP\\";
      BackupType2[\\"SYSTEM\\"] = \\"SYSTEM\\";
      BackupType2[\\"USER\\"] = \\"USER\\";
    })(BackupType = exports2.BackupType || (exports2.BackupType = {}));
    var BackupInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"BackupInUseException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"BackupInUseException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, BackupInUseException.prototype);
      }
    };
    exports2.BackupInUseException = BackupInUseException;
    var BackupNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"BackupNotFoundException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"BackupNotFoundException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, BackupNotFoundException.prototype);
      }
    };
    exports2.BackupNotFoundException = BackupNotFoundException;
    var BackupTypeFilter;
    (function(BackupTypeFilter2) {
      BackupTypeFilter2[\\"ALL\\"] = \\"ALL\\";
      BackupTypeFilter2[\\"AWS_BACKUP\\"] = \\"AWS_BACKUP\\";
      BackupTypeFilter2[\\"SYSTEM\\"] = \\"SYSTEM\\";
      BackupTypeFilter2[\\"USER\\"] = \\"USER\\";
    })(BackupTypeFilter = exports2.BackupTypeFilter || (exports2.BackupTypeFilter = {}));
    var BatchStatementErrorCodeEnum;
    (function(BatchStatementErrorCodeEnum2) {
      BatchStatementErrorCodeEnum2[\\"AccessDenied\\"] = \\"AccessDenied\\";
      BatchStatementErrorCodeEnum2[\\"ConditionalCheckFailed\\"] = \\"ConditionalCheckFailed\\";
      BatchStatementErrorCodeEnum2[\\"DuplicateItem\\"] = \\"DuplicateItem\\";
      BatchStatementErrorCodeEnum2[\\"InternalServerError\\"] = \\"InternalServerError\\";
      BatchStatementErrorCodeEnum2[\\"ItemCollectionSizeLimitExceeded\\"] = \\"ItemCollectionSizeLimitExceeded\\";
      BatchStatementErrorCodeEnum2[\\"ProvisionedThroughputExceeded\\"] = \\"ProvisionedThroughputExceeded\\";
      BatchStatementErrorCodeEnum2[\\"RequestLimitExceeded\\"] = \\"RequestLimitExceeded\\";
      BatchStatementErrorCodeEnum2[\\"ResourceNotFound\\"] = \\"ResourceNotFound\\";
      BatchStatementErrorCodeEnum2[\\"ThrottlingError\\"] = \\"ThrottlingError\\";
      BatchStatementErrorCodeEnum2[\\"TransactionConflict\\"] = \\"TransactionConflict\\";
      BatchStatementErrorCodeEnum2[\\"ValidationError\\"] = \\"ValidationError\\";
    })(BatchStatementErrorCodeEnum = exports2.BatchStatementErrorCodeEnum || (exports2.BatchStatementErrorCodeEnum = {}));
    var InternalServerError = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"InternalServerError\\",
          $fault: \\"server\\",
          ...opts
        });
        this.name = \\"InternalServerError\\";
        this.$fault = \\"server\\";
        Object.setPrototypeOf(this, InternalServerError.prototype);
      }
    };
    exports2.InternalServerError = InternalServerError;
    var RequestLimitExceeded = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"RequestLimitExceeded\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"RequestLimitExceeded\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, RequestLimitExceeded.prototype);
      }
    };
    exports2.RequestLimitExceeded = RequestLimitExceeded;
    var InvalidEndpointException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"InvalidEndpointException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"InvalidEndpointException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
      }
    };
    exports2.InvalidEndpointException = InvalidEndpointException;
    var ProvisionedThroughputExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"ProvisionedThroughputExceededException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ProvisionedThroughputExceededException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
      }
    };
    exports2.ProvisionedThroughputExceededException = ProvisionedThroughputExceededException;
    var ResourceNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"ResourceNotFoundException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ResourceNotFoundException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports2.ResourceNotFoundException = ResourceNotFoundException;
    var ItemCollectionSizeLimitExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"ItemCollectionSizeLimitExceededException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ItemCollectionSizeLimitExceededException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ItemCollectionSizeLimitExceededException.prototype);
      }
    };
    exports2.ItemCollectionSizeLimitExceededException = ItemCollectionSizeLimitExceededException;
    var ConditionalCheckFailedException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"ConditionalCheckFailedException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ConditionalCheckFailedException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ConditionalCheckFailedException.prototype);
      }
    };
    exports2.ConditionalCheckFailedException = ConditionalCheckFailedException;
    var ContinuousBackupsUnavailableException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"ContinuousBackupsUnavailableException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ContinuousBackupsUnavailableException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ContinuousBackupsUnavailableException.prototype);
      }
    };
    exports2.ContinuousBackupsUnavailableException = ContinuousBackupsUnavailableException;
    var LimitExceededException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"LimitExceededException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"LimitExceededException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
      }
    };
    exports2.LimitExceededException = LimitExceededException;
    var TableInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"TableInUseException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"TableInUseException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, TableInUseException.prototype);
      }
    };
    exports2.TableInUseException = TableInUseException;
    var TableNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"TableNotFoundException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"TableNotFoundException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, TableNotFoundException.prototype);
      }
    };
    exports2.TableNotFoundException = TableNotFoundException;
    var TableClass;
    (function(TableClass2) {
      TableClass2[\\"STANDARD\\"] = \\"STANDARD\\";
      TableClass2[\\"STANDARD_INFREQUENT_ACCESS\\"] = \\"STANDARD_INFREQUENT_ACCESS\\";
    })(TableClass = exports2.TableClass || (exports2.TableClass = {}));
    var GlobalTableAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"GlobalTableAlreadyExistsException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"GlobalTableAlreadyExistsException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, GlobalTableAlreadyExistsException.prototype);
      }
    };
    exports2.GlobalTableAlreadyExistsException = GlobalTableAlreadyExistsException;
    var ResourceInUseException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"ResourceInUseException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ResourceInUseException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
      }
    };
    exports2.ResourceInUseException = ResourceInUseException;
    var TransactionConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"TransactionConflictException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"TransactionConflictException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, TransactionConflictException.prototype);
      }
    };
    exports2.TransactionConflictException = TransactionConflictException;
    var ExportFormat;
    (function(ExportFormat2) {
      ExportFormat2[\\"DYNAMODB_JSON\\"] = \\"DYNAMODB_JSON\\";
      ExportFormat2[\\"ION\\"] = \\"ION\\";
    })(ExportFormat = exports2.ExportFormat || (exports2.ExportFormat = {}));
    var ExportStatus;
    (function(ExportStatus2) {
      ExportStatus2[\\"COMPLETED\\"] = \\"COMPLETED\\";
      ExportStatus2[\\"FAILED\\"] = \\"FAILED\\";
      ExportStatus2[\\"IN_PROGRESS\\"] = \\"IN_PROGRESS\\";
    })(ExportStatus = exports2.ExportStatus || (exports2.ExportStatus = {}));
    var ExportNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"ExportNotFoundException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ExportNotFoundException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ExportNotFoundException.prototype);
      }
    };
    exports2.ExportNotFoundException = ExportNotFoundException;
    var GlobalTableNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"GlobalTableNotFoundException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"GlobalTableNotFoundException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, GlobalTableNotFoundException.prototype);
      }
    };
    exports2.GlobalTableNotFoundException = GlobalTableNotFoundException;
    var DuplicateItemException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"DuplicateItemException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"DuplicateItemException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, DuplicateItemException.prototype);
      }
    };
    exports2.DuplicateItemException = DuplicateItemException;
    var IdempotentParameterMismatchException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"IdempotentParameterMismatchException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"IdempotentParameterMismatchException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
      }
    };
    exports2.IdempotentParameterMismatchException = IdempotentParameterMismatchException;
    var TransactionInProgressException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"TransactionInProgressException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"TransactionInProgressException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, TransactionInProgressException.prototype);
        this.Message = opts.Message;
      }
    };
    exports2.TransactionInProgressException = TransactionInProgressException;
    var ExportConflictException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"ExportConflictException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ExportConflictException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ExportConflictException.prototype);
      }
    };
    exports2.ExportConflictException = ExportConflictException;
    var InvalidExportTimeException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"InvalidExportTimeException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"InvalidExportTimeException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, InvalidExportTimeException.prototype);
      }
    };
    exports2.InvalidExportTimeException = InvalidExportTimeException;
    var PointInTimeRecoveryUnavailableException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"PointInTimeRecoveryUnavailableException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"PointInTimeRecoveryUnavailableException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, PointInTimeRecoveryUnavailableException.prototype);
      }
    };
    exports2.PointInTimeRecoveryUnavailableException = PointInTimeRecoveryUnavailableException;
    var TableAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"TableAlreadyExistsException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"TableAlreadyExistsException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, TableAlreadyExistsException.prototype);
      }
    };
    exports2.TableAlreadyExistsException = TableAlreadyExistsException;
    var InvalidRestoreTimeException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"InvalidRestoreTimeException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"InvalidRestoreTimeException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, InvalidRestoreTimeException.prototype);
      }
    };
    exports2.InvalidRestoreTimeException = InvalidRestoreTimeException;
    var ReplicaAlreadyExistsException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"ReplicaAlreadyExistsException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ReplicaAlreadyExistsException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ReplicaAlreadyExistsException.prototype);
      }
    };
    exports2.ReplicaAlreadyExistsException = ReplicaAlreadyExistsException;
    var ReplicaNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"ReplicaNotFoundException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ReplicaNotFoundException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ReplicaNotFoundException.prototype);
      }
    };
    exports2.ReplicaNotFoundException = ReplicaNotFoundException;
    var IndexNotFoundException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"IndexNotFoundException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"IndexNotFoundException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, IndexNotFoundException.prototype);
      }
    };
    exports2.IndexNotFoundException = IndexNotFoundException;
    var AttributeValue;
    (function(AttributeValue2) {
      AttributeValue2.visit = (value, visitor) => {
        if (value.S !== void 0)
          return visitor.S(value.S);
        if (value.N !== void 0)
          return visitor.N(value.N);
        if (value.B !== void 0)
          return visitor.B(value.B);
        if (value.SS !== void 0)
          return visitor.SS(value.SS);
        if (value.NS !== void 0)
          return visitor.NS(value.NS);
        if (value.BS !== void 0)
          return visitor.BS(value.BS);
        if (value.M !== void 0)
          return visitor.M(value.M);
        if (value.L !== void 0)
          return visitor.L(value.L);
        if (value.NULL !== void 0)
          return visitor.NULL(value.NULL);
        if (value.BOOL !== void 0)
          return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(AttributeValue = exports2.AttributeValue || (exports2.AttributeValue = {}));
    var TransactionCanceledException = class extends DynamoDBServiceException_1.DynamoDBServiceException {
      constructor(opts) {
        super({
          name: \\"TransactionCanceledException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"TransactionCanceledException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
      }
    };
    exports2.TransactionCanceledException = TransactionCanceledException;
    var ArchivalSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ArchivalSummaryFilterSensitiveLog = ArchivalSummaryFilterSensitiveLog;
    var AttributeDefinitionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AttributeDefinitionFilterSensitiveLog = AttributeDefinitionFilterSensitiveLog;
    var AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog = AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog;
    var AutoScalingPolicyDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AutoScalingPolicyDescriptionFilterSensitiveLog = AutoScalingPolicyDescriptionFilterSensitiveLog;
    var AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog = AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog;
    var AutoScalingPolicyUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AutoScalingPolicyUpdateFilterSensitiveLog = AutoScalingPolicyUpdateFilterSensitiveLog;
    var AutoScalingSettingsDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AutoScalingSettingsDescriptionFilterSensitiveLog = AutoScalingSettingsDescriptionFilterSensitiveLog;
    var AutoScalingSettingsUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AutoScalingSettingsUpdateFilterSensitiveLog = AutoScalingSettingsUpdateFilterSensitiveLog;
    var BackupDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BackupDetailsFilterSensitiveLog = BackupDetailsFilterSensitiveLog;
    var KeySchemaElementFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.KeySchemaElementFilterSensitiveLog = KeySchemaElementFilterSensitiveLog;
    var ProvisionedThroughputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ProvisionedThroughputFilterSensitiveLog = ProvisionedThroughputFilterSensitiveLog;
    var SourceTableDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SourceTableDetailsFilterSensitiveLog = SourceTableDetailsFilterSensitiveLog;
    var ProjectionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ProjectionFilterSensitiveLog = ProjectionFilterSensitiveLog;
    var GlobalSecondaryIndexInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GlobalSecondaryIndexInfoFilterSensitiveLog = GlobalSecondaryIndexInfoFilterSensitiveLog;
    var LocalSecondaryIndexInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LocalSecondaryIndexInfoFilterSensitiveLog = LocalSecondaryIndexInfoFilterSensitiveLog;
    var SSEDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SSEDescriptionFilterSensitiveLog = SSEDescriptionFilterSensitiveLog;
    var StreamSpecificationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StreamSpecificationFilterSensitiveLog = StreamSpecificationFilterSensitiveLog;
    var TimeToLiveDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TimeToLiveDescriptionFilterSensitiveLog = TimeToLiveDescriptionFilterSensitiveLog;
    var SourceTableFeatureDetailsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SourceTableFeatureDetailsFilterSensitiveLog = SourceTableFeatureDetailsFilterSensitiveLog;
    var BackupDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BackupDescriptionFilterSensitiveLog = BackupDescriptionFilterSensitiveLog;
    var BackupSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BackupSummaryFilterSensitiveLog = BackupSummaryFilterSensitiveLog;
    var CapacityFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CapacityFilterSensitiveLog = CapacityFilterSensitiveLog;
    var ConsumedCapacityFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ConsumedCapacityFilterSensitiveLog = ConsumedCapacityFilterSensitiveLog;
    var BatchStatementErrorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BatchStatementErrorFilterSensitiveLog = BatchStatementErrorFilterSensitiveLog;
    var BillingModeSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BillingModeSummaryFilterSensitiveLog = BillingModeSummaryFilterSensitiveLog;
    var PointInTimeRecoveryDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PointInTimeRecoveryDescriptionFilterSensitiveLog = PointInTimeRecoveryDescriptionFilterSensitiveLog;
    var ContinuousBackupsDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ContinuousBackupsDescriptionFilterSensitiveLog = ContinuousBackupsDescriptionFilterSensitiveLog;
    var ContributorInsightsSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ContributorInsightsSummaryFilterSensitiveLog = ContributorInsightsSummaryFilterSensitiveLog;
    var CreateBackupInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateBackupInputFilterSensitiveLog = CreateBackupInputFilterSensitiveLog;
    var CreateBackupOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateBackupOutputFilterSensitiveLog = CreateBackupOutputFilterSensitiveLog;
    var CreateGlobalSecondaryIndexActionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateGlobalSecondaryIndexActionFilterSensitiveLog = CreateGlobalSecondaryIndexActionFilterSensitiveLog;
    var ReplicaFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaFilterSensitiveLog = ReplicaFilterSensitiveLog;
    var CreateGlobalTableInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateGlobalTableInputFilterSensitiveLog = CreateGlobalTableInputFilterSensitiveLog;
    var ProvisionedThroughputOverrideFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ProvisionedThroughputOverrideFilterSensitiveLog = ProvisionedThroughputOverrideFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog = ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog;
    var TableClassSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TableClassSummaryFilterSensitiveLog = TableClassSummaryFilterSensitiveLog;
    var ReplicaDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaDescriptionFilterSensitiveLog = ReplicaDescriptionFilterSensitiveLog;
    var GlobalTableDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GlobalTableDescriptionFilterSensitiveLog = GlobalTableDescriptionFilterSensitiveLog;
    var CreateGlobalTableOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateGlobalTableOutputFilterSensitiveLog = CreateGlobalTableOutputFilterSensitiveLog;
    var CreateReplicaActionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateReplicaActionFilterSensitiveLog = CreateReplicaActionFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaGlobalSecondaryIndexFilterSensitiveLog = ReplicaGlobalSecondaryIndexFilterSensitiveLog;
    var CreateReplicationGroupMemberActionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateReplicationGroupMemberActionFilterSensitiveLog = CreateReplicationGroupMemberActionFilterSensitiveLog;
    var GlobalSecondaryIndexFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GlobalSecondaryIndexFilterSensitiveLog = GlobalSecondaryIndexFilterSensitiveLog;
    var LocalSecondaryIndexFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LocalSecondaryIndexFilterSensitiveLog = LocalSecondaryIndexFilterSensitiveLog;
    var SSESpecificationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SSESpecificationFilterSensitiveLog = SSESpecificationFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var CreateTableInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateTableInputFilterSensitiveLog = CreateTableInputFilterSensitiveLog;
    var ProvisionedThroughputDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ProvisionedThroughputDescriptionFilterSensitiveLog = ProvisionedThroughputDescriptionFilterSensitiveLog;
    var GlobalSecondaryIndexDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GlobalSecondaryIndexDescriptionFilterSensitiveLog = GlobalSecondaryIndexDescriptionFilterSensitiveLog;
    var LocalSecondaryIndexDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LocalSecondaryIndexDescriptionFilterSensitiveLog = LocalSecondaryIndexDescriptionFilterSensitiveLog;
    var RestoreSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RestoreSummaryFilterSensitiveLog = RestoreSummaryFilterSensitiveLog;
    var TableDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TableDescriptionFilterSensitiveLog = TableDescriptionFilterSensitiveLog;
    var CreateTableOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateTableOutputFilterSensitiveLog = CreateTableOutputFilterSensitiveLog;
    var DeleteBackupInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBackupInputFilterSensitiveLog = DeleteBackupInputFilterSensitiveLog;
    var DeleteBackupOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBackupOutputFilterSensitiveLog = DeleteBackupOutputFilterSensitiveLog;
    var DeleteGlobalSecondaryIndexActionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteGlobalSecondaryIndexActionFilterSensitiveLog = DeleteGlobalSecondaryIndexActionFilterSensitiveLog;
    var DeleteReplicaActionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteReplicaActionFilterSensitiveLog = DeleteReplicaActionFilterSensitiveLog;
    var DeleteReplicationGroupMemberActionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteReplicationGroupMemberActionFilterSensitiveLog = DeleteReplicationGroupMemberActionFilterSensitiveLog;
    var DeleteTableInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteTableInputFilterSensitiveLog = DeleteTableInputFilterSensitiveLog;
    var DeleteTableOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteTableOutputFilterSensitiveLog = DeleteTableOutputFilterSensitiveLog;
    var DescribeBackupInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeBackupInputFilterSensitiveLog = DescribeBackupInputFilterSensitiveLog;
    var DescribeBackupOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeBackupOutputFilterSensitiveLog = DescribeBackupOutputFilterSensitiveLog;
    var DescribeContinuousBackupsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeContinuousBackupsInputFilterSensitiveLog = DescribeContinuousBackupsInputFilterSensitiveLog;
    var DescribeContinuousBackupsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeContinuousBackupsOutputFilterSensitiveLog = DescribeContinuousBackupsOutputFilterSensitiveLog;
    var DescribeContributorInsightsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeContributorInsightsInputFilterSensitiveLog = DescribeContributorInsightsInputFilterSensitiveLog;
    var FailureExceptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FailureExceptionFilterSensitiveLog = FailureExceptionFilterSensitiveLog;
    var DescribeContributorInsightsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeContributorInsightsOutputFilterSensitiveLog = DescribeContributorInsightsOutputFilterSensitiveLog;
    var DescribeEndpointsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeEndpointsRequestFilterSensitiveLog = DescribeEndpointsRequestFilterSensitiveLog;
    var EndpointFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.EndpointFilterSensitiveLog = EndpointFilterSensitiveLog;
    var DescribeEndpointsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeEndpointsResponseFilterSensitiveLog = DescribeEndpointsResponseFilterSensitiveLog;
    var DescribeExportInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeExportInputFilterSensitiveLog = DescribeExportInputFilterSensitiveLog;
    var ExportDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ExportDescriptionFilterSensitiveLog = ExportDescriptionFilterSensitiveLog;
    var DescribeExportOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeExportOutputFilterSensitiveLog = DescribeExportOutputFilterSensitiveLog;
    var DescribeGlobalTableInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeGlobalTableInputFilterSensitiveLog = DescribeGlobalTableInputFilterSensitiveLog;
    var DescribeGlobalTableOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeGlobalTableOutputFilterSensitiveLog = DescribeGlobalTableOutputFilterSensitiveLog;
    var DescribeGlobalTableSettingsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeGlobalTableSettingsInputFilterSensitiveLog = DescribeGlobalTableSettingsInputFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog = ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog;
    var ReplicaSettingsDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaSettingsDescriptionFilterSensitiveLog = ReplicaSettingsDescriptionFilterSensitiveLog;
    var DescribeGlobalTableSettingsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeGlobalTableSettingsOutputFilterSensitiveLog = DescribeGlobalTableSettingsOutputFilterSensitiveLog;
    var DescribeKinesisStreamingDestinationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeKinesisStreamingDestinationInputFilterSensitiveLog = DescribeKinesisStreamingDestinationInputFilterSensitiveLog;
    var KinesisDataStreamDestinationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.KinesisDataStreamDestinationFilterSensitiveLog = KinesisDataStreamDestinationFilterSensitiveLog;
    var DescribeKinesisStreamingDestinationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeKinesisStreamingDestinationOutputFilterSensitiveLog = DescribeKinesisStreamingDestinationOutputFilterSensitiveLog;
    var DescribeLimitsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeLimitsInputFilterSensitiveLog = DescribeLimitsInputFilterSensitiveLog;
    var DescribeLimitsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeLimitsOutputFilterSensitiveLog = DescribeLimitsOutputFilterSensitiveLog;
    var DescribeTableInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeTableInputFilterSensitiveLog = DescribeTableInputFilterSensitiveLog;
    var DescribeTableOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeTableOutputFilterSensitiveLog = DescribeTableOutputFilterSensitiveLog;
    var DescribeTableReplicaAutoScalingInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeTableReplicaAutoScalingInputFilterSensitiveLog = DescribeTableReplicaAutoScalingInputFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog = ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog;
    var ReplicaAutoScalingDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaAutoScalingDescriptionFilterSensitiveLog = ReplicaAutoScalingDescriptionFilterSensitiveLog;
    var TableAutoScalingDescriptionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TableAutoScalingDescriptionFilterSensitiveLog = TableAutoScalingDescriptionFilterSensitiveLog;
    var DescribeTableReplicaAutoScalingOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeTableReplicaAutoScalingOutputFilterSensitiveLog = DescribeTableReplicaAutoScalingOutputFilterSensitiveLog;
    var DescribeTimeToLiveInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeTimeToLiveInputFilterSensitiveLog = DescribeTimeToLiveInputFilterSensitiveLog;
    var DescribeTimeToLiveOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DescribeTimeToLiveOutputFilterSensitiveLog = DescribeTimeToLiveOutputFilterSensitiveLog;
    var KinesisStreamingDestinationInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.KinesisStreamingDestinationInputFilterSensitiveLog = KinesisStreamingDestinationInputFilterSensitiveLog;
    var KinesisStreamingDestinationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.KinesisStreamingDestinationOutputFilterSensitiveLog = KinesisStreamingDestinationOutputFilterSensitiveLog;
    var ExportTableToPointInTimeInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ExportTableToPointInTimeInputFilterSensitiveLog = ExportTableToPointInTimeInputFilterSensitiveLog;
    var ExportTableToPointInTimeOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ExportTableToPointInTimeOutputFilterSensitiveLog = ExportTableToPointInTimeOutputFilterSensitiveLog;
    var ListBackupsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListBackupsInputFilterSensitiveLog = ListBackupsInputFilterSensitiveLog;
    var ListBackupsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListBackupsOutputFilterSensitiveLog = ListBackupsOutputFilterSensitiveLog;
    var ListContributorInsightsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListContributorInsightsInputFilterSensitiveLog = ListContributorInsightsInputFilterSensitiveLog;
    var ListContributorInsightsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListContributorInsightsOutputFilterSensitiveLog = ListContributorInsightsOutputFilterSensitiveLog;
    var ListExportsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListExportsInputFilterSensitiveLog = ListExportsInputFilterSensitiveLog;
    var ExportSummaryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ExportSummaryFilterSensitiveLog = ExportSummaryFilterSensitiveLog;
    var ListExportsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListExportsOutputFilterSensitiveLog = ListExportsOutputFilterSensitiveLog;
    var ListGlobalTablesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListGlobalTablesInputFilterSensitiveLog = ListGlobalTablesInputFilterSensitiveLog;
    var GlobalTableFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GlobalTableFilterSensitiveLog = GlobalTableFilterSensitiveLog;
    var ListGlobalTablesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListGlobalTablesOutputFilterSensitiveLog = ListGlobalTablesOutputFilterSensitiveLog;
    var ListTablesInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListTablesInputFilterSensitiveLog = ListTablesInputFilterSensitiveLog;
    var ListTablesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListTablesOutputFilterSensitiveLog = ListTablesOutputFilterSensitiveLog;
    var ListTagsOfResourceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListTagsOfResourceInputFilterSensitiveLog = ListTagsOfResourceInputFilterSensitiveLog;
    var ListTagsOfResourceOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListTagsOfResourceOutputFilterSensitiveLog = ListTagsOfResourceOutputFilterSensitiveLog;
    var RestoreTableFromBackupInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RestoreTableFromBackupInputFilterSensitiveLog = RestoreTableFromBackupInputFilterSensitiveLog;
    var RestoreTableFromBackupOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RestoreTableFromBackupOutputFilterSensitiveLog = RestoreTableFromBackupOutputFilterSensitiveLog;
    var RestoreTableToPointInTimeInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RestoreTableToPointInTimeInputFilterSensitiveLog = RestoreTableToPointInTimeInputFilterSensitiveLog;
    var RestoreTableToPointInTimeOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RestoreTableToPointInTimeOutputFilterSensitiveLog = RestoreTableToPointInTimeOutputFilterSensitiveLog;
    var TagResourceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagResourceInputFilterSensitiveLog = TagResourceInputFilterSensitiveLog;
    var UntagResourceInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UntagResourceInputFilterSensitiveLog = UntagResourceInputFilterSensitiveLog;
    var PointInTimeRecoverySpecificationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PointInTimeRecoverySpecificationFilterSensitiveLog = PointInTimeRecoverySpecificationFilterSensitiveLog;
    var UpdateContinuousBackupsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateContinuousBackupsInputFilterSensitiveLog = UpdateContinuousBackupsInputFilterSensitiveLog;
    var UpdateContinuousBackupsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateContinuousBackupsOutputFilterSensitiveLog = UpdateContinuousBackupsOutputFilterSensitiveLog;
    var UpdateContributorInsightsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateContributorInsightsInputFilterSensitiveLog = UpdateContributorInsightsInputFilterSensitiveLog;
    var UpdateContributorInsightsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateContributorInsightsOutputFilterSensitiveLog = UpdateContributorInsightsOutputFilterSensitiveLog;
    var ReplicaUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaUpdateFilterSensitiveLog = ReplicaUpdateFilterSensitiveLog;
    var UpdateGlobalTableInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateGlobalTableInputFilterSensitiveLog = UpdateGlobalTableInputFilterSensitiveLog;
    var UpdateGlobalTableOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateGlobalTableOutputFilterSensitiveLog = UpdateGlobalTableOutputFilterSensitiveLog;
    var GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog = GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog = ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog;
    var ReplicaSettingsUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaSettingsUpdateFilterSensitiveLog = ReplicaSettingsUpdateFilterSensitiveLog;
    var UpdateGlobalTableSettingsInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateGlobalTableSettingsInputFilterSensitiveLog = UpdateGlobalTableSettingsInputFilterSensitiveLog;
    var UpdateGlobalTableSettingsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateGlobalTableSettingsOutputFilterSensitiveLog = UpdateGlobalTableSettingsOutputFilterSensitiveLog;
    var UpdateGlobalSecondaryIndexActionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateGlobalSecondaryIndexActionFilterSensitiveLog = UpdateGlobalSecondaryIndexActionFilterSensitiveLog;
    var GlobalSecondaryIndexUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GlobalSecondaryIndexUpdateFilterSensitiveLog = GlobalSecondaryIndexUpdateFilterSensitiveLog;
    var UpdateReplicationGroupMemberActionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateReplicationGroupMemberActionFilterSensitiveLog = UpdateReplicationGroupMemberActionFilterSensitiveLog;
    var ReplicationGroupUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicationGroupUpdateFilterSensitiveLog = ReplicationGroupUpdateFilterSensitiveLog;
    var UpdateTableInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateTableInputFilterSensitiveLog = UpdateTableInputFilterSensitiveLog;
    var UpdateTableOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateTableOutputFilterSensitiveLog = UpdateTableOutputFilterSensitiveLog;
    var GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog = GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog;
    var ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog = ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog;
    var ReplicaAutoScalingUpdateFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaAutoScalingUpdateFilterSensitiveLog = ReplicaAutoScalingUpdateFilterSensitiveLog;
    var UpdateTableReplicaAutoScalingInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateTableReplicaAutoScalingInputFilterSensitiveLog = UpdateTableReplicaAutoScalingInputFilterSensitiveLog;
    var UpdateTableReplicaAutoScalingOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateTableReplicaAutoScalingOutputFilterSensitiveLog = UpdateTableReplicaAutoScalingOutputFilterSensitiveLog;
    var TimeToLiveSpecificationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TimeToLiveSpecificationFilterSensitiveLog = TimeToLiveSpecificationFilterSensitiveLog;
    var UpdateTimeToLiveInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateTimeToLiveInputFilterSensitiveLog = UpdateTimeToLiveInputFilterSensitiveLog;
    var UpdateTimeToLiveOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.UpdateTimeToLiveOutputFilterSensitiveLog = UpdateTimeToLiveOutputFilterSensitiveLog;
    var AttributeValueFilterSensitiveLog = (obj) => {
      if (obj.S !== void 0)
        return { S: obj.S };
      if (obj.N !== void 0)
        return { N: obj.N };
      if (obj.B !== void 0)
        return { B: obj.B };
      if (obj.SS !== void 0)
        return { SS: obj.SS };
      if (obj.NS !== void 0)
        return { NS: obj.NS };
      if (obj.BS !== void 0)
        return { BS: obj.BS };
      if (obj.M !== void 0)
        return {
          M: Object.entries(obj.M).reduce((acc, [key, value]) => ({
            ...acc,
            [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
          }), {})
        };
      if (obj.L !== void 0)
        return { L: obj.L.map((item) => (0, exports2.AttributeValueFilterSensitiveLog)(item)) };
      if (obj.NULL !== void 0)
        return { NULL: obj.NULL };
      if (obj.BOOL !== void 0)
        return { BOOL: obj.BOOL };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: \\"UNKNOWN\\" };
    };
    exports2.AttributeValueFilterSensitiveLog = AttributeValueFilterSensitiveLog;
    var AttributeValueUpdateFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Value && { Value: (0, exports2.AttributeValueFilterSensitiveLog)(obj.Value) }
    });
    exports2.AttributeValueUpdateFilterSensitiveLog = AttributeValueUpdateFilterSensitiveLog;
    var BatchStatementRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports2.AttributeValueFilterSensitiveLog)(item)) }
    });
    exports2.BatchStatementRequestFilterSensitiveLog = BatchStatementRequestFilterSensitiveLog;
    var BatchStatementResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.BatchStatementResponseFilterSensitiveLog = BatchStatementResponseFilterSensitiveLog;
    var CancellationReasonFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.CancellationReasonFilterSensitiveLog = CancellationReasonFilterSensitiveLog;
    var ConditionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AttributeValueList && {
        AttributeValueList: obj.AttributeValueList.map((item) => (0, exports2.AttributeValueFilterSensitiveLog)(item))
      }
    });
    exports2.ConditionFilterSensitiveLog = ConditionFilterSensitiveLog;
    var DeleteRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.DeleteRequestFilterSensitiveLog = DeleteRequestFilterSensitiveLog;
    var ExecuteStatementInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports2.AttributeValueFilterSensitiveLog)(item)) }
    });
    exports2.ExecuteStatementInputFilterSensitiveLog = ExecuteStatementInputFilterSensitiveLog;
    var GetFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.GetFilterSensitiveLog = GetFilterSensitiveLog;
    var GetItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.GetItemInputFilterSensitiveLog = GetItemInputFilterSensitiveLog;
    var GetItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.GetItemOutputFilterSensitiveLog = GetItemOutputFilterSensitiveLog;
    var ItemCollectionMetricsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ItemCollectionKey && {
        ItemCollectionKey: Object.entries(obj.ItemCollectionKey).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.ItemCollectionMetricsFilterSensitiveLog = ItemCollectionMetricsFilterSensitiveLog;
    var ItemResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.ItemResponseFilterSensitiveLog = ItemResponseFilterSensitiveLog;
    var ParameterizedStatementFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Parameters && { Parameters: obj.Parameters.map((item) => (0, exports2.AttributeValueFilterSensitiveLog)(item)) }
    });
    exports2.ParameterizedStatementFilterSensitiveLog = ParameterizedStatementFilterSensitiveLog;
    var PutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.PutRequestFilterSensitiveLog = PutRequestFilterSensitiveLog;
    var KeysAndAttributesFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Keys && {
        Keys: obj.Keys.map((item) => Object.entries(item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {}))
      }
    });
    exports2.KeysAndAttributesFilterSensitiveLog = KeysAndAttributesFilterSensitiveLog;
    var TransactGetItemFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Get && { Get: (0, exports2.GetFilterSensitiveLog)(obj.Get) }
    });
    exports2.TransactGetItemFilterSensitiveLog = TransactGetItemFilterSensitiveLog;
    var BatchExecuteStatementInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Statements && { Statements: obj.Statements.map((item) => (0, exports2.BatchStatementRequestFilterSensitiveLog)(item)) }
    });
    exports2.BatchExecuteStatementInputFilterSensitiveLog = BatchExecuteStatementInputFilterSensitiveLog;
    var BatchExecuteStatementOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Responses && { Responses: obj.Responses.map((item) => (0, exports2.BatchStatementResponseFilterSensitiveLog)(item)) }
    });
    exports2.BatchExecuteStatementOutputFilterSensitiveLog = BatchExecuteStatementOutputFilterSensitiveLog;
    var ExecuteTransactionInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TransactStatements && {
        TransactStatements: obj.TransactStatements.map((item) => (0, exports2.ParameterizedStatementFilterSensitiveLog)(item))
      }
    });
    exports2.ExecuteTransactionInputFilterSensitiveLog = ExecuteTransactionInputFilterSensitiveLog;
    var ExecuteTransactionOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Responses && { Responses: obj.Responses.map((item) => (0, exports2.ItemResponseFilterSensitiveLog)(item)) }
    });
    exports2.ExecuteTransactionOutputFilterSensitiveLog = ExecuteTransactionOutputFilterSensitiveLog;
    var TransactGetItemsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Responses && { Responses: obj.Responses.map((item) => (0, exports2.ItemResponseFilterSensitiveLog)(item)) }
    });
    exports2.TransactGetItemsOutputFilterSensitiveLog = TransactGetItemsOutputFilterSensitiveLog;
    var BatchGetItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RequestItems && {
        RequestItems: Object.entries(obj.RequestItems).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.KeysAndAttributesFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.BatchGetItemInputFilterSensitiveLog = BatchGetItemInputFilterSensitiveLog;
    var ExpectedAttributeValueFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Value && { Value: (0, exports2.AttributeValueFilterSensitiveLog)(obj.Value) },
      ...obj.AttributeValueList && {
        AttributeValueList: obj.AttributeValueList.map((item) => (0, exports2.AttributeValueFilterSensitiveLog)(item))
      }
    });
    exports2.ExpectedAttributeValueFilterSensitiveLog = ExpectedAttributeValueFilterSensitiveLog;
    var TransactGetItemsInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TransactItems && { TransactItems: obj.TransactItems.map((item) => (0, exports2.TransactGetItemFilterSensitiveLog)(item)) }
    });
    exports2.TransactGetItemsInputFilterSensitiveLog = TransactGetItemsInputFilterSensitiveLog;
    var TransactWriteItemsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: Object.entries(obj.ItemCollectionMetrics).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: value.map((item) => (0, exports2.ItemCollectionMetricsFilterSensitiveLog)(item))
        }), {})
      }
    });
    exports2.TransactWriteItemsOutputFilterSensitiveLog = TransactWriteItemsOutputFilterSensitiveLog;
    var ConditionCheckFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.ConditionCheckFilterSensitiveLog = ConditionCheckFilterSensitiveLog;
    var DeleteFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.DeleteFilterSensitiveLog = DeleteFilterSensitiveLog;
    var PutFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.PutFilterSensitiveLog = PutFilterSensitiveLog;
    var UpdateFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.UpdateFilterSensitiveLog = UpdateFilterSensitiveLog;
    var DeleteItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Attributes && {
        Attributes: Object.entries(obj.Attributes).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: (0, exports2.ItemCollectionMetricsFilterSensitiveLog)(obj.ItemCollectionMetrics)
      }
    });
    exports2.DeleteItemOutputFilterSensitiveLog = DeleteItemOutputFilterSensitiveLog;
    var ExecuteStatementOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Items && {
        Items: obj.Items.map((item) => Object.entries(item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {}))
      },
      ...obj.LastEvaluatedKey && {
        LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.ExecuteStatementOutputFilterSensitiveLog = ExecuteStatementOutputFilterSensitiveLog;
    var PutItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Attributes && {
        Attributes: Object.entries(obj.Attributes).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: (0, exports2.ItemCollectionMetricsFilterSensitiveLog)(obj.ItemCollectionMetrics)
      }
    });
    exports2.PutItemOutputFilterSensitiveLog = PutItemOutputFilterSensitiveLog;
    var QueryOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Items && {
        Items: obj.Items.map((item) => Object.entries(item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {}))
      },
      ...obj.LastEvaluatedKey && {
        LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.QueryOutputFilterSensitiveLog = QueryOutputFilterSensitiveLog;
    var ScanOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Items && {
        Items: obj.Items.map((item) => Object.entries(item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {}))
      },
      ...obj.LastEvaluatedKey && {
        LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.ScanOutputFilterSensitiveLog = ScanOutputFilterSensitiveLog;
    var UpdateItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Attributes && {
        Attributes: Object.entries(obj.Attributes).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: (0, exports2.ItemCollectionMetricsFilterSensitiveLog)(obj.ItemCollectionMetrics)
      }
    });
    exports2.UpdateItemOutputFilterSensitiveLog = UpdateItemOutputFilterSensitiveLog;
    var WriteRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.PutRequest && { PutRequest: (0, exports2.PutRequestFilterSensitiveLog)(obj.PutRequest) },
      ...obj.DeleteRequest && { DeleteRequest: (0, exports2.DeleteRequestFilterSensitiveLog)(obj.DeleteRequest) }
    });
    exports2.WriteRequestFilterSensitiveLog = WriteRequestFilterSensitiveLog;
    var BatchGetItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Responses && {
        Responses: Object.entries(obj.Responses).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: value.map((item) => Object.entries(item).reduce((acc2, [key2, value2]) => ({
            ...acc2,
            [key2]: (0, exports2.AttributeValueFilterSensitiveLog)(value2)
          }), {}))
        }), {})
      },
      ...obj.UnprocessedKeys && {
        UnprocessedKeys: Object.entries(obj.UnprocessedKeys).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.KeysAndAttributesFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.BatchGetItemOutputFilterSensitiveLog = BatchGetItemOutputFilterSensitiveLog;
    var ScanInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ScanFilter && {
        ScanFilter: Object.entries(obj.ScanFilter).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.ConditionFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExclusiveStartKey && {
        ExclusiveStartKey: Object.entries(obj.ExclusiveStartKey).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.ScanInputFilterSensitiveLog = ScanInputFilterSensitiveLog;
    var BatchWriteItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RequestItems && {
        RequestItems: Object.entries(obj.RequestItems).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: value.map((item) => (0, exports2.WriteRequestFilterSensitiveLog)(item))
        }), {})
      }
    });
    exports2.BatchWriteItemInputFilterSensitiveLog = BatchWriteItemInputFilterSensitiveLog;
    var DeleteItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.Expected && {
        Expected: Object.entries(obj.Expected).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.ExpectedAttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.DeleteItemInputFilterSensitiveLog = DeleteItemInputFilterSensitiveLog;
    var PutItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Item && {
        Item: Object.entries(obj.Item).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.Expected && {
        Expected: Object.entries(obj.Expected).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.ExpectedAttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.PutItemInputFilterSensitiveLog = PutItemInputFilterSensitiveLog;
    var QueryInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KeyConditions && {
        KeyConditions: Object.entries(obj.KeyConditions).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.ConditionFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.QueryFilter && {
        QueryFilter: Object.entries(obj.QueryFilter).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.ConditionFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExclusiveStartKey && {
        ExclusiveStartKey: Object.entries(obj.ExclusiveStartKey).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.QueryInputFilterSensitiveLog = QueryInputFilterSensitiveLog;
    var BatchWriteItemOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.UnprocessedItems && {
        UnprocessedItems: Object.entries(obj.UnprocessedItems).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: value.map((item) => (0, exports2.WriteRequestFilterSensitiveLog)(item))
        }), {})
      },
      ...obj.ItemCollectionMetrics && {
        ItemCollectionMetrics: Object.entries(obj.ItemCollectionMetrics).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: value.map((item) => (0, exports2.ItemCollectionMetricsFilterSensitiveLog)(item))
        }), {})
      }
    });
    exports2.BatchWriteItemOutputFilterSensitiveLog = BatchWriteItemOutputFilterSensitiveLog;
    var UpdateItemInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Key && {
        Key: Object.entries(obj.Key).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.AttributeUpdates && {
        AttributeUpdates: Object.entries(obj.AttributeUpdates).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueUpdateFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.Expected && {
        Expected: Object.entries(obj.Expected).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.ExpectedAttributeValueFilterSensitiveLog)(value)
        }), {})
      },
      ...obj.ExpressionAttributeValues && {
        ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value]) => ({
          ...acc,
          [key]: (0, exports2.AttributeValueFilterSensitiveLog)(value)
        }), {})
      }
    });
    exports2.UpdateItemInputFilterSensitiveLog = UpdateItemInputFilterSensitiveLog;
    var TransactWriteItemFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ConditionCheck && { ConditionCheck: (0, exports2.ConditionCheckFilterSensitiveLog)(obj.ConditionCheck) },
      ...obj.Put && { Put: (0, exports2.PutFilterSensitiveLog)(obj.Put) },
      ...obj.Delete && { Delete: (0, exports2.DeleteFilterSensitiveLog)(obj.Delete) },
      ...obj.Update && { Update: (0, exports2.UpdateFilterSensitiveLog)(obj.Update) }
    });
    exports2.TransactWriteItemFilterSensitiveLog = TransactWriteItemFilterSensitiveLog;
    var TransactWriteItemsInputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.TransactItems && {
        TransactItems: obj.TransactItems.map((item) => (0, exports2.TransactWriteItemFilterSensitiveLog)(item))
      }
    });
    exports2.TransactWriteItemsInputFilterSensitiveLog = TransactWriteItemsInputFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js
var require_httpHandler = __commonJS({
  \\"node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js
var require_httpRequest = __commonJS({
  \\"node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || \\"GET\\";
        this.hostname = options.hostname || \\"localhost\\";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== \\":\\" ? \`\${options.protocol}:\` : options.protocol : \\"https:\\";
        this.path = options.path ? options.path.charAt(0) !== \\"/\\" ? \`/\${options.path}\` : options.path : \\"/\\";
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return \\"method\\" in req && \\"protocol\\" in req && \\"hostname\\" in req && \\"path\\" in req && typeof req[\\"query\\"] === \\"object\\" && typeof req[\\"headers\\"] === \\"object\\";
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports2.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js
var require_httpResponse = __commonJS({
  \\"node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === \\"number\\" && typeof resp.headers === \\"object\\";
      }
    };
    exports2.HttpResponse = HttpResponse;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js
var require_isValidHostname = __commonJS({
  \\"node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\\\\.\\\\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports2.isValidHostname = isValidHostname;
  }
});

// node_modules/@aws-sdk/protocol-http/dist-cjs/index.js
var require_dist_cjs4 = __commonJS({
  \\"node_modules/@aws-sdk/protocol-http/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_httpHandler(), exports2);
    tslib_1.__exportStar(require_httpRequest(), exports2);
    tslib_1.__exportStar(require_httpResponse(), exports2);
    tslib_1.__exportStar(require_isValidHostname(), exports2);
  }
});

// node_modules/uuid/dist/rng.js
var require_rng = __commonJS({
  \\"node_modules/uuid/dist/rng.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = rng;
    var _crypto = _interopRequireDefault(require(\\"crypto\\"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var rnds8Pool = new Uint8Array(256);
    var poolPtr = rnds8Pool.length;
    function rng() {
      if (poolPtr > rnds8Pool.length - 16) {
        _crypto.default.randomFillSync(rnds8Pool);
        poolPtr = 0;
      }
      return rnds8Pool.slice(poolPtr, poolPtr += 16);
    }
  }
});

// node_modules/uuid/dist/regex.js
var require_regex = __commonJS({
  \\"node_modules/uuid/dist/regex.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/validate.js
var require_validate = __commonJS({
  \\"node_modules/uuid/dist/validate.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === \\"string\\" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/stringify.js
var require_stringify = __commonJS({
  \\"node_modules/uuid/dist/stringify.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    function stringify(arr, offset = 0) {
      const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \\"-\\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \\"-\\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \\"-\\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \\"-\\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
      if (!(0, _validate.default)(uuid)) {
        throw TypeError(\\"Stringified UUID is invalid\\");
      }
      return uuid;
    }
    var _default = stringify;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/v1.js
var require_v1 = __commonJS({
  \\"node_modules/uuid/dist/v1.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v12(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error(\\"uuid.v1(): Can't create more than 10M uuids/sec\\");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.default)(b);
    }
    var _default = v12;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/parse.js
var require_parse = __commonJS({
  \\"node_modules/uuid/dist/parse.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError(\\"Invalid UUID\\");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/v35.js
var require_v35 = __commonJS({
  \\"node_modules/uuid/dist/v35.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = _default;
    exports2.URL = exports2.DNS = void 0;
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = \\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\\";
    exports2.DNS = DNS;
    var URL2 = \\"6ba7b811-9dad-11d1-80b4-00c04fd430c8\\";
    exports2.URL = URL2;
    function _default(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        if (typeof value === \\"string\\") {
          value = stringToBytes(value);
        }
        if (typeof namespace === \\"string\\") {
          namespace = (0, _parse.default)(namespace);
        }
        if (namespace.length !== 16) {
          throw TypeError(\\"Namespace must be array-like (16 iterable integer values, 0-255)\\");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.default)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  }
});

// node_modules/uuid/dist/md5.js
var require_md5 = __commonJS({
  \\"node_modules/uuid/dist/md5.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _crypto = _interopRequireDefault(require(\\"crypto\\"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function md5(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === \\"string\\") {
        bytes = Buffer.from(bytes, \\"utf8\\");
      }
      return _crypto.default.createHash(\\"md5\\").update(bytes).digest();
    }
    var _default = md5;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/v3.js
var require_v3 = __commonJS({
  \\"node_modules/uuid/dist/v3.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v32 = (0, _v.default)(\\"v3\\", 48, _md.default);
    var _default = v32;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/v4.js
var require_v4 = __commonJS({
  \\"node_modules/uuid/dist/v4.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = _interopRequireDefault(require_stringify());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.default)(rnds);
    }
    var _default = v4;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/sha1.js
var require_sha1 = __commonJS({
  \\"node_modules/uuid/dist/sha1.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _crypto = _interopRequireDefault(require(\\"crypto\\"));
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function sha1(bytes) {
      if (Array.isArray(bytes)) {
        bytes = Buffer.from(bytes);
      } else if (typeof bytes === \\"string\\") {
        bytes = Buffer.from(bytes, \\"utf8\\");
      }
      return _crypto.default.createHash(\\"sha1\\").update(bytes).digest();
    }
    var _default = sha1;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/v5.js
var require_v5 = __commonJS({
  \\"node_modules/uuid/dist/v5.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)(\\"v5\\", 80, _sha.default);
    var _default = v5;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/nil.js
var require_nil = __commonJS({
  \\"node_modules/uuid/dist/nil.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _default = \\"00000000-0000-0000-0000-000000000000\\";
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/version.js
var require_version = __commonJS({
  \\"node_modules/uuid/dist/version.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    exports2.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError(\\"Invalid UUID\\");
      }
      return parseInt(uuid.substr(14, 1), 16);
    }
    var _default = version;
    exports2.default = _default;
  }
});

// node_modules/uuid/dist/index.js
var require_dist = __commonJS({
  \\"node_modules/uuid/dist/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", {
      value: true
    });
    Object.defineProperty(exports2, \\"v1\\", {
      enumerable: true,
      get: function() {
        return _v.default;
      }
    });
    Object.defineProperty(exports2, \\"v3\\", {
      enumerable: true,
      get: function() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports2, \\"v4\\", {
      enumerable: true,
      get: function() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports2, \\"v5\\", {
      enumerable: true,
      get: function() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports2, \\"NIL\\", {
      enumerable: true,
      get: function() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports2, \\"version\\", {
      enumerable: true,
      get: function() {
        return _version.default;
      }
    });
    Object.defineProperty(exports2, \\"validate\\", {
      enumerable: true,
      get: function() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports2, \\"stringify\\", {
      enumerable: true,
      get: function() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports2, \\"parse\\", {
      enumerable: true,
      get: function() {
        return _parse.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js
var require_Aws_json1_0 = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/protocols/Aws_json1_0.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.serializeAws_json1_0UpdateTimeToLiveCommand = exports2.serializeAws_json1_0UpdateTableReplicaAutoScalingCommand = exports2.serializeAws_json1_0UpdateTableCommand = exports2.serializeAws_json1_0UpdateItemCommand = exports2.serializeAws_json1_0UpdateGlobalTableSettingsCommand = exports2.serializeAws_json1_0UpdateGlobalTableCommand = exports2.serializeAws_json1_0UpdateContributorInsightsCommand = exports2.serializeAws_json1_0UpdateContinuousBackupsCommand = exports2.serializeAws_json1_0UntagResourceCommand = exports2.serializeAws_json1_0TransactWriteItemsCommand = exports2.serializeAws_json1_0TransactGetItemsCommand = exports2.serializeAws_json1_0TagResourceCommand = exports2.serializeAws_json1_0ScanCommand = exports2.serializeAws_json1_0RestoreTableToPointInTimeCommand = exports2.serializeAws_json1_0RestoreTableFromBackupCommand = exports2.serializeAws_json1_0QueryCommand = exports2.serializeAws_json1_0PutItemCommand = exports2.serializeAws_json1_0ListTagsOfResourceCommand = exports2.serializeAws_json1_0ListTablesCommand = exports2.serializeAws_json1_0ListGlobalTablesCommand = exports2.serializeAws_json1_0ListExportsCommand = exports2.serializeAws_json1_0ListContributorInsightsCommand = exports2.serializeAws_json1_0ListBackupsCommand = exports2.serializeAws_json1_0GetItemCommand = exports2.serializeAws_json1_0ExportTableToPointInTimeCommand = exports2.serializeAws_json1_0ExecuteTransactionCommand = exports2.serializeAws_json1_0ExecuteStatementCommand = exports2.serializeAws_json1_0EnableKinesisStreamingDestinationCommand = exports2.serializeAws_json1_0DisableKinesisStreamingDestinationCommand = exports2.serializeAws_json1_0DescribeTimeToLiveCommand = exports2.serializeAws_json1_0DescribeTableReplicaAutoScalingCommand = exports2.serializeAws_json1_0DescribeTableCommand = exports2.serializeAws_json1_0DescribeLimitsCommand = exports2.serializeAws_json1_0DescribeKinesisStreamingDestinationCommand = exports2.serializeAws_json1_0DescribeGlobalTableSettingsCommand = exports2.serializeAws_json1_0DescribeGlobalTableCommand = exports2.serializeAws_json1_0DescribeExportCommand = exports2.serializeAws_json1_0DescribeEndpointsCommand = exports2.serializeAws_json1_0DescribeContributorInsightsCommand = exports2.serializeAws_json1_0DescribeContinuousBackupsCommand = exports2.serializeAws_json1_0DescribeBackupCommand = exports2.serializeAws_json1_0DeleteTableCommand = exports2.serializeAws_json1_0DeleteItemCommand = exports2.serializeAws_json1_0DeleteBackupCommand = exports2.serializeAws_json1_0CreateTableCommand = exports2.serializeAws_json1_0CreateGlobalTableCommand = exports2.serializeAws_json1_0CreateBackupCommand = exports2.serializeAws_json1_0BatchWriteItemCommand = exports2.serializeAws_json1_0BatchGetItemCommand = exports2.serializeAws_json1_0BatchExecuteStatementCommand = void 0;
    exports2.deserializeAws_json1_0UpdateTimeToLiveCommand = exports2.deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand = exports2.deserializeAws_json1_0UpdateTableCommand = exports2.deserializeAws_json1_0UpdateItemCommand = exports2.deserializeAws_json1_0UpdateGlobalTableSettingsCommand = exports2.deserializeAws_json1_0UpdateGlobalTableCommand = exports2.deserializeAws_json1_0UpdateContributorInsightsCommand = exports2.deserializeAws_json1_0UpdateContinuousBackupsCommand = exports2.deserializeAws_json1_0UntagResourceCommand = exports2.deserializeAws_json1_0TransactWriteItemsCommand = exports2.deserializeAws_json1_0TransactGetItemsCommand = exports2.deserializeAws_json1_0TagResourceCommand = exports2.deserializeAws_json1_0ScanCommand = exports2.deserializeAws_json1_0RestoreTableToPointInTimeCommand = exports2.deserializeAws_json1_0RestoreTableFromBackupCommand = exports2.deserializeAws_json1_0QueryCommand = exports2.deserializeAws_json1_0PutItemCommand = exports2.deserializeAws_json1_0ListTagsOfResourceCommand = exports2.deserializeAws_json1_0ListTablesCommand = exports2.deserializeAws_json1_0ListGlobalTablesCommand = exports2.deserializeAws_json1_0ListExportsCommand = exports2.deserializeAws_json1_0ListContributorInsightsCommand = exports2.deserializeAws_json1_0ListBackupsCommand = exports2.deserializeAws_json1_0GetItemCommand = exports2.deserializeAws_json1_0ExportTableToPointInTimeCommand = exports2.deserializeAws_json1_0ExecuteTransactionCommand = exports2.deserializeAws_json1_0ExecuteStatementCommand = exports2.deserializeAws_json1_0EnableKinesisStreamingDestinationCommand = exports2.deserializeAws_json1_0DisableKinesisStreamingDestinationCommand = exports2.deserializeAws_json1_0DescribeTimeToLiveCommand = exports2.deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand = exports2.deserializeAws_json1_0DescribeTableCommand = exports2.deserializeAws_json1_0DescribeLimitsCommand = exports2.deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand = exports2.deserializeAws_json1_0DescribeGlobalTableSettingsCommand = exports2.deserializeAws_json1_0DescribeGlobalTableCommand = exports2.deserializeAws_json1_0DescribeExportCommand = exports2.deserializeAws_json1_0DescribeEndpointsCommand = exports2.deserializeAws_json1_0DescribeContributorInsightsCommand = exports2.deserializeAws_json1_0DescribeContinuousBackupsCommand = exports2.deserializeAws_json1_0DescribeBackupCommand = exports2.deserializeAws_json1_0DeleteTableCommand = exports2.deserializeAws_json1_0DeleteItemCommand = exports2.deserializeAws_json1_0DeleteBackupCommand = exports2.deserializeAws_json1_0CreateTableCommand = exports2.deserializeAws_json1_0CreateGlobalTableCommand = exports2.deserializeAws_json1_0CreateBackupCommand = exports2.deserializeAws_json1_0BatchWriteItemCommand = exports2.deserializeAws_json1_0BatchGetItemCommand = exports2.deserializeAws_json1_0BatchExecuteStatementCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var uuid_1 = require_dist();
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    var models_0_1 = require_models_0();
    var serializeAws_json1_0BatchExecuteStatementCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.BatchExecuteStatement\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0BatchExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0BatchExecuteStatementCommand = serializeAws_json1_0BatchExecuteStatementCommand;
    var serializeAws_json1_0BatchGetItemCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.BatchGetItem\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0BatchGetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0BatchGetItemCommand = serializeAws_json1_0BatchGetItemCommand;
    var serializeAws_json1_0BatchWriteItemCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.BatchWriteItem\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0BatchWriteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0BatchWriteItemCommand = serializeAws_json1_0BatchWriteItemCommand;
    var serializeAws_json1_0CreateBackupCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.CreateBackup\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0CreateBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0CreateBackupCommand = serializeAws_json1_0CreateBackupCommand;
    var serializeAws_json1_0CreateGlobalTableCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.CreateGlobalTable\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0CreateGlobalTableInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0CreateGlobalTableCommand = serializeAws_json1_0CreateGlobalTableCommand;
    var serializeAws_json1_0CreateTableCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.CreateTable\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0CreateTableInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0CreateTableCommand = serializeAws_json1_0CreateTableCommand;
    var serializeAws_json1_0DeleteBackupCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DeleteBackup\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DeleteBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DeleteBackupCommand = serializeAws_json1_0DeleteBackupCommand;
    var serializeAws_json1_0DeleteItemCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DeleteItem\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DeleteItemInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DeleteItemCommand = serializeAws_json1_0DeleteItemCommand;
    var serializeAws_json1_0DeleteTableCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DeleteTable\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DeleteTableInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DeleteTableCommand = serializeAws_json1_0DeleteTableCommand;
    var serializeAws_json1_0DescribeBackupCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeBackup\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeBackupCommand = serializeAws_json1_0DescribeBackupCommand;
    var serializeAws_json1_0DescribeContinuousBackupsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeContinuousBackups\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeContinuousBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeContinuousBackupsCommand = serializeAws_json1_0DescribeContinuousBackupsCommand;
    var serializeAws_json1_0DescribeContributorInsightsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeContributorInsights\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeContributorInsightsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeContributorInsightsCommand = serializeAws_json1_0DescribeContributorInsightsCommand;
    var serializeAws_json1_0DescribeEndpointsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeEndpoints\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeEndpointsRequest(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeEndpointsCommand = serializeAws_json1_0DescribeEndpointsCommand;
    var serializeAws_json1_0DescribeExportCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeExport\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeExportInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeExportCommand = serializeAws_json1_0DescribeExportCommand;
    var serializeAws_json1_0DescribeGlobalTableCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeGlobalTable\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeGlobalTableInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeGlobalTableCommand = serializeAws_json1_0DescribeGlobalTableCommand;
    var serializeAws_json1_0DescribeGlobalTableSettingsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeGlobalTableSettings\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeGlobalTableSettingsCommand = serializeAws_json1_0DescribeGlobalTableSettingsCommand;
    var serializeAws_json1_0DescribeKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeKinesisStreamingDestination\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeKinesisStreamingDestinationInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeKinesisStreamingDestinationCommand = serializeAws_json1_0DescribeKinesisStreamingDestinationCommand;
    var serializeAws_json1_0DescribeLimitsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeLimits\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeLimitsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeLimitsCommand = serializeAws_json1_0DescribeLimitsCommand;
    var serializeAws_json1_0DescribeTableCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeTable\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeTableInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeTableCommand = serializeAws_json1_0DescribeTableCommand;
    var serializeAws_json1_0DescribeTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeTableReplicaAutoScaling\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeTableReplicaAutoScalingInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeTableReplicaAutoScalingCommand = serializeAws_json1_0DescribeTableReplicaAutoScalingCommand;
    var serializeAws_json1_0DescribeTimeToLiveCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DescribeTimeToLive\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0DescribeTimeToLiveInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DescribeTimeToLiveCommand = serializeAws_json1_0DescribeTimeToLiveCommand;
    var serializeAws_json1_0DisableKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.DisableKinesisStreamingDestination\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0KinesisStreamingDestinationInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0DisableKinesisStreamingDestinationCommand = serializeAws_json1_0DisableKinesisStreamingDestinationCommand;
    var serializeAws_json1_0EnableKinesisStreamingDestinationCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.EnableKinesisStreamingDestination\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0KinesisStreamingDestinationInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0EnableKinesisStreamingDestinationCommand = serializeAws_json1_0EnableKinesisStreamingDestinationCommand;
    var serializeAws_json1_0ExecuteStatementCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.ExecuteStatement\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ExecuteStatementInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0ExecuteStatementCommand = serializeAws_json1_0ExecuteStatementCommand;
    var serializeAws_json1_0ExecuteTransactionCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.ExecuteTransaction\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ExecuteTransactionInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0ExecuteTransactionCommand = serializeAws_json1_0ExecuteTransactionCommand;
    var serializeAws_json1_0ExportTableToPointInTimeCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.ExportTableToPointInTime\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ExportTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0ExportTableToPointInTimeCommand = serializeAws_json1_0ExportTableToPointInTimeCommand;
    var serializeAws_json1_0GetItemCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.GetItem\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0GetItemInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0GetItemCommand = serializeAws_json1_0GetItemCommand;
    var serializeAws_json1_0ListBackupsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.ListBackups\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0ListBackupsCommand = serializeAws_json1_0ListBackupsCommand;
    var serializeAws_json1_0ListContributorInsightsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.ListContributorInsights\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListContributorInsightsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0ListContributorInsightsCommand = serializeAws_json1_0ListContributorInsightsCommand;
    var serializeAws_json1_0ListExportsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.ListExports\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListExportsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0ListExportsCommand = serializeAws_json1_0ListExportsCommand;
    var serializeAws_json1_0ListGlobalTablesCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.ListGlobalTables\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListGlobalTablesInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0ListGlobalTablesCommand = serializeAws_json1_0ListGlobalTablesCommand;
    var serializeAws_json1_0ListTablesCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.ListTables\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListTablesInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0ListTablesCommand = serializeAws_json1_0ListTablesCommand;
    var serializeAws_json1_0ListTagsOfResourceCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.ListTagsOfResource\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ListTagsOfResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0ListTagsOfResourceCommand = serializeAws_json1_0ListTagsOfResourceCommand;
    var serializeAws_json1_0PutItemCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.PutItem\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0PutItemInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0PutItemCommand = serializeAws_json1_0PutItemCommand;
    var serializeAws_json1_0QueryCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.Query\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0QueryInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0QueryCommand = serializeAws_json1_0QueryCommand;
    var serializeAws_json1_0RestoreTableFromBackupCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.RestoreTableFromBackup\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0RestoreTableFromBackupInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0RestoreTableFromBackupCommand = serializeAws_json1_0RestoreTableFromBackupCommand;
    var serializeAws_json1_0RestoreTableToPointInTimeCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.RestoreTableToPointInTime\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0RestoreTableToPointInTimeInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0RestoreTableToPointInTimeCommand = serializeAws_json1_0RestoreTableToPointInTimeCommand;
    var serializeAws_json1_0ScanCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.Scan\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0ScanInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0ScanCommand = serializeAws_json1_0ScanCommand;
    var serializeAws_json1_0TagResourceCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.TagResource\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0TagResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0TagResourceCommand = serializeAws_json1_0TagResourceCommand;
    var serializeAws_json1_0TransactGetItemsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.TransactGetItems\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0TransactGetItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0TransactGetItemsCommand = serializeAws_json1_0TransactGetItemsCommand;
    var serializeAws_json1_0TransactWriteItemsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.TransactWriteItems\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0TransactWriteItemsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0TransactWriteItemsCommand = serializeAws_json1_0TransactWriteItemsCommand;
    var serializeAws_json1_0UntagResourceCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.UntagResource\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UntagResourceInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0UntagResourceCommand = serializeAws_json1_0UntagResourceCommand;
    var serializeAws_json1_0UpdateContinuousBackupsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.UpdateContinuousBackups\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateContinuousBackupsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0UpdateContinuousBackupsCommand = serializeAws_json1_0UpdateContinuousBackupsCommand;
    var serializeAws_json1_0UpdateContributorInsightsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.UpdateContributorInsights\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateContributorInsightsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0UpdateContributorInsightsCommand = serializeAws_json1_0UpdateContributorInsightsCommand;
    var serializeAws_json1_0UpdateGlobalTableCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.UpdateGlobalTable\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateGlobalTableInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0UpdateGlobalTableCommand = serializeAws_json1_0UpdateGlobalTableCommand;
    var serializeAws_json1_0UpdateGlobalTableSettingsCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.UpdateGlobalTableSettings\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateGlobalTableSettingsInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0UpdateGlobalTableSettingsCommand = serializeAws_json1_0UpdateGlobalTableSettingsCommand;
    var serializeAws_json1_0UpdateItemCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.UpdateItem\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateItemInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0UpdateItemCommand = serializeAws_json1_0UpdateItemCommand;
    var serializeAws_json1_0UpdateTableCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.UpdateTable\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateTableInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0UpdateTableCommand = serializeAws_json1_0UpdateTableCommand;
    var serializeAws_json1_0UpdateTableReplicaAutoScalingCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.UpdateTableReplicaAutoScaling\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateTableReplicaAutoScalingInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0UpdateTableReplicaAutoScalingCommand = serializeAws_json1_0UpdateTableReplicaAutoScalingCommand;
    var serializeAws_json1_0UpdateTimeToLiveCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-amz-json-1.0\\",
        \\"x-amz-target\\": \\"DynamoDB_20120810.UpdateTimeToLive\\"
      };
      let body;
      body = JSON.stringify(serializeAws_json1_0UpdateTimeToLiveInput(input, context));
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_json1_0UpdateTimeToLiveCommand = serializeAws_json1_0UpdateTimeToLiveCommand;
    var deserializeAws_json1_0BatchExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0BatchExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0BatchExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0BatchExecuteStatementCommand = deserializeAws_json1_0BatchExecuteStatementCommand;
    var deserializeAws_json1_0BatchExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0BatchGetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0BatchGetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0BatchGetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0BatchGetItemCommand = deserializeAws_json1_0BatchGetItemCommand;
    var deserializeAws_json1_0BatchGetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0BatchWriteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0BatchWriteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0BatchWriteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0BatchWriteItemCommand = deserializeAws_json1_0BatchWriteItemCommand;
    var deserializeAws_json1_0BatchWriteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ItemCollectionSizeLimitExceededException\\":
        case \\"com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException\\":
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0CreateBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0CreateBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0CreateBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0CreateBackupCommand = deserializeAws_json1_0CreateBackupCommand;
    var deserializeAws_json1_0CreateBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"BackupInUseException\\":
        case \\"com.amazonaws.dynamodb#BackupInUseException\\":
          throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case \\"ContinuousBackupsUnavailableException\\":
        case \\"com.amazonaws.dynamodb#ContinuousBackupsUnavailableException\\":
          throw await deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"TableInUseException\\":
        case \\"com.amazonaws.dynamodb#TableInUseException\\":
          throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        case \\"TableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#TableNotFoundException\\":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0CreateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0CreateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0CreateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0CreateGlobalTableCommand = deserializeAws_json1_0CreateGlobalTableCommand;
    var deserializeAws_json1_0CreateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"GlobalTableAlreadyExistsException\\":
        case \\"com.amazonaws.dynamodb#GlobalTableAlreadyExistsException\\":
          throw await deserializeAws_json1_0GlobalTableAlreadyExistsExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"TableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#TableNotFoundException\\":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0CreateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0CreateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0CreateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0CreateTableCommand = deserializeAws_json1_0CreateTableCommand;
    var deserializeAws_json1_0CreateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"ResourceInUseException\\":
        case \\"com.amazonaws.dynamodb#ResourceInUseException\\":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DeleteBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DeleteBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DeleteBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DeleteBackupCommand = deserializeAws_json1_0DeleteBackupCommand;
    var deserializeAws_json1_0DeleteBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"BackupInUseException\\":
        case \\"com.amazonaws.dynamodb#BackupInUseException\\":
          throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case \\"BackupNotFoundException\\":
        case \\"com.amazonaws.dynamodb#BackupNotFoundException\\":
          throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DeleteItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DeleteItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DeleteItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DeleteItemCommand = deserializeAws_json1_0DeleteItemCommand;
    var deserializeAws_json1_0DeleteItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"ConditionalCheckFailedException\\":
        case \\"com.amazonaws.dynamodb#ConditionalCheckFailedException\\":
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ItemCollectionSizeLimitExceededException\\":
        case \\"com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException\\":
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case \\"TransactionConflictException\\":
        case \\"com.amazonaws.dynamodb#TransactionConflictException\\":
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DeleteTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DeleteTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DeleteTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DeleteTableCommand = deserializeAws_json1_0DeleteTableCommand;
    var deserializeAws_json1_0DeleteTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"ResourceInUseException\\":
        case \\"com.amazonaws.dynamodb#ResourceInUseException\\":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeBackupCommand = deserializeAws_json1_0DescribeBackupCommand;
    var deserializeAws_json1_0DescribeBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"BackupNotFoundException\\":
        case \\"com.amazonaws.dynamodb#BackupNotFoundException\\":
          throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeContinuousBackupsCommand = deserializeAws_json1_0DescribeContinuousBackupsCommand;
    var deserializeAws_json1_0DescribeContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"TableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#TableNotFoundException\\":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeContributorInsightsCommand = deserializeAws_json1_0DescribeContributorInsightsCommand;
    var deserializeAws_json1_0DescribeContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeEndpointsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeEndpointsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeEndpointsResponse(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeEndpointsCommand = deserializeAws_json1_0DescribeEndpointsCommand;
    var deserializeAws_json1_0DescribeEndpointsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
        errorCode
      });
    };
    var deserializeAws_json1_0DescribeExportCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeExportCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeExportOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeExportCommand = deserializeAws_json1_0DescribeExportCommand;
    var deserializeAws_json1_0DescribeExportCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"ExportNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ExportNotFoundException\\":
          throw await deserializeAws_json1_0ExportNotFoundExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeGlobalTableCommand = deserializeAws_json1_0DescribeGlobalTableCommand;
    var deserializeAws_json1_0DescribeGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"GlobalTableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#GlobalTableNotFoundException\\":
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeGlobalTableSettingsCommand = deserializeAws_json1_0DescribeGlobalTableSettingsCommand;
    var deserializeAws_json1_0DescribeGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"GlobalTableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#GlobalTableNotFoundException\\":
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeKinesisStreamingDestinationOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand = deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand;
    var deserializeAws_json1_0DescribeKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeLimitsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeLimitsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeLimitsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeLimitsCommand = deserializeAws_json1_0DescribeLimitsCommand;
    var deserializeAws_json1_0DescribeLimitsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeTableCommand = deserializeAws_json1_0DescribeTableCommand;
    var deserializeAws_json1_0DescribeTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand = deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand;
    var deserializeAws_json1_0DescribeTableReplicaAutoScalingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DescribeTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DescribeTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0DescribeTimeToLiveOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DescribeTimeToLiveCommand = deserializeAws_json1_0DescribeTimeToLiveCommand;
    var deserializeAws_json1_0DescribeTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0DisableKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0DisableKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0KinesisStreamingDestinationOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0DisableKinesisStreamingDestinationCommand = deserializeAws_json1_0DisableKinesisStreamingDestinationCommand;
    var deserializeAws_json1_0DisableKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"ResourceInUseException\\":
        case \\"com.amazonaws.dynamodb#ResourceInUseException\\":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0EnableKinesisStreamingDestinationCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0EnableKinesisStreamingDestinationCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0KinesisStreamingDestinationOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0EnableKinesisStreamingDestinationCommand = deserializeAws_json1_0EnableKinesisStreamingDestinationCommand;
    var deserializeAws_json1_0EnableKinesisStreamingDestinationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"ResourceInUseException\\":
        case \\"com.amazonaws.dynamodb#ResourceInUseException\\":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0ExecuteStatementCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ExecuteStatementCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ExecuteStatementOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0ExecuteStatementCommand = deserializeAws_json1_0ExecuteStatementCommand;
    var deserializeAws_json1_0ExecuteStatementCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"ConditionalCheckFailedException\\":
        case \\"com.amazonaws.dynamodb#ConditionalCheckFailedException\\":
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case \\"DuplicateItemException\\":
        case \\"com.amazonaws.dynamodb#DuplicateItemException\\":
          throw await deserializeAws_json1_0DuplicateItemExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"ItemCollectionSizeLimitExceededException\\":
        case \\"com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException\\":
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case \\"TransactionConflictException\\":
        case \\"com.amazonaws.dynamodb#TransactionConflictException\\":
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0ExecuteTransactionCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ExecuteTransactionCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ExecuteTransactionOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0ExecuteTransactionCommand = deserializeAws_json1_0ExecuteTransactionCommand;
    var deserializeAws_json1_0ExecuteTransactionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"IdempotentParameterMismatchException\\":
        case \\"com.amazonaws.dynamodb#IdempotentParameterMismatchException\\":
          throw await deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case \\"TransactionCanceledException\\":
        case \\"com.amazonaws.dynamodb#TransactionCanceledException\\":
          throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        case \\"TransactionInProgressException\\":
        case \\"com.amazonaws.dynamodb#TransactionInProgressException\\":
          throw await deserializeAws_json1_0TransactionInProgressExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0ExportTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ExportTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ExportTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0ExportTableToPointInTimeCommand = deserializeAws_json1_0ExportTableToPointInTimeCommand;
    var deserializeAws_json1_0ExportTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"ExportConflictException\\":
        case \\"com.amazonaws.dynamodb#ExportConflictException\\":
          throw await deserializeAws_json1_0ExportConflictExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidExportTimeException\\":
        case \\"com.amazonaws.dynamodb#InvalidExportTimeException\\":
          throw await deserializeAws_json1_0InvalidExportTimeExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"PointInTimeRecoveryUnavailableException\\":
        case \\"com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException\\":
          throw await deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse(parsedOutput, context);
        case \\"TableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#TableNotFoundException\\":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0GetItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0GetItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0GetItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0GetItemCommand = deserializeAws_json1_0GetItemCommand;
    var deserializeAws_json1_0GetItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0ListBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0ListBackupsCommand = deserializeAws_json1_0ListBackupsCommand;
    var deserializeAws_json1_0ListBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0ListContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0ListContributorInsightsCommand = deserializeAws_json1_0ListContributorInsightsCommand;
    var deserializeAws_json1_0ListContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0ListExportsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListExportsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListExportsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0ListExportsCommand = deserializeAws_json1_0ListExportsCommand;
    var deserializeAws_json1_0ListExportsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0ListGlobalTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListGlobalTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListGlobalTablesOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0ListGlobalTablesCommand = deserializeAws_json1_0ListGlobalTablesCommand;
    var deserializeAws_json1_0ListGlobalTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0ListTablesCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListTablesCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListTablesOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0ListTablesCommand = deserializeAws_json1_0ListTablesCommand;
    var deserializeAws_json1_0ListTablesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0ListTagsOfResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ListTagsOfResourceCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ListTagsOfResourceOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0ListTagsOfResourceCommand = deserializeAws_json1_0ListTagsOfResourceCommand;
    var deserializeAws_json1_0ListTagsOfResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0PutItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0PutItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0PutItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0PutItemCommand = deserializeAws_json1_0PutItemCommand;
    var deserializeAws_json1_0PutItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"ConditionalCheckFailedException\\":
        case \\"com.amazonaws.dynamodb#ConditionalCheckFailedException\\":
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ItemCollectionSizeLimitExceededException\\":
        case \\"com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException\\":
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case \\"TransactionConflictException\\":
        case \\"com.amazonaws.dynamodb#TransactionConflictException\\":
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0QueryCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0QueryCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0QueryOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0QueryCommand = deserializeAws_json1_0QueryCommand;
    var deserializeAws_json1_0QueryCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0RestoreTableFromBackupCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0RestoreTableFromBackupCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0RestoreTableFromBackupOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0RestoreTableFromBackupCommand = deserializeAws_json1_0RestoreTableFromBackupCommand;
    var deserializeAws_json1_0RestoreTableFromBackupCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"BackupInUseException\\":
        case \\"com.amazonaws.dynamodb#BackupInUseException\\":
          throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case \\"BackupNotFoundException\\":
        case \\"com.amazonaws.dynamodb#BackupNotFoundException\\":
          throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"TableAlreadyExistsException\\":
        case \\"com.amazonaws.dynamodb#TableAlreadyExistsException\\":
          throw await deserializeAws_json1_0TableAlreadyExistsExceptionResponse(parsedOutput, context);
        case \\"TableInUseException\\":
        case \\"com.amazonaws.dynamodb#TableInUseException\\":
          throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0RestoreTableToPointInTimeCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0RestoreTableToPointInTimeCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0RestoreTableToPointInTimeOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0RestoreTableToPointInTimeCommand = deserializeAws_json1_0RestoreTableToPointInTimeCommand;
    var deserializeAws_json1_0RestoreTableToPointInTimeCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"InvalidRestoreTimeException\\":
        case \\"com.amazonaws.dynamodb#InvalidRestoreTimeException\\":
          throw await deserializeAws_json1_0InvalidRestoreTimeExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"PointInTimeRecoveryUnavailableException\\":
        case \\"com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException\\":
          throw await deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse(parsedOutput, context);
        case \\"TableAlreadyExistsException\\":
        case \\"com.amazonaws.dynamodb#TableAlreadyExistsException\\":
          throw await deserializeAws_json1_0TableAlreadyExistsExceptionResponse(parsedOutput, context);
        case \\"TableInUseException\\":
        case \\"com.amazonaws.dynamodb#TableInUseException\\":
          throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        case \\"TableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#TableNotFoundException\\":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0ScanCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0ScanCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0ScanOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0ScanCommand = deserializeAws_json1_0ScanCommand;
    var deserializeAws_json1_0ScanCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0TagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0TagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0TagResourceCommand = deserializeAws_json1_0TagResourceCommand;
    var deserializeAws_json1_0TagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"ResourceInUseException\\":
        case \\"com.amazonaws.dynamodb#ResourceInUseException\\":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0TransactGetItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0TransactGetItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0TransactGetItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0TransactGetItemsCommand = deserializeAws_json1_0TransactGetItemsCommand;
    var deserializeAws_json1_0TransactGetItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case \\"TransactionCanceledException\\":
        case \\"com.amazonaws.dynamodb#TransactionCanceledException\\":
          throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0TransactWriteItemsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0TransactWriteItemsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0TransactWriteItemsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0TransactWriteItemsCommand = deserializeAws_json1_0TransactWriteItemsCommand;
    var deserializeAws_json1_0TransactWriteItemsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"IdempotentParameterMismatchException\\":
        case \\"com.amazonaws.dynamodb#IdempotentParameterMismatchException\\":
          throw await deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case \\"TransactionCanceledException\\":
        case \\"com.amazonaws.dynamodb#TransactionCanceledException\\":
          throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        case \\"TransactionInProgressException\\":
        case \\"com.amazonaws.dynamodb#TransactionInProgressException\\":
          throw await deserializeAws_json1_0TransactionInProgressExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0UntagResourceCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UntagResourceCommandError(output, context);
      }
      await collectBody(output.body, context);
      const response = {
        $metadata: deserializeMetadata(output)
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0UntagResourceCommand = deserializeAws_json1_0UntagResourceCommand;
    var deserializeAws_json1_0UntagResourceCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"ResourceInUseException\\":
        case \\"com.amazonaws.dynamodb#ResourceInUseException\\":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0UpdateContinuousBackupsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateContinuousBackupsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateContinuousBackupsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0UpdateContinuousBackupsCommand = deserializeAws_json1_0UpdateContinuousBackupsCommand;
    var deserializeAws_json1_0UpdateContinuousBackupsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"ContinuousBackupsUnavailableException\\":
        case \\"com.amazonaws.dynamodb#ContinuousBackupsUnavailableException\\":
          throw await deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"TableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#TableNotFoundException\\":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0UpdateContributorInsightsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateContributorInsightsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateContributorInsightsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0UpdateContributorInsightsCommand = deserializeAws_json1_0UpdateContributorInsightsCommand;
    var deserializeAws_json1_0UpdateContributorInsightsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0UpdateGlobalTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateGlobalTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateGlobalTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0UpdateGlobalTableCommand = deserializeAws_json1_0UpdateGlobalTableCommand;
    var deserializeAws_json1_0UpdateGlobalTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"GlobalTableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#GlobalTableNotFoundException\\":
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ReplicaAlreadyExistsException\\":
        case \\"com.amazonaws.dynamodb#ReplicaAlreadyExistsException\\":
          throw await deserializeAws_json1_0ReplicaAlreadyExistsExceptionResponse(parsedOutput, context);
        case \\"ReplicaNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ReplicaNotFoundException\\":
          throw await deserializeAws_json1_0ReplicaNotFoundExceptionResponse(parsedOutput, context);
        case \\"TableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#TableNotFoundException\\":
          throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0UpdateGlobalTableSettingsCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateGlobalTableSettingsCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateGlobalTableSettingsOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0UpdateGlobalTableSettingsCommand = deserializeAws_json1_0UpdateGlobalTableSettingsCommand;
    var deserializeAws_json1_0UpdateGlobalTableSettingsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"GlobalTableNotFoundException\\":
        case \\"com.amazonaws.dynamodb#GlobalTableNotFoundException\\":
          throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case \\"IndexNotFoundException\\":
        case \\"com.amazonaws.dynamodb#IndexNotFoundException\\":
          throw await deserializeAws_json1_0IndexNotFoundExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"ReplicaNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ReplicaNotFoundException\\":
          throw await deserializeAws_json1_0ReplicaNotFoundExceptionResponse(parsedOutput, context);
        case \\"ResourceInUseException\\":
        case \\"com.amazonaws.dynamodb#ResourceInUseException\\":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0UpdateItemCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateItemCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateItemOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0UpdateItemCommand = deserializeAws_json1_0UpdateItemCommand;
    var deserializeAws_json1_0UpdateItemCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"ConditionalCheckFailedException\\":
        case \\"com.amazonaws.dynamodb#ConditionalCheckFailedException\\":
          throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"ItemCollectionSizeLimitExceededException\\":
        case \\"com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException\\":
          throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case \\"ProvisionedThroughputExceededException\\":
        case \\"com.amazonaws.dynamodb#ProvisionedThroughputExceededException\\":
          throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case \\"RequestLimitExceeded\\":
        case \\"com.amazonaws.dynamodb#RequestLimitExceeded\\":
          throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case \\"TransactionConflictException\\":
        case \\"com.amazonaws.dynamodb#TransactionConflictException\\":
          throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0UpdateTableCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateTableCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateTableOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0UpdateTableCommand = deserializeAws_json1_0UpdateTableCommand;
    var deserializeAws_json1_0UpdateTableCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"ResourceInUseException\\":
        case \\"com.amazonaws.dynamodb#ResourceInUseException\\":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateTableReplicaAutoScalingCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateTableReplicaAutoScalingOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand = deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand;
    var deserializeAws_json1_0UpdateTableReplicaAutoScalingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"ResourceInUseException\\":
        case \\"com.amazonaws.dynamodb#ResourceInUseException\\":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0UpdateTimeToLiveCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_json1_0UpdateTimeToLiveCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_json1_0UpdateTimeToLiveOutput(data, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_json1_0UpdateTimeToLiveCommand = deserializeAws_json1_0UpdateTimeToLiveCommand;
    var deserializeAws_json1_0UpdateTimeToLiveCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InternalServerError\\":
        case \\"com.amazonaws.dynamodb#InternalServerError\\":
          throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case \\"InvalidEndpointException\\":
        case \\"com.amazonaws.dynamodb#InvalidEndpointException\\":
          throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case \\"LimitExceededException\\":
        case \\"com.amazonaws.dynamodb#LimitExceededException\\":
          throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case \\"ResourceInUseException\\":
        case \\"com.amazonaws.dynamodb#ResourceInUseException\\":
          throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.dynamodb#ResourceNotFoundException\\":
          throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: DynamoDBServiceException_1.DynamoDBServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_json1_0BackupInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0BackupInUseException(body, context);
      const exception = new models_0_1.BackupInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0BackupNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0BackupNotFoundException(body, context);
      const exception = new models_0_1.BackupNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ConditionalCheckFailedExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ConditionalCheckFailedException(body, context);
      const exception = new models_0_1.ConditionalCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ContinuousBackupsUnavailableException(body, context);
      const exception = new models_0_1.ContinuousBackupsUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0DuplicateItemExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0DuplicateItemException(body, context);
      const exception = new models_0_1.DuplicateItemException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ExportConflictExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ExportConflictException(body, context);
      const exception = new models_0_1.ExportConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ExportNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ExportNotFoundException(body, context);
      const exception = new models_0_1.ExportNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0GlobalTableAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0GlobalTableAlreadyExistsException(body, context);
      const exception = new models_0_1.GlobalTableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0GlobalTableNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0GlobalTableNotFoundException(body, context);
      const exception = new models_0_1.GlobalTableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0IdempotentParameterMismatchException(body, context);
      const exception = new models_0_1.IdempotentParameterMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0IndexNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0IndexNotFoundException(body, context);
      const exception = new models_0_1.IndexNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InternalServerErrorResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InternalServerError(body, context);
      const exception = new models_0_1.InternalServerError({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InvalidEndpointExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InvalidEndpointException(body, context);
      const exception = new models_0_1.InvalidEndpointException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InvalidExportTimeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InvalidExportTimeException(body, context);
      const exception = new models_0_1.InvalidExportTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0InvalidRestoreTimeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0InvalidRestoreTimeException(body, context);
      const exception = new models_0_1.InvalidRestoreTimeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ItemCollectionSizeLimitExceededException(body, context);
      const exception = new models_0_1.ItemCollectionSizeLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0LimitExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0LimitExceededException(body, context);
      const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0PointInTimeRecoveryUnavailableException(body, context);
      const exception = new models_0_1.PointInTimeRecoveryUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ProvisionedThroughputExceededException(body, context);
      const exception = new models_0_1.ProvisionedThroughputExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ReplicaAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ReplicaAlreadyExistsException(body, context);
      const exception = new models_0_1.ReplicaAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ReplicaNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ReplicaNotFoundException(body, context);
      const exception = new models_0_1.ReplicaNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0RequestLimitExceededResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0RequestLimitExceeded(body, context);
      const exception = new models_0_1.RequestLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ResourceInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ResourceInUseException(body, context);
      const exception = new models_0_1.ResourceInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0ResourceNotFoundException(body, context);
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TableAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TableAlreadyExistsException(body, context);
      const exception = new models_0_1.TableAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TableInUseExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TableInUseException(body, context);
      const exception = new models_0_1.TableInUseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TableNotFoundExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TableNotFoundException(body, context);
      const exception = new models_0_1.TableNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TransactionCanceledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TransactionCanceledException(body, context);
      const exception = new models_0_1.TransactionCanceledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TransactionConflictExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TransactionConflictException(body, context);
      const exception = new models_0_1.TransactionConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_json1_0TransactionInProgressExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_json1_0TransactionInProgressException(body, context);
      const exception = new models_0_1.TransactionInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_json1_0AttributeDefinition = (input, context) => {
      return {
        ...input.AttributeName != null && { AttributeName: input.AttributeName },
        ...input.AttributeType != null && { AttributeType: input.AttributeType }
      };
    };
    var serializeAws_json1_0AttributeDefinitions = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0AttributeDefinition(entry, context);
      });
    };
    var serializeAws_json1_0AttributeNameList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_0AttributeUpdates = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0AttributeValueUpdate(value, context)
        };
      }, {});
    };
    var serializeAws_json1_0AttributeValue = (input, context) => {
      return models_0_1.AttributeValue.visit(input, {
        B: (value) => ({ B: context.base64Encoder(value) }),
        BOOL: (value) => ({ BOOL: value }),
        BS: (value) => ({ BS: serializeAws_json1_0BinarySetAttributeValue(value, context) }),
        L: (value) => ({ L: serializeAws_json1_0ListAttributeValue(value, context) }),
        M: (value) => ({ M: serializeAws_json1_0MapAttributeValue(value, context) }),
        N: (value) => ({ N: value }),
        NS: (value) => ({ NS: serializeAws_json1_0NumberSetAttributeValue(value, context) }),
        NULL: (value) => ({ NULL: value }),
        S: (value) => ({ S: value }),
        SS: (value) => ({ SS: serializeAws_json1_0StringSetAttributeValue(value, context) }),
        _: (name, value) => ({ name: value })
      });
    };
    var serializeAws_json1_0AttributeValueList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0AttributeValue(entry, context);
      });
    };
    var serializeAws_json1_0AttributeValueUpdate = (input, context) => {
      return {
        ...input.Action != null && { Action: input.Action },
        ...input.Value != null && { Value: serializeAws_json1_0AttributeValue(input.Value, context) }
      };
    };
    var serializeAws_json1_0AutoScalingPolicyUpdate = (input, context) => {
      return {
        ...input.PolicyName != null && { PolicyName: input.PolicyName },
        ...input.TargetTrackingScalingPolicyConfiguration != null && {
          TargetTrackingScalingPolicyConfiguration: serializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(input.TargetTrackingScalingPolicyConfiguration, context)
        }
      };
    };
    var serializeAws_json1_0AutoScalingSettingsUpdate = (input, context) => {
      return {
        ...input.AutoScalingDisabled != null && { AutoScalingDisabled: input.AutoScalingDisabled },
        ...input.AutoScalingRoleArn != null && { AutoScalingRoleArn: input.AutoScalingRoleArn },
        ...input.MaximumUnits != null && { MaximumUnits: input.MaximumUnits },
        ...input.MinimumUnits != null && { MinimumUnits: input.MinimumUnits },
        ...input.ScalingPolicyUpdate != null && {
          ScalingPolicyUpdate: serializeAws_json1_0AutoScalingPolicyUpdate(input.ScalingPolicyUpdate, context)
        }
      };
    };
    var serializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = (input, context) => {
      return {
        ...input.DisableScaleIn != null && { DisableScaleIn: input.DisableScaleIn },
        ...input.ScaleInCooldown != null && { ScaleInCooldown: input.ScaleInCooldown },
        ...input.ScaleOutCooldown != null && { ScaleOutCooldown: input.ScaleOutCooldown },
        ...input.TargetValue != null && { TargetValue: (0, smithy_client_1.serializeFloat)(input.TargetValue) }
      };
    };
    var serializeAws_json1_0BatchExecuteStatementInput = (input, context) => {
      return {
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.Statements != null && { Statements: serializeAws_json1_0PartiQLBatchRequest(input.Statements, context) }
      };
    };
    var serializeAws_json1_0BatchGetItemInput = (input, context) => {
      return {
        ...input.RequestItems != null && {
          RequestItems: serializeAws_json1_0BatchGetRequestMap(input.RequestItems, context)
        },
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity }
      };
    };
    var serializeAws_json1_0BatchGetRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0KeysAndAttributes(value, context)
        };
      }, {});
    };
    var serializeAws_json1_0BatchStatementRequest = (input, context) => {
      return {
        ...input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
        },
        ...input.Statement != null && { Statement: input.Statement }
      };
    };
    var serializeAws_json1_0BatchWriteItemInput = (input, context) => {
      return {
        ...input.RequestItems != null && {
          RequestItems: serializeAws_json1_0BatchWriteItemRequestMap(input.RequestItems, context)
        },
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.ReturnItemCollectionMetrics != null && {
          ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics
        }
      };
    };
    var serializeAws_json1_0BatchWriteItemRequestMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0WriteRequests(value, context)
        };
      }, {});
    };
    var serializeAws_json1_0BinarySetAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return context.base64Encoder(entry);
      });
    };
    var serializeAws_json1_0Condition = (input, context) => {
      return {
        ...input.AttributeValueList != null && {
          AttributeValueList: serializeAws_json1_0AttributeValueList(input.AttributeValueList, context)
        },
        ...input.ComparisonOperator != null && { ComparisonOperator: input.ComparisonOperator }
      };
    };
    var serializeAws_json1_0ConditionCheck = (input, context) => {
      return {
        ...input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) },
        ...input.ReturnValuesOnConditionCheckFailure != null && {
          ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
        },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0CreateBackupInput = (input, context) => {
      return {
        ...input.BackupName != null && { BackupName: input.BackupName },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0CreateGlobalSecondaryIndexAction = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.KeySchema != null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) },
        ...input.Projection != null && { Projection: serializeAws_json1_0Projection(input.Projection, context) },
        ...input.ProvisionedThroughput != null && {
          ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        }
      };
    };
    var serializeAws_json1_0CreateGlobalTableInput = (input, context) => {
      return {
        ...input.GlobalTableName != null && { GlobalTableName: input.GlobalTableName },
        ...input.ReplicationGroup != null && {
          ReplicationGroup: serializeAws_json1_0ReplicaList(input.ReplicationGroup, context)
        }
      };
    };
    var serializeAws_json1_0CreateReplicaAction = (input, context) => {
      return {
        ...input.RegionName != null && { RegionName: input.RegionName }
      };
    };
    var serializeAws_json1_0CreateReplicationGroupMemberAction = (input, context) => {
      return {
        ...input.GlobalSecondaryIndexes != null && {
          GlobalSecondaryIndexes: serializeAws_json1_0ReplicaGlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
        },
        ...input.KMSMasterKeyId != null && { KMSMasterKeyId: input.KMSMasterKeyId },
        ...input.ProvisionedThroughputOverride != null && {
          ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
        },
        ...input.RegionName != null && { RegionName: input.RegionName },
        ...input.TableClassOverride != null && { TableClassOverride: input.TableClassOverride }
      };
    };
    var serializeAws_json1_0CreateTableInput = (input, context) => {
      return {
        ...input.AttributeDefinitions != null && {
          AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context)
        },
        ...input.BillingMode != null && { BillingMode: input.BillingMode },
        ...input.GlobalSecondaryIndexes != null && {
          GlobalSecondaryIndexes: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
        },
        ...input.KeySchema != null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) },
        ...input.LocalSecondaryIndexes != null && {
          LocalSecondaryIndexes: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexes, context)
        },
        ...input.ProvisionedThroughput != null && {
          ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        },
        ...input.SSESpecification != null && {
          SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context)
        },
        ...input.StreamSpecification != null && {
          StreamSpecification: serializeAws_json1_0StreamSpecification(input.StreamSpecification, context)
        },
        ...input.TableClass != null && { TableClass: input.TableClass },
        ...input.TableName != null && { TableName: input.TableName },
        ...input.Tags != null && { Tags: serializeAws_json1_0TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_0Delete = (input, context) => {
      return {
        ...input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) },
        ...input.ReturnValuesOnConditionCheckFailure != null && {
          ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
        },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0DeleteBackupInput = (input, context) => {
      return {
        ...input.BackupArn != null && { BackupArn: input.BackupArn }
      };
    };
    var serializeAws_json1_0DeleteGlobalSecondaryIndexAction = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName }
      };
    };
    var serializeAws_json1_0DeleteItemInput = (input, context) => {
      return {
        ...input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression },
        ...input.ConditionalOperator != null && { ConditionalOperator: input.ConditionalOperator },
        ...input.Expected != null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) },
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.ReturnItemCollectionMetrics != null && {
          ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics
        },
        ...input.ReturnValues != null && { ReturnValues: input.ReturnValues },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0DeleteReplicaAction = (input, context) => {
      return {
        ...input.RegionName != null && { RegionName: input.RegionName }
      };
    };
    var serializeAws_json1_0DeleteReplicationGroupMemberAction = (input, context) => {
      return {
        ...input.RegionName != null && { RegionName: input.RegionName }
      };
    };
    var serializeAws_json1_0DeleteRequest = (input, context) => {
      return {
        ...input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) }
      };
    };
    var serializeAws_json1_0DeleteTableInput = (input, context) => {
      return {
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0DescribeBackupInput = (input, context) => {
      return {
        ...input.BackupArn != null && { BackupArn: input.BackupArn }
      };
    };
    var serializeAws_json1_0DescribeContinuousBackupsInput = (input, context) => {
      return {
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0DescribeContributorInsightsInput = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0DescribeEndpointsRequest = (input, context) => {
      return {};
    };
    var serializeAws_json1_0DescribeExportInput = (input, context) => {
      return {
        ...input.ExportArn != null && { ExportArn: input.ExportArn }
      };
    };
    var serializeAws_json1_0DescribeGlobalTableInput = (input, context) => {
      return {
        ...input.GlobalTableName != null && { GlobalTableName: input.GlobalTableName }
      };
    };
    var serializeAws_json1_0DescribeGlobalTableSettingsInput = (input, context) => {
      return {
        ...input.GlobalTableName != null && { GlobalTableName: input.GlobalTableName }
      };
    };
    var serializeAws_json1_0DescribeKinesisStreamingDestinationInput = (input, context) => {
      return {
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0DescribeLimitsInput = (input, context) => {
      return {};
    };
    var serializeAws_json1_0DescribeTableInput = (input, context) => {
      return {
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0DescribeTableReplicaAutoScalingInput = (input, context) => {
      return {
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0DescribeTimeToLiveInput = (input, context) => {
      return {
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0ExecuteStatementInput = (input, context) => {
      return {
        ...input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead },
        ...input.Limit != null && { Limit: input.Limit },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
        },
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.Statement != null && { Statement: input.Statement }
      };
    };
    var serializeAws_json1_0ExecuteTransactionInput = (input, context) => {
      var _a;
      return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.TransactStatements != null && {
          TransactStatements: serializeAws_json1_0ParameterizedStatements(input.TransactStatements, context)
        }
      };
    };
    var serializeAws_json1_0ExpectedAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0ExpectedAttributeValue(value, context)
        };
      }, {});
    };
    var serializeAws_json1_0ExpectedAttributeValue = (input, context) => {
      return {
        ...input.AttributeValueList != null && {
          AttributeValueList: serializeAws_json1_0AttributeValueList(input.AttributeValueList, context)
        },
        ...input.ComparisonOperator != null && { ComparisonOperator: input.ComparisonOperator },
        ...input.Exists != null && { Exists: input.Exists },
        ...input.Value != null && { Value: serializeAws_json1_0AttributeValue(input.Value, context) }
      };
    };
    var serializeAws_json1_0ExportTableToPointInTimeInput = (input, context) => {
      var _a;
      return {
        ClientToken: (_a = input.ClientToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...input.ExportFormat != null && { ExportFormat: input.ExportFormat },
        ...input.ExportTime != null && { ExportTime: Math.round(input.ExportTime.getTime() / 1e3) },
        ...input.S3Bucket != null && { S3Bucket: input.S3Bucket },
        ...input.S3BucketOwner != null && { S3BucketOwner: input.S3BucketOwner },
        ...input.S3Prefix != null && { S3Prefix: input.S3Prefix },
        ...input.S3SseAlgorithm != null && { S3SseAlgorithm: input.S3SseAlgorithm },
        ...input.S3SseKmsKeyId != null && { S3SseKmsKeyId: input.S3SseKmsKeyId },
        ...input.TableArn != null && { TableArn: input.TableArn }
      };
    };
    var serializeAws_json1_0ExpressionAttributeNameMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: value
        };
      }, {});
    };
    var serializeAws_json1_0ExpressionAttributeValueMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0AttributeValue(value, context)
        };
      }, {});
    };
    var serializeAws_json1_0FilterConditionMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0Condition(value, context)
        };
      }, {});
    };
    var serializeAws_json1_0Get = (input, context) => {
      return {
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) },
        ...input.ProjectionExpression != null && { ProjectionExpression: input.ProjectionExpression },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0GetItemInput = (input, context) => {
      return {
        ...input.AttributesToGet != null && {
          AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
        },
        ...input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) },
        ...input.ProjectionExpression != null && { ProjectionExpression: input.ProjectionExpression },
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0GlobalSecondaryIndex = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.KeySchema != null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) },
        ...input.Projection != null && { Projection: serializeAws_json1_0Projection(input.Projection, context) },
        ...input.ProvisionedThroughput != null && {
          ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        }
      };
    };
    var serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.ProvisionedWriteCapacityAutoScalingUpdate != null && {
          ProvisionedWriteCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingUpdate, context)
        }
      };
    };
    var serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdate(entry, context);
      });
    };
    var serializeAws_json1_0GlobalSecondaryIndexList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0GlobalSecondaryIndex(entry, context);
      });
    };
    var serializeAws_json1_0GlobalSecondaryIndexUpdate = (input, context) => {
      return {
        ...input.Create != null && {
          Create: serializeAws_json1_0CreateGlobalSecondaryIndexAction(input.Create, context)
        },
        ...input.Delete != null && {
          Delete: serializeAws_json1_0DeleteGlobalSecondaryIndexAction(input.Delete, context)
        },
        ...input.Update != null && {
          Update: serializeAws_json1_0UpdateGlobalSecondaryIndexAction(input.Update, context)
        }
      };
    };
    var serializeAws_json1_0GlobalSecondaryIndexUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0GlobalSecondaryIndexUpdate(entry, context);
      });
    };
    var serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.ProvisionedWriteCapacityAutoScalingSettingsUpdate != null && {
          ProvisionedWriteCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingSettingsUpdate, context)
        },
        ...input.ProvisionedWriteCapacityUnits != null && {
          ProvisionedWriteCapacityUnits: input.ProvisionedWriteCapacityUnits
        }
      };
    };
    var serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdate(entry, context);
      });
    };
    var serializeAws_json1_0Key = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0AttributeValue(value, context)
        };
      }, {});
    };
    var serializeAws_json1_0KeyConditions = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0Condition(value, context)
        };
      }, {});
    };
    var serializeAws_json1_0KeyList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0Key(entry, context);
      });
    };
    var serializeAws_json1_0KeysAndAttributes = (input, context) => {
      return {
        ...input.AttributesToGet != null && {
          AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
        },
        ...input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.Keys != null && { Keys: serializeAws_json1_0KeyList(input.Keys, context) },
        ...input.ProjectionExpression != null && { ProjectionExpression: input.ProjectionExpression }
      };
    };
    var serializeAws_json1_0KeySchema = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0KeySchemaElement(entry, context);
      });
    };
    var serializeAws_json1_0KeySchemaElement = (input, context) => {
      return {
        ...input.AttributeName != null && { AttributeName: input.AttributeName },
        ...input.KeyType != null && { KeyType: input.KeyType }
      };
    };
    var serializeAws_json1_0KinesisStreamingDestinationInput = (input, context) => {
      return {
        ...input.StreamArn != null && { StreamArn: input.StreamArn },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0ListAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0AttributeValue(entry, context);
      });
    };
    var serializeAws_json1_0ListBackupsInput = (input, context) => {
      return {
        ...input.BackupType != null && { BackupType: input.BackupType },
        ...input.ExclusiveStartBackupArn != null && { ExclusiveStartBackupArn: input.ExclusiveStartBackupArn },
        ...input.Limit != null && { Limit: input.Limit },
        ...input.TableName != null && { TableName: input.TableName },
        ...input.TimeRangeLowerBound != null && {
          TimeRangeLowerBound: Math.round(input.TimeRangeLowerBound.getTime() / 1e3)
        },
        ...input.TimeRangeUpperBound != null && {
          TimeRangeUpperBound: Math.round(input.TimeRangeUpperBound.getTime() / 1e3)
        }
      };
    };
    var serializeAws_json1_0ListContributorInsightsInput = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0ListExportsInput = (input, context) => {
      return {
        ...input.MaxResults != null && { MaxResults: input.MaxResults },
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.TableArn != null && { TableArn: input.TableArn }
      };
    };
    var serializeAws_json1_0ListGlobalTablesInput = (input, context) => {
      return {
        ...input.ExclusiveStartGlobalTableName != null && {
          ExclusiveStartGlobalTableName: input.ExclusiveStartGlobalTableName
        },
        ...input.Limit != null && { Limit: input.Limit },
        ...input.RegionName != null && { RegionName: input.RegionName }
      };
    };
    var serializeAws_json1_0ListTablesInput = (input, context) => {
      return {
        ...input.ExclusiveStartTableName != null && { ExclusiveStartTableName: input.ExclusiveStartTableName },
        ...input.Limit != null && { Limit: input.Limit }
      };
    };
    var serializeAws_json1_0ListTagsOfResourceInput = (input, context) => {
      return {
        ...input.NextToken != null && { NextToken: input.NextToken },
        ...input.ResourceArn != null && { ResourceArn: input.ResourceArn }
      };
    };
    var serializeAws_json1_0LocalSecondaryIndex = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.KeySchema != null && { KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context) },
        ...input.Projection != null && { Projection: serializeAws_json1_0Projection(input.Projection, context) }
      };
    };
    var serializeAws_json1_0LocalSecondaryIndexList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0LocalSecondaryIndex(entry, context);
      });
    };
    var serializeAws_json1_0MapAttributeValue = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0AttributeValue(value, context)
        };
      }, {});
    };
    var serializeAws_json1_0NonKeyAttributeNameList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_0NumberSetAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_0ParameterizedStatement = (input, context) => {
      return {
        ...input.Parameters != null && {
          Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
        },
        ...input.Statement != null && { Statement: input.Statement }
      };
    };
    var serializeAws_json1_0ParameterizedStatements = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0ParameterizedStatement(entry, context);
      });
    };
    var serializeAws_json1_0PartiQLBatchRequest = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0BatchStatementRequest(entry, context);
      });
    };
    var serializeAws_json1_0PointInTimeRecoverySpecification = (input, context) => {
      return {
        ...input.PointInTimeRecoveryEnabled != null && { PointInTimeRecoveryEnabled: input.PointInTimeRecoveryEnabled }
      };
    };
    var serializeAws_json1_0PreparedStatementParameters = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0AttributeValue(entry, context);
      });
    };
    var serializeAws_json1_0Projection = (input, context) => {
      return {
        ...input.NonKeyAttributes != null && {
          NonKeyAttributes: serializeAws_json1_0NonKeyAttributeNameList(input.NonKeyAttributes, context)
        },
        ...input.ProjectionType != null && { ProjectionType: input.ProjectionType }
      };
    };
    var serializeAws_json1_0ProvisionedThroughput = (input, context) => {
      return {
        ...input.ReadCapacityUnits != null && { ReadCapacityUnits: input.ReadCapacityUnits },
        ...input.WriteCapacityUnits != null && { WriteCapacityUnits: input.WriteCapacityUnits }
      };
    };
    var serializeAws_json1_0ProvisionedThroughputOverride = (input, context) => {
      return {
        ...input.ReadCapacityUnits != null && { ReadCapacityUnits: input.ReadCapacityUnits }
      };
    };
    var serializeAws_json1_0Put = (input, context) => {
      return {
        ...input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Item != null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) },
        ...input.ReturnValuesOnConditionCheckFailure != null && {
          ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
        },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0PutItemInput = (input, context) => {
      return {
        ...input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression },
        ...input.ConditionalOperator != null && { ConditionalOperator: input.ConditionalOperator },
        ...input.Expected != null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Item != null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) },
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.ReturnItemCollectionMetrics != null && {
          ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics
        },
        ...input.ReturnValues != null && { ReturnValues: input.ReturnValues },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0PutItemInputAttributeMap = (input, context) => {
      return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: serializeAws_json1_0AttributeValue(value, context)
        };
      }, {});
    };
    var serializeAws_json1_0PutRequest = (input, context) => {
      return {
        ...input.Item != null && { Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context) }
      };
    };
    var serializeAws_json1_0QueryInput = (input, context) => {
      return {
        ...input.AttributesToGet != null && {
          AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
        },
        ...input.ConditionalOperator != null && { ConditionalOperator: input.ConditionalOperator },
        ...input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead },
        ...input.ExclusiveStartKey != null && {
          ExclusiveStartKey: serializeAws_json1_0Key(input.ExclusiveStartKey, context)
        },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.FilterExpression != null && { FilterExpression: input.FilterExpression },
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.KeyConditionExpression != null && { KeyConditionExpression: input.KeyConditionExpression },
        ...input.KeyConditions != null && {
          KeyConditions: serializeAws_json1_0KeyConditions(input.KeyConditions, context)
        },
        ...input.Limit != null && { Limit: input.Limit },
        ...input.ProjectionExpression != null && { ProjectionExpression: input.ProjectionExpression },
        ...input.QueryFilter != null && {
          QueryFilter: serializeAws_json1_0FilterConditionMap(input.QueryFilter, context)
        },
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.ScanIndexForward != null && { ScanIndexForward: input.ScanIndexForward },
        ...input.Select != null && { Select: input.Select },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0Replica = (input, context) => {
      return {
        ...input.RegionName != null && { RegionName: input.RegionName }
      };
    };
    var serializeAws_json1_0ReplicaAutoScalingUpdate = (input, context) => {
      return {
        ...input.RegionName != null && { RegionName: input.RegionName },
        ...input.ReplicaGlobalSecondaryIndexUpdates != null && {
          ReplicaGlobalSecondaryIndexUpdates: serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdateList(input.ReplicaGlobalSecondaryIndexUpdates, context)
        },
        ...input.ReplicaProvisionedReadCapacityAutoScalingUpdate != null && {
          ReplicaProvisionedReadCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ReplicaProvisionedReadCapacityAutoScalingUpdate, context)
        }
      };
    };
    var serializeAws_json1_0ReplicaAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0ReplicaAutoScalingUpdate(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndex = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.ProvisionedThroughputOverride != null && {
          ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
        }
      };
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdate = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.ProvisionedReadCapacityAutoScalingUpdate != null && {
          ProvisionedReadCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedReadCapacityAutoScalingUpdate, context)
        }
      };
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdate(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0ReplicaGlobalSecondaryIndex(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdate = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.ProvisionedReadCapacityAutoScalingSettingsUpdate != null && {
          ProvisionedReadCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedReadCapacityAutoScalingSettingsUpdate, context)
        },
        ...input.ProvisionedReadCapacityUnits != null && {
          ProvisionedReadCapacityUnits: input.ProvisionedReadCapacityUnits
        }
      };
    };
    var serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0Replica(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaSettingsUpdate = (input, context) => {
      return {
        ...input.RegionName != null && { RegionName: input.RegionName },
        ...input.ReplicaGlobalSecondaryIndexSettingsUpdate != null && {
          ReplicaGlobalSecondaryIndexSettingsUpdate: serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdateList(input.ReplicaGlobalSecondaryIndexSettingsUpdate, context)
        },
        ...input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate != null && {
          ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate, context)
        },
        ...input.ReplicaProvisionedReadCapacityUnits != null && {
          ReplicaProvisionedReadCapacityUnits: input.ReplicaProvisionedReadCapacityUnits
        },
        ...input.ReplicaTableClass != null && { ReplicaTableClass: input.ReplicaTableClass }
      };
    };
    var serializeAws_json1_0ReplicaSettingsUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0ReplicaSettingsUpdate(entry, context);
      });
    };
    var serializeAws_json1_0ReplicationGroupUpdate = (input, context) => {
      return {
        ...input.Create != null && {
          Create: serializeAws_json1_0CreateReplicationGroupMemberAction(input.Create, context)
        },
        ...input.Delete != null && {
          Delete: serializeAws_json1_0DeleteReplicationGroupMemberAction(input.Delete, context)
        },
        ...input.Update != null && {
          Update: serializeAws_json1_0UpdateReplicationGroupMemberAction(input.Update, context)
        }
      };
    };
    var serializeAws_json1_0ReplicationGroupUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0ReplicationGroupUpdate(entry, context);
      });
    };
    var serializeAws_json1_0ReplicaUpdate = (input, context) => {
      return {
        ...input.Create != null && { Create: serializeAws_json1_0CreateReplicaAction(input.Create, context) },
        ...input.Delete != null && { Delete: serializeAws_json1_0DeleteReplicaAction(input.Delete, context) }
      };
    };
    var serializeAws_json1_0ReplicaUpdateList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0ReplicaUpdate(entry, context);
      });
    };
    var serializeAws_json1_0RestoreTableFromBackupInput = (input, context) => {
      return {
        ...input.BackupArn != null && { BackupArn: input.BackupArn },
        ...input.BillingModeOverride != null && { BillingModeOverride: input.BillingModeOverride },
        ...input.GlobalSecondaryIndexOverride != null && {
          GlobalSecondaryIndexOverride: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexOverride, context)
        },
        ...input.LocalSecondaryIndexOverride != null && {
          LocalSecondaryIndexOverride: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexOverride, context)
        },
        ...input.ProvisionedThroughputOverride != null && {
          ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughputOverride, context)
        },
        ...input.SSESpecificationOverride != null && {
          SSESpecificationOverride: serializeAws_json1_0SSESpecification(input.SSESpecificationOverride, context)
        },
        ...input.TargetTableName != null && { TargetTableName: input.TargetTableName }
      };
    };
    var serializeAws_json1_0RestoreTableToPointInTimeInput = (input, context) => {
      return {
        ...input.BillingModeOverride != null && { BillingModeOverride: input.BillingModeOverride },
        ...input.GlobalSecondaryIndexOverride != null && {
          GlobalSecondaryIndexOverride: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexOverride, context)
        },
        ...input.LocalSecondaryIndexOverride != null && {
          LocalSecondaryIndexOverride: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexOverride, context)
        },
        ...input.ProvisionedThroughputOverride != null && {
          ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughputOverride, context)
        },
        ...input.RestoreDateTime != null && { RestoreDateTime: Math.round(input.RestoreDateTime.getTime() / 1e3) },
        ...input.SSESpecificationOverride != null && {
          SSESpecificationOverride: serializeAws_json1_0SSESpecification(input.SSESpecificationOverride, context)
        },
        ...input.SourceTableArn != null && { SourceTableArn: input.SourceTableArn },
        ...input.SourceTableName != null && { SourceTableName: input.SourceTableName },
        ...input.TargetTableName != null && { TargetTableName: input.TargetTableName },
        ...input.UseLatestRestorableTime != null && { UseLatestRestorableTime: input.UseLatestRestorableTime }
      };
    };
    var serializeAws_json1_0ScanInput = (input, context) => {
      return {
        ...input.AttributesToGet != null && {
          AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
        },
        ...input.ConditionalOperator != null && { ConditionalOperator: input.ConditionalOperator },
        ...input.ConsistentRead != null && { ConsistentRead: input.ConsistentRead },
        ...input.ExclusiveStartKey != null && {
          ExclusiveStartKey: serializeAws_json1_0Key(input.ExclusiveStartKey, context)
        },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.FilterExpression != null && { FilterExpression: input.FilterExpression },
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.Limit != null && { Limit: input.Limit },
        ...input.ProjectionExpression != null && { ProjectionExpression: input.ProjectionExpression },
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.ScanFilter != null && { ScanFilter: serializeAws_json1_0FilterConditionMap(input.ScanFilter, context) },
        ...input.Segment != null && { Segment: input.Segment },
        ...input.Select != null && { Select: input.Select },
        ...input.TableName != null && { TableName: input.TableName },
        ...input.TotalSegments != null && { TotalSegments: input.TotalSegments }
      };
    };
    var serializeAws_json1_0SSESpecification = (input, context) => {
      return {
        ...input.Enabled != null && { Enabled: input.Enabled },
        ...input.KMSMasterKeyId != null && { KMSMasterKeyId: input.KMSMasterKeyId },
        ...input.SSEType != null && { SSEType: input.SSEType }
      };
    };
    var serializeAws_json1_0StreamSpecification = (input, context) => {
      return {
        ...input.StreamEnabled != null && { StreamEnabled: input.StreamEnabled },
        ...input.StreamViewType != null && { StreamViewType: input.StreamViewType }
      };
    };
    var serializeAws_json1_0StringSetAttributeValue = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_0Tag = (input, context) => {
      return {
        ...input.Key != null && { Key: input.Key },
        ...input.Value != null && { Value: input.Value }
      };
    };
    var serializeAws_json1_0TagKeyList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var serializeAws_json1_0TagList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0Tag(entry, context);
      });
    };
    var serializeAws_json1_0TagResourceInput = (input, context) => {
      return {
        ...input.ResourceArn != null && { ResourceArn: input.ResourceArn },
        ...input.Tags != null && { Tags: serializeAws_json1_0TagList(input.Tags, context) }
      };
    };
    var serializeAws_json1_0TimeToLiveSpecification = (input, context) => {
      return {
        ...input.AttributeName != null && { AttributeName: input.AttributeName },
        ...input.Enabled != null && { Enabled: input.Enabled }
      };
    };
    var serializeAws_json1_0TransactGetItem = (input, context) => {
      return {
        ...input.Get != null && { Get: serializeAws_json1_0Get(input.Get, context) }
      };
    };
    var serializeAws_json1_0TransactGetItemList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0TransactGetItem(entry, context);
      });
    };
    var serializeAws_json1_0TransactGetItemsInput = (input, context) => {
      return {
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.TransactItems != null && {
          TransactItems: serializeAws_json1_0TransactGetItemList(input.TransactItems, context)
        }
      };
    };
    var serializeAws_json1_0TransactWriteItem = (input, context) => {
      return {
        ...input.ConditionCheck != null && {
          ConditionCheck: serializeAws_json1_0ConditionCheck(input.ConditionCheck, context)
        },
        ...input.Delete != null && { Delete: serializeAws_json1_0Delete(input.Delete, context) },
        ...input.Put != null && { Put: serializeAws_json1_0Put(input.Put, context) },
        ...input.Update != null && { Update: serializeAws_json1_0Update(input.Update, context) }
      };
    };
    var serializeAws_json1_0TransactWriteItemList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0TransactWriteItem(entry, context);
      });
    };
    var serializeAws_json1_0TransactWriteItemsInput = (input, context) => {
      var _a;
      return {
        ClientRequestToken: (_a = input.ClientRequestToken) !== null && _a !== void 0 ? _a : (0, uuid_1.v4)(),
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.ReturnItemCollectionMetrics != null && {
          ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics
        },
        ...input.TransactItems != null && {
          TransactItems: serializeAws_json1_0TransactWriteItemList(input.TransactItems, context)
        }
      };
    };
    var serializeAws_json1_0UntagResourceInput = (input, context) => {
      return {
        ...input.ResourceArn != null && { ResourceArn: input.ResourceArn },
        ...input.TagKeys != null && { TagKeys: serializeAws_json1_0TagKeyList(input.TagKeys, context) }
      };
    };
    var serializeAws_json1_0Update = (input, context) => {
      return {
        ...input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) },
        ...input.ReturnValuesOnConditionCheckFailure != null && {
          ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
        },
        ...input.TableName != null && { TableName: input.TableName },
        ...input.UpdateExpression != null && { UpdateExpression: input.UpdateExpression }
      };
    };
    var serializeAws_json1_0UpdateContinuousBackupsInput = (input, context) => {
      return {
        ...input.PointInTimeRecoverySpecification != null && {
          PointInTimeRecoverySpecification: serializeAws_json1_0PointInTimeRecoverySpecification(input.PointInTimeRecoverySpecification, context)
        },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0UpdateContributorInsightsInput = (input, context) => {
      return {
        ...input.ContributorInsightsAction != null && { ContributorInsightsAction: input.ContributorInsightsAction },
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0UpdateGlobalSecondaryIndexAction = (input, context) => {
      return {
        ...input.IndexName != null && { IndexName: input.IndexName },
        ...input.ProvisionedThroughput != null && {
          ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        }
      };
    };
    var serializeAws_json1_0UpdateGlobalTableInput = (input, context) => {
      return {
        ...input.GlobalTableName != null && { GlobalTableName: input.GlobalTableName },
        ...input.ReplicaUpdates != null && {
          ReplicaUpdates: serializeAws_json1_0ReplicaUpdateList(input.ReplicaUpdates, context)
        }
      };
    };
    var serializeAws_json1_0UpdateGlobalTableSettingsInput = (input, context) => {
      return {
        ...input.GlobalTableBillingMode != null && { GlobalTableBillingMode: input.GlobalTableBillingMode },
        ...input.GlobalTableGlobalSecondaryIndexSettingsUpdate != null && {
          GlobalTableGlobalSecondaryIndexSettingsUpdate: serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdateList(input.GlobalTableGlobalSecondaryIndexSettingsUpdate, context)
        },
        ...input.GlobalTableName != null && { GlobalTableName: input.GlobalTableName },
        ...input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate != null && {
          GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate, context)
        },
        ...input.GlobalTableProvisionedWriteCapacityUnits != null && {
          GlobalTableProvisionedWriteCapacityUnits: input.GlobalTableProvisionedWriteCapacityUnits
        },
        ...input.ReplicaSettingsUpdate != null && {
          ReplicaSettingsUpdate: serializeAws_json1_0ReplicaSettingsUpdateList(input.ReplicaSettingsUpdate, context)
        }
      };
    };
    var serializeAws_json1_0UpdateItemInput = (input, context) => {
      return {
        ...input.AttributeUpdates != null && {
          AttributeUpdates: serializeAws_json1_0AttributeUpdates(input.AttributeUpdates, context)
        },
        ...input.ConditionExpression != null && { ConditionExpression: input.ConditionExpression },
        ...input.ConditionalOperator != null && { ConditionalOperator: input.ConditionalOperator },
        ...input.Expected != null && { Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context) },
        ...input.ExpressionAttributeNames != null && {
          ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
          ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Key != null && { Key: serializeAws_json1_0Key(input.Key, context) },
        ...input.ReturnConsumedCapacity != null && { ReturnConsumedCapacity: input.ReturnConsumedCapacity },
        ...input.ReturnItemCollectionMetrics != null && {
          ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics
        },
        ...input.ReturnValues != null && { ReturnValues: input.ReturnValues },
        ...input.TableName != null && { TableName: input.TableName },
        ...input.UpdateExpression != null && { UpdateExpression: input.UpdateExpression }
      };
    };
    var serializeAws_json1_0UpdateReplicationGroupMemberAction = (input, context) => {
      return {
        ...input.GlobalSecondaryIndexes != null && {
          GlobalSecondaryIndexes: serializeAws_json1_0ReplicaGlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
        },
        ...input.KMSMasterKeyId != null && { KMSMasterKeyId: input.KMSMasterKeyId },
        ...input.ProvisionedThroughputOverride != null && {
          ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
        },
        ...input.RegionName != null && { RegionName: input.RegionName },
        ...input.TableClassOverride != null && { TableClassOverride: input.TableClassOverride }
      };
    };
    var serializeAws_json1_0UpdateTableInput = (input, context) => {
      return {
        ...input.AttributeDefinitions != null && {
          AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context)
        },
        ...input.BillingMode != null && { BillingMode: input.BillingMode },
        ...input.GlobalSecondaryIndexUpdates != null && {
          GlobalSecondaryIndexUpdates: serializeAws_json1_0GlobalSecondaryIndexUpdateList(input.GlobalSecondaryIndexUpdates, context)
        },
        ...input.ProvisionedThroughput != null && {
          ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        },
        ...input.ReplicaUpdates != null && {
          ReplicaUpdates: serializeAws_json1_0ReplicationGroupUpdateList(input.ReplicaUpdates, context)
        },
        ...input.SSESpecification != null && {
          SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context)
        },
        ...input.StreamSpecification != null && {
          StreamSpecification: serializeAws_json1_0StreamSpecification(input.StreamSpecification, context)
        },
        ...input.TableClass != null && { TableClass: input.TableClass },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0UpdateTableReplicaAutoScalingInput = (input, context) => {
      return {
        ...input.GlobalSecondaryIndexUpdates != null && {
          GlobalSecondaryIndexUpdates: serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdateList(input.GlobalSecondaryIndexUpdates, context)
        },
        ...input.ProvisionedWriteCapacityAutoScalingUpdate != null && {
          ProvisionedWriteCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingUpdate, context)
        },
        ...input.ReplicaUpdates != null && {
          ReplicaUpdates: serializeAws_json1_0ReplicaAutoScalingUpdateList(input.ReplicaUpdates, context)
        },
        ...input.TableName != null && { TableName: input.TableName }
      };
    };
    var serializeAws_json1_0UpdateTimeToLiveInput = (input, context) => {
      return {
        ...input.TableName != null && { TableName: input.TableName },
        ...input.TimeToLiveSpecification != null && {
          TimeToLiveSpecification: serializeAws_json1_0TimeToLiveSpecification(input.TimeToLiveSpecification, context)
        }
      };
    };
    var serializeAws_json1_0WriteRequest = (input, context) => {
      return {
        ...input.DeleteRequest != null && {
          DeleteRequest: serializeAws_json1_0DeleteRequest(input.DeleteRequest, context)
        },
        ...input.PutRequest != null && { PutRequest: serializeAws_json1_0PutRequest(input.PutRequest, context) }
      };
    };
    var serializeAws_json1_0WriteRequests = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return serializeAws_json1_0WriteRequest(entry, context);
      });
    };
    var deserializeAws_json1_0ArchivalSummary = (output, context) => {
      return {
        ArchivalBackupArn: (0, smithy_client_1.expectString)(output.ArchivalBackupArn),
        ArchivalDateTime: output.ArchivalDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ArchivalDateTime))) : void 0,
        ArchivalReason: (0, smithy_client_1.expectString)(output.ArchivalReason)
      };
    };
    var deserializeAws_json1_0AttributeDefinition = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        AttributeType: (0, smithy_client_1.expectString)(output.AttributeType)
      };
    };
    var deserializeAws_json1_0AttributeDefinitions = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0AttributeDefinition(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0AttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context)
        };
      }, {});
    };
    var deserializeAws_json1_0AttributeNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0AttributeValue = (output, context) => {
      if (output.B != null) {
        return {
          B: context.base64Decoder(output.B)
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.BOOL) !== void 0) {
        return { BOOL: (0, smithy_client_1.expectBoolean)(output.BOOL) };
      }
      if (output.BS != null) {
        return {
          BS: deserializeAws_json1_0BinarySetAttributeValue(output.BS, context)
        };
      }
      if (output.L != null) {
        return {
          L: deserializeAws_json1_0ListAttributeValue(output.L, context)
        };
      }
      if (output.M != null) {
        return {
          M: deserializeAws_json1_0MapAttributeValue(output.M, context)
        };
      }
      if ((0, smithy_client_1.expectString)(output.N) !== void 0) {
        return { N: (0, smithy_client_1.expectString)(output.N) };
      }
      if (output.NS != null) {
        return {
          NS: deserializeAws_json1_0NumberSetAttributeValue(output.NS, context)
        };
      }
      if ((0, smithy_client_1.expectBoolean)(output.NULL) !== void 0) {
        return { NULL: (0, smithy_client_1.expectBoolean)(output.NULL) };
      }
      if ((0, smithy_client_1.expectString)(output.S) !== void 0) {
        return { S: (0, smithy_client_1.expectString)(output.S) };
      }
      if (output.SS != null) {
        return {
          SS: deserializeAws_json1_0StringSetAttributeValue(output.SS, context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var deserializeAws_json1_0AutoScalingPolicyDescription = (output, context) => {
      return {
        PolicyName: (0, smithy_client_1.expectString)(output.PolicyName),
        TargetTrackingScalingPolicyConfiguration: output.TargetTrackingScalingPolicyConfiguration != null ? deserializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationDescription(output.TargetTrackingScalingPolicyConfiguration, context) : void 0
      };
    };
    var deserializeAws_json1_0AutoScalingPolicyDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0AutoScalingPolicyDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0AutoScalingSettingsDescription = (output, context) => {
      return {
        AutoScalingDisabled: (0, smithy_client_1.expectBoolean)(output.AutoScalingDisabled),
        AutoScalingRoleArn: (0, smithy_client_1.expectString)(output.AutoScalingRoleArn),
        MaximumUnits: (0, smithy_client_1.expectLong)(output.MaximumUnits),
        MinimumUnits: (0, smithy_client_1.expectLong)(output.MinimumUnits),
        ScalingPolicies: output.ScalingPolicies != null ? deserializeAws_json1_0AutoScalingPolicyDescriptionList(output.ScalingPolicies, context) : void 0
      };
    };
    var deserializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationDescription = (output, context) => {
      return {
        DisableScaleIn: (0, smithy_client_1.expectBoolean)(output.DisableScaleIn),
        ScaleInCooldown: (0, smithy_client_1.expectInt32)(output.ScaleInCooldown),
        ScaleOutCooldown: (0, smithy_client_1.expectInt32)(output.ScaleOutCooldown),
        TargetValue: (0, smithy_client_1.limitedParseDouble)(output.TargetValue)
      };
    };
    var deserializeAws_json1_0BackupDescription = (output, context) => {
      return {
        BackupDetails: output.BackupDetails != null ? deserializeAws_json1_0BackupDetails(output.BackupDetails, context) : void 0,
        SourceTableDetails: output.SourceTableDetails != null ? deserializeAws_json1_0SourceTableDetails(output.SourceTableDetails, context) : void 0,
        SourceTableFeatureDetails: output.SourceTableFeatureDetails != null ? deserializeAws_json1_0SourceTableFeatureDetails(output.SourceTableFeatureDetails, context) : void 0
      };
    };
    var deserializeAws_json1_0BackupDetails = (output, context) => {
      return {
        BackupArn: (0, smithy_client_1.expectString)(output.BackupArn),
        BackupCreationDateTime: output.BackupCreationDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.BackupCreationDateTime))) : void 0,
        BackupExpiryDateTime: output.BackupExpiryDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.BackupExpiryDateTime))) : void 0,
        BackupName: (0, smithy_client_1.expectString)(output.BackupName),
        BackupSizeBytes: (0, smithy_client_1.expectLong)(output.BackupSizeBytes),
        BackupStatus: (0, smithy_client_1.expectString)(output.BackupStatus),
        BackupType: (0, smithy_client_1.expectString)(output.BackupType)
      };
    };
    var deserializeAws_json1_0BackupInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0BackupNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0BackupSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0BackupSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0BackupSummary = (output, context) => {
      return {
        BackupArn: (0, smithy_client_1.expectString)(output.BackupArn),
        BackupCreationDateTime: output.BackupCreationDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.BackupCreationDateTime))) : void 0,
        BackupExpiryDateTime: output.BackupExpiryDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.BackupExpiryDateTime))) : void 0,
        BackupName: (0, smithy_client_1.expectString)(output.BackupName),
        BackupSizeBytes: (0, smithy_client_1.expectLong)(output.BackupSizeBytes),
        BackupStatus: (0, smithy_client_1.expectString)(output.BackupStatus),
        BackupType: (0, smithy_client_1.expectString)(output.BackupType),
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableId: (0, smithy_client_1.expectString)(output.TableId),
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0BatchExecuteStatementOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        Responses: output.Responses != null ? deserializeAws_json1_0PartiQLBatchResponse(output.Responses, context) : void 0
      };
    };
    var deserializeAws_json1_0BatchGetItemOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        Responses: output.Responses != null ? deserializeAws_json1_0BatchGetResponseMap(output.Responses, context) : void 0,
        UnprocessedKeys: output.UnprocessedKeys != null ? deserializeAws_json1_0BatchGetRequestMap(output.UnprocessedKeys, context) : void 0
      };
    };
    var deserializeAws_json1_0BatchGetRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0KeysAndAttributes(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_0BatchGetResponseMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0ItemList(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_0BatchStatementError = (output, context) => {
      return {
        Code: (0, smithy_client_1.expectString)(output.Code),
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0BatchStatementResponse = (output, context) => {
      return {
        Error: output.Error != null ? deserializeAws_json1_0BatchStatementError(output.Error, context) : void 0,
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0BatchWriteItemOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        ItemCollectionMetrics: output.ItemCollectionMetrics != null ? deserializeAws_json1_0ItemCollectionMetricsPerTable(output.ItemCollectionMetrics, context) : void 0,
        UnprocessedItems: output.UnprocessedItems != null ? deserializeAws_json1_0BatchWriteItemRequestMap(output.UnprocessedItems, context) : void 0
      };
    };
    var deserializeAws_json1_0BatchWriteItemRequestMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0WriteRequests(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_0BillingModeSummary = (output, context) => {
      return {
        BillingMode: (0, smithy_client_1.expectString)(output.BillingMode),
        LastUpdateToPayPerRequestDateTime: output.LastUpdateToPayPerRequestDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateToPayPerRequestDateTime))) : void 0
      };
    };
    var deserializeAws_json1_0BinarySetAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return context.base64Decoder(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0CancellationReason = (output, context) => {
      return {
        Code: (0, smithy_client_1.expectString)(output.Code),
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0,
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0CancellationReasonList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0CancellationReason(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0Capacity = (output, context) => {
      return {
        CapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.CapacityUnits),
        ReadCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.WriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0ConditionalCheckFailedException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ConsumedCapacity = (output, context) => {
      return {
        CapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.CapacityUnits),
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0SecondaryIndexesCapacityMap(output.GlobalSecondaryIndexes, context) : void 0,
        LocalSecondaryIndexes: output.LocalSecondaryIndexes != null ? deserializeAws_json1_0SecondaryIndexesCapacityMap(output.LocalSecondaryIndexes, context) : void 0,
        ReadCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.ReadCapacityUnits),
        Table: output.Table != null ? deserializeAws_json1_0Capacity(output.Table, context) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        WriteCapacityUnits: (0, smithy_client_1.limitedParseDouble)(output.WriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0ConsumedCapacityMultiple = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ConsumedCapacity(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ContinuousBackupsDescription = (output, context) => {
      return {
        ContinuousBackupsStatus: (0, smithy_client_1.expectString)(output.ContinuousBackupsStatus),
        PointInTimeRecoveryDescription: output.PointInTimeRecoveryDescription != null ? deserializeAws_json1_0PointInTimeRecoveryDescription(output.PointInTimeRecoveryDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0ContinuousBackupsUnavailableException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ContributorInsightsRuleList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0ContributorInsightsSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ContributorInsightsSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ContributorInsightsSummary = (output, context) => {
      return {
        ContributorInsightsStatus: (0, smithy_client_1.expectString)(output.ContributorInsightsStatus),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0CreateBackupOutput = (output, context) => {
      return {
        BackupDetails: output.BackupDetails != null ? deserializeAws_json1_0BackupDetails(output.BackupDetails, context) : void 0
      };
    };
    var deserializeAws_json1_0CreateGlobalTableOutput = (output, context) => {
      return {
        GlobalTableDescription: output.GlobalTableDescription != null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0CreateTableOutput = (output, context) => {
      return {
        TableDescription: output.TableDescription != null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DeleteBackupOutput = (output, context) => {
      return {
        BackupDescription: output.BackupDescription != null ? deserializeAws_json1_0BackupDescription(output.BackupDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DeleteItemOutput = (output, context) => {
      return {
        Attributes: output.Attributes != null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        ItemCollectionMetrics: output.ItemCollectionMetrics != null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : void 0
      };
    };
    var deserializeAws_json1_0DeleteRequest = (output, context) => {
      return {
        Key: output.Key != null ? deserializeAws_json1_0Key(output.Key, context) : void 0
      };
    };
    var deserializeAws_json1_0DeleteTableOutput = (output, context) => {
      return {
        TableDescription: output.TableDescription != null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeBackupOutput = (output, context) => {
      return {
        BackupDescription: output.BackupDescription != null ? deserializeAws_json1_0BackupDescription(output.BackupDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeContinuousBackupsOutput = (output, context) => {
      return {
        ContinuousBackupsDescription: output.ContinuousBackupsDescription != null ? deserializeAws_json1_0ContinuousBackupsDescription(output.ContinuousBackupsDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeContributorInsightsOutput = (output, context) => {
      return {
        ContributorInsightsRuleList: output.ContributorInsightsRuleList != null ? deserializeAws_json1_0ContributorInsightsRuleList(output.ContributorInsightsRuleList, context) : void 0,
        ContributorInsightsStatus: (0, smithy_client_1.expectString)(output.ContributorInsightsStatus),
        FailureException: output.FailureException != null ? deserializeAws_json1_0FailureException(output.FailureException, context) : void 0,
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        LastUpdateDateTime: output.LastUpdateDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateDateTime))) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0DescribeEndpointsResponse = (output, context) => {
      return {
        Endpoints: output.Endpoints != null ? deserializeAws_json1_0Endpoints(output.Endpoints, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeExportOutput = (output, context) => {
      return {
        ExportDescription: output.ExportDescription != null ? deserializeAws_json1_0ExportDescription(output.ExportDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeGlobalTableOutput = (output, context) => {
      return {
        GlobalTableDescription: output.GlobalTableDescription != null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeGlobalTableSettingsOutput = (output, context) => {
      return {
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        ReplicaSettings: output.ReplicaSettings != null ? deserializeAws_json1_0ReplicaSettingsDescriptionList(output.ReplicaSettings, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeKinesisStreamingDestinationOutput = (output, context) => {
      return {
        KinesisDataStreamDestinations: output.KinesisDataStreamDestinations != null ? deserializeAws_json1_0KinesisDataStreamDestinations(output.KinesisDataStreamDestinations, context) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0DescribeLimitsOutput = (output, context) => {
      return {
        AccountMaxReadCapacityUnits: (0, smithy_client_1.expectLong)(output.AccountMaxReadCapacityUnits),
        AccountMaxWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.AccountMaxWriteCapacityUnits),
        TableMaxReadCapacityUnits: (0, smithy_client_1.expectLong)(output.TableMaxReadCapacityUnits),
        TableMaxWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.TableMaxWriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0DescribeTableOutput = (output, context) => {
      return {
        Table: output.Table != null ? deserializeAws_json1_0TableDescription(output.Table, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeTableReplicaAutoScalingOutput = (output, context) => {
      return {
        TableAutoScalingDescription: output.TableAutoScalingDescription != null ? deserializeAws_json1_0TableAutoScalingDescription(output.TableAutoScalingDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DescribeTimeToLiveOutput = (output, context) => {
      return {
        TimeToLiveDescription: output.TimeToLiveDescription != null ? deserializeAws_json1_0TimeToLiveDescription(output.TimeToLiveDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0DuplicateItemException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0Endpoint = (output, context) => {
      return {
        Address: (0, smithy_client_1.expectString)(output.Address),
        CachePeriodInMinutes: (0, smithy_client_1.expectLong)(output.CachePeriodInMinutes)
      };
    };
    var deserializeAws_json1_0Endpoints = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0Endpoint(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ExecuteStatementOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        Items: output.Items != null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
        LastEvaluatedKey: output.LastEvaluatedKey != null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_0ExecuteTransactionOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        Responses: output.Responses != null ? deserializeAws_json1_0ItemResponseList(output.Responses, context) : void 0
      };
    };
    var deserializeAws_json1_0ExportConflictException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ExportDescription = (output, context) => {
      return {
        BilledSizeBytes: (0, smithy_client_1.expectLong)(output.BilledSizeBytes),
        ClientToken: (0, smithy_client_1.expectString)(output.ClientToken),
        EndTime: output.EndTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EndTime))) : void 0,
        ExportArn: (0, smithy_client_1.expectString)(output.ExportArn),
        ExportFormat: (0, smithy_client_1.expectString)(output.ExportFormat),
        ExportManifest: (0, smithy_client_1.expectString)(output.ExportManifest),
        ExportStatus: (0, smithy_client_1.expectString)(output.ExportStatus),
        ExportTime: output.ExportTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ExportTime))) : void 0,
        FailureCode: (0, smithy_client_1.expectString)(output.FailureCode),
        FailureMessage: (0, smithy_client_1.expectString)(output.FailureMessage),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        S3Bucket: (0, smithy_client_1.expectString)(output.S3Bucket),
        S3BucketOwner: (0, smithy_client_1.expectString)(output.S3BucketOwner),
        S3Prefix: (0, smithy_client_1.expectString)(output.S3Prefix),
        S3SseAlgorithm: (0, smithy_client_1.expectString)(output.S3SseAlgorithm),
        S3SseKmsKeyId: (0, smithy_client_1.expectString)(output.S3SseKmsKeyId),
        StartTime: output.StartTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.StartTime))) : void 0,
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableId: (0, smithy_client_1.expectString)(output.TableId)
      };
    };
    var deserializeAws_json1_0ExportNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ExportSummaries = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ExportSummary(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ExportSummary = (output, context) => {
      return {
        ExportArn: (0, smithy_client_1.expectString)(output.ExportArn),
        ExportStatus: (0, smithy_client_1.expectString)(output.ExportStatus)
      };
    };
    var deserializeAws_json1_0ExportTableToPointInTimeOutput = (output, context) => {
      return {
        ExportDescription: output.ExportDescription != null ? deserializeAws_json1_0ExportDescription(output.ExportDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0ExpressionAttributeNameMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: (0, smithy_client_1.expectString)(value)
        };
      }, {});
    };
    var deserializeAws_json1_0FailureException = (output, context) => {
      return {
        ExceptionDescription: (0, smithy_client_1.expectString)(output.ExceptionDescription),
        ExceptionName: (0, smithy_client_1.expectString)(output.ExceptionName)
      };
    };
    var deserializeAws_json1_0GetItemOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0
      };
    };
    var deserializeAws_json1_0GlobalSecondaryIndexDescription = (output, context) => {
      return {
        Backfilling: (0, smithy_client_1.expectBoolean)(output.Backfilling),
        IndexArn: (0, smithy_client_1.expectString)(output.IndexArn),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexSizeBytes: (0, smithy_client_1.expectLong)(output.IndexSizeBytes),
        IndexStatus: (0, smithy_client_1.expectString)(output.IndexStatus),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0,
        ProvisionedThroughput: output.ProvisionedThroughput != null ? deserializeAws_json1_0ProvisionedThroughputDescription(output.ProvisionedThroughput, context) : void 0
      };
    };
    var deserializeAws_json1_0GlobalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0GlobalSecondaryIndexDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0GlobalSecondaryIndexes = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0GlobalSecondaryIndexInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0GlobalSecondaryIndexInfo = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0,
        ProvisionedThroughput: output.ProvisionedThroughput != null ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context) : void 0
      };
    };
    var deserializeAws_json1_0GlobalTable = (output, context) => {
      return {
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        ReplicationGroup: output.ReplicationGroup != null ? deserializeAws_json1_0ReplicaList(output.ReplicationGroup, context) : void 0
      };
    };
    var deserializeAws_json1_0GlobalTableAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0GlobalTableDescription = (output, context) => {
      return {
        CreationDateTime: output.CreationDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDateTime))) : void 0,
        GlobalTableArn: (0, smithy_client_1.expectString)(output.GlobalTableArn),
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        GlobalTableStatus: (0, smithy_client_1.expectString)(output.GlobalTableStatus),
        ReplicationGroup: output.ReplicationGroup != null ? deserializeAws_json1_0ReplicaDescriptionList(output.ReplicationGroup, context) : void 0
      };
    };
    var deserializeAws_json1_0GlobalTableList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0GlobalTable(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0GlobalTableNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0IdempotentParameterMismatchException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0IndexNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0InternalServerError = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0InvalidEndpointException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0InvalidExportTimeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0InvalidRestoreTimeException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ItemCollectionKeyAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context)
        };
      }, {});
    };
    var deserializeAws_json1_0ItemCollectionMetrics = (output, context) => {
      return {
        ItemCollectionKey: output.ItemCollectionKey != null ? deserializeAws_json1_0ItemCollectionKeyAttributeMap(output.ItemCollectionKey, context) : void 0,
        SizeEstimateRangeGB: output.SizeEstimateRangeGB != null ? deserializeAws_json1_0ItemCollectionSizeEstimateRange(output.SizeEstimateRangeGB, context) : void 0
      };
    };
    var deserializeAws_json1_0ItemCollectionMetricsMultiple = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ItemCollectionMetrics(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ItemCollectionMetricsPerTable = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0ItemCollectionMetricsMultiple(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_0ItemCollectionSizeEstimateRange = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.limitedParseDouble)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0ItemCollectionSizeLimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ItemList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0AttributeMap(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ItemResponse = (output, context) => {
      return {
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : void 0
      };
    };
    var deserializeAws_json1_0ItemResponseList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ItemResponse(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0Key = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context)
        };
      }, {});
    };
    var deserializeAws_json1_0KeyList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0Key(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0KeysAndAttributes = (output, context) => {
      return {
        AttributesToGet: output.AttributesToGet != null ? deserializeAws_json1_0AttributeNameList(output.AttributesToGet, context) : void 0,
        ConsistentRead: (0, smithy_client_1.expectBoolean)(output.ConsistentRead),
        ExpressionAttributeNames: output.ExpressionAttributeNames != null ? deserializeAws_json1_0ExpressionAttributeNameMap(output.ExpressionAttributeNames, context) : void 0,
        Keys: output.Keys != null ? deserializeAws_json1_0KeyList(output.Keys, context) : void 0,
        ProjectionExpression: (0, smithy_client_1.expectString)(output.ProjectionExpression)
      };
    };
    var deserializeAws_json1_0KeySchema = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0KeySchemaElement(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0KeySchemaElement = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        KeyType: (0, smithy_client_1.expectString)(output.KeyType)
      };
    };
    var deserializeAws_json1_0KinesisDataStreamDestination = (output, context) => {
      return {
        DestinationStatus: (0, smithy_client_1.expectString)(output.DestinationStatus),
        DestinationStatusDescription: (0, smithy_client_1.expectString)(output.DestinationStatusDescription),
        StreamArn: (0, smithy_client_1.expectString)(output.StreamArn)
      };
    };
    var deserializeAws_json1_0KinesisDataStreamDestinations = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0KinesisDataStreamDestination(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0KinesisStreamingDestinationOutput = (output, context) => {
      return {
        DestinationStatus: (0, smithy_client_1.expectString)(output.DestinationStatus),
        StreamArn: (0, smithy_client_1.expectString)(output.StreamArn),
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0LimitExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ListAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(entry), context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ListBackupsOutput = (output, context) => {
      return {
        BackupSummaries: output.BackupSummaries != null ? deserializeAws_json1_0BackupSummaries(output.BackupSummaries, context) : void 0,
        LastEvaluatedBackupArn: (0, smithy_client_1.expectString)(output.LastEvaluatedBackupArn)
      };
    };
    var deserializeAws_json1_0ListContributorInsightsOutput = (output, context) => {
      return {
        ContributorInsightsSummaries: output.ContributorInsightsSummaries != null ? deserializeAws_json1_0ContributorInsightsSummaries(output.ContributorInsightsSummaries, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_0ListExportsOutput = (output, context) => {
      return {
        ExportSummaries: output.ExportSummaries != null ? deserializeAws_json1_0ExportSummaries(output.ExportSummaries, context) : void 0,
        NextToken: (0, smithy_client_1.expectString)(output.NextToken)
      };
    };
    var deserializeAws_json1_0ListGlobalTablesOutput = (output, context) => {
      return {
        GlobalTables: output.GlobalTables != null ? deserializeAws_json1_0GlobalTableList(output.GlobalTables, context) : void 0,
        LastEvaluatedGlobalTableName: (0, smithy_client_1.expectString)(output.LastEvaluatedGlobalTableName)
      };
    };
    var deserializeAws_json1_0ListTablesOutput = (output, context) => {
      return {
        LastEvaluatedTableName: (0, smithy_client_1.expectString)(output.LastEvaluatedTableName),
        TableNames: output.TableNames != null ? deserializeAws_json1_0TableNameList(output.TableNames, context) : void 0
      };
    };
    var deserializeAws_json1_0ListTagsOfResourceOutput = (output, context) => {
      return {
        NextToken: (0, smithy_client_1.expectString)(output.NextToken),
        Tags: output.Tags != null ? deserializeAws_json1_0TagList(output.Tags, context) : void 0
      };
    };
    var deserializeAws_json1_0LocalSecondaryIndexDescription = (output, context) => {
      return {
        IndexArn: (0, smithy_client_1.expectString)(output.IndexArn),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexSizeBytes: (0, smithy_client_1.expectLong)(output.IndexSizeBytes),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0
      };
    };
    var deserializeAws_json1_0LocalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0LocalSecondaryIndexDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0LocalSecondaryIndexes = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0LocalSecondaryIndexInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0LocalSecondaryIndexInfo = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : void 0
      };
    };
    var deserializeAws_json1_0MapAttributeValue = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context)
        };
      }, {});
    };
    var deserializeAws_json1_0NonKeyAttributeNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0NumberSetAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0PartiQLBatchResponse = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0BatchStatementResponse(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0PointInTimeRecoveryDescription = (output, context) => {
      return {
        EarliestRestorableDateTime: output.EarliestRestorableDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.EarliestRestorableDateTime))) : void 0,
        LatestRestorableDateTime: output.LatestRestorableDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LatestRestorableDateTime))) : void 0,
        PointInTimeRecoveryStatus: (0, smithy_client_1.expectString)(output.PointInTimeRecoveryStatus)
      };
    };
    var deserializeAws_json1_0PointInTimeRecoveryUnavailableException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0Projection = (output, context) => {
      return {
        NonKeyAttributes: output.NonKeyAttributes != null ? deserializeAws_json1_0NonKeyAttributeNameList(output.NonKeyAttributes, context) : void 0,
        ProjectionType: (0, smithy_client_1.expectString)(output.ProjectionType)
      };
    };
    var deserializeAws_json1_0ProvisionedThroughput = (output, context) => {
      return {
        ReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, smithy_client_1.expectLong)(output.WriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0ProvisionedThroughputDescription = (output, context) => {
      return {
        LastDecreaseDateTime: output.LastDecreaseDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastDecreaseDateTime))) : void 0,
        LastIncreaseDateTime: output.LastIncreaseDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastIncreaseDateTime))) : void 0,
        NumberOfDecreasesToday: (0, smithy_client_1.expectLong)(output.NumberOfDecreasesToday),
        ReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, smithy_client_1.expectLong)(output.WriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0ProvisionedThroughputExceededException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ProvisionedThroughputOverride = (output, context) => {
      return {
        ReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReadCapacityUnits)
      };
    };
    var deserializeAws_json1_0PutItemInputAttributeMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0AttributeValue((0, smithy_client_1.expectUnion)(value), context)
        };
      }, {});
    };
    var deserializeAws_json1_0PutItemOutput = (output, context) => {
      return {
        Attributes: output.Attributes != null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        ItemCollectionMetrics: output.ItemCollectionMetrics != null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : void 0
      };
    };
    var deserializeAws_json1_0PutRequest = (output, context) => {
      return {
        Item: output.Item != null ? deserializeAws_json1_0PutItemInputAttributeMap(output.Item, context) : void 0
      };
    };
    var deserializeAws_json1_0QueryOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        Count: (0, smithy_client_1.expectInt32)(output.Count),
        Items: output.Items != null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
        LastEvaluatedKey: output.LastEvaluatedKey != null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
        ScannedCount: (0, smithy_client_1.expectInt32)(output.ScannedCount)
      };
    };
    var deserializeAws_json1_0Replica = (output, context) => {
      return {
        RegionName: (0, smithy_client_1.expectString)(output.RegionName)
      };
    };
    var deserializeAws_json1_0ReplicaAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ReplicaAutoScalingDescription = (output, context) => {
      return {
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(output.GlobalSecondaryIndexes, context) : void 0,
        RegionName: (0, smithy_client_1.expectString)(output.RegionName),
        ReplicaProvisionedReadCapacityAutoScalingSettings: output.ReplicaProvisionedReadCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedReadCapacityAutoScalingSettings, context) : void 0,
        ReplicaProvisionedWriteCapacityAutoScalingSettings: output.ReplicaProvisionedWriteCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedWriteCapacityAutoScalingSettings, context) : void 0,
        ReplicaStatus: (0, smithy_client_1.expectString)(output.ReplicaStatus)
      };
    };
    var deserializeAws_json1_0ReplicaAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaAutoScalingDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaDescription = (output, context) => {
      return {
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescriptionList(output.GlobalSecondaryIndexes, context) : void 0,
        KMSMasterKeyId: (0, smithy_client_1.expectString)(output.KMSMasterKeyId),
        ProvisionedThroughputOverride: output.ProvisionedThroughputOverride != null ? deserializeAws_json1_0ProvisionedThroughputOverride(output.ProvisionedThroughputOverride, context) : void 0,
        RegionName: (0, smithy_client_1.expectString)(output.RegionName),
        ReplicaInaccessibleDateTime: output.ReplicaInaccessibleDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.ReplicaInaccessibleDateTime))) : void 0,
        ReplicaStatus: (0, smithy_client_1.expectString)(output.ReplicaStatus),
        ReplicaStatusDescription: (0, smithy_client_1.expectString)(output.ReplicaStatusDescription),
        ReplicaStatusPercentProgress: (0, smithy_client_1.expectString)(output.ReplicaStatusPercentProgress),
        ReplicaTableClassSummary: output.ReplicaTableClassSummary != null ? deserializeAws_json1_0TableClassSummary(output.ReplicaTableClassSummary, context) : void 0
      };
    };
    var deserializeAws_json1_0ReplicaDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescription = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexStatus: (0, smithy_client_1.expectString)(output.IndexStatus),
        ProvisionedReadCapacityAutoScalingSettings: output.ProvisionedReadCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedReadCapacityAutoScalingSettings, context) : void 0,
        ProvisionedWriteCapacityAutoScalingSettings: output.ProvisionedWriteCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedWriteCapacityAutoScalingSettings, context) : void 0
      };
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescription = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        ProvisionedThroughputOverride: output.ProvisionedThroughputOverride != null ? deserializeAws_json1_0ProvisionedThroughputOverride(output.ProvisionedThroughputOverride, context) : void 0
      };
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescription = (output, context) => {
      return {
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        IndexStatus: (0, smithy_client_1.expectString)(output.IndexStatus),
        ProvisionedReadCapacityAutoScalingSettings: output.ProvisionedReadCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedReadCapacityAutoScalingSettings, context) : void 0,
        ProvisionedReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ProvisionedReadCapacityUnits),
        ProvisionedWriteCapacityAutoScalingSettings: output.ProvisionedWriteCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedWriteCapacityAutoScalingSettings, context) : void 0,
        ProvisionedWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.ProvisionedWriteCapacityUnits)
      };
    };
    var deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0Replica(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0ReplicaNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ReplicaSettingsDescription = (output, context) => {
      return {
        RegionName: (0, smithy_client_1.expectString)(output.RegionName),
        ReplicaBillingModeSummary: output.ReplicaBillingModeSummary != null ? deserializeAws_json1_0BillingModeSummary(output.ReplicaBillingModeSummary, context) : void 0,
        ReplicaGlobalSecondaryIndexSettings: output.ReplicaGlobalSecondaryIndexSettings != null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescriptionList(output.ReplicaGlobalSecondaryIndexSettings, context) : void 0,
        ReplicaProvisionedReadCapacityAutoScalingSettings: output.ReplicaProvisionedReadCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedReadCapacityAutoScalingSettings, context) : void 0,
        ReplicaProvisionedReadCapacityUnits: (0, smithy_client_1.expectLong)(output.ReplicaProvisionedReadCapacityUnits),
        ReplicaProvisionedWriteCapacityAutoScalingSettings: output.ReplicaProvisionedWriteCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedWriteCapacityAutoScalingSettings, context) : void 0,
        ReplicaProvisionedWriteCapacityUnits: (0, smithy_client_1.expectLong)(output.ReplicaProvisionedWriteCapacityUnits),
        ReplicaStatus: (0, smithy_client_1.expectString)(output.ReplicaStatus),
        ReplicaTableClassSummary: output.ReplicaTableClassSummary != null ? deserializeAws_json1_0TableClassSummary(output.ReplicaTableClassSummary, context) : void 0
      };
    };
    var deserializeAws_json1_0ReplicaSettingsDescriptionList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0ReplicaSettingsDescription(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0RequestLimitExceeded = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ResourceInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0ResourceNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0RestoreSummary = (output, context) => {
      return {
        RestoreDateTime: output.RestoreDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.RestoreDateTime))) : void 0,
        RestoreInProgress: (0, smithy_client_1.expectBoolean)(output.RestoreInProgress),
        SourceBackupArn: (0, smithy_client_1.expectString)(output.SourceBackupArn),
        SourceTableArn: (0, smithy_client_1.expectString)(output.SourceTableArn)
      };
    };
    var deserializeAws_json1_0RestoreTableFromBackupOutput = (output, context) => {
      return {
        TableDescription: output.TableDescription != null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0RestoreTableToPointInTimeOutput = (output, context) => {
      return {
        TableDescription: output.TableDescription != null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0ScanOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        Count: (0, smithy_client_1.expectInt32)(output.Count),
        Items: output.Items != null ? deserializeAws_json1_0ItemList(output.Items, context) : void 0,
        LastEvaluatedKey: output.LastEvaluatedKey != null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : void 0,
        ScannedCount: (0, smithy_client_1.expectInt32)(output.ScannedCount)
      };
    };
    var deserializeAws_json1_0SecondaryIndexesCapacityMap = (output, context) => {
      return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
          return acc;
        }
        return {
          ...acc,
          [key]: deserializeAws_json1_0Capacity(value, context)
        };
      }, {});
    };
    var deserializeAws_json1_0SourceTableDetails = (output, context) => {
      return {
        BillingMode: (0, smithy_client_1.expectString)(output.BillingMode),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        ProvisionedThroughput: output.ProvisionedThroughput != null ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context) : void 0,
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableCreationDateTime: output.TableCreationDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.TableCreationDateTime))) : void 0,
        TableId: (0, smithy_client_1.expectString)(output.TableId),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        TableSizeBytes: (0, smithy_client_1.expectLong)(output.TableSizeBytes)
      };
    };
    var deserializeAws_json1_0SourceTableFeatureDetails = (output, context) => {
      return {
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0GlobalSecondaryIndexes(output.GlobalSecondaryIndexes, context) : void 0,
        LocalSecondaryIndexes: output.LocalSecondaryIndexes != null ? deserializeAws_json1_0LocalSecondaryIndexes(output.LocalSecondaryIndexes, context) : void 0,
        SSEDescription: output.SSEDescription != null ? deserializeAws_json1_0SSEDescription(output.SSEDescription, context) : void 0,
        StreamDescription: output.StreamDescription != null ? deserializeAws_json1_0StreamSpecification(output.StreamDescription, context) : void 0,
        TimeToLiveDescription: output.TimeToLiveDescription != null ? deserializeAws_json1_0TimeToLiveDescription(output.TimeToLiveDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0SSEDescription = (output, context) => {
      return {
        InaccessibleEncryptionDateTime: output.InaccessibleEncryptionDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.InaccessibleEncryptionDateTime))) : void 0,
        KMSMasterKeyArn: (0, smithy_client_1.expectString)(output.KMSMasterKeyArn),
        SSEType: (0, smithy_client_1.expectString)(output.SSEType),
        Status: (0, smithy_client_1.expectString)(output.Status)
      };
    };
    var deserializeAws_json1_0StreamSpecification = (output, context) => {
      return {
        StreamEnabled: (0, smithy_client_1.expectBoolean)(output.StreamEnabled),
        StreamViewType: (0, smithy_client_1.expectString)(output.StreamViewType)
      };
    };
    var deserializeAws_json1_0StringSetAttributeValue = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0TableAlreadyExistsException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0TableAutoScalingDescription = (output, context) => {
      return {
        Replicas: output.Replicas != null ? deserializeAws_json1_0ReplicaAutoScalingDescriptionList(output.Replicas, context) : void 0,
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        TableStatus: (0, smithy_client_1.expectString)(output.TableStatus)
      };
    };
    var deserializeAws_json1_0TableClassSummary = (output, context) => {
      return {
        LastUpdateDateTime: output.LastUpdateDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.LastUpdateDateTime))) : void 0,
        TableClass: (0, smithy_client_1.expectString)(output.TableClass)
      };
    };
    var deserializeAws_json1_0TableDescription = (output, context) => {
      return {
        ArchivalSummary: output.ArchivalSummary != null ? deserializeAws_json1_0ArchivalSummary(output.ArchivalSummary, context) : void 0,
        AttributeDefinitions: output.AttributeDefinitions != null ? deserializeAws_json1_0AttributeDefinitions(output.AttributeDefinitions, context) : void 0,
        BillingModeSummary: output.BillingModeSummary != null ? deserializeAws_json1_0BillingModeSummary(output.BillingModeSummary, context) : void 0,
        CreationDateTime: output.CreationDateTime != null ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.CreationDateTime))) : void 0,
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0GlobalSecondaryIndexDescriptionList(output.GlobalSecondaryIndexes, context) : void 0,
        GlobalTableVersion: (0, smithy_client_1.expectString)(output.GlobalTableVersion),
        ItemCount: (0, smithy_client_1.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : void 0,
        LatestStreamArn: (0, smithy_client_1.expectString)(output.LatestStreamArn),
        LatestStreamLabel: (0, smithy_client_1.expectString)(output.LatestStreamLabel),
        LocalSecondaryIndexes: output.LocalSecondaryIndexes != null ? deserializeAws_json1_0LocalSecondaryIndexDescriptionList(output.LocalSecondaryIndexes, context) : void 0,
        ProvisionedThroughput: output.ProvisionedThroughput != null ? deserializeAws_json1_0ProvisionedThroughputDescription(output.ProvisionedThroughput, context) : void 0,
        Replicas: output.Replicas != null ? deserializeAws_json1_0ReplicaDescriptionList(output.Replicas, context) : void 0,
        RestoreSummary: output.RestoreSummary != null ? deserializeAws_json1_0RestoreSummary(output.RestoreSummary, context) : void 0,
        SSEDescription: output.SSEDescription != null ? deserializeAws_json1_0SSEDescription(output.SSEDescription, context) : void 0,
        StreamSpecification: output.StreamSpecification != null ? deserializeAws_json1_0StreamSpecification(output.StreamSpecification, context) : void 0,
        TableArn: (0, smithy_client_1.expectString)(output.TableArn),
        TableClassSummary: output.TableClassSummary != null ? deserializeAws_json1_0TableClassSummary(output.TableClassSummary, context) : void 0,
        TableId: (0, smithy_client_1.expectString)(output.TableId),
        TableName: (0, smithy_client_1.expectString)(output.TableName),
        TableSizeBytes: (0, smithy_client_1.expectLong)(output.TableSizeBytes),
        TableStatus: (0, smithy_client_1.expectString)(output.TableStatus)
      };
    };
    var deserializeAws_json1_0TableInUseException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0TableNameList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return (0, smithy_client_1.expectString)(entry);
      });
      return retVal;
    };
    var deserializeAws_json1_0TableNotFoundException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0Tag = (output, context) => {
      return {
        Key: (0, smithy_client_1.expectString)(output.Key),
        Value: (0, smithy_client_1.expectString)(output.Value)
      };
    };
    var deserializeAws_json1_0TagList = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0Tag(entry, context);
      });
      return retVal;
    };
    var deserializeAws_json1_0TimeToLiveDescription = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        TimeToLiveStatus: (0, smithy_client_1.expectString)(output.TimeToLiveStatus)
      };
    };
    var deserializeAws_json1_0TimeToLiveSpecification = (output, context) => {
      return {
        AttributeName: (0, smithy_client_1.expectString)(output.AttributeName),
        Enabled: (0, smithy_client_1.expectBoolean)(output.Enabled)
      };
    };
    var deserializeAws_json1_0TransactGetItemsOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        Responses: output.Responses != null ? deserializeAws_json1_0ItemResponseList(output.Responses, context) : void 0
      };
    };
    var deserializeAws_json1_0TransactionCanceledException = (output, context) => {
      return {
        CancellationReasons: output.CancellationReasons != null ? deserializeAws_json1_0CancellationReasonList(output.CancellationReasons, context) : void 0,
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0TransactionConflictException = (output, context) => {
      return {
        message: (0, smithy_client_1.expectString)(output.message)
      };
    };
    var deserializeAws_json1_0TransactionInProgressException = (output, context) => {
      return {
        Message: (0, smithy_client_1.expectString)(output.Message)
      };
    };
    var deserializeAws_json1_0TransactWriteItemsOutput = (output, context) => {
      return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : void 0,
        ItemCollectionMetrics: output.ItemCollectionMetrics != null ? deserializeAws_json1_0ItemCollectionMetricsPerTable(output.ItemCollectionMetrics, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateContinuousBackupsOutput = (output, context) => {
      return {
        ContinuousBackupsDescription: output.ContinuousBackupsDescription != null ? deserializeAws_json1_0ContinuousBackupsDescription(output.ContinuousBackupsDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateContributorInsightsOutput = (output, context) => {
      return {
        ContributorInsightsStatus: (0, smithy_client_1.expectString)(output.ContributorInsightsStatus),
        IndexName: (0, smithy_client_1.expectString)(output.IndexName),
        TableName: (0, smithy_client_1.expectString)(output.TableName)
      };
    };
    var deserializeAws_json1_0UpdateGlobalTableOutput = (output, context) => {
      return {
        GlobalTableDescription: output.GlobalTableDescription != null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateGlobalTableSettingsOutput = (output, context) => {
      return {
        GlobalTableName: (0, smithy_client_1.expectString)(output.GlobalTableName),
        ReplicaSettings: output.ReplicaSettings != null ? deserializeAws_json1_0ReplicaSettingsDescriptionList(output.ReplicaSettings, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateItemOutput = (output, context) => {
      return {
        Attributes: output.Attributes != null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : void 0,
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : void 0,
        ItemCollectionMetrics: output.ItemCollectionMetrics != null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateTableOutput = (output, context) => {
      return {
        TableDescription: output.TableDescription != null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateTableReplicaAutoScalingOutput = (output, context) => {
      return {
        TableAutoScalingDescription: output.TableAutoScalingDescription != null ? deserializeAws_json1_0TableAutoScalingDescription(output.TableAutoScalingDescription, context) : void 0
      };
    };
    var deserializeAws_json1_0UpdateTimeToLiveOutput = (output, context) => {
      return {
        TimeToLiveSpecification: output.TimeToLiveSpecification != null ? deserializeAws_json1_0TimeToLiveSpecification(output.TimeToLiveSpecification, context) : void 0
      };
    };
    var deserializeAws_json1_0WriteRequest = (output, context) => {
      return {
        DeleteRequest: output.DeleteRequest != null ? deserializeAws_json1_0DeleteRequest(output.DeleteRequest, context) : void 0,
        PutRequest: output.PutRequest != null ? deserializeAws_json1_0PutRequest(output.PutRequest, context) : void 0
      };
    };
    var deserializeAws_json1_0WriteRequests = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_json1_0WriteRequest(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers[\\"x-amzn-requestid\\"]) !== null && _a !== void 0 ? _a : output.headers[\\"x-amzn-request-id\\"],
        extendedRequestId: output.headers[\\"x-amz-id-2\\"],
        cfId: output.headers[\\"x-amz-cf-id\\"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = \\"https\\", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: \\"POST\\",
        path: basePath.endsWith(\\"/\\") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === \\"number\\") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(\\":\\") >= 0) {
          cleanValue = cleanValue.split(\\":\\")[0];
        }
        if (cleanValue.indexOf(\\"#\\") >= 0) {
          cleanValue = cleanValue.split(\\"#\\")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, \\"x-amzn-errortype\\");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data[\\"__type\\"] !== void 0) {
        return sanitizeErrorCode(data[\\"__type\\"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js
var require_BatchExecuteStatementCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchExecuteStatementCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.BatchExecuteStatementCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchExecuteStatementCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"BatchExecuteStatementCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchExecuteStatementInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchExecuteStatementOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0BatchExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0BatchExecuteStatementCommand)(output, context);
      }
    };
    exports2.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js
var require_BatchGetItemCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchGetItemCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.BatchGetItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchGetItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"BatchGetItemCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchGetItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchGetItemOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0BatchGetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0BatchGetItemCommand)(output, context);
      }
    };
    exports2.BatchGetItemCommand = BatchGetItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js
var require_BatchWriteItemCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/BatchWriteItemCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.BatchWriteItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var BatchWriteItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"BatchWriteItemCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.BatchWriteItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.BatchWriteItemOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0BatchWriteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0BatchWriteItemCommand)(output, context);
      }
    };
    exports2.BatchWriteItemCommand = BatchWriteItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js
var require_CreateBackupCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateBackupCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.CreateBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"CreateBackupCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateBackupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateBackupOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0CreateBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0CreateBackupCommand)(output, context);
      }
    };
    exports2.CreateBackupCommand = CreateBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js
var require_CreateGlobalTableCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateGlobalTableCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.CreateGlobalTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateGlobalTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"CreateGlobalTableCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateGlobalTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateGlobalTableOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0CreateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0CreateGlobalTableCommand)(output, context);
      }
    };
    exports2.CreateGlobalTableCommand = CreateGlobalTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js
var require_CreateTableCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/CreateTableCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.CreateTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var CreateTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"CreateTableCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateTableOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0CreateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0CreateTableCommand)(output, context);
      }
    };
    exports2.CreateTableCommand = CreateTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js
var require_DeleteBackupCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteBackupCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DeleteBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DeleteBackupCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBackupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteBackupOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DeleteBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DeleteBackupCommand)(output, context);
      }
    };
    exports2.DeleteBackupCommand = DeleteBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js
var require_DeleteItemCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteItemCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DeleteItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DeleteItemCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteItemOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DeleteItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DeleteItemCommand)(output, context);
      }
    };
    exports2.DeleteItemCommand = DeleteItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js
var require_DeleteTableCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DeleteTableCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DeleteTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DeleteTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DeleteTableCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteTableOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DeleteTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DeleteTableCommand)(output, context);
      }
    };
    exports2.DeleteTableCommand = DeleteTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js
var require_DescribeBackupCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeBackupCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeBackupCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeBackupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeBackupOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeBackupCommand)(output, context);
      }
    };
    exports2.DescribeBackupCommand = DescribeBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js
var require_DescribeContinuousBackupsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContinuousBackupsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeContinuousBackupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContinuousBackupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeContinuousBackupsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeContinuousBackupsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeContinuousBackupsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeContinuousBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeContinuousBackupsCommand)(output, context);
      }
    };
    exports2.DescribeContinuousBackupsCommand = DescribeContinuousBackupsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js
var require_DescribeContributorInsightsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeContributorInsightsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeContributorInsightsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeContributorInsightsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeContributorInsightsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeContributorInsightsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeContributorInsightsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeContributorInsightsCommand)(output, context);
      }
    };
    exports2.DescribeContributorInsightsCommand = DescribeContributorInsightsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js
var require_DescribeEndpointsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeEndpointsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeEndpointsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeEndpointsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeEndpointsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeEndpointsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeEndpointsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeEndpointsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeEndpointsCommand)(output, context);
      }
    };
    exports2.DescribeEndpointsCommand = DescribeEndpointsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js
var require_DescribeExportCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeExportCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeExportCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeExportCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeExportCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeExportInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeExportOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeExportCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeExportCommand)(output, context);
      }
    };
    exports2.DescribeExportCommand = DescribeExportCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js
var require_DescribeGlobalTableCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeGlobalTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeGlobalTableCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeGlobalTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeGlobalTableOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeGlobalTableCommand)(output, context);
      }
    };
    exports2.DescribeGlobalTableCommand = DescribeGlobalTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js
var require_DescribeGlobalTableSettingsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeGlobalTableSettingsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeGlobalTableSettingsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeGlobalTableSettingsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeGlobalTableSettingsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeGlobalTableSettingsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeGlobalTableSettingsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeGlobalTableSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeGlobalTableSettingsCommand)(output, context);
      }
    };
    exports2.DescribeGlobalTableSettingsCommand = DescribeGlobalTableSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js
var require_DescribeKinesisStreamingDestinationCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeKinesisStreamingDestinationCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeKinesisStreamingDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeKinesisStreamingDestinationCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeKinesisStreamingDestinationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeKinesisStreamingDestinationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports2.DescribeKinesisStreamingDestinationCommand = DescribeKinesisStreamingDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js
var require_DescribeLimitsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeLimitsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeLimitsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeLimitsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeLimitsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeLimitsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeLimitsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeLimitsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeLimitsCommand)(output, context);
      }
    };
    exports2.DescribeLimitsCommand = DescribeLimitsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js
var require_DescribeTableCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeTableCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTableOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeTableCommand)(output, context);
      }
    };
    exports2.DescribeTableCommand = DescribeTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js
var require_DescribeTableReplicaAutoScalingCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTableReplicaAutoScalingCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeTableReplicaAutoScalingCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTableReplicaAutoScalingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeTableReplicaAutoScalingCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTableReplicaAutoScalingInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTableReplicaAutoScalingOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeTableReplicaAutoScalingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand)(output, context);
      }
    };
    exports2.DescribeTableReplicaAutoScalingCommand = DescribeTableReplicaAutoScalingCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js
var require_DescribeTimeToLiveCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DescribeTimeToLiveCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DescribeTimeToLiveCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DescribeTimeToLiveCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DescribeTimeToLiveCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DescribeTimeToLiveInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DescribeTimeToLiveOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DescribeTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DescribeTimeToLiveCommand)(output, context);
      }
    };
    exports2.DescribeTimeToLiveCommand = DescribeTimeToLiveCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js
var require_DisableKinesisStreamingDestinationCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/DisableKinesisStreamingDestinationCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DisableKinesisStreamingDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var DisableKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"DisableKinesisStreamingDestinationCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0DisableKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0DisableKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports2.DisableKinesisStreamingDestinationCommand = DisableKinesisStreamingDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js
var require_EnableKinesisStreamingDestinationCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/EnableKinesisStreamingDestinationCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.EnableKinesisStreamingDestinationCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var EnableKinesisStreamingDestinationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"EnableKinesisStreamingDestinationCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.KinesisStreamingDestinationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0EnableKinesisStreamingDestinationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0EnableKinesisStreamingDestinationCommand)(output, context);
      }
    };
    exports2.EnableKinesisStreamingDestinationCommand = EnableKinesisStreamingDestinationCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js
var require_ExecuteStatementCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteStatementCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ExecuteStatementCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteStatementCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"ExecuteStatementCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ExecuteStatementInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExecuteStatementOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ExecuteStatementCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ExecuteStatementCommand)(output, context);
      }
    };
    exports2.ExecuteStatementCommand = ExecuteStatementCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js
var require_ExecuteTransactionCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExecuteTransactionCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ExecuteTransactionCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExecuteTransactionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"ExecuteTransactionCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ExecuteTransactionInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExecuteTransactionOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ExecuteTransactionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ExecuteTransactionCommand)(output, context);
      }
    };
    exports2.ExecuteTransactionCommand = ExecuteTransactionCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js
var require_ExportTableToPointInTimeCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ExportTableToPointInTimeCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ExportTableToPointInTimeCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ExportTableToPointInTimeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"ExportTableToPointInTimeCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ExportTableToPointInTimeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ExportTableToPointInTimeOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ExportTableToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ExportTableToPointInTimeCommand)(output, context);
      }
    };
    exports2.ExportTableToPointInTimeCommand = ExportTableToPointInTimeCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js
var require_GetItemCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/GetItemCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.GetItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var GetItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"GetItemCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetItemOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0GetItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0GetItemCommand)(output, context);
      }
    };
    exports2.GetItemCommand = GetItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js
var require_ListBackupsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListBackupsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ListBackupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListBackupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"ListBackupsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListBackupsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListBackupsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListBackupsCommand)(output, context);
      }
    };
    exports2.ListBackupsCommand = ListBackupsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js
var require_ListContributorInsightsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListContributorInsightsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ListContributorInsightsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListContributorInsightsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"ListContributorInsightsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListContributorInsightsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListContributorInsightsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListContributorInsightsCommand)(output, context);
      }
    };
    exports2.ListContributorInsightsCommand = ListContributorInsightsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js
var require_ListExportsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListExportsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ListExportsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListExportsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"ListExportsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListExportsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListExportsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListExportsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListExportsCommand)(output, context);
      }
    };
    exports2.ListExportsCommand = ListExportsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js
var require_ListGlobalTablesCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListGlobalTablesCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ListGlobalTablesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListGlobalTablesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"ListGlobalTablesCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListGlobalTablesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListGlobalTablesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListGlobalTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListGlobalTablesCommand)(output, context);
      }
    };
    exports2.ListGlobalTablesCommand = ListGlobalTablesCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js
var require_ListTablesCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTablesCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ListTablesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTablesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"ListTablesCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTablesInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTablesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListTablesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListTablesCommand)(output, context);
      }
    };
    exports2.ListTablesCommand = ListTablesCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js
var require_ListTagsOfResourceCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ListTagsOfResourceCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ListTagsOfResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ListTagsOfResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"ListTagsOfResourceCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListTagsOfResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListTagsOfResourceOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ListTagsOfResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ListTagsOfResourceCommand)(output, context);
      }
    };
    exports2.ListTagsOfResourceCommand = ListTagsOfResourceCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js
var require_PutItemCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/PutItemCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.PutItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var PutItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"PutItemCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutItemOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0PutItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0PutItemCommand)(output, context);
      }
    };
    exports2.PutItemCommand = PutItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js
var require_QueryCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/QueryCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.QueryCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var QueryCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"QueryCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.QueryInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.QueryOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0QueryCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0QueryCommand)(output, context);
      }
    };
    exports2.QueryCommand = QueryCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js
var require_RestoreTableFromBackupCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableFromBackupCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.RestoreTableFromBackupCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableFromBackupCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"RestoreTableFromBackupCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RestoreTableFromBackupInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RestoreTableFromBackupOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0RestoreTableFromBackupCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0RestoreTableFromBackupCommand)(output, context);
      }
    };
    exports2.RestoreTableFromBackupCommand = RestoreTableFromBackupCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js
var require_RestoreTableToPointInTimeCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/RestoreTableToPointInTimeCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.RestoreTableToPointInTimeCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var RestoreTableToPointInTimeCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"RestoreTableToPointInTimeCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RestoreTableToPointInTimeInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RestoreTableToPointInTimeOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0RestoreTableToPointInTimeCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0RestoreTableToPointInTimeCommand)(output, context);
      }
    };
    exports2.RestoreTableToPointInTimeCommand = RestoreTableToPointInTimeCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js
var require_ScanCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/ScanCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ScanCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var ScanCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"ScanCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ScanInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ScanOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0ScanCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0ScanCommand)(output, context);
      }
    };
    exports2.ScanCommand = ScanCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js
var require_TagResourceCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TagResourceCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.TagResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"TagResourceCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TagResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0TagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0TagResourceCommand)(output, context);
      }
    };
    exports2.TagResourceCommand = TagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js
var require_TransactGetItemsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactGetItemsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.TransactGetItemsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactGetItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"TransactGetItemsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TransactGetItemsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.TransactGetItemsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0TransactGetItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0TransactGetItemsCommand)(output, context);
      }
    };
    exports2.TransactGetItemsCommand = TransactGetItemsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js
var require_TransactWriteItemsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/TransactWriteItemsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.TransactWriteItemsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var TransactWriteItemsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"TransactWriteItemsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.TransactWriteItemsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.TransactWriteItemsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0TransactWriteItemsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0TransactWriteItemsCommand)(output, context);
      }
    };
    exports2.TransactWriteItemsCommand = TransactWriteItemsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js
var require_UntagResourceCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UntagResourceCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.UntagResourceCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UntagResourceCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"UntagResourceCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UntagResourceInputFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UntagResourceCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UntagResourceCommand)(output, context);
      }
    };
    exports2.UntagResourceCommand = UntagResourceCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js
var require_UpdateContinuousBackupsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContinuousBackupsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.UpdateContinuousBackupsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContinuousBackupsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"UpdateContinuousBackupsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateContinuousBackupsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateContinuousBackupsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateContinuousBackupsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateContinuousBackupsCommand)(output, context);
      }
    };
    exports2.UpdateContinuousBackupsCommand = UpdateContinuousBackupsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js
var require_UpdateContributorInsightsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateContributorInsightsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.UpdateContributorInsightsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateContributorInsightsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"UpdateContributorInsightsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateContributorInsightsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateContributorInsightsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateContributorInsightsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateContributorInsightsCommand)(output, context);
      }
    };
    exports2.UpdateContributorInsightsCommand = UpdateContributorInsightsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js
var require_UpdateGlobalTableCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.UpdateGlobalTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"UpdateGlobalTableCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateGlobalTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateGlobalTableOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateGlobalTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateGlobalTableCommand)(output, context);
      }
    };
    exports2.UpdateGlobalTableCommand = UpdateGlobalTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js
var require_UpdateGlobalTableSettingsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateGlobalTableSettingsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.UpdateGlobalTableSettingsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateGlobalTableSettingsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"UpdateGlobalTableSettingsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateGlobalTableSettingsInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateGlobalTableSettingsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateGlobalTableSettingsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateGlobalTableSettingsCommand)(output, context);
      }
    };
    exports2.UpdateGlobalTableSettingsCommand = UpdateGlobalTableSettingsCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js
var require_UpdateItemCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateItemCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.UpdateItemCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateItemCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"UpdateItemCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateItemInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateItemOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateItemCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateItemCommand)(output, context);
      }
    };
    exports2.UpdateItemCommand = UpdateItemCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js
var require_UpdateTableCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.UpdateTableCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"UpdateTableCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTableInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTableOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateTableCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateTableCommand)(output, context);
      }
    };
    exports2.UpdateTableCommand = UpdateTableCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js
var require_UpdateTableReplicaAutoScalingCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTableReplicaAutoScalingCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.UpdateTableReplicaAutoScalingCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTableReplicaAutoScalingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"UpdateTableReplicaAutoScalingCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTableReplicaAutoScalingInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTableReplicaAutoScalingOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateTableReplicaAutoScalingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand)(output, context);
      }
    };
    exports2.UpdateTableReplicaAutoScalingCommand = UpdateTableReplicaAutoScalingCommand;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js
var require_UpdateTimeToLiveCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/UpdateTimeToLiveCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.UpdateTimeToLiveCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_0();
    var Aws_json1_0_1 = require_Aws_json1_0();
    var UpdateTimeToLiveCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"DynamoDBClient\\";
        const commandName = \\"UpdateTimeToLiveCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.UpdateTimeToLiveInputFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.UpdateTimeToLiveOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_json1_0_1.serializeAws_json1_0UpdateTimeToLiveCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_json1_0_1.deserializeAws_json1_0UpdateTimeToLiveCommand)(output, context);
      }
    };
    exports2.UpdateTimeToLiveCommand = UpdateTimeToLiveCommand;
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js
var require_booleanSelector = __commonJS({
  \\"node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.booleanSelector = exports2.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2[\\"ENV\\"] = \\"env\\";
      SelectorType2[\\"CONFIG\\"] = \\"shared config entry\\";
    })(SelectorType = exports2.SelectorType || (exports2.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === \\"true\\")
        return true;
      if (obj[key] === \\"false\\")
        return false;
      throw new Error(\`Cannot load \${type} \\"\${key}\\". Expected \\"true\\" or \\"false\\", got \${obj[key]}.\`);
    };
    exports2.booleanSelector = booleanSelector;
  }
});

// node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js
var require_dist_cjs5 = __commonJS({
  \\"node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_booleanSelector(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js
var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = exports2.CONFIG_USE_DUALSTACK_ENDPOINT = exports2.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports2.ENV_USE_DUALSTACK_ENDPOINT = \\"AWS_USE_DUALSTACK_ENDPOINT\\";
    exports2.CONFIG_USE_DUALSTACK_ENDPOINT = \\"use_dualstack_endpoint\\";
    exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js
var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_FIPS_ENDPOINT = exports2.CONFIG_USE_FIPS_ENDPOINT = exports2.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs5();
    exports2.ENV_USE_FIPS_ENDPOINT = \\"AWS_USE_FIPS_ENDPOINT\\";
    exports2.CONFIG_USE_FIPS_ENDPOINT = \\"use_fips_endpoint\\";
    exports2.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js
var require_normalizeProvider = __commonJS({
  \\"node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === \\"function\\")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports2.normalizeProvider = normalizeProvider;
  }
});

// node_modules/@aws-sdk/util-middleware/dist-cjs/index.js
var require_dist_cjs6 = __commonJS({
  \\"node_modules/@aws-sdk/util-middleware/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_normalizeProvider(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js
var require_resolveCustomEndpointsConfig = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var resolveCustomEndpointsConfig = (input) => {
      var _a;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === \\"string\\" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint)
      };
    };
    exports2.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js
var require_getEndpointFromRegion = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error(\\"Invalid region in client config\\");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error(\\"Cannot resolve hostname from client config\\");
      }
      return input.urlParser(\`\${tls ? \\"https:\\" : \\"http:\\"}//\${hostname}\`);
    };
    exports2.getEndpointFromRegion = getEndpointFromRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js
var require_resolveEndpointsConfig = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)(input.useDualstackEndpoint);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === \\"string\\" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: endpoint ? true : false,
        useDualstackEndpoint
      };
    };
    exports2.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js
var require_endpointsConfig = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports2);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js
var require_config = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = exports2.NODE_REGION_CONFIG_OPTIONS = exports2.REGION_INI_NAME = exports2.REGION_ENV_NAME = void 0;
    exports2.REGION_ENV_NAME = \\"AWS_REGION\\";
    exports2.REGION_INI_NAME = \\"region\\";
    exports2.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports2.REGION_INI_NAME],
      default: () => {
        throw new Error(\\"Region is missing\\");
      }
    };
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: \\"credentials\\"
    };
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js
var require_isFipsRegion = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === \\"string\\" && (region.startsWith(\\"fips-\\") || region.endsWith(\\"-fips\\"));
    exports2.isFipsRegion = isFipsRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js
var require_getRealRegion = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? [\\"fips-aws-global\\", \\"aws-fips\\"].includes(region) ? \\"us-east-1\\" : region.replace(/fips-(dkr-|prod-)?|-fips/, \\"\\") : region;
    exports2.getRealRegion = getRealRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js
var require_resolveRegionConfig = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error(\\"Region is missing\\");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === \\"string\\") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === \\"string\\" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint === \\"boolean\\" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports2.resolveRegionConfig = resolveRegionConfig;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js
var require_regionConfig = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_config(), exports2);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js
var require_PartitionHash = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js
var require_RegionHash = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js
var require_getHostnameFromVariants = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes(\\"fips\\") && useDualstackEndpoint === tags.includes(\\"dualstack\\"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports2.getHostnameFromVariants = getHostnameFromVariants;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js
var require_getResolvedHostname = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace(\\"{region}\\", resolvedRegion) : void 0;
    exports2.getResolvedHostname = getResolvedHostname;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js
var require_getResolvedPartition = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : \\"aws\\";
    };
    exports2.getResolvedPartition = getResolvedPartition;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js
var require_getResolvedSigningRegion = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace(\\"\\\\\\\\\\\\\\\\\\", \\"\\\\\\\\\\").replace(/^\\\\^/g, \\"\\\\\\\\.\\").replace(/\\\\$$/g, \\"\\\\\\\\.\\");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports2.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js
var require_getRegionInfo = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(\`Endpoint resolution failed for: \${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}\`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    };
    exports2.getRegionInfo = getRegionInfo;
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js
var require_regionInfo = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_PartitionHash(), exports2);
    tslib_1.__exportStar(require_RegionHash(), exports2);
    tslib_1.__exportStar(require_getRegionInfo(), exports2);
  }
});

// node_modules/@aws-sdk/config-resolver/dist-cjs/index.js
var require_dist_cjs7 = __commonJS({
  \\"node_modules/@aws-sdk/config-resolver/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_endpointsConfig(), exports2);
    tslib_1.__exportStar(require_regionConfig(), exports2);
    tslib_1.__exportStar(require_regionInfo(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js
var require_dist_cjs8 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getContentLengthPlugin = exports2.contentLengthMiddlewareOptions = exports2.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var CONTENT_LENGTH_HEADER = \\"content-length\\";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports2.contentLengthMiddleware = contentLengthMiddleware;
    exports2.contentLengthMiddlewareOptions = {
      step: \\"build\\",
      tags: [\\"SET_CONTENT_LENGTH\\", \\"CONTENT_LENGTH\\"],
      name: \\"contentLengthMiddleware\\",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports2.contentLengthMiddlewareOptions);
      }
    });
    exports2.getContentLengthPlugin = getContentLengthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js
var require_configurations = __commonJS({
  \\"node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/configurations.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = void 0;
    var ENV_ENDPOINT_DISCOVERY = [\\"AWS_ENABLE_ENDPOINT_DISCOVERY\\", \\"AWS_ENDPOINT_DISCOVERY_ENABLED\\"];
    var CONFIG_ENDPOINT_DISCOVERY = \\"endpoint_discovery_enabled\\";
    var isFalsy = (value) => [\\"false\\", \\"0\\"].indexOf(value) >= 0;
    exports2.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        for (let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++) {
          const envKey = ENV_ENDPOINT_DISCOVERY[i];
          if (envKey in env) {
            const value = env[envKey];
            if (value === \\"\\") {
              throw Error(\`Environment variable \${envKey} can't be empty of undefined, got \\"\${value}\\"\`);
            }
            return !isFalsy(value);
          }
        }
      },
      configFileSelector: (profile) => {
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
          const value = profile[CONFIG_ENDPOINT_DISCOVERY];
          if (value === void 0) {
            throw Error(\`Shared config entry \${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got \\"\${value}\\"\`);
          }
          return !isFalsy(value);
        }
      },
      default: void 0
    };
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js
var require_getCacheKey = __commonJS({
  \\"node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getCacheKey.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getCacheKey = void 0;
    var getCacheKey = async (commandName, config, options) => {
      const { accessKeyId } = await config.credentials();
      const { identifiers } = options;
      return JSON.stringify({
        ...accessKeyId && { accessKeyId },
        ...identifiers && {
          commandName,
          identifiers: Object.entries(identifiers).sort().reduce((acc, [key, value]) => ({ ...acc, [key]: value }), {})
        }
      });
    };
    exports2.getCacheKey = getCacheKey;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js
var require_updateDiscoveredEndpointInCache = __commonJS({
  \\"node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/updateDiscoveredEndpointInCache.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.updateDiscoveredEndpointInCache = void 0;
    var requestQueue = {};
    var updateDiscoveredEndpointInCache = async (config, options) => new Promise((resolve, reject) => {
      const { endpointCache } = config;
      const { cacheKey, commandName, identifiers } = options;
      const endpoints = endpointCache.get(cacheKey);
      if (endpoints && endpoints.length === 1 && endpoints[0].Address === \\"\\") {
        if (options.isDiscoveredEndpointRequired) {
          if (!requestQueue[cacheKey])
            requestQueue[cacheKey] = [];
          requestQueue[cacheKey].push({ resolve, reject });
        } else {
          resolve();
        }
      } else if (endpoints && endpoints.length > 0) {
        resolve();
      } else {
        const placeholderEndpoints = [{ Address: \\"\\", CachePeriodInMinutes: 1 }];
        endpointCache.set(cacheKey, placeholderEndpoints);
        const command = new options.endpointDiscoveryCommandCtor({
          Operation: commandName.slice(0, -7),
          Identifiers: identifiers
        });
        const handler = command.resolveMiddleware(options.clientStack, config, options.options);
        handler(command).then((result) => {
          endpointCache.set(cacheKey, result.output.Endpoints);
          if (requestQueue[cacheKey]) {
            requestQueue[cacheKey].forEach(({ resolve: resolve2 }) => {
              resolve2();
            });
            delete requestQueue[cacheKey];
          }
          resolve();
        }).catch((error) => {
          var _a;
          if (error.name === \\"InvalidEndpointException\\" || ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 421) {
            endpointCache.delete(cacheKey);
          }
          const errorToThrow = Object.assign(new Error(\`The operation to discover endpoint failed. Please retry, or provide a custom endpoint and disable endpoint discovery to proceed.\`), { reason: error });
          if (requestQueue[cacheKey]) {
            requestQueue[cacheKey].forEach(({ reject: reject2 }) => {
              reject2(errorToThrow);
            });
            delete requestQueue[cacheKey];
          }
          if (options.isDiscoveredEndpointRequired) {
            reject(errorToThrow);
          } else {
            endpointCache.set(cacheKey, placeholderEndpoints);
            resolve();
          }
        });
      }
    });
    exports2.updateDiscoveredEndpointInCache = updateDiscoveredEndpointInCache;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js
var require_endpointDiscoveryMiddleware = __commonJS({
  \\"node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/endpointDiscoveryMiddleware.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.endpointDiscoveryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var getCacheKey_1 = require_getCacheKey();
    var updateDiscoveredEndpointInCache_1 = require_updateDiscoveredEndpointInCache();
    var endpointDiscoveryMiddleware = (config, middlewareConfig) => (next, context) => async (args) => {
      if (config.isCustomEndpoint) {
        if (config.isClientEndpointDiscoveryEnabled) {
          throw new Error(\`Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.\`);
        }
        return next(args);
      }
      const { endpointDiscoveryCommandCtor } = config;
      const { isDiscoveredEndpointRequired, identifiers } = middlewareConfig;
      const { clientName, commandName } = context;
      const isEndpointDiscoveryEnabled = await config.endpointDiscoveryEnabled();
      const cacheKey = await (0, getCacheKey_1.getCacheKey)(commandName, config, { identifiers });
      if (isDiscoveredEndpointRequired) {
        if (isEndpointDiscoveryEnabled === false) {
          throw new Error(\`Endpoint Discovery is disabled but \${commandName} on \${clientName} requires it. Please check your configurations.\`);
        }
        await (0, updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(config, {
          ...middlewareConfig,
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor
        });
      } else if (isEndpointDiscoveryEnabled) {
        (0, updateDiscoveredEndpointInCache_1.updateDiscoveredEndpointInCache)(config, {
          ...middlewareConfig,
          commandName,
          cacheKey,
          endpointDiscoveryCommandCtor
        });
      }
      const { request } = args;
      if (cacheKey && protocol_http_1.HttpRequest.isInstance(request)) {
        const endpoint = config.endpointCache.getEndpoint(cacheKey);
        if (endpoint) {
          request.hostname = endpoint;
        }
      }
      return next(args);
    };
    exports2.endpointDiscoveryMiddleware = endpointDiscoveryMiddleware;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js
var require_getEndpointDiscoveryPlugin = __commonJS({
  \\"node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/getEndpointDiscoveryPlugin.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getEndpointDiscoveryOptionalPlugin = exports2.getEndpointDiscoveryRequiredPlugin = exports2.getEndpointDiscoveryPlugin = exports2.endpointDiscoveryMiddlewareOptions = void 0;
    var endpointDiscoveryMiddleware_1 = require_endpointDiscoveryMiddleware();
    exports2.endpointDiscoveryMiddlewareOptions = {
      name: \\"endpointDiscoveryMiddleware\\",
      step: \\"build\\",
      tags: [\\"ENDPOINT_DISCOVERY\\"],
      override: true
    };
    var getEndpointDiscoveryPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, middlewareConfig), exports2.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports2.getEndpointDiscoveryPlugin = getEndpointDiscoveryPlugin;
    var getEndpointDiscoveryRequiredPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: true }), exports2.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports2.getEndpointDiscoveryRequiredPlugin = getEndpointDiscoveryRequiredPlugin;
    var getEndpointDiscoveryOptionalPlugin = (pluginConfig, middlewareConfig) => ({
      applyToStack: (commandStack) => {
        commandStack.add((0, endpointDiscoveryMiddleware_1.endpointDiscoveryMiddleware)(pluginConfig, { ...middlewareConfig, isDiscoveredEndpointRequired: false }), exports2.endpointDiscoveryMiddlewareOptions);
      }
    });
    exports2.getEndpointDiscoveryOptionalPlugin = getEndpointDiscoveryOptionalPlugin;
  }
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js
var require_Endpoint = __commonJS({
  \\"node_modules/@aws-sdk/endpoint-cache/dist-cjs/Endpoint.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
  }
});

// node_modules/obliterator/iterator.js
var require_iterator = __commonJS({
  \\"node_modules/obliterator/iterator.js\\"(exports2, module2) {
    function Iterator(next) {
      Object.defineProperty(this, \\"_next\\", {
        writable: false,
        enumerable: false,
        value: next
      });
      this.done = false;
    }
    Iterator.prototype.next = function() {
      if (this.done)
        return { done: true };
      var step = this._next();
      if (step.done)
        this.done = true;
      return step;
    };
    if (typeof Symbol !== \\"undefined\\")
      Iterator.prototype[Symbol.iterator] = function() {
        return this;
      };
    Iterator.of = function() {
      var args = arguments, l = args.length, i = 0;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        return { done: false, value: args[i++] };
      });
    };
    Iterator.empty = function() {
      var iterator = new Iterator(null);
      iterator.done = true;
      return iterator;
    };
    Iterator.is = function(value) {
      if (value instanceof Iterator)
        return true;
      return typeof value === \\"object\\" && value !== null && typeof value.next === \\"function\\";
    };
    module2.exports = Iterator;
  }
});

// node_modules/obliterator/foreach.js
var require_foreach = __commonJS({
  \\"node_modules/obliterator/foreach.js\\"(exports2, module2) {
    var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== \\"undefined\\";
    var SYMBOL_SUPPORT = typeof Symbol !== \\"undefined\\";
    function forEach(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error(\\"obliterator/forEach: invalid iterable.\\");
      if (typeof callback !== \\"function\\")
        throw new Error(\\"obliterator/forEach: expecting a callback.\\");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === \\"string\\" || iterable.toString() === \\"[object Arguments]\\") {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], i);
        return;
      }
      if (typeof iterable.forEach === \\"function\\") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== \\"function\\") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === \\"function\\") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, i);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    }
    forEach.forEachWithNullKeys = function(iterable, callback) {
      var iterator, k, i, l, s;
      if (!iterable)
        throw new Error(\\"obliterator/forEachWithNullKeys: invalid iterable.\\");
      if (typeof callback !== \\"function\\")
        throw new Error(\\"obliterator/forEachWithNullKeys: expecting a callback.\\");
      if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === \\"string\\" || iterable.toString() === \\"[object Arguments]\\") {
        for (i = 0, l = iterable.length; i < l; i++)
          callback(iterable[i], null);
        return;
      }
      if (iterable instanceof Set) {
        iterable.forEach(function(value) {
          callback(value, null);
        });
        return;
      }
      if (typeof iterable.forEach === \\"function\\") {
        iterable.forEach(callback);
        return;
      }
      if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== \\"function\\") {
        iterable = iterable[Symbol.iterator]();
      }
      if (typeof iterable.next === \\"function\\") {
        iterator = iterable;
        i = 0;
        while (s = iterator.next(), s.done !== true) {
          callback(s.value, null);
          i++;
        }
        return;
      }
      for (k in iterable) {
        if (iterable.hasOwnProperty(k)) {
          callback(iterable[k], k);
        }
      }
      return;
    };
    module2.exports = forEach;
  }
});

// node_modules/mnemonist/utils/typed-arrays.js
var require_typed_arrays = __commonJS({
  \\"node_modules/mnemonist/utils/typed-arrays.js\\"(exports2) {
    var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1;
    var MAX_16BIT_INTEGER = Math.pow(2, 16) - 1;
    var MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
    var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1;
    var MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1;
    var MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
    exports2.getPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_8BIT_INTEGER)
        return Uint8Array;
      if (maxIndex <= MAX_16BIT_INTEGER)
        return Uint16Array;
      if (maxIndex <= MAX_32BIT_INTEGER)
        return Uint32Array;
      return Float64Array;
    };
    exports2.getSignedPointerArray = function(size) {
      var maxIndex = size - 1;
      if (maxIndex <= MAX_SIGNED_8BIT_INTEGER)
        return Int8Array;
      if (maxIndex <= MAX_SIGNED_16BIT_INTEGER)
        return Int16Array;
      if (maxIndex <= MAX_SIGNED_32BIT_INTEGER)
        return Int32Array;
      return Float64Array;
    };
    exports2.getNumberType = function(value) {
      if (value === (value | 0)) {
        if (Math.sign(value) === -1) {
          if (value <= 127 && value >= -128)
            return Int8Array;
          if (value <= 32767 && value >= -32768)
            return Int16Array;
          return Int32Array;
        } else {
          if (value <= 255)
            return Uint8Array;
          if (value <= 65535)
            return Uint16Array;
          return Uint32Array;
        }
      }
      return Float64Array;
    };
    var TYPE_PRIORITY = {
      Uint8Array: 1,
      Int8Array: 2,
      Uint16Array: 3,
      Int16Array: 4,
      Uint32Array: 5,
      Int32Array: 6,
      Float32Array: 7,
      Float64Array: 8
    };
    exports2.getMinimalRepresentation = function(array, getter) {
      var maxType = null, maxPriority = 0, p, t, v, i, l;
      for (i = 0, l = array.length; i < l; i++) {
        v = getter ? getter(array[i]) : array[i];
        t = exports2.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
          maxPriority = p;
          maxType = t;
        }
      }
      return maxType;
    };
    exports2.isTypedArray = function(value) {
      return typeof ArrayBuffer !== \\"undefined\\" && ArrayBuffer.isView(value);
    };
    exports2.concat = function() {
      var length = 0, i, o, l;
      for (i = 0, l = arguments.length; i < l; i++)
        length += arguments[i].length;
      var array = new arguments[0].constructor(length);
      for (i = 0, o = 0; i < l; i++) {
        array.set(arguments[i], o);
        o += arguments[i].length;
      }
      return array;
    };
    exports2.indices = function(length) {
      var PointerArray = exports2.getPointerArray(length);
      var array = new PointerArray(length);
      for (var i = 0; i < length; i++)
        array[i] = i;
      return array;
    };
  }
});

// node_modules/mnemonist/utils/iterables.js
var require_iterables = __commonJS({
  \\"node_modules/mnemonist/utils/iterables.js\\"(exports2) {
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    function isArrayLike(target) {
      return Array.isArray(target) || typed.isTypedArray(target);
    }
    function guessLength(target) {
      if (typeof target.length === \\"number\\")
        return target.length;
      if (typeof target.size === \\"number\\")
        return target.size;
      return;
    }
    function toArray(target) {
      var l = guessLength(target);
      var array = typeof l === \\"number\\" ? new Array(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i++] = value;
      });
      return array;
    }
    function toArrayWithIndices(target) {
      var l = guessLength(target);
      var IndexArray = typeof l === \\"number\\" ? typed.getPointerArray(l) : Array;
      var array = typeof l === \\"number\\" ? new Array(l) : [];
      var indices = typeof l === \\"number\\" ? new IndexArray(l) : [];
      var i = 0;
      forEach(target, function(value) {
        array[i] = value;
        indices[i] = i++;
      });
      return [array, indices];
    }
    exports2.isArrayLike = isArrayLike;
    exports2.guessLength = guessLength;
    exports2.toArray = toArray;
    exports2.toArrayWithIndices = toArrayWithIndices;
  }
});

// node_modules/mnemonist/lru-cache.js
var require_lru_cache = __commonJS({
  \\"node_modules/mnemonist/lru-cache.js\\"(exports2, module2) {
    var Iterator = require_iterator();
    var forEach = require_foreach();
    var typed = require_typed_arrays();
    var iterables = require_iterables();
    function LRUCache(Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      this.capacity = capacity;
      if (typeof this.capacity !== \\"number\\" || this.capacity <= 0)
        throw new Error(\\"mnemonist/lru-cache: capacity should be positive number.\\");
      var PointerArray = typed.getPointerArray(capacity);
      this.forward = new PointerArray(capacity);
      this.backward = new PointerArray(capacity);
      this.K = typeof Keys === \\"function\\" ? new Keys(capacity) : new Array(capacity);
      this.V = typeof Values === \\"function\\" ? new Values(capacity) : new Array(capacity);
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    }
    LRUCache.prototype.clear = function() {
      this.size = 0;
      this.head = 0;
      this.tail = 0;
      this.items = {};
    };
    LRUCache.prototype.splayOnTop = function(pointer) {
      var oldHead = this.head;
      if (this.head === pointer)
        return this;
      var previous = this.backward[pointer], next = this.forward[pointer];
      if (this.tail === pointer) {
        this.tail = previous;
      } else {
        this.backward[next] = previous;
      }
      this.forward[previous] = next;
      this.backward[oldHead] = pointer;
      this.head = pointer;
      this.forward[pointer] = oldHead;
      return this;
    };
    LRUCache.prototype.set = function(key, value) {
      var pointer = this.items[key];
      if (typeof pointer !== \\"undefined\\") {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
    };
    LRUCache.prototype.setpop = function(key, value) {
      var oldValue = null;
      var oldKey = null;
      var pointer = this.items[key];
      if (typeof pointer !== \\"undefined\\") {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return { evicted: false, key, value: oldValue };
      }
      if (this.size < this.capacity) {
        pointer = this.size++;
      } else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[this.K[pointer]];
      }
      this.items[key] = pointer;
      this.K[pointer] = key;
      this.V[pointer] = value;
      this.forward[pointer] = this.head;
      this.backward[this.head] = pointer;
      this.head = pointer;
      if (oldKey) {
        return { evicted: true, key: oldKey, value: oldValue };
      } else {
        return null;
      }
    };
    LRUCache.prototype.has = function(key) {
      return key in this.items;
    };
    LRUCache.prototype.get = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === \\"undefined\\")
        return;
      this.splayOnTop(pointer);
      return this.V[pointer];
    };
    LRUCache.prototype.peek = function(key) {
      var pointer = this.items[key];
      if (typeof pointer === \\"undefined\\")
        return;
      return this.V[pointer];
    };
    LRUCache.prototype.forEach = function(callback, scope) {
      scope = arguments.length > 1 ? scope : this;
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      while (i < l) {
        callback.call(scope, values[pointer], keys[pointer], this);
        pointer = forward[pointer];
        i++;
      }
    };
    LRUCache.prototype.keys = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: key
        };
      });
    };
    LRUCache.prototype.values = function() {
      var i = 0, l = this.size;
      var pointer = this.head, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value
        };
      });
    };
    LRUCache.prototype.entries = function() {
      var i = 0, l = this.size;
      var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
      return new Iterator(function() {
        if (i >= l)
          return { done: true };
        var key = keys[pointer], value = values[pointer];
        i++;
        if (i < l)
          pointer = forward[pointer];
        return {
          done: false,
          value: [key, value]
        };
      });
    };
    if (typeof Symbol !== \\"undefined\\")
      LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;
    LRUCache.prototype.inspect = function() {
      var proxy = /* @__PURE__ */ new Map();
      var iterator = this.entries(), step;
      while (step = iterator.next(), !step.done)
        proxy.set(step.value[0], step.value[1]);
      Object.defineProperty(proxy, \\"constructor\\", {
        value: LRUCache,
        enumerable: false
      });
      return proxy;
    };
    if (typeof Symbol !== \\"undefined\\")
      LRUCache.prototype[Symbol.for(\\"nodejs.util.inspect.custom\\")] = LRUCache.prototype.inspect;
    LRUCache.from = function(iterable, Keys, Values, capacity) {
      if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== \\"number\\")
          throw new Error(\\"mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.\\");
      } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
      }
      var cache = new LRUCache(Keys, Values, capacity);
      forEach(iterable, function(value, key) {
        cache.set(key, value);
      });
      return cache;
    };
    module2.exports = LRUCache;
  }
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js
var require_EndpointCache = __commonJS({
  \\"node_modules/@aws-sdk/endpoint-cache/dist-cjs/EndpointCache.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.EndpointCache = void 0;
    var tslib_1 = require_tslib();
    var lru_cache_1 = tslib_1.__importDefault(require_lru_cache());
    var EndpointCache = class {
      constructor(capacity) {
        this.cache = new lru_cache_1.default(capacity);
      }
      getEndpoint(key) {
        const endpointsWithExpiry = this.get(key);
        if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) {
          return void 0;
        }
        const endpoints = endpointsWithExpiry.map((endpoint) => endpoint.Address);
        return endpoints[Math.floor(Math.random() * endpoints.length)];
      }
      get(key) {
        if (!this.has(key)) {
          return;
        }
        const value = this.cache.get(key);
        if (!value) {
          return;
        }
        const now = Date.now();
        const endpointsWithExpiry = value.filter((endpoint) => now < endpoint.Expires);
        if (endpointsWithExpiry.length === 0) {
          this.delete(key);
          return void 0;
        }
        return endpointsWithExpiry;
      }
      set(key, endpoints) {
        const now = Date.now();
        this.cache.set(key, endpoints.map(({ Address, CachePeriodInMinutes }) => ({
          Address,
          Expires: now + CachePeriodInMinutes * 60 * 1e3
        })));
      }
      delete(key) {
        this.cache.set(key, []);
      }
      has(key) {
        if (!this.cache.has(key)) {
          return false;
        }
        const endpoints = this.cache.peek(key);
        if (!endpoints) {
          return false;
        }
        return endpoints.length > 0;
      }
      clear() {
        this.cache.clear();
      }
    };
    exports2.EndpointCache = EndpointCache;
  }
});

// node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js
var require_dist_cjs9 = __commonJS({
  \\"node_modules/@aws-sdk/endpoint-cache/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Endpoint(), exports2);
    tslib_1.__exportStar(require_EndpointCache(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js
var require_resolveEndpointDiscoveryConfig = __commonJS({
  \\"node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/resolveEndpointDiscoveryConfig.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveEndpointDiscoveryConfig = void 0;
    var endpoint_cache_1 = require_dist_cjs9();
    var resolveEndpointDiscoveryConfig = (input, { endpointDiscoveryCommandCtor }) => {
      var _a;
      return {
        ...input,
        endpointDiscoveryCommandCtor,
        endpointCache: new endpoint_cache_1.EndpointCache((_a = input.endpointCacheSize) !== null && _a !== void 0 ? _a : 1e3),
        endpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0 ? () => Promise.resolve(input.endpointDiscoveryEnabled) : input.endpointDiscoveryEnabledProvider,
        isClientEndpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== void 0
      };
    };
    exports2.resolveEndpointDiscoveryConfig = resolveEndpointDiscoveryConfig;
  }
});

// node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js
var require_dist_cjs10 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-endpoint-discovery/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations(), exports2);
    tslib_1.__exportStar(require_getEndpointDiscoveryPlugin(), exports2);
    tslib_1.__exportStar(require_resolveEndpointDiscoveryConfig(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js
var require_dist_cjs11 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getHostHeaderPlugin = exports2.hostHeaderMiddlewareOptions = exports2.hostHeaderMiddleware = exports2.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs4();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports2.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = \\"\\" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf(\\"h2\\") >= 0 && !request.headers[\\":authority\\"]) {
        delete request.headers[\\"host\\"];
        request.headers[\\":authority\\"] = \\"\\";
      } else if (!request.headers[\\"host\\"]) {
        request.headers[\\"host\\"] = request.hostname;
      }
      return next(args);
    };
    exports2.hostHeaderMiddleware = hostHeaderMiddleware;
    exports2.hostHeaderMiddlewareOptions = {
      name: \\"hostHeaderMiddleware\\",
      step: \\"build\\",
      priority: \\"low\\",
      tags: [\\"HOST\\"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.hostHeaderMiddleware)(options), exports2.hostHeaderMiddlewareOptions);
      }
    });
    exports2.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js
var require_loggerMiddleware = __commonJS({
  \\"node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getLoggerPlugin = exports2.loggerMiddlewareOptions = exports2.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const { clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog } = context;
      const response = await next(args);
      if (!logger) {
        return response;
      }
      if (typeof logger.info === \\"function\\") {
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger.info({
          clientName,
          commandName,
          input: inputFilterSensitiveLog(args.input),
          output: outputFilterSensitiveLog(outputWithoutMetadata),
          metadata: $metadata
        });
      }
      return response;
    };
    exports2.loggerMiddleware = loggerMiddleware;
    exports2.loggerMiddlewareOptions = {
      name: \\"loggerMiddleware\\",
      tags: [\\"LOGGER\\"],
      step: \\"initialize\\",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.loggerMiddleware)(), exports2.loggerMiddlewareOptions);
      }
    });
    exports2.getLoggerPlugin = getLoggerPlugin;
  }
});

// node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js
var require_dist_cjs12 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_loggerMiddleware(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js
var require_dist_cjs13 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getRecursionDetectionPlugin = exports2.addRecursionDetectionMiddlewareOptions = exports2.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var TRACE_ID_HEADER_NAME = \\"X-Amzn-Trace-Id\\";
    var ENV_LAMBDA_FUNCTION_NAME = \\"AWS_LAMBDA_FUNCTION_NAME\\";
    var ENV_TRACE_ID = \\"_X_AMZN_TRACE_ID\\";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== \\"node\\" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === \\"string\\" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports2.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports2.addRecursionDetectionMiddlewareOptions = {
      step: \\"build\\",
      tags: [\\"RECURSION_DETECTION\\"],
      name: \\"recursionDetectionMiddleware\\",
      override: true,
      priority: \\"low\\"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.recursionDetectionMiddleware)(options), exports2.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports2.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js
var require_config2 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/config.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DEFAULT_RETRY_MODE = exports2.DEFAULT_MAX_ATTEMPTS = exports2.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2[\\"STANDARD\\"] = \\"standard\\";
      RETRY_MODES2[\\"ADAPTIVE\\"] = \\"adaptive\\";
    })(RETRY_MODES = exports2.RETRY_MODES || (exports2.RETRY_MODES = {}));
    exports2.DEFAULT_MAX_ATTEMPTS = 3;
    exports2.DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js
var require_constants2 = __commonJS({
  \\"node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.TRANSIENT_ERROR_STATUS_CODES = exports2.TRANSIENT_ERROR_CODES = exports2.THROTTLING_ERROR_CODES = exports2.CLOCK_SKEW_ERROR_CODES = void 0;
    exports2.CLOCK_SKEW_ERROR_CODES = [
      \\"AuthFailure\\",
      \\"InvalidSignatureException\\",
      \\"RequestExpired\\",
      \\"RequestInTheFuture\\",
      \\"RequestTimeTooSkewed\\",
      \\"SignatureDoesNotMatch\\"
    ];
    exports2.THROTTLING_ERROR_CODES = [
      \\"BandwidthLimitExceeded\\",
      \\"EC2ThrottledException\\",
      \\"LimitExceededException\\",
      \\"PriorRequestNotComplete\\",
      \\"ProvisionedThroughputExceededException\\",
      \\"RequestLimitExceeded\\",
      \\"RequestThrottled\\",
      \\"RequestThrottledException\\",
      \\"SlowDown\\",
      \\"ThrottledException\\",
      \\"Throttling\\",
      \\"ThrottlingException\\",
      \\"TooManyRequestsException\\",
      \\"TransactionInProgressException\\"
    ];
    exports2.TRANSIENT_ERROR_CODES = [\\"AbortError\\", \\"TimeoutError\\", \\"RequestTimeout\\", \\"RequestTimeoutException\\"];
    exports2.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
  }
});

// node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js
var require_dist_cjs14 = __commonJS({
  \\"node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.isTransientError = exports2.isThrottlingError = exports2.isClockSkewError = exports2.isRetryableByTrait = void 0;
    var constants_1 = require_constants2();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports2.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports2.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports2.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports2.isTransientError = isTransientError;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js
var require_DefaultRateLimiter = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/DefaultRateLimiter.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs14();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports2.DefaultRateLimiter = DefaultRateLimiter;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js
var require_constants3 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/constants.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.REQUEST_HEADER = exports2.INVOCATION_ID_HEADER = exports2.NO_RETRY_INCREMENT = exports2.TIMEOUT_RETRY_COST = exports2.RETRY_COST = exports2.INITIAL_RETRY_TOKENS = exports2.THROTTLING_RETRY_DELAY_BASE = exports2.MAXIMUM_RETRY_DELAY = exports2.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports2.DEFAULT_RETRY_DELAY_BASE = 100;
    exports2.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports2.THROTTLING_RETRY_DELAY_BASE = 500;
    exports2.INITIAL_RETRY_TOKENS = 500;
    exports2.RETRY_COST = 5;
    exports2.TIMEOUT_RETRY_COST = 10;
    exports2.NO_RETRY_INCREMENT = 1;
    exports2.INVOCATION_ID_HEADER = \\"amz-sdk-invocation-id\\";
    exports2.REQUEST_HEADER = \\"amz-sdk-request\\";
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js
var require_defaultRetryQuota = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getDefaultRetryQuota = void 0;
    var constants_1 = require_constants3();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : constants_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : constants_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : constants_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === \\"TimeoutError\\" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error(\\"No retry token available\\");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports2.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js
var require_delayDecider = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.defaultDelayDecider = void 0;
    var constants_1 = require_constants3();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports2.defaultDelayDecider = defaultDelayDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js
var require_retryDecider = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs14();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports2.defaultRetryDecider = defaultRetryDecider;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js
var require_StandardRetryStrategy = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var service_error_classification_1 = require_dist_cjs14();
    var uuid_1 = require_dist();
    var config_1 = require_config2();
    var constants_1 = require_constants3();
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(constants_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = config_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[constants_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[constants_1.REQUEST_HEADER] = \`attempt=\${attempts + 1}; max=\${maxAttempts}\`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delay = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports2.StandardRetryStrategy = StandardRetryStrategy;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === \\"string\\")
        return new Error(error);
      return new Error(\`AWS SDK error wrapper for \${error}\`);
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js
var require_AdaptiveRetryStrategy = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports2.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js
var require_configurations2 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = exports2.CONFIG_RETRY_MODE = exports2.ENV_RETRY_MODE = exports2.resolveRetryConfig = exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports2.CONFIG_MAX_ATTEMPTS = exports2.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs6();
    var AdaptiveRetryStrategy_1 = require_AdaptiveRetryStrategy();
    var config_1 = require_config2();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    exports2.ENV_MAX_ATTEMPTS = \\"AWS_MAX_ATTEMPTS\\";
    exports2.CONFIG_MAX_ATTEMPTS = \\"max_attempts\\";
    exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports2.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(\`Environment variable \${exports2.ENV_MAX_ATTEMPTS} mast be a number, got \\"\${value}\\"\`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports2.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(\`Shared config file entry \${exports2.CONFIG_MAX_ATTEMPTS} mast be a number, got \\"\${value}\\"\`);
        }
        return maxAttempt;
      },
      default: config_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : config_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (input.retryStrategy) {
            return input.retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === config_1.RETRY_MODES.ADAPTIVE) {
            return new AdaptiveRetryStrategy_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new StandardRetryStrategy_1.StandardRetryStrategy(maxAttempts);
        }
      };
    };
    exports2.resolveRetryConfig = resolveRetryConfig;
    exports2.ENV_RETRY_MODE = \\"AWS_RETRY_MODE\\";
    exports2.CONFIG_RETRY_MODE = \\"retry_mode\\";
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports2.CONFIG_RETRY_MODE],
      default: config_1.DEFAULT_RETRY_MODE
    };
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js
var require_omitRetryHeadersMiddleware = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getOmitRetryHeadersPlugin = exports2.omitRetryHeadersMiddlewareOptions = exports2.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants3();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[constants_1.INVOCATION_ID_HEADER];
        delete request.headers[constants_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports2.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports2.omitRetryHeadersMiddlewareOptions = {
      name: \\"omitRetryHeadersMiddleware\\",
      tags: [\\"RETRY\\", \\"HEADERS\\", \\"OMIT_RETRY_HEADERS\\"],
      relation: \\"before\\",
      toMiddleware: \\"awsAuthMiddleware\\",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.omitRetryHeadersMiddleware)(), exports2.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports2.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js
var require_retryMiddleware = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getRetryPlugin = exports2.retryMiddlewareOptions = exports2.retryMiddleware = void 0;
    var retryMiddleware = (options) => (next, context) => async (args) => {
      const retryStrategy = await options.retryStrategy();
      if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
        context.userAgent = [...context.userAgent || [], [\\"cfg/retry-mode\\", retryStrategy.mode]];
      return retryStrategy.retry(next, args);
    };
    exports2.retryMiddleware = retryMiddleware;
    exports2.retryMiddlewareOptions = {
      name: \\"retryMiddleware\\",
      tags: [\\"RETRY\\"],
      step: \\"finalizeRequest\\",
      priority: \\"high\\",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.retryMiddleware)(options), exports2.retryMiddlewareOptions);
      }
    });
    exports2.getRetryPlugin = getRetryPlugin;
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js
var require_types = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/types.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
  }
});

// node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js
var require_dist_cjs15 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports2);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports2);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports2);
    tslib_1.__exportStar(require_config2(), exports2);
    tslib_1.__exportStar(require_configurations2(), exports2);
    tslib_1.__exportStar(require_delayDecider(), exports2);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports2);
    tslib_1.__exportStar(require_retryDecider(), exports2);
    tslib_1.__exportStar(require_retryMiddleware(), exports2);
    tslib_1.__exportStar(require_types(), exports2);
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js
var require_ProviderError = __commonJS({
  \\"node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = \\"ProviderError\\";
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports2.ProviderError = ProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js
var require_CredentialsProviderError = __commonJS({
  \\"node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = \\"CredentialsProviderError\\";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports2.CredentialsProviderError = CredentialsProviderError;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/chain.js
var require_chain = __commonJS({
  \\"node_modules/@aws-sdk/property-provider/dist-cjs/chain.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError(\\"No providers in chain\\"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports2.chain = chain;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js
var require_fromStatic = __commonJS({
  \\"node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports2.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js
var require_memoize = __commonJS({
  \\"node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports2.memoize = memoize;
  }
});

// node_modules/@aws-sdk/property-provider/dist-cjs/index.js
var require_dist_cjs16 = __commonJS({
  \\"node_modules/@aws-sdk/property-provider/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_CredentialsProviderError(), exports2);
    tslib_1.__exportStar(require_ProviderError(), exports2);
    tslib_1.__exportStar(require_chain(), exports2);
    tslib_1.__exportStar(require_fromStatic(), exports2);
    tslib_1.__exportStar(require_memoize(), exports2);
  }
});

// node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js
var require_dist_cjs17 = __commonJS({
  \\"node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.toHex = exports2.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = \`0\${encodedByte}\`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error(\\"Hex encoded strings must have an even number length\\");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(\`Cannot decode unrecognized sequence \${encodedByte} as hexadecimal\`);
        }
      }
      return out;
    }
    exports2.fromHex = fromHex;
    function toHex(bytes) {
      let out = \\"\\";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports2.toHex = toHex;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js
var require_constants4 = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.MAX_PRESIGNED_TTL = exports2.KEY_TYPE_IDENTIFIER = exports2.MAX_CACHE_SIZE = exports2.UNSIGNED_PAYLOAD = exports2.EVENT_ALGORITHM_IDENTIFIER = exports2.ALGORITHM_IDENTIFIER_V4A = exports2.ALGORITHM_IDENTIFIER = exports2.UNSIGNABLE_PATTERNS = exports2.SEC_HEADER_PATTERN = exports2.PROXY_HEADER_PATTERN = exports2.ALWAYS_UNSIGNABLE_HEADERS = exports2.HOST_HEADER = exports2.TOKEN_HEADER = exports2.SHA256_HEADER = exports2.SIGNATURE_HEADER = exports2.GENERATED_HEADERS = exports2.DATE_HEADER = exports2.AMZ_DATE_HEADER = exports2.AUTH_HEADER = exports2.REGION_SET_PARAM = exports2.TOKEN_QUERY_PARAM = exports2.SIGNATURE_QUERY_PARAM = exports2.EXPIRES_QUERY_PARAM = exports2.SIGNED_HEADERS_QUERY_PARAM = exports2.AMZ_DATE_QUERY_PARAM = exports2.CREDENTIAL_QUERY_PARAM = exports2.ALGORITHM_QUERY_PARAM = void 0;
    exports2.ALGORITHM_QUERY_PARAM = \\"X-Amz-Algorithm\\";
    exports2.CREDENTIAL_QUERY_PARAM = \\"X-Amz-Credential\\";
    exports2.AMZ_DATE_QUERY_PARAM = \\"X-Amz-Date\\";
    exports2.SIGNED_HEADERS_QUERY_PARAM = \\"X-Amz-SignedHeaders\\";
    exports2.EXPIRES_QUERY_PARAM = \\"X-Amz-Expires\\";
    exports2.SIGNATURE_QUERY_PARAM = \\"X-Amz-Signature\\";
    exports2.TOKEN_QUERY_PARAM = \\"X-Amz-Security-Token\\";
    exports2.REGION_SET_PARAM = \\"X-Amz-Region-Set\\";
    exports2.AUTH_HEADER = \\"authorization\\";
    exports2.AMZ_DATE_HEADER = exports2.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports2.DATE_HEADER = \\"date\\";
    exports2.GENERATED_HEADERS = [exports2.AUTH_HEADER, exports2.AMZ_DATE_HEADER, exports2.DATE_HEADER];
    exports2.SIGNATURE_HEADER = exports2.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports2.SHA256_HEADER = \\"x-amz-content-sha256\\";
    exports2.TOKEN_HEADER = exports2.TOKEN_QUERY_PARAM.toLowerCase();
    exports2.HOST_HEADER = \\"host\\";
    exports2.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      \\"cache-control\\": true,
      connection: true,
      expect: true,
      from: true,
      \\"keep-alive\\": true,
      \\"max-forwards\\": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      \\"transfer-encoding\\": true,
      upgrade: true,
      \\"user-agent\\": true,
      \\"x-amzn-trace-id\\": true
    };
    exports2.PROXY_HEADER_PATTERN = /^proxy-/;
    exports2.SEC_HEADER_PATTERN = /^sec-/;
    exports2.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports2.ALGORITHM_IDENTIFIER = \\"AWS4-HMAC-SHA256\\";
    exports2.ALGORITHM_IDENTIFIER_V4A = \\"AWS4-ECDSA-P256-SHA256\\";
    exports2.EVENT_ALGORITHM_IDENTIFIER = \\"AWS4-HMAC-SHA256-PAYLOAD\\";
    exports2.UNSIGNED_PAYLOAD = \\"UNSIGNED-PAYLOAD\\";
    exports2.MAX_CACHE_SIZE = 50;
    exports2.KEY_TYPE_IDENTIFIER = \\"aws4_request\\";
    exports2.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js
var require_credentialDerivation = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.clearCredentialCache = exports2.getSigningKey = exports2.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs17();
    var constants_1 = require_constants4();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => \`\${shortDate}/\${region}/\${service}/\${constants_1.KEY_TYPE_IDENTIFIER}\`;
    exports2.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = \`\${shortDate}:\${region}:\${service}:\${(0, util_hex_encoding_1.toHex)(credsHash)}:\${credentials.sessionToken}\`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = \`AWS4\${credentials.secretAccessKey}\`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports2.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports2.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update(data);
      return hash.digest();
    };
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js
var require_getCanonicalHeaders = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getCanonicalHeaders = void 0;
    var constants_1 = require_constants4();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\\\\s+/g, \\" \\");
      }
      return canonical;
    };
    exports2.getCanonicalHeaders = getCanonicalHeaders;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js
var require_escape_uri = __commonJS({
  \\"node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports2.escapeUri = escapeUri;
    var hexEncode = (c) => \`%\${c.charCodeAt(0).toString(16).toUpperCase()}\`;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js
var require_escape_uri_path = __commonJS({
  \\"node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split(\\"/\\").map(escape_uri_1.escapeUri).join(\\"/\\");
    exports2.escapeUriPath = escapeUriPath;
  }
});

// node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js
var require_dist_cjs18 = __commonJS({
  \\"node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_escape_uri(), exports2);
    tslib_1.__exportStar(require_escape_uri_path(), exports2);
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js
var require_getCanonicalQuery = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs18();
    var constants_1 = require_constants4();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === \\"string\\") {
          serialized[key] = \`\${(0, util_uri_escape_1.escapeUri)(key)}=\${(0, util_uri_escape_1.escapeUri)(value)}\`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([\`\${(0, util_uri_escape_1.escapeUri)(key)}=\${(0, util_uri_escape_1.escapeUri)(value2)}\`]), []).join(\\"&\\");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join(\\"&\\");
    };
    exports2.getCanonicalQuery = getCanonicalQuery;
  }
});

// node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js
var require_dist_cjs19 = __commonJS({
  \\"node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === \\"function\\" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === \\"[object ArrayBuffer]\\";
    exports2.isArrayBuffer = isArrayBuffer;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js
var require_getPayloadHash = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs19();
    var util_hex_encoding_1 = require_dist_cjs17();
    var constants_1 = require_constants4();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return \\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\\";
      } else if (typeof body === \\"string\\" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports2.getPayloadHash = getPayloadHash;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js
var require_headerUtil = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.deleteHeader = exports2.getHeaderValue = exports2.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports2.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports2.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports2.deleteHeader = deleteHeader;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js
var require_cloneRequest = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.cloneQuery = exports2.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports2.cloneQuery)(query) : void 0
    });
    exports2.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
    exports2.cloneQuery = cloneQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js
var require_moveHeadersToQuery = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === \\"function\\" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === \\"x-amz-\\" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    };
    exports2.moveHeadersToQuery = moveHeadersToQuery;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js
var require_prepareRequest = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants4();
    var prepareRequest = (request) => {
      request = typeof request.clone === \\"function\\" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports2.prepareRequest = prepareRequest;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js
var require_utilDate = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.toDate = exports2.iso8601 = void 0;
    var iso8601 = (time) => (0, exports2.toDate)(time).toISOString().replace(/\\\\.\\\\d{3}Z$/, \\"Z\\");
    exports2.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === \\"number\\") {
        return new Date(time * 1e3);
      }
      if (typeof time === \\"string\\") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports2.toDate = toDate;
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js
var require_SignatureV4 = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs17();
    var util_middleware_1 = require_dist_cjs6();
    var constants_1 = require_constants4();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === \\"boolean\\" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject(\\"Signature version 4 presigned URLs must have an expiration date less than one week in the future\\");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = \`\${credentials.accessKeyId}/\${scope}\`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === \\"string\\") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join(\\"\\\\n\\");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = \`\${constants_1.ALGORITHM_IDENTIFIER} Credential=\${credentials.accessKeyId}/\${scope}, SignedHeaders=\${getCanonicalHeaderList(canonicalHeaders)}, Signature=\${signature}\`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return \`\${request.method}
\${this.getCanonicalPath(request)}
\${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
\${sortedHeaders.map((name) => \`\${name}:\${canonicalHeaders[name]}\`).join(\\"\\\\n\\")}

\${sortedHeaders.join(\\";\\")}
\${payloadHash}\`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return \`\${constants_1.ALGORITHM_IDENTIFIER}
\${longDate}
\${credentialScope}
\${(0, util_hex_encoding_1.toHex)(hashedRequest)}\`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split(\\"/\\")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === \\".\\")
              continue;
            if (pathSegment === \\"..\\") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = \`\${(path === null || path === void 0 ? void 0 : path.startsWith(\\"/\\")) ? \\"/\\" : \\"\\"}\${normalizedPathSegments.join(\\"/\\")}\${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith(\\"/\\")) ? \\"/\\" : \\"\\"}\`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, \\"/\\");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
    };
    exports2.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\\\\-:]/g, \\"\\");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(\\";\\");
  }
});

// node_modules/@aws-sdk/signature-v4/dist-cjs/index.js
var require_dist_cjs20 = __commonJS({
  \\"node_modules/@aws-sdk/signature-v4/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.prepareRequest = exports2.moveHeadersToQuery = exports2.getPayloadHash = exports2.getCanonicalQuery = exports2.getCanonicalHeaders = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SignatureV4(), exports2);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports2, \\"getCanonicalHeaders\\", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports2, \\"getCanonicalQuery\\", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports2, \\"getPayloadHash\\", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports2, \\"moveHeadersToQuery\\", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports2, \\"prepareRequest\\", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js
var require_configurations3 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveSigV4AuthConfig = exports2.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs16();
    var signature_v4_1 = require_dist_cjs20();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = () => normalizeProvider(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const signerConstructor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new signerConstructor(params);
        });
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports2.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = normalizeProvider(input.signer);
      } else {
        signer = normalizeProvider(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports2.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeProvider = (input) => {
      if (typeof input === \\"object\\") {
        const promisified = Promise.resolve(input);
        return () => promisified;
      }
      return input;
    };
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === \\"function\\") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return normalizeProvider(credentials);
    };
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js
var require_getSkewCorrectedDate = __commonJS({
  \\"node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports2.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js
var require_isClockSkewed = __commonJS({
  \\"node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports2.isClockSkewed = isClockSkewed;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js
var require_getUpdatedSystemClockOffset = __commonJS({
  \\"node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports2.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js
var require_middleware = __commonJS({
  \\"node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin = exports2.awsAuthMiddlewareOptions = exports2.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const signer = await options.signer();
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: context[\\"signing_region\\"],
          signingService: context[\\"signing_service\\"]
        })
      }).catch((error) => {
        var _a;
        const serverTime = (_a = error.ServerTime) !== null && _a !== void 0 ? _a : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports2.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports2.awsAuthMiddlewareOptions = {
      name: \\"awsAuthMiddleware\\",
      tags: [\\"SIGNATURE\\", \\"AWSAUTH\\"],
      relation: \\"after\\",
      toMiddleware: \\"retryMiddleware\\",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.awsAuthMiddleware)(options), exports2.awsAuthMiddlewareOptions);
      }
    });
    exports2.getAwsAuthPlugin = getAwsAuthPlugin;
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin;
  }
});

// node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js
var require_dist_cjs21 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations3(), exports2);
    tslib_1.__exportStar(require_middleware(), exports2);
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js
var require_configurations4 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === \\"string\\" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports2.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js
var require_constants5 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.UA_ESCAPE_REGEX = exports2.SPACE = exports2.X_AMZ_USER_AGENT = exports2.USER_AGENT = void 0;
    exports2.USER_AGENT = \\"user-agent\\";
    exports2.X_AMZ_USER_AGENT = \\"x-amz-user-agent\\";
    exports2.SPACE = \\" \\";
    exports2.UA_ESCAPE_REGEX = /[^\\\\!\\\\#\\\\$\\\\%\\\\&\\\\'\\\\*\\\\+\\\\-\\\\.\\\\^\\\\_\\\\\`\\\\|\\\\~\\\\d\\\\w]/g;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js
var require_user_agent_middleware = __commonJS({
  \\"node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getUserAgentPlugin = exports2.getUserAgentMiddlewareOptions = exports2.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var constants_1 = require_constants5();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith(\\"aws-sdk-\\")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== \\"browser\\") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? \`\${headers[constants_1.USER_AGENT]} \${normalUAValue}\` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports2.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version]) => {
      const prefixSeparatorIndex = name.indexOf(\\"/\\");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === \\"api\\") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, \\"_\\")).join(\\"/\\");
    };
    exports2.getUserAgentMiddlewareOptions = {
      name: \\"getUserAgentMiddleware\\",
      step: \\"build\\",
      priority: \\"low\\",
      tags: [\\"SET_USER_AGENT\\", \\"USER_AGENT\\"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.userAgentMiddleware)(config), exports2.getUserAgentMiddlewareOptions);
      }
    });
    exports2.getUserAgentPlugin = getUserAgentPlugin;
  }
});

// node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js
var require_dist_cjs22 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configurations4(), exports2);
    tslib_1.__exportStar(require_user_agent_middleware(), exports2);
  }
});

// node_modules/@aws-sdk/client-dynamodb/package.json
var require_package = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/package.json\\"(exports2, module2) {
    module2.exports = {
      name: \\"@aws-sdk/client-dynamodb\\",
      description: \\"AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native\\",
      version: \\"3.145.0\\",
      scripts: {
        build: \\"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\\",
        \\"build:cjs\\": \\"tsc -p tsconfig.cjs.json\\",
        \\"build:docs\\": \\"typedoc\\",
        \\"build:es\\": \\"tsc -p tsconfig.es.json\\",
        \\"build:types\\": \\"tsc -p tsconfig.types.json\\",
        \\"build:types:downlevel\\": \\"downlevel-dts dist-types dist-types/ts3.4\\",
        clean: \\"rimraf ./dist-* && rimraf *.tsbuildinfo\\"
      },
      main: \\"./dist-cjs/index.js\\",
      types: \\"./dist-types/index.d.ts\\",
      module: \\"./dist-es/index.js\\",
      sideEffects: false,
      dependencies: {
        \\"@aws-crypto/sha256-browser\\": \\"2.0.0\\",
        \\"@aws-crypto/sha256-js\\": \\"2.0.0\\",
        \\"@aws-sdk/client-sts\\": \\"3.145.0\\",
        \\"@aws-sdk/config-resolver\\": \\"3.130.0\\",
        \\"@aws-sdk/credential-provider-node\\": \\"3.145.0\\",
        \\"@aws-sdk/fetch-http-handler\\": \\"3.131.0\\",
        \\"@aws-sdk/hash-node\\": \\"3.127.0\\",
        \\"@aws-sdk/invalid-dependency\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-content-length\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-endpoint-discovery\\": \\"3.130.0\\",
        \\"@aws-sdk/middleware-host-header\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-logger\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-recursion-detection\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-retry\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-serde\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-signing\\": \\"3.130.0\\",
        \\"@aws-sdk/middleware-stack\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-user-agent\\": \\"3.127.0\\",
        \\"@aws-sdk/node-config-provider\\": \\"3.127.0\\",
        \\"@aws-sdk/node-http-handler\\": \\"3.127.0\\",
        \\"@aws-sdk/protocol-http\\": \\"3.127.0\\",
        \\"@aws-sdk/smithy-client\\": \\"3.142.0\\",
        \\"@aws-sdk/types\\": \\"3.127.0\\",
        \\"@aws-sdk/url-parser\\": \\"3.127.0\\",
        \\"@aws-sdk/util-base64-browser\\": \\"3.109.0\\",
        \\"@aws-sdk/util-base64-node\\": \\"3.55.0\\",
        \\"@aws-sdk/util-body-length-browser\\": \\"3.55.0\\",
        \\"@aws-sdk/util-body-length-node\\": \\"3.55.0\\",
        \\"@aws-sdk/util-defaults-mode-browser\\": \\"3.142.0\\",
        \\"@aws-sdk/util-defaults-mode-node\\": \\"3.142.0\\",
        \\"@aws-sdk/util-user-agent-browser\\": \\"3.127.0\\",
        \\"@aws-sdk/util-user-agent-node\\": \\"3.127.0\\",
        \\"@aws-sdk/util-utf8-browser\\": \\"3.109.0\\",
        \\"@aws-sdk/util-utf8-node\\": \\"3.109.0\\",
        \\"@aws-sdk/util-waiter\\": \\"3.127.0\\",
        tslib: \\"^2.3.1\\",
        uuid: \\"^8.3.2\\"
      },
      devDependencies: {
        \\"@aws-sdk/service-client-documentation-generator\\": \\"3.58.0\\",
        \\"@tsconfig/recommended\\": \\"1.0.1\\",
        \\"@types/node\\": \\"^12.7.5\\",
        \\"@types/uuid\\": \\"^8.3.0\\",
        concurrently: \\"7.0.0\\",
        \\"downlevel-dts\\": \\"0.7.0\\",
        rimraf: \\"3.0.2\\",
        typedoc: \\"0.19.2\\",
        typescript: \\"~4.6.2\\"
      },
      overrides: {
        typedoc: {
          typescript: \\"~4.6.2\\"
        }
      },
      engines: {
        node: \\">=12.0.0\\"
      },
      typesVersions: {
        \\"<4.0\\": {
          \\"dist-types/*\\": [
            \\"dist-types/ts3.4/*\\"
          ]
        }
      },
      files: [
        \\"dist-*\\"
      ],
      author: {
        name: \\"AWS SDK for JavaScript Team\\",
        url: \\"https://aws.amazon.com/javascript/\\"
      },
      license: \\"Apache-2.0\\",
      browser: {
        \\"./dist-es/runtimeConfig\\": \\"./dist-es/runtimeConfig.browser\\"
      },
      \\"react-native\\": {
        \\"./dist-es/runtimeConfig\\": \\"./dist-es/runtimeConfig.native\\"
      },
      homepage: \\"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb\\",
      repository: {
        type: \\"git\\",
        url: \\"https://github.com/aws/aws-sdk-js-v3.git\\",
        directory: \\"clients/client-dynamodb\\"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js
var require_STSServiceException = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports2.STSServiceException = STSServiceException;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js
var require_models_02 = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.GetSessionTokenResponseFilterSensitiveLog = exports2.GetSessionTokenRequestFilterSensitiveLog = exports2.GetFederationTokenResponseFilterSensitiveLog = exports2.FederatedUserFilterSensitiveLog = exports2.GetFederationTokenRequestFilterSensitiveLog = exports2.GetCallerIdentityResponseFilterSensitiveLog = exports2.GetCallerIdentityRequestFilterSensitiveLog = exports2.GetAccessKeyInfoResponseFilterSensitiveLog = exports2.GetAccessKeyInfoRequestFilterSensitiveLog = exports2.DecodeAuthorizationMessageResponseFilterSensitiveLog = exports2.DecodeAuthorizationMessageRequestFilterSensitiveLog = exports2.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports2.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports2.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports2.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports2.AssumeRoleResponseFilterSensitiveLog = exports2.CredentialsFilterSensitiveLog = exports2.AssumeRoleRequestFilterSensitiveLog = exports2.TagFilterSensitiveLog = exports2.PolicyDescriptorTypeFilterSensitiveLog = exports2.AssumedRoleUserFilterSensitiveLog = exports2.InvalidAuthorizationMessageException = exports2.IDPCommunicationErrorException = exports2.InvalidIdentityTokenException = exports2.IDPRejectedClaimException = exports2.RegionDisabledException = exports2.PackedPolicyTooLargeException = exports2.MalformedPolicyDocumentException = exports2.ExpiredTokenException = void 0;
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: \\"ExpiredTokenException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ExpiredTokenException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports2.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: \\"MalformedPolicyDocumentException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"MalformedPolicyDocumentException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports2.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: \\"PackedPolicyTooLargeException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"PackedPolicyTooLargeException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports2.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: \\"RegionDisabledException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"RegionDisabledException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports2.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: \\"IDPRejectedClaimException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"IDPRejectedClaimException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports2.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: \\"InvalidIdentityTokenException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"InvalidIdentityTokenException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports2.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: \\"IDPCommunicationErrorException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"IDPCommunicationErrorException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports2.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: \\"InvalidAuthorizationMessageException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"InvalidAuthorizationMessageException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
      }
    };
    exports2.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var AssumedRoleUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumedRoleUserFilterSensitiveLog = AssumedRoleUserFilterSensitiveLog;
    var PolicyDescriptorTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PolicyDescriptorTypeFilterSensitiveLog = PolicyDescriptorTypeFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var AssumeRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleRequestFilterSensitiveLog = AssumeRoleRequestFilterSensitiveLog;
    var CredentialsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var DecodeAuthorizationMessageRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DecodeAuthorizationMessageRequestFilterSensitiveLog = DecodeAuthorizationMessageRequestFilterSensitiveLog;
    var DecodeAuthorizationMessageResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DecodeAuthorizationMessageResponseFilterSensitiveLog = DecodeAuthorizationMessageResponseFilterSensitiveLog;
    var GetAccessKeyInfoRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetAccessKeyInfoRequestFilterSensitiveLog = GetAccessKeyInfoRequestFilterSensitiveLog;
    var GetAccessKeyInfoResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetAccessKeyInfoResponseFilterSensitiveLog = GetAccessKeyInfoResponseFilterSensitiveLog;
    var GetCallerIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetCallerIdentityRequestFilterSensitiveLog = GetCallerIdentityRequestFilterSensitiveLog;
    var GetCallerIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetCallerIdentityResponseFilterSensitiveLog = GetCallerIdentityResponseFilterSensitiveLog;
    var GetFederationTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFederationTokenRequestFilterSensitiveLog = GetFederationTokenRequestFilterSensitiveLog;
    var FederatedUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FederatedUserFilterSensitiveLog = FederatedUserFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetSessionTokenRequestFilterSensitiveLog = GetSessionTokenRequestFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  }
});

// node_modules/entities/lib/maps/entities.json
var require_entities = __commonJS({
  \\"node_modules/entities/lib/maps/entities.json\\"(exports2, module2) {
    module2.exports = { Aacute: \\"\\\\xC1\\", aacute: \\"\\\\xE1\\", Abreve: \\"\\\\u0102\\", abreve: \\"\\\\u0103\\", ac: \\"\\\\u223E\\", acd: \\"\\\\u223F\\", acE: \\"\\\\u223E\\\\u0333\\", Acirc: \\"\\\\xC2\\", acirc: \\"\\\\xE2\\", acute: \\"\\\\xB4\\", Acy: \\"\\\\u0410\\", acy: \\"\\\\u0430\\", AElig: \\"\\\\xC6\\", aelig: \\"\\\\xE6\\", af: \\"\\\\u2061\\", Afr: \\"\\\\u{1D504}\\", afr: \\"\\\\u{1D51E}\\", Agrave: \\"\\\\xC0\\", agrave: \\"\\\\xE0\\", alefsym: \\"\\\\u2135\\", aleph: \\"\\\\u2135\\", Alpha: \\"\\\\u0391\\", alpha: \\"\\\\u03B1\\", Amacr: \\"\\\\u0100\\", amacr: \\"\\\\u0101\\", amalg: \\"\\\\u2A3F\\", amp: \\"&\\", AMP: \\"&\\", andand: \\"\\\\u2A55\\", And: \\"\\\\u2A53\\", and: \\"\\\\u2227\\", andd: \\"\\\\u2A5C\\", andslope: \\"\\\\u2A58\\", andv: \\"\\\\u2A5A\\", ang: \\"\\\\u2220\\", ange: \\"\\\\u29A4\\", angle: \\"\\\\u2220\\", angmsdaa: \\"\\\\u29A8\\", angmsdab: \\"\\\\u29A9\\", angmsdac: \\"\\\\u29AA\\", angmsdad: \\"\\\\u29AB\\", angmsdae: \\"\\\\u29AC\\", angmsdaf: \\"\\\\u29AD\\", angmsdag: \\"\\\\u29AE\\", angmsdah: \\"\\\\u29AF\\", angmsd: \\"\\\\u2221\\", angrt: \\"\\\\u221F\\", angrtvb: \\"\\\\u22BE\\", angrtvbd: \\"\\\\u299D\\", angsph: \\"\\\\u2222\\", angst: \\"\\\\xC5\\", angzarr: \\"\\\\u237C\\", Aogon: \\"\\\\u0104\\", aogon: \\"\\\\u0105\\", Aopf: \\"\\\\u{1D538}\\", aopf: \\"\\\\u{1D552}\\", apacir: \\"\\\\u2A6F\\", ap: \\"\\\\u2248\\", apE: \\"\\\\u2A70\\", ape: \\"\\\\u224A\\", apid: \\"\\\\u224B\\", apos: \\"'\\", ApplyFunction: \\"\\\\u2061\\", approx: \\"\\\\u2248\\", approxeq: \\"\\\\u224A\\", Aring: \\"\\\\xC5\\", aring: \\"\\\\xE5\\", Ascr: \\"\\\\u{1D49C}\\", ascr: \\"\\\\u{1D4B6}\\", Assign: \\"\\\\u2254\\", ast: \\"*\\", asymp: \\"\\\\u2248\\", asympeq: \\"\\\\u224D\\", Atilde: \\"\\\\xC3\\", atilde: \\"\\\\xE3\\", Auml: \\"\\\\xC4\\", auml: \\"\\\\xE4\\", awconint: \\"\\\\u2233\\", awint: \\"\\\\u2A11\\", backcong: \\"\\\\u224C\\", backepsilon: \\"\\\\u03F6\\", backprime: \\"\\\\u2035\\", backsim: \\"\\\\u223D\\", backsimeq: \\"\\\\u22CD\\", Backslash: \\"\\\\u2216\\", Barv: \\"\\\\u2AE7\\", barvee: \\"\\\\u22BD\\", barwed: \\"\\\\u2305\\", Barwed: \\"\\\\u2306\\", barwedge: \\"\\\\u2305\\", bbrk: \\"\\\\u23B5\\", bbrktbrk: \\"\\\\u23B6\\", bcong: \\"\\\\u224C\\", Bcy: \\"\\\\u0411\\", bcy: \\"\\\\u0431\\", bdquo: \\"\\\\u201E\\", becaus: \\"\\\\u2235\\", because: \\"\\\\u2235\\", Because: \\"\\\\u2235\\", bemptyv: \\"\\\\u29B0\\", bepsi: \\"\\\\u03F6\\", bernou: \\"\\\\u212C\\", Bernoullis: \\"\\\\u212C\\", Beta: \\"\\\\u0392\\", beta: \\"\\\\u03B2\\", beth: \\"\\\\u2136\\", between: \\"\\\\u226C\\", Bfr: \\"\\\\u{1D505}\\", bfr: \\"\\\\u{1D51F}\\", bigcap: \\"\\\\u22C2\\", bigcirc: \\"\\\\u25EF\\", bigcup: \\"\\\\u22C3\\", bigodot: \\"\\\\u2A00\\", bigoplus: \\"\\\\u2A01\\", bigotimes: \\"\\\\u2A02\\", bigsqcup: \\"\\\\u2A06\\", bigstar: \\"\\\\u2605\\", bigtriangledown: \\"\\\\u25BD\\", bigtriangleup: \\"\\\\u25B3\\", biguplus: \\"\\\\u2A04\\", bigvee: \\"\\\\u22C1\\", bigwedge: \\"\\\\u22C0\\", bkarow: \\"\\\\u290D\\", blacklozenge: \\"\\\\u29EB\\", blacksquare: \\"\\\\u25AA\\", blacktriangle: \\"\\\\u25B4\\", blacktriangledown: \\"\\\\u25BE\\", blacktriangleleft: \\"\\\\u25C2\\", blacktriangleright: \\"\\\\u25B8\\", blank: \\"\\\\u2423\\", blk12: \\"\\\\u2592\\", blk14: \\"\\\\u2591\\", blk34: \\"\\\\u2593\\", block: \\"\\\\u2588\\", bne: \\"=\\\\u20E5\\", bnequiv: \\"\\\\u2261\\\\u20E5\\", bNot: \\"\\\\u2AED\\", bnot: \\"\\\\u2310\\", Bopf: \\"\\\\u{1D539}\\", bopf: \\"\\\\u{1D553}\\", bot: \\"\\\\u22A5\\", bottom: \\"\\\\u22A5\\", bowtie: \\"\\\\u22C8\\", boxbox: \\"\\\\u29C9\\", boxdl: \\"\\\\u2510\\", boxdL: \\"\\\\u2555\\", boxDl: \\"\\\\u2556\\", boxDL: \\"\\\\u2557\\", boxdr: \\"\\\\u250C\\", boxdR: \\"\\\\u2552\\", boxDr: \\"\\\\u2553\\", boxDR: \\"\\\\u2554\\", boxh: \\"\\\\u2500\\", boxH: \\"\\\\u2550\\", boxhd: \\"\\\\u252C\\", boxHd: \\"\\\\u2564\\", boxhD: \\"\\\\u2565\\", boxHD: \\"\\\\u2566\\", boxhu: \\"\\\\u2534\\", boxHu: \\"\\\\u2567\\", boxhU: \\"\\\\u2568\\", boxHU: \\"\\\\u2569\\", boxminus: \\"\\\\u229F\\", boxplus: \\"\\\\u229E\\", boxtimes: \\"\\\\u22A0\\", boxul: \\"\\\\u2518\\", boxuL: \\"\\\\u255B\\", boxUl: \\"\\\\u255C\\", boxUL: \\"\\\\u255D\\", boxur: \\"\\\\u2514\\", boxuR: \\"\\\\u2558\\", boxUr: \\"\\\\u2559\\", boxUR: \\"\\\\u255A\\", boxv: \\"\\\\u2502\\", boxV: \\"\\\\u2551\\", boxvh: \\"\\\\u253C\\", boxvH: \\"\\\\u256A\\", boxVh: \\"\\\\u256B\\", boxVH: \\"\\\\u256C\\", boxvl: \\"\\\\u2524\\", boxvL: \\"\\\\u2561\\", boxVl: \\"\\\\u2562\\", boxVL: \\"\\\\u2563\\", boxvr: \\"\\\\u251C\\", boxvR: \\"\\\\u255E\\", boxVr: \\"\\\\u255F\\", boxVR: \\"\\\\u2560\\", bprime: \\"\\\\u2035\\", breve: \\"\\\\u02D8\\", Breve: \\"\\\\u02D8\\", brvbar: \\"\\\\xA6\\", bscr: \\"\\\\u{1D4B7}\\", Bscr: \\"\\\\u212C\\", bsemi: \\"\\\\u204F\\", bsim: \\"\\\\u223D\\", bsime: \\"\\\\u22CD\\", bsolb: \\"\\\\u29C5\\", bsol: \\"\\\\\\\\\\", bsolhsub: \\"\\\\u27C8\\", bull: \\"\\\\u2022\\", bullet: \\"\\\\u2022\\", bump: \\"\\\\u224E\\", bumpE: \\"\\\\u2AAE\\", bumpe: \\"\\\\u224F\\", Bumpeq: \\"\\\\u224E\\", bumpeq: \\"\\\\u224F\\", Cacute: \\"\\\\u0106\\", cacute: \\"\\\\u0107\\", capand: \\"\\\\u2A44\\", capbrcup: \\"\\\\u2A49\\", capcap: \\"\\\\u2A4B\\", cap: \\"\\\\u2229\\", Cap: \\"\\\\u22D2\\", capcup: \\"\\\\u2A47\\", capdot: \\"\\\\u2A40\\", CapitalDifferentialD: \\"\\\\u2145\\", caps: \\"\\\\u2229\\\\uFE00\\", caret: \\"\\\\u2041\\", caron: \\"\\\\u02C7\\", Cayleys: \\"\\\\u212D\\", ccaps: \\"\\\\u2A4D\\", Ccaron: \\"\\\\u010C\\", ccaron: \\"\\\\u010D\\", Ccedil: \\"\\\\xC7\\", ccedil: \\"\\\\xE7\\", Ccirc: \\"\\\\u0108\\", ccirc: \\"\\\\u0109\\", Cconint: \\"\\\\u2230\\", ccups: \\"\\\\u2A4C\\", ccupssm: \\"\\\\u2A50\\", Cdot: \\"\\\\u010A\\", cdot: \\"\\\\u010B\\", cedil: \\"\\\\xB8\\", Cedilla: \\"\\\\xB8\\", cemptyv: \\"\\\\u29B2\\", cent: \\"\\\\xA2\\", centerdot: \\"\\\\xB7\\", CenterDot: \\"\\\\xB7\\", cfr: \\"\\\\u{1D520}\\", Cfr: \\"\\\\u212D\\", CHcy: \\"\\\\u0427\\", chcy: \\"\\\\u0447\\", check: \\"\\\\u2713\\", checkmark: \\"\\\\u2713\\", Chi: \\"\\\\u03A7\\", chi: \\"\\\\u03C7\\", circ: \\"\\\\u02C6\\", circeq: \\"\\\\u2257\\", circlearrowleft: \\"\\\\u21BA\\", circlearrowright: \\"\\\\u21BB\\", circledast: \\"\\\\u229B\\", circledcirc: \\"\\\\u229A\\", circleddash: \\"\\\\u229D\\", CircleDot: \\"\\\\u2299\\", circledR: \\"\\\\xAE\\", circledS: \\"\\\\u24C8\\", CircleMinus: \\"\\\\u2296\\", CirclePlus: \\"\\\\u2295\\", CircleTimes: \\"\\\\u2297\\", cir: \\"\\\\u25CB\\", cirE: \\"\\\\u29C3\\", cire: \\"\\\\u2257\\", cirfnint: \\"\\\\u2A10\\", cirmid: \\"\\\\u2AEF\\", cirscir: \\"\\\\u29C2\\", ClockwiseContourIntegral: \\"\\\\u2232\\", CloseCurlyDoubleQuote: \\"\\\\u201D\\", CloseCurlyQuote: \\"\\\\u2019\\", clubs: \\"\\\\u2663\\", clubsuit: \\"\\\\u2663\\", colon: \\":\\", Colon: \\"\\\\u2237\\", Colone: \\"\\\\u2A74\\", colone: \\"\\\\u2254\\", coloneq: \\"\\\\u2254\\", comma: \\",\\", commat: \\"@\\", comp: \\"\\\\u2201\\", compfn: \\"\\\\u2218\\", complement: \\"\\\\u2201\\", complexes: \\"\\\\u2102\\", cong: \\"\\\\u2245\\", congdot: \\"\\\\u2A6D\\", Congruent: \\"\\\\u2261\\", conint: \\"\\\\u222E\\", Conint: \\"\\\\u222F\\", ContourIntegral: \\"\\\\u222E\\", copf: \\"\\\\u{1D554}\\", Copf: \\"\\\\u2102\\", coprod: \\"\\\\u2210\\", Coproduct: \\"\\\\u2210\\", copy: \\"\\\\xA9\\", COPY: \\"\\\\xA9\\", copysr: \\"\\\\u2117\\", CounterClockwiseContourIntegral: \\"\\\\u2233\\", crarr: \\"\\\\u21B5\\", cross: \\"\\\\u2717\\", Cross: \\"\\\\u2A2F\\", Cscr: \\"\\\\u{1D49E}\\", cscr: \\"\\\\u{1D4B8}\\", csub: \\"\\\\u2ACF\\", csube: \\"\\\\u2AD1\\", csup: \\"\\\\u2AD0\\", csupe: \\"\\\\u2AD2\\", ctdot: \\"\\\\u22EF\\", cudarrl: \\"\\\\u2938\\", cudarrr: \\"\\\\u2935\\", cuepr: \\"\\\\u22DE\\", cuesc: \\"\\\\u22DF\\", cularr: \\"\\\\u21B6\\", cularrp: \\"\\\\u293D\\", cupbrcap: \\"\\\\u2A48\\", cupcap: \\"\\\\u2A46\\", CupCap: \\"\\\\u224D\\", cup: \\"\\\\u222A\\", Cup: \\"\\\\u22D3\\", cupcup: \\"\\\\u2A4A\\", cupdot: \\"\\\\u228D\\", cupor: \\"\\\\u2A45\\", cups: \\"\\\\u222A\\\\uFE00\\", curarr: \\"\\\\u21B7\\", curarrm: \\"\\\\u293C\\", curlyeqprec: \\"\\\\u22DE\\", curlyeqsucc: \\"\\\\u22DF\\", curlyvee: \\"\\\\u22CE\\", curlywedge: \\"\\\\u22CF\\", curren: \\"\\\\xA4\\", curvearrowleft: \\"\\\\u21B6\\", curvearrowright: \\"\\\\u21B7\\", cuvee: \\"\\\\u22CE\\", cuwed: \\"\\\\u22CF\\", cwconint: \\"\\\\u2232\\", cwint: \\"\\\\u2231\\", cylcty: \\"\\\\u232D\\", dagger: \\"\\\\u2020\\", Dagger: \\"\\\\u2021\\", daleth: \\"\\\\u2138\\", darr: \\"\\\\u2193\\", Darr: \\"\\\\u21A1\\", dArr: \\"\\\\u21D3\\", dash: \\"\\\\u2010\\", Dashv: \\"\\\\u2AE4\\", dashv: \\"\\\\u22A3\\", dbkarow: \\"\\\\u290F\\", dblac: \\"\\\\u02DD\\", Dcaron: \\"\\\\u010E\\", dcaron: \\"\\\\u010F\\", Dcy: \\"\\\\u0414\\", dcy: \\"\\\\u0434\\", ddagger: \\"\\\\u2021\\", ddarr: \\"\\\\u21CA\\", DD: \\"\\\\u2145\\", dd: \\"\\\\u2146\\", DDotrahd: \\"\\\\u2911\\", ddotseq: \\"\\\\u2A77\\", deg: \\"\\\\xB0\\", Del: \\"\\\\u2207\\", Delta: \\"\\\\u0394\\", delta: \\"\\\\u03B4\\", demptyv: \\"\\\\u29B1\\", dfisht: \\"\\\\u297F\\", Dfr: \\"\\\\u{1D507}\\", dfr: \\"\\\\u{1D521}\\", dHar: \\"\\\\u2965\\", dharl: \\"\\\\u21C3\\", dharr: \\"\\\\u21C2\\", DiacriticalAcute: \\"\\\\xB4\\", DiacriticalDot: \\"\\\\u02D9\\", DiacriticalDoubleAcute: \\"\\\\u02DD\\", DiacriticalGrave: \\"\`\\", DiacriticalTilde: \\"\\\\u02DC\\", diam: \\"\\\\u22C4\\", diamond: \\"\\\\u22C4\\", Diamond: \\"\\\\u22C4\\", diamondsuit: \\"\\\\u2666\\", diams: \\"\\\\u2666\\", die: \\"\\\\xA8\\", DifferentialD: \\"\\\\u2146\\", digamma: \\"\\\\u03DD\\", disin: \\"\\\\u22F2\\", div: \\"\\\\xF7\\", divide: \\"\\\\xF7\\", divideontimes: \\"\\\\u22C7\\", divonx: \\"\\\\u22C7\\", DJcy: \\"\\\\u0402\\", djcy: \\"\\\\u0452\\", dlcorn: \\"\\\\u231E\\", dlcrop: \\"\\\\u230D\\", dollar: \\"$\\", Dopf: \\"\\\\u{1D53B}\\", dopf: \\"\\\\u{1D555}\\", Dot: \\"\\\\xA8\\", dot: \\"\\\\u02D9\\", DotDot: \\"\\\\u20DC\\", doteq: \\"\\\\u2250\\", doteqdot: \\"\\\\u2251\\", DotEqual: \\"\\\\u2250\\", dotminus: \\"\\\\u2238\\", dotplus: \\"\\\\u2214\\", dotsquare: \\"\\\\u22A1\\", doublebarwedge: \\"\\\\u2306\\", DoubleContourIntegral: \\"\\\\u222F\\", DoubleDot: \\"\\\\xA8\\", DoubleDownArrow: \\"\\\\u21D3\\", DoubleLeftArrow: \\"\\\\u21D0\\", DoubleLeftRightArrow: \\"\\\\u21D4\\", DoubleLeftTee: \\"\\\\u2AE4\\", DoubleLongLeftArrow: \\"\\\\u27F8\\", DoubleLongLeftRightArrow: \\"\\\\u27FA\\", DoubleLongRightArrow: \\"\\\\u27F9\\", DoubleRightArrow: \\"\\\\u21D2\\", DoubleRightTee: \\"\\\\u22A8\\", DoubleUpArrow: \\"\\\\u21D1\\", DoubleUpDownArrow: \\"\\\\u21D5\\", DoubleVerticalBar: \\"\\\\u2225\\", DownArrowBar: \\"\\\\u2913\\", downarrow: \\"\\\\u2193\\", DownArrow: \\"\\\\u2193\\", Downarrow: \\"\\\\u21D3\\", DownArrowUpArrow: \\"\\\\u21F5\\", DownBreve: \\"\\\\u0311\\", downdownarrows: \\"\\\\u21CA\\", downharpoonleft: \\"\\\\u21C3\\", downharpoonright: \\"\\\\u21C2\\", DownLeftRightVector: \\"\\\\u2950\\", DownLeftTeeVector: \\"\\\\u295E\\", DownLeftVectorBar: \\"\\\\u2956\\", DownLeftVector: \\"\\\\u21BD\\", DownRightTeeVector: \\"\\\\u295F\\", DownRightVectorBar: \\"\\\\u2957\\", DownRightVector: \\"\\\\u21C1\\", DownTeeArrow: \\"\\\\u21A7\\", DownTee: \\"\\\\u22A4\\", drbkarow: \\"\\\\u2910\\", drcorn: \\"\\\\u231F\\", drcrop: \\"\\\\u230C\\", Dscr: \\"\\\\u{1D49F}\\", dscr: \\"\\\\u{1D4B9}\\", DScy: \\"\\\\u0405\\", dscy: \\"\\\\u0455\\", dsol: \\"\\\\u29F6\\", Dstrok: \\"\\\\u0110\\", dstrok: \\"\\\\u0111\\", dtdot: \\"\\\\u22F1\\", dtri: \\"\\\\u25BF\\", dtrif: \\"\\\\u25BE\\", duarr: \\"\\\\u21F5\\", duhar: \\"\\\\u296F\\", dwangle: \\"\\\\u29A6\\", DZcy: \\"\\\\u040F\\", dzcy: \\"\\\\u045F\\", dzigrarr: \\"\\\\u27FF\\", Eacute: \\"\\\\xC9\\", eacute: \\"\\\\xE9\\", easter: \\"\\\\u2A6E\\", Ecaron: \\"\\\\u011A\\", ecaron: \\"\\\\u011B\\", Ecirc: \\"\\\\xCA\\", ecirc: \\"\\\\xEA\\", ecir: \\"\\\\u2256\\", ecolon: \\"\\\\u2255\\", Ecy: \\"\\\\u042D\\", ecy: \\"\\\\u044D\\", eDDot: \\"\\\\u2A77\\", Edot: \\"\\\\u0116\\", edot: \\"\\\\u0117\\", eDot: \\"\\\\u2251\\", ee: \\"\\\\u2147\\", efDot: \\"\\\\u2252\\", Efr: \\"\\\\u{1D508}\\", efr: \\"\\\\u{1D522}\\", eg: \\"\\\\u2A9A\\", Egrave: \\"\\\\xC8\\", egrave: \\"\\\\xE8\\", egs: \\"\\\\u2A96\\", egsdot: \\"\\\\u2A98\\", el: \\"\\\\u2A99\\", Element: \\"\\\\u2208\\", elinters: \\"\\\\u23E7\\", ell: \\"\\\\u2113\\", els: \\"\\\\u2A95\\", elsdot: \\"\\\\u2A97\\", Emacr: \\"\\\\u0112\\", emacr: \\"\\\\u0113\\", empty: \\"\\\\u2205\\", emptyset: \\"\\\\u2205\\", EmptySmallSquare: \\"\\\\u25FB\\", emptyv: \\"\\\\u2205\\", EmptyVerySmallSquare: \\"\\\\u25AB\\", emsp13: \\"\\\\u2004\\", emsp14: \\"\\\\u2005\\", emsp: \\"\\\\u2003\\", ENG: \\"\\\\u014A\\", eng: \\"\\\\u014B\\", ensp: \\"\\\\u2002\\", Eogon: \\"\\\\u0118\\", eogon: \\"\\\\u0119\\", Eopf: \\"\\\\u{1D53C}\\", eopf: \\"\\\\u{1D556}\\", epar: \\"\\\\u22D5\\", eparsl: \\"\\\\u29E3\\", eplus: \\"\\\\u2A71\\", epsi: \\"\\\\u03B5\\", Epsilon: \\"\\\\u0395\\", epsilon: \\"\\\\u03B5\\", epsiv: \\"\\\\u03F5\\", eqcirc: \\"\\\\u2256\\", eqcolon: \\"\\\\u2255\\", eqsim: \\"\\\\u2242\\", eqslantgtr: \\"\\\\u2A96\\", eqslantless: \\"\\\\u2A95\\", Equal: \\"\\\\u2A75\\", equals: \\"=\\", EqualTilde: \\"\\\\u2242\\", equest: \\"\\\\u225F\\", Equilibrium: \\"\\\\u21CC\\", equiv: \\"\\\\u2261\\", equivDD: \\"\\\\u2A78\\", eqvparsl: \\"\\\\u29E5\\", erarr: \\"\\\\u2971\\", erDot: \\"\\\\u2253\\", escr: \\"\\\\u212F\\", Escr: \\"\\\\u2130\\", esdot: \\"\\\\u2250\\", Esim: \\"\\\\u2A73\\", esim: \\"\\\\u2242\\", Eta: \\"\\\\u0397\\", eta: \\"\\\\u03B7\\", ETH: \\"\\\\xD0\\", eth: \\"\\\\xF0\\", Euml: \\"\\\\xCB\\", euml: \\"\\\\xEB\\", euro: \\"\\\\u20AC\\", excl: \\"!\\", exist: \\"\\\\u2203\\", Exists: \\"\\\\u2203\\", expectation: \\"\\\\u2130\\", exponentiale: \\"\\\\u2147\\", ExponentialE: \\"\\\\u2147\\", fallingdotseq: \\"\\\\u2252\\", Fcy: \\"\\\\u0424\\", fcy: \\"\\\\u0444\\", female: \\"\\\\u2640\\", ffilig: \\"\\\\uFB03\\", fflig: \\"\\\\uFB00\\", ffllig: \\"\\\\uFB04\\", Ffr: \\"\\\\u{1D509}\\", ffr: \\"\\\\u{1D523}\\", filig: \\"\\\\uFB01\\", FilledSmallSquare: \\"\\\\u25FC\\", FilledVerySmallSquare: \\"\\\\u25AA\\", fjlig: \\"fj\\", flat: \\"\\\\u266D\\", fllig: \\"\\\\uFB02\\", fltns: \\"\\\\u25B1\\", fnof: \\"\\\\u0192\\", Fopf: \\"\\\\u{1D53D}\\", fopf: \\"\\\\u{1D557}\\", forall: \\"\\\\u2200\\", ForAll: \\"\\\\u2200\\", fork: \\"\\\\u22D4\\", forkv: \\"\\\\u2AD9\\", Fouriertrf: \\"\\\\u2131\\", fpartint: \\"\\\\u2A0D\\", frac12: \\"\\\\xBD\\", frac13: \\"\\\\u2153\\", frac14: \\"\\\\xBC\\", frac15: \\"\\\\u2155\\", frac16: \\"\\\\u2159\\", frac18: \\"\\\\u215B\\", frac23: \\"\\\\u2154\\", frac25: \\"\\\\u2156\\", frac34: \\"\\\\xBE\\", frac35: \\"\\\\u2157\\", frac38: \\"\\\\u215C\\", frac45: \\"\\\\u2158\\", frac56: \\"\\\\u215A\\", frac58: \\"\\\\u215D\\", frac78: \\"\\\\u215E\\", frasl: \\"\\\\u2044\\", frown: \\"\\\\u2322\\", fscr: \\"\\\\u{1D4BB}\\", Fscr: \\"\\\\u2131\\", gacute: \\"\\\\u01F5\\", Gamma: \\"\\\\u0393\\", gamma: \\"\\\\u03B3\\", Gammad: \\"\\\\u03DC\\", gammad: \\"\\\\u03DD\\", gap: \\"\\\\u2A86\\", Gbreve: \\"\\\\u011E\\", gbreve: \\"\\\\u011F\\", Gcedil: \\"\\\\u0122\\", Gcirc: \\"\\\\u011C\\", gcirc: \\"\\\\u011D\\", Gcy: \\"\\\\u0413\\", gcy: \\"\\\\u0433\\", Gdot: \\"\\\\u0120\\", gdot: \\"\\\\u0121\\", ge: \\"\\\\u2265\\", gE: \\"\\\\u2267\\", gEl: \\"\\\\u2A8C\\", gel: \\"\\\\u22DB\\", geq: \\"\\\\u2265\\", geqq: \\"\\\\u2267\\", geqslant: \\"\\\\u2A7E\\", gescc: \\"\\\\u2AA9\\", ges: \\"\\\\u2A7E\\", gesdot: \\"\\\\u2A80\\", gesdoto: \\"\\\\u2A82\\", gesdotol: \\"\\\\u2A84\\", gesl: \\"\\\\u22DB\\\\uFE00\\", gesles: \\"\\\\u2A94\\", Gfr: \\"\\\\u{1D50A}\\", gfr: \\"\\\\u{1D524}\\", gg: \\"\\\\u226B\\", Gg: \\"\\\\u22D9\\", ggg: \\"\\\\u22D9\\", gimel: \\"\\\\u2137\\", GJcy: \\"\\\\u0403\\", gjcy: \\"\\\\u0453\\", gla: \\"\\\\u2AA5\\", gl: \\"\\\\u2277\\", glE: \\"\\\\u2A92\\", glj: \\"\\\\u2AA4\\", gnap: \\"\\\\u2A8A\\", gnapprox: \\"\\\\u2A8A\\", gne: \\"\\\\u2A88\\", gnE: \\"\\\\u2269\\", gneq: \\"\\\\u2A88\\", gneqq: \\"\\\\u2269\\", gnsim: \\"\\\\u22E7\\", Gopf: \\"\\\\u{1D53E}\\", gopf: \\"\\\\u{1D558}\\", grave: \\"\`\\", GreaterEqual: \\"\\\\u2265\\", GreaterEqualLess: \\"\\\\u22DB\\", GreaterFullEqual: \\"\\\\u2267\\", GreaterGreater: \\"\\\\u2AA2\\", GreaterLess: \\"\\\\u2277\\", GreaterSlantEqual: \\"\\\\u2A7E\\", GreaterTilde: \\"\\\\u2273\\", Gscr: \\"\\\\u{1D4A2}\\", gscr: \\"\\\\u210A\\", gsim: \\"\\\\u2273\\", gsime: \\"\\\\u2A8E\\", gsiml: \\"\\\\u2A90\\", gtcc: \\"\\\\u2AA7\\", gtcir: \\"\\\\u2A7A\\", gt: \\">\\", GT: \\">\\", Gt: \\"\\\\u226B\\", gtdot: \\"\\\\u22D7\\", gtlPar: \\"\\\\u2995\\", gtquest: \\"\\\\u2A7C\\", gtrapprox: \\"\\\\u2A86\\", gtrarr: \\"\\\\u2978\\", gtrdot: \\"\\\\u22D7\\", gtreqless: \\"\\\\u22DB\\", gtreqqless: \\"\\\\u2A8C\\", gtrless: \\"\\\\u2277\\", gtrsim: \\"\\\\u2273\\", gvertneqq: \\"\\\\u2269\\\\uFE00\\", gvnE: \\"\\\\u2269\\\\uFE00\\", Hacek: \\"\\\\u02C7\\", hairsp: \\"\\\\u200A\\", half: \\"\\\\xBD\\", hamilt: \\"\\\\u210B\\", HARDcy: \\"\\\\u042A\\", hardcy: \\"\\\\u044A\\", harrcir: \\"\\\\u2948\\", harr: \\"\\\\u2194\\", hArr: \\"\\\\u21D4\\", harrw: \\"\\\\u21AD\\", Hat: \\"^\\", hbar: \\"\\\\u210F\\", Hcirc: \\"\\\\u0124\\", hcirc: \\"\\\\u0125\\", hearts: \\"\\\\u2665\\", heartsuit: \\"\\\\u2665\\", hellip: \\"\\\\u2026\\", hercon: \\"\\\\u22B9\\", hfr: \\"\\\\u{1D525}\\", Hfr: \\"\\\\u210C\\", HilbertSpace: \\"\\\\u210B\\", hksearow: \\"\\\\u2925\\", hkswarow: \\"\\\\u2926\\", hoarr: \\"\\\\u21FF\\", homtht: \\"\\\\u223B\\", hookleftarrow: \\"\\\\u21A9\\", hookrightarrow: \\"\\\\u21AA\\", hopf: \\"\\\\u{1D559}\\", Hopf: \\"\\\\u210D\\", horbar: \\"\\\\u2015\\", HorizontalLine: \\"\\\\u2500\\", hscr: \\"\\\\u{1D4BD}\\", Hscr: \\"\\\\u210B\\", hslash: \\"\\\\u210F\\", Hstrok: \\"\\\\u0126\\", hstrok: \\"\\\\u0127\\", HumpDownHump: \\"\\\\u224E\\", HumpEqual: \\"\\\\u224F\\", hybull: \\"\\\\u2043\\", hyphen: \\"\\\\u2010\\", Iacute: \\"\\\\xCD\\", iacute: \\"\\\\xED\\", ic: \\"\\\\u2063\\", Icirc: \\"\\\\xCE\\", icirc: \\"\\\\xEE\\", Icy: \\"\\\\u0418\\", icy: \\"\\\\u0438\\", Idot: \\"\\\\u0130\\", IEcy: \\"\\\\u0415\\", iecy: \\"\\\\u0435\\", iexcl: \\"\\\\xA1\\", iff: \\"\\\\u21D4\\", ifr: \\"\\\\u{1D526}\\", Ifr: \\"\\\\u2111\\", Igrave: \\"\\\\xCC\\", igrave: \\"\\\\xEC\\", ii: \\"\\\\u2148\\", iiiint: \\"\\\\u2A0C\\", iiint: \\"\\\\u222D\\", iinfin: \\"\\\\u29DC\\", iiota: \\"\\\\u2129\\", IJlig: \\"\\\\u0132\\", ijlig: \\"\\\\u0133\\", Imacr: \\"\\\\u012A\\", imacr: \\"\\\\u012B\\", image: \\"\\\\u2111\\", ImaginaryI: \\"\\\\u2148\\", imagline: \\"\\\\u2110\\", imagpart: \\"\\\\u2111\\", imath: \\"\\\\u0131\\", Im: \\"\\\\u2111\\", imof: \\"\\\\u22B7\\", imped: \\"\\\\u01B5\\", Implies: \\"\\\\u21D2\\", incare: \\"\\\\u2105\\", in: \\"\\\\u2208\\", infin: \\"\\\\u221E\\", infintie: \\"\\\\u29DD\\", inodot: \\"\\\\u0131\\", intcal: \\"\\\\u22BA\\", int: \\"\\\\u222B\\", Int: \\"\\\\u222C\\", integers: \\"\\\\u2124\\", Integral: \\"\\\\u222B\\", intercal: \\"\\\\u22BA\\", Intersection: \\"\\\\u22C2\\", intlarhk: \\"\\\\u2A17\\", intprod: \\"\\\\u2A3C\\", InvisibleComma: \\"\\\\u2063\\", InvisibleTimes: \\"\\\\u2062\\", IOcy: \\"\\\\u0401\\", iocy: \\"\\\\u0451\\", Iogon: \\"\\\\u012E\\", iogon: \\"\\\\u012F\\", Iopf: \\"\\\\u{1D540}\\", iopf: \\"\\\\u{1D55A}\\", Iota: \\"\\\\u0399\\", iota: \\"\\\\u03B9\\", iprod: \\"\\\\u2A3C\\", iquest: \\"\\\\xBF\\", iscr: \\"\\\\u{1D4BE}\\", Iscr: \\"\\\\u2110\\", isin: \\"\\\\u2208\\", isindot: \\"\\\\u22F5\\", isinE: \\"\\\\u22F9\\", isins: \\"\\\\u22F4\\", isinsv: \\"\\\\u22F3\\", isinv: \\"\\\\u2208\\", it: \\"\\\\u2062\\", Itilde: \\"\\\\u0128\\", itilde: \\"\\\\u0129\\", Iukcy: \\"\\\\u0406\\", iukcy: \\"\\\\u0456\\", Iuml: \\"\\\\xCF\\", iuml: \\"\\\\xEF\\", Jcirc: \\"\\\\u0134\\", jcirc: \\"\\\\u0135\\", Jcy: \\"\\\\u0419\\", jcy: \\"\\\\u0439\\", Jfr: \\"\\\\u{1D50D}\\", jfr: \\"\\\\u{1D527}\\", jmath: \\"\\\\u0237\\", Jopf: \\"\\\\u{1D541}\\", jopf: \\"\\\\u{1D55B}\\", Jscr: \\"\\\\u{1D4A5}\\", jscr: \\"\\\\u{1D4BF}\\", Jsercy: \\"\\\\u0408\\", jsercy: \\"\\\\u0458\\", Jukcy: \\"\\\\u0404\\", jukcy: \\"\\\\u0454\\", Kappa: \\"\\\\u039A\\", kappa: \\"\\\\u03BA\\", kappav: \\"\\\\u03F0\\", Kcedil: \\"\\\\u0136\\", kcedil: \\"\\\\u0137\\", Kcy: \\"\\\\u041A\\", kcy: \\"\\\\u043A\\", Kfr: \\"\\\\u{1D50E}\\", kfr: \\"\\\\u{1D528}\\", kgreen: \\"\\\\u0138\\", KHcy: \\"\\\\u0425\\", khcy: \\"\\\\u0445\\", KJcy: \\"\\\\u040C\\", kjcy: \\"\\\\u045C\\", Kopf: \\"\\\\u{1D542}\\", kopf: \\"\\\\u{1D55C}\\", Kscr: \\"\\\\u{1D4A6}\\", kscr: \\"\\\\u{1D4C0}\\", lAarr: \\"\\\\u21DA\\", Lacute: \\"\\\\u0139\\", lacute: \\"\\\\u013A\\", laemptyv: \\"\\\\u29B4\\", lagran: \\"\\\\u2112\\", Lambda: \\"\\\\u039B\\", lambda: \\"\\\\u03BB\\", lang: \\"\\\\u27E8\\", Lang: \\"\\\\u27EA\\", langd: \\"\\\\u2991\\", langle: \\"\\\\u27E8\\", lap: \\"\\\\u2A85\\", Laplacetrf: \\"\\\\u2112\\", laquo: \\"\\\\xAB\\", larrb: \\"\\\\u21E4\\", larrbfs: \\"\\\\u291F\\", larr: \\"\\\\u2190\\", Larr: \\"\\\\u219E\\", lArr: \\"\\\\u21D0\\", larrfs: \\"\\\\u291D\\", larrhk: \\"\\\\u21A9\\", larrlp: \\"\\\\u21AB\\", larrpl: \\"\\\\u2939\\", larrsim: \\"\\\\u2973\\", larrtl: \\"\\\\u21A2\\", latail: \\"\\\\u2919\\", lAtail: \\"\\\\u291B\\", lat: \\"\\\\u2AAB\\", late: \\"\\\\u2AAD\\", lates: \\"\\\\u2AAD\\\\uFE00\\", lbarr: \\"\\\\u290C\\", lBarr: \\"\\\\u290E\\", lbbrk: \\"\\\\u2772\\", lbrace: \\"{\\", lbrack: \\"[\\", lbrke: \\"\\\\u298B\\", lbrksld: \\"\\\\u298F\\", lbrkslu: \\"\\\\u298D\\", Lcaron: \\"\\\\u013D\\", lcaron: \\"\\\\u013E\\", Lcedil: \\"\\\\u013B\\", lcedil: \\"\\\\u013C\\", lceil: \\"\\\\u2308\\", lcub: \\"{\\", Lcy: \\"\\\\u041B\\", lcy: \\"\\\\u043B\\", ldca: \\"\\\\u2936\\", ldquo: \\"\\\\u201C\\", ldquor: \\"\\\\u201E\\", ldrdhar: \\"\\\\u2967\\", ldrushar: \\"\\\\u294B\\", ldsh: \\"\\\\u21B2\\", le: \\"\\\\u2264\\", lE: \\"\\\\u2266\\", LeftAngleBracket: \\"\\\\u27E8\\", LeftArrowBar: \\"\\\\u21E4\\", leftarrow: \\"\\\\u2190\\", LeftArrow: \\"\\\\u2190\\", Leftarrow: \\"\\\\u21D0\\", LeftArrowRightArrow: \\"\\\\u21C6\\", leftarrowtail: \\"\\\\u21A2\\", LeftCeiling: \\"\\\\u2308\\", LeftDoubleBracket: \\"\\\\u27E6\\", LeftDownTeeVector: \\"\\\\u2961\\", LeftDownVectorBar: \\"\\\\u2959\\", LeftDownVector: \\"\\\\u21C3\\", LeftFloor: \\"\\\\u230A\\", leftharpoondown: \\"\\\\u21BD\\", leftharpoonup: \\"\\\\u21BC\\", leftleftarrows: \\"\\\\u21C7\\", leftrightarrow: \\"\\\\u2194\\", LeftRightArrow: \\"\\\\u2194\\", Leftrightarrow: \\"\\\\u21D4\\", leftrightarrows: \\"\\\\u21C6\\", leftrightharpoons: \\"\\\\u21CB\\", leftrightsquigarrow: \\"\\\\u21AD\\", LeftRightVector: \\"\\\\u294E\\", LeftTeeArrow: \\"\\\\u21A4\\", LeftTee: \\"\\\\u22A3\\", LeftTeeVector: \\"\\\\u295A\\", leftthreetimes: \\"\\\\u22CB\\", LeftTriangleBar: \\"\\\\u29CF\\", LeftTriangle: \\"\\\\u22B2\\", LeftTriangleEqual: \\"\\\\u22B4\\", LeftUpDownVector: \\"\\\\u2951\\", LeftUpTeeVector: \\"\\\\u2960\\", LeftUpVectorBar: \\"\\\\u2958\\", LeftUpVector: \\"\\\\u21BF\\", LeftVectorBar: \\"\\\\u2952\\", LeftVector: \\"\\\\u21BC\\", lEg: \\"\\\\u2A8B\\", leg: \\"\\\\u22DA\\", leq: \\"\\\\u2264\\", leqq: \\"\\\\u2266\\", leqslant: \\"\\\\u2A7D\\", lescc: \\"\\\\u2AA8\\", les: \\"\\\\u2A7D\\", lesdot: \\"\\\\u2A7F\\", lesdoto: \\"\\\\u2A81\\", lesdotor: \\"\\\\u2A83\\", lesg: \\"\\\\u22DA\\\\uFE00\\", lesges: \\"\\\\u2A93\\", lessapprox: \\"\\\\u2A85\\", lessdot: \\"\\\\u22D6\\", lesseqgtr: \\"\\\\u22DA\\", lesseqqgtr: \\"\\\\u2A8B\\", LessEqualGreater: \\"\\\\u22DA\\", LessFullEqual: \\"\\\\u2266\\", LessGreater: \\"\\\\u2276\\", lessgtr: \\"\\\\u2276\\", LessLess: \\"\\\\u2AA1\\", lesssim: \\"\\\\u2272\\", LessSlantEqual: \\"\\\\u2A7D\\", LessTilde: \\"\\\\u2272\\", lfisht: \\"\\\\u297C\\", lfloor: \\"\\\\u230A\\", Lfr: \\"\\\\u{1D50F}\\", lfr: \\"\\\\u{1D529}\\", lg: \\"\\\\u2276\\", lgE: \\"\\\\u2A91\\", lHar: \\"\\\\u2962\\", lhard: \\"\\\\u21BD\\", lharu: \\"\\\\u21BC\\", lharul: \\"\\\\u296A\\", lhblk: \\"\\\\u2584\\", LJcy: \\"\\\\u0409\\", ljcy: \\"\\\\u0459\\", llarr: \\"\\\\u21C7\\", ll: \\"\\\\u226A\\", Ll: \\"\\\\u22D8\\", llcorner: \\"\\\\u231E\\", Lleftarrow: \\"\\\\u21DA\\", llhard: \\"\\\\u296B\\", lltri: \\"\\\\u25FA\\", Lmidot: \\"\\\\u013F\\", lmidot: \\"\\\\u0140\\", lmoustache: \\"\\\\u23B0\\", lmoust: \\"\\\\u23B0\\", lnap: \\"\\\\u2A89\\", lnapprox: \\"\\\\u2A89\\", lne: \\"\\\\u2A87\\", lnE: \\"\\\\u2268\\", lneq: \\"\\\\u2A87\\", lneqq: \\"\\\\u2268\\", lnsim: \\"\\\\u22E6\\", loang: \\"\\\\u27EC\\", loarr: \\"\\\\u21FD\\", lobrk: \\"\\\\u27E6\\", longleftarrow: \\"\\\\u27F5\\", LongLeftArrow: \\"\\\\u27F5\\", Longleftarrow: \\"\\\\u27F8\\", longleftrightarrow: \\"\\\\u27F7\\", LongLeftRightArrow: \\"\\\\u27F7\\", Longleftrightarrow: \\"\\\\u27FA\\", longmapsto: \\"\\\\u27FC\\", longrightarrow: \\"\\\\u27F6\\", LongRightArrow: \\"\\\\u27F6\\", Longrightarrow: \\"\\\\u27F9\\", looparrowleft: \\"\\\\u21AB\\", looparrowright: \\"\\\\u21AC\\", lopar: \\"\\\\u2985\\", Lopf: \\"\\\\u{1D543}\\", lopf: \\"\\\\u{1D55D}\\", loplus: \\"\\\\u2A2D\\", lotimes: \\"\\\\u2A34\\", lowast: \\"\\\\u2217\\", lowbar: \\"_\\", LowerLeftArrow: \\"\\\\u2199\\", LowerRightArrow: \\"\\\\u2198\\", loz: \\"\\\\u25CA\\", lozenge: \\"\\\\u25CA\\", lozf: \\"\\\\u29EB\\", lpar: \\"(\\", lparlt: \\"\\\\u2993\\", lrarr: \\"\\\\u21C6\\", lrcorner: \\"\\\\u231F\\", lrhar: \\"\\\\u21CB\\", lrhard: \\"\\\\u296D\\", lrm: \\"\\\\u200E\\", lrtri: \\"\\\\u22BF\\", lsaquo: \\"\\\\u2039\\", lscr: \\"\\\\u{1D4C1}\\", Lscr: \\"\\\\u2112\\", lsh: \\"\\\\u21B0\\", Lsh: \\"\\\\u21B0\\", lsim: \\"\\\\u2272\\", lsime: \\"\\\\u2A8D\\", lsimg: \\"\\\\u2A8F\\", lsqb: \\"[\\", lsquo: \\"\\\\u2018\\", lsquor: \\"\\\\u201A\\", Lstrok: \\"\\\\u0141\\", lstrok: \\"\\\\u0142\\", ltcc: \\"\\\\u2AA6\\", ltcir: \\"\\\\u2A79\\", lt: \\"<\\", LT: \\"<\\", Lt: \\"\\\\u226A\\", ltdot: \\"\\\\u22D6\\", lthree: \\"\\\\u22CB\\", ltimes: \\"\\\\u22C9\\", ltlarr: \\"\\\\u2976\\", ltquest: \\"\\\\u2A7B\\", ltri: \\"\\\\u25C3\\", ltrie: \\"\\\\u22B4\\", ltrif: \\"\\\\u25C2\\", ltrPar: \\"\\\\u2996\\", lurdshar: \\"\\\\u294A\\", luruhar: \\"\\\\u2966\\", lvertneqq: \\"\\\\u2268\\\\uFE00\\", lvnE: \\"\\\\u2268\\\\uFE00\\", macr: \\"\\\\xAF\\", male: \\"\\\\u2642\\", malt: \\"\\\\u2720\\", maltese: \\"\\\\u2720\\", Map: \\"\\\\u2905\\", map: \\"\\\\u21A6\\", mapsto: \\"\\\\u21A6\\", mapstodown: \\"\\\\u21A7\\", mapstoleft: \\"\\\\u21A4\\", mapstoup: \\"\\\\u21A5\\", marker: \\"\\\\u25AE\\", mcomma: \\"\\\\u2A29\\", Mcy: \\"\\\\u041C\\", mcy: \\"\\\\u043C\\", mdash: \\"\\\\u2014\\", mDDot: \\"\\\\u223A\\", measuredangle: \\"\\\\u2221\\", MediumSpace: \\"\\\\u205F\\", Mellintrf: \\"\\\\u2133\\", Mfr: \\"\\\\u{1D510}\\", mfr: \\"\\\\u{1D52A}\\", mho: \\"\\\\u2127\\", micro: \\"\\\\xB5\\", midast: \\"*\\", midcir: \\"\\\\u2AF0\\", mid: \\"\\\\u2223\\", middot: \\"\\\\xB7\\", minusb: \\"\\\\u229F\\", minus: \\"\\\\u2212\\", minusd: \\"\\\\u2238\\", minusdu: \\"\\\\u2A2A\\", MinusPlus: \\"\\\\u2213\\", mlcp: \\"\\\\u2ADB\\", mldr: \\"\\\\u2026\\", mnplus: \\"\\\\u2213\\", models: \\"\\\\u22A7\\", Mopf: \\"\\\\u{1D544}\\", mopf: \\"\\\\u{1D55E}\\", mp: \\"\\\\u2213\\", mscr: \\"\\\\u{1D4C2}\\", Mscr: \\"\\\\u2133\\", mstpos: \\"\\\\u223E\\", Mu: \\"\\\\u039C\\", mu: \\"\\\\u03BC\\", multimap: \\"\\\\u22B8\\", mumap: \\"\\\\u22B8\\", nabla: \\"\\\\u2207\\", Nacute: \\"\\\\u0143\\", nacute: \\"\\\\u0144\\", nang: \\"\\\\u2220\\\\u20D2\\", nap: \\"\\\\u2249\\", napE: \\"\\\\u2A70\\\\u0338\\", napid: \\"\\\\u224B\\\\u0338\\", napos: \\"\\\\u0149\\", napprox: \\"\\\\u2249\\", natural: \\"\\\\u266E\\", naturals: \\"\\\\u2115\\", natur: \\"\\\\u266E\\", nbsp: \\"\\\\xA0\\", nbump: \\"\\\\u224E\\\\u0338\\", nbumpe: \\"\\\\u224F\\\\u0338\\", ncap: \\"\\\\u2A43\\", Ncaron: \\"\\\\u0147\\", ncaron: \\"\\\\u0148\\", Ncedil: \\"\\\\u0145\\", ncedil: \\"\\\\u0146\\", ncong: \\"\\\\u2247\\", ncongdot: \\"\\\\u2A6D\\\\u0338\\", ncup: \\"\\\\u2A42\\", Ncy: \\"\\\\u041D\\", ncy: \\"\\\\u043D\\", ndash: \\"\\\\u2013\\", nearhk: \\"\\\\u2924\\", nearr: \\"\\\\u2197\\", neArr: \\"\\\\u21D7\\", nearrow: \\"\\\\u2197\\", ne: \\"\\\\u2260\\", nedot: \\"\\\\u2250\\\\u0338\\", NegativeMediumSpace: \\"\\\\u200B\\", NegativeThickSpace: \\"\\\\u200B\\", NegativeThinSpace: \\"\\\\u200B\\", NegativeVeryThinSpace: \\"\\\\u200B\\", nequiv: \\"\\\\u2262\\", nesear: \\"\\\\u2928\\", nesim: \\"\\\\u2242\\\\u0338\\", NestedGreaterGreater: \\"\\\\u226B\\", NestedLessLess: \\"\\\\u226A\\", NewLine: \\"\\\\n\\", nexist: \\"\\\\u2204\\", nexists: \\"\\\\u2204\\", Nfr: \\"\\\\u{1D511}\\", nfr: \\"\\\\u{1D52B}\\", ngE: \\"\\\\u2267\\\\u0338\\", nge: \\"\\\\u2271\\", ngeq: \\"\\\\u2271\\", ngeqq: \\"\\\\u2267\\\\u0338\\", ngeqslant: \\"\\\\u2A7E\\\\u0338\\", nges: \\"\\\\u2A7E\\\\u0338\\", nGg: \\"\\\\u22D9\\\\u0338\\", ngsim: \\"\\\\u2275\\", nGt: \\"\\\\u226B\\\\u20D2\\", ngt: \\"\\\\u226F\\", ngtr: \\"\\\\u226F\\", nGtv: \\"\\\\u226B\\\\u0338\\", nharr: \\"\\\\u21AE\\", nhArr: \\"\\\\u21CE\\", nhpar: \\"\\\\u2AF2\\", ni: \\"\\\\u220B\\", nis: \\"\\\\u22FC\\", nisd: \\"\\\\u22FA\\", niv: \\"\\\\u220B\\", NJcy: \\"\\\\u040A\\", njcy: \\"\\\\u045A\\", nlarr: \\"\\\\u219A\\", nlArr: \\"\\\\u21CD\\", nldr: \\"\\\\u2025\\", nlE: \\"\\\\u2266\\\\u0338\\", nle: \\"\\\\u2270\\", nleftarrow: \\"\\\\u219A\\", nLeftarrow: \\"\\\\u21CD\\", nleftrightarrow: \\"\\\\u21AE\\", nLeftrightarrow: \\"\\\\u21CE\\", nleq: \\"\\\\u2270\\", nleqq: \\"\\\\u2266\\\\u0338\\", nleqslant: \\"\\\\u2A7D\\\\u0338\\", nles: \\"\\\\u2A7D\\\\u0338\\", nless: \\"\\\\u226E\\", nLl: \\"\\\\u22D8\\\\u0338\\", nlsim: \\"\\\\u2274\\", nLt: \\"\\\\u226A\\\\u20D2\\", nlt: \\"\\\\u226E\\", nltri: \\"\\\\u22EA\\", nltrie: \\"\\\\u22EC\\", nLtv: \\"\\\\u226A\\\\u0338\\", nmid: \\"\\\\u2224\\", NoBreak: \\"\\\\u2060\\", NonBreakingSpace: \\"\\\\xA0\\", nopf: \\"\\\\u{1D55F}\\", Nopf: \\"\\\\u2115\\", Not: \\"\\\\u2AEC\\", not: \\"\\\\xAC\\", NotCongruent: \\"\\\\u2262\\", NotCupCap: \\"\\\\u226D\\", NotDoubleVerticalBar: \\"\\\\u2226\\", NotElement: \\"\\\\u2209\\", NotEqual: \\"\\\\u2260\\", NotEqualTilde: \\"\\\\u2242\\\\u0338\\", NotExists: \\"\\\\u2204\\", NotGreater: \\"\\\\u226F\\", NotGreaterEqual: \\"\\\\u2271\\", NotGreaterFullEqual: \\"\\\\u2267\\\\u0338\\", NotGreaterGreater: \\"\\\\u226B\\\\u0338\\", NotGreaterLess: \\"\\\\u2279\\", NotGreaterSlantEqual: \\"\\\\u2A7E\\\\u0338\\", NotGreaterTilde: \\"\\\\u2275\\", NotHumpDownHump: \\"\\\\u224E\\\\u0338\\", NotHumpEqual: \\"\\\\u224F\\\\u0338\\", notin: \\"\\\\u2209\\", notindot: \\"\\\\u22F5\\\\u0338\\", notinE: \\"\\\\u22F9\\\\u0338\\", notinva: \\"\\\\u2209\\", notinvb: \\"\\\\u22F7\\", notinvc: \\"\\\\u22F6\\", NotLeftTriangleBar: \\"\\\\u29CF\\\\u0338\\", NotLeftTriangle: \\"\\\\u22EA\\", NotLeftTriangleEqual: \\"\\\\u22EC\\", NotLess: \\"\\\\u226E\\", NotLessEqual: \\"\\\\u2270\\", NotLessGreater: \\"\\\\u2278\\", NotLessLess: \\"\\\\u226A\\\\u0338\\", NotLessSlantEqual: \\"\\\\u2A7D\\\\u0338\\", NotLessTilde: \\"\\\\u2274\\", NotNestedGreaterGreater: \\"\\\\u2AA2\\\\u0338\\", NotNestedLessLess: \\"\\\\u2AA1\\\\u0338\\", notni: \\"\\\\u220C\\", notniva: \\"\\\\u220C\\", notnivb: \\"\\\\u22FE\\", notnivc: \\"\\\\u22FD\\", NotPrecedes: \\"\\\\u2280\\", NotPrecedesEqual: \\"\\\\u2AAF\\\\u0338\\", NotPrecedesSlantEqual: \\"\\\\u22E0\\", NotReverseElement: \\"\\\\u220C\\", NotRightTriangleBar: \\"\\\\u29D0\\\\u0338\\", NotRightTriangle: \\"\\\\u22EB\\", NotRightTriangleEqual: \\"\\\\u22ED\\", NotSquareSubset: \\"\\\\u228F\\\\u0338\\", NotSquareSubsetEqual: \\"\\\\u22E2\\", NotSquareSuperset: \\"\\\\u2290\\\\u0338\\", NotSquareSupersetEqual: \\"\\\\u22E3\\", NotSubset: \\"\\\\u2282\\\\u20D2\\", NotSubsetEqual: \\"\\\\u2288\\", NotSucceeds: \\"\\\\u2281\\", NotSucceedsEqual: \\"\\\\u2AB0\\\\u0338\\", NotSucceedsSlantEqual: \\"\\\\u22E1\\", NotSucceedsTilde: \\"\\\\u227F\\\\u0338\\", NotSuperset: \\"\\\\u2283\\\\u20D2\\", NotSupersetEqual: \\"\\\\u2289\\", NotTilde: \\"\\\\u2241\\", NotTildeEqual: \\"\\\\u2244\\", NotTildeFullEqual: \\"\\\\u2247\\", NotTildeTilde: \\"\\\\u2249\\", NotVerticalBar: \\"\\\\u2224\\", nparallel: \\"\\\\u2226\\", npar: \\"\\\\u2226\\", nparsl: \\"\\\\u2AFD\\\\u20E5\\", npart: \\"\\\\u2202\\\\u0338\\", npolint: \\"\\\\u2A14\\", npr: \\"\\\\u2280\\", nprcue: \\"\\\\u22E0\\", nprec: \\"\\\\u2280\\", npreceq: \\"\\\\u2AAF\\\\u0338\\", npre: \\"\\\\u2AAF\\\\u0338\\", nrarrc: \\"\\\\u2933\\\\u0338\\", nrarr: \\"\\\\u219B\\", nrArr: \\"\\\\u21CF\\", nrarrw: \\"\\\\u219D\\\\u0338\\", nrightarrow: \\"\\\\u219B\\", nRightarrow: \\"\\\\u21CF\\", nrtri: \\"\\\\u22EB\\", nrtrie: \\"\\\\u22ED\\", nsc: \\"\\\\u2281\\", nsccue: \\"\\\\u22E1\\", nsce: \\"\\\\u2AB0\\\\u0338\\", Nscr: \\"\\\\u{1D4A9}\\", nscr: \\"\\\\u{1D4C3}\\", nshortmid: \\"\\\\u2224\\", nshortparallel: \\"\\\\u2226\\", nsim: \\"\\\\u2241\\", nsime: \\"\\\\u2244\\", nsimeq: \\"\\\\u2244\\", nsmid: \\"\\\\u2224\\", nspar: \\"\\\\u2226\\", nsqsube: \\"\\\\u22E2\\", nsqsupe: \\"\\\\u22E3\\", nsub: \\"\\\\u2284\\", nsubE: \\"\\\\u2AC5\\\\u0338\\", nsube: \\"\\\\u2288\\", nsubset: \\"\\\\u2282\\\\u20D2\\", nsubseteq: \\"\\\\u2288\\", nsubseteqq: \\"\\\\u2AC5\\\\u0338\\", nsucc: \\"\\\\u2281\\", nsucceq: \\"\\\\u2AB0\\\\u0338\\", nsup: \\"\\\\u2285\\", nsupE: \\"\\\\u2AC6\\\\u0338\\", nsupe: \\"\\\\u2289\\", nsupset: \\"\\\\u2283\\\\u20D2\\", nsupseteq: \\"\\\\u2289\\", nsupseteqq: \\"\\\\u2AC6\\\\u0338\\", ntgl: \\"\\\\u2279\\", Ntilde: \\"\\\\xD1\\", ntilde: \\"\\\\xF1\\", ntlg: \\"\\\\u2278\\", ntriangleleft: \\"\\\\u22EA\\", ntrianglelefteq: \\"\\\\u22EC\\", ntriangleright: \\"\\\\u22EB\\", ntrianglerighteq: \\"\\\\u22ED\\", Nu: \\"\\\\u039D\\", nu: \\"\\\\u03BD\\", num: \\"#\\", numero: \\"\\\\u2116\\", numsp: \\"\\\\u2007\\", nvap: \\"\\\\u224D\\\\u20D2\\", nvdash: \\"\\\\u22AC\\", nvDash: \\"\\\\u22AD\\", nVdash: \\"\\\\u22AE\\", nVDash: \\"\\\\u22AF\\", nvge: \\"\\\\u2265\\\\u20D2\\", nvgt: \\">\\\\u20D2\\", nvHarr: \\"\\\\u2904\\", nvinfin: \\"\\\\u29DE\\", nvlArr: \\"\\\\u2902\\", nvle: \\"\\\\u2264\\\\u20D2\\", nvlt: \\"<\\\\u20D2\\", nvltrie: \\"\\\\u22B4\\\\u20D2\\", nvrArr: \\"\\\\u2903\\", nvrtrie: \\"\\\\u22B5\\\\u20D2\\", nvsim: \\"\\\\u223C\\\\u20D2\\", nwarhk: \\"\\\\u2923\\", nwarr: \\"\\\\u2196\\", nwArr: \\"\\\\u21D6\\", nwarrow: \\"\\\\u2196\\", nwnear: \\"\\\\u2927\\", Oacute: \\"\\\\xD3\\", oacute: \\"\\\\xF3\\", oast: \\"\\\\u229B\\", Ocirc: \\"\\\\xD4\\", ocirc: \\"\\\\xF4\\", ocir: \\"\\\\u229A\\", Ocy: \\"\\\\u041E\\", ocy: \\"\\\\u043E\\", odash: \\"\\\\u229D\\", Odblac: \\"\\\\u0150\\", odblac: \\"\\\\u0151\\", odiv: \\"\\\\u2A38\\", odot: \\"\\\\u2299\\", odsold: \\"\\\\u29BC\\", OElig: \\"\\\\u0152\\", oelig: \\"\\\\u0153\\", ofcir: \\"\\\\u29BF\\", Ofr: \\"\\\\u{1D512}\\", ofr: \\"\\\\u{1D52C}\\", ogon: \\"\\\\u02DB\\", Ograve: \\"\\\\xD2\\", ograve: \\"\\\\xF2\\", ogt: \\"\\\\u29C1\\", ohbar: \\"\\\\u29B5\\", ohm: \\"\\\\u03A9\\", oint: \\"\\\\u222E\\", olarr: \\"\\\\u21BA\\", olcir: \\"\\\\u29BE\\", olcross: \\"\\\\u29BB\\", oline: \\"\\\\u203E\\", olt: \\"\\\\u29C0\\", Omacr: \\"\\\\u014C\\", omacr: \\"\\\\u014D\\", Omega: \\"\\\\u03A9\\", omega: \\"\\\\u03C9\\", Omicron: \\"\\\\u039F\\", omicron: \\"\\\\u03BF\\", omid: \\"\\\\u29B6\\", ominus: \\"\\\\u2296\\", Oopf: \\"\\\\u{1D546}\\", oopf: \\"\\\\u{1D560}\\", opar: \\"\\\\u29B7\\", OpenCurlyDoubleQuote: \\"\\\\u201C\\", OpenCurlyQuote: \\"\\\\u2018\\", operp: \\"\\\\u29B9\\", oplus: \\"\\\\u2295\\", orarr: \\"\\\\u21BB\\", Or: \\"\\\\u2A54\\", or: \\"\\\\u2228\\", ord: \\"\\\\u2A5D\\", order: \\"\\\\u2134\\", orderof: \\"\\\\u2134\\", ordf: \\"\\\\xAA\\", ordm: \\"\\\\xBA\\", origof: \\"\\\\u22B6\\", oror: \\"\\\\u2A56\\", orslope: \\"\\\\u2A57\\", orv: \\"\\\\u2A5B\\", oS: \\"\\\\u24C8\\", Oscr: \\"\\\\u{1D4AA}\\", oscr: \\"\\\\u2134\\", Oslash: \\"\\\\xD8\\", oslash: \\"\\\\xF8\\", osol: \\"\\\\u2298\\", Otilde: \\"\\\\xD5\\", otilde: \\"\\\\xF5\\", otimesas: \\"\\\\u2A36\\", Otimes: \\"\\\\u2A37\\", otimes: \\"\\\\u2297\\", Ouml: \\"\\\\xD6\\", ouml: \\"\\\\xF6\\", ovbar: \\"\\\\u233D\\", OverBar: \\"\\\\u203E\\", OverBrace: \\"\\\\u23DE\\", OverBracket: \\"\\\\u23B4\\", OverParenthesis: \\"\\\\u23DC\\", para: \\"\\\\xB6\\", parallel: \\"\\\\u2225\\", par: \\"\\\\u2225\\", parsim: \\"\\\\u2AF3\\", parsl: \\"\\\\u2AFD\\", part: \\"\\\\u2202\\", PartialD: \\"\\\\u2202\\", Pcy: \\"\\\\u041F\\", pcy: \\"\\\\u043F\\", percnt: \\"%\\", period: \\".\\", permil: \\"\\\\u2030\\", perp: \\"\\\\u22A5\\", pertenk: \\"\\\\u2031\\", Pfr: \\"\\\\u{1D513}\\", pfr: \\"\\\\u{1D52D}\\", Phi: \\"\\\\u03A6\\", phi: \\"\\\\u03C6\\", phiv: \\"\\\\u03D5\\", phmmat: \\"\\\\u2133\\", phone: \\"\\\\u260E\\", Pi: \\"\\\\u03A0\\", pi: \\"\\\\u03C0\\", pitchfork: \\"\\\\u22D4\\", piv: \\"\\\\u03D6\\", planck: \\"\\\\u210F\\", planckh: \\"\\\\u210E\\", plankv: \\"\\\\u210F\\", plusacir: \\"\\\\u2A23\\", plusb: \\"\\\\u229E\\", pluscir: \\"\\\\u2A22\\", plus: \\"+\\", plusdo: \\"\\\\u2214\\", plusdu: \\"\\\\u2A25\\", pluse: \\"\\\\u2A72\\", PlusMinus: \\"\\\\xB1\\", plusmn: \\"\\\\xB1\\", plussim: \\"\\\\u2A26\\", plustwo: \\"\\\\u2A27\\", pm: \\"\\\\xB1\\", Poincareplane: \\"\\\\u210C\\", pointint: \\"\\\\u2A15\\", popf: \\"\\\\u{1D561}\\", Popf: \\"\\\\u2119\\", pound: \\"\\\\xA3\\", prap: \\"\\\\u2AB7\\", Pr: \\"\\\\u2ABB\\", pr: \\"\\\\u227A\\", prcue: \\"\\\\u227C\\", precapprox: \\"\\\\u2AB7\\", prec: \\"\\\\u227A\\", preccurlyeq: \\"\\\\u227C\\", Precedes: \\"\\\\u227A\\", PrecedesEqual: \\"\\\\u2AAF\\", PrecedesSlantEqual: \\"\\\\u227C\\", PrecedesTilde: \\"\\\\u227E\\", preceq: \\"\\\\u2AAF\\", precnapprox: \\"\\\\u2AB9\\", precneqq: \\"\\\\u2AB5\\", precnsim: \\"\\\\u22E8\\", pre: \\"\\\\u2AAF\\", prE: \\"\\\\u2AB3\\", precsim: \\"\\\\u227E\\", prime: \\"\\\\u2032\\", Prime: \\"\\\\u2033\\", primes: \\"\\\\u2119\\", prnap: \\"\\\\u2AB9\\", prnE: \\"\\\\u2AB5\\", prnsim: \\"\\\\u22E8\\", prod: \\"\\\\u220F\\", Product: \\"\\\\u220F\\", profalar: \\"\\\\u232E\\", profline: \\"\\\\u2312\\", profsurf: \\"\\\\u2313\\", prop: \\"\\\\u221D\\", Proportional: \\"\\\\u221D\\", Proportion: \\"\\\\u2237\\", propto: \\"\\\\u221D\\", prsim: \\"\\\\u227E\\", prurel: \\"\\\\u22B0\\", Pscr: \\"\\\\u{1D4AB}\\", pscr: \\"\\\\u{1D4C5}\\", Psi: \\"\\\\u03A8\\", psi: \\"\\\\u03C8\\", puncsp: \\"\\\\u2008\\", Qfr: \\"\\\\u{1D514}\\", qfr: \\"\\\\u{1D52E}\\", qint: \\"\\\\u2A0C\\", qopf: \\"\\\\u{1D562}\\", Qopf: \\"\\\\u211A\\", qprime: \\"\\\\u2057\\", Qscr: \\"\\\\u{1D4AC}\\", qscr: \\"\\\\u{1D4C6}\\", quaternions: \\"\\\\u210D\\", quatint: \\"\\\\u2A16\\", quest: \\"?\\", questeq: \\"\\\\u225F\\", quot: '\\"', QUOT: '\\"', rAarr: \\"\\\\u21DB\\", race: \\"\\\\u223D\\\\u0331\\", Racute: \\"\\\\u0154\\", racute: \\"\\\\u0155\\", radic: \\"\\\\u221A\\", raemptyv: \\"\\\\u29B3\\", rang: \\"\\\\u27E9\\", Rang: \\"\\\\u27EB\\", rangd: \\"\\\\u2992\\", range: \\"\\\\u29A5\\", rangle: \\"\\\\u27E9\\", raquo: \\"\\\\xBB\\", rarrap: \\"\\\\u2975\\", rarrb: \\"\\\\u21E5\\", rarrbfs: \\"\\\\u2920\\", rarrc: \\"\\\\u2933\\", rarr: \\"\\\\u2192\\", Rarr: \\"\\\\u21A0\\", rArr: \\"\\\\u21D2\\", rarrfs: \\"\\\\u291E\\", rarrhk: \\"\\\\u21AA\\", rarrlp: \\"\\\\u21AC\\", rarrpl: \\"\\\\u2945\\", rarrsim: \\"\\\\u2974\\", Rarrtl: \\"\\\\u2916\\", rarrtl: \\"\\\\u21A3\\", rarrw: \\"\\\\u219D\\", ratail: \\"\\\\u291A\\", rAtail: \\"\\\\u291C\\", ratio: \\"\\\\u2236\\", rationals: \\"\\\\u211A\\", rbarr: \\"\\\\u290D\\", rBarr: \\"\\\\u290F\\", RBarr: \\"\\\\u2910\\", rbbrk: \\"\\\\u2773\\", rbrace: \\"}\\", rbrack: \\"]\\", rbrke: \\"\\\\u298C\\", rbrksld: \\"\\\\u298E\\", rbrkslu: \\"\\\\u2990\\", Rcaron: \\"\\\\u0158\\", rcaron: \\"\\\\u0159\\", Rcedil: \\"\\\\u0156\\", rcedil: \\"\\\\u0157\\", rceil: \\"\\\\u2309\\", rcub: \\"}\\", Rcy: \\"\\\\u0420\\", rcy: \\"\\\\u0440\\", rdca: \\"\\\\u2937\\", rdldhar: \\"\\\\u2969\\", rdquo: \\"\\\\u201D\\", rdquor: \\"\\\\u201D\\", rdsh: \\"\\\\u21B3\\", real: \\"\\\\u211C\\", realine: \\"\\\\u211B\\", realpart: \\"\\\\u211C\\", reals: \\"\\\\u211D\\", Re: \\"\\\\u211C\\", rect: \\"\\\\u25AD\\", reg: \\"\\\\xAE\\", REG: \\"\\\\xAE\\", ReverseElement: \\"\\\\u220B\\", ReverseEquilibrium: \\"\\\\u21CB\\", ReverseUpEquilibrium: \\"\\\\u296F\\", rfisht: \\"\\\\u297D\\", rfloor: \\"\\\\u230B\\", rfr: \\"\\\\u{1D52F}\\", Rfr: \\"\\\\u211C\\", rHar: \\"\\\\u2964\\", rhard: \\"\\\\u21C1\\", rharu: \\"\\\\u21C0\\", rharul: \\"\\\\u296C\\", Rho: \\"\\\\u03A1\\", rho: \\"\\\\u03C1\\", rhov: \\"\\\\u03F1\\", RightAngleBracket: \\"\\\\u27E9\\", RightArrowBar: \\"\\\\u21E5\\", rightarrow: \\"\\\\u2192\\", RightArrow: \\"\\\\u2192\\", Rightarrow: \\"\\\\u21D2\\", RightArrowLeftArrow: \\"\\\\u21C4\\", rightarrowtail: \\"\\\\u21A3\\", RightCeiling: \\"\\\\u2309\\", RightDoubleBracket: \\"\\\\u27E7\\", RightDownTeeVector: \\"\\\\u295D\\", RightDownVectorBar: \\"\\\\u2955\\", RightDownVector: \\"\\\\u21C2\\", RightFloor: \\"\\\\u230B\\", rightharpoondown: \\"\\\\u21C1\\", rightharpoonup: \\"\\\\u21C0\\", rightleftarrows: \\"\\\\u21C4\\", rightleftharpoons: \\"\\\\u21CC\\", rightrightarrows: \\"\\\\u21C9\\", rightsquigarrow: \\"\\\\u219D\\", RightTeeArrow: \\"\\\\u21A6\\", RightTee: \\"\\\\u22A2\\", RightTeeVector: \\"\\\\u295B\\", rightthreetimes: \\"\\\\u22CC\\", RightTriangleBar: \\"\\\\u29D0\\", RightTriangle: \\"\\\\u22B3\\", RightTriangleEqual: \\"\\\\u22B5\\", RightUpDownVector: \\"\\\\u294F\\", RightUpTeeVector: \\"\\\\u295C\\", RightUpVectorBar: \\"\\\\u2954\\", RightUpVector: \\"\\\\u21BE\\", RightVectorBar: \\"\\\\u2953\\", RightVector: \\"\\\\u21C0\\", ring: \\"\\\\u02DA\\", risingdotseq: \\"\\\\u2253\\", rlarr: \\"\\\\u21C4\\", rlhar: \\"\\\\u21CC\\", rlm: \\"\\\\u200F\\", rmoustache: \\"\\\\u23B1\\", rmoust: \\"\\\\u23B1\\", rnmid: \\"\\\\u2AEE\\", roang: \\"\\\\u27ED\\", roarr: \\"\\\\u21FE\\", robrk: \\"\\\\u27E7\\", ropar: \\"\\\\u2986\\", ropf: \\"\\\\u{1D563}\\", Ropf: \\"\\\\u211D\\", roplus: \\"\\\\u2A2E\\", rotimes: \\"\\\\u2A35\\", RoundImplies: \\"\\\\u2970\\", rpar: \\")\\", rpargt: \\"\\\\u2994\\", rppolint: \\"\\\\u2A12\\", rrarr: \\"\\\\u21C9\\", Rrightarrow: \\"\\\\u21DB\\", rsaquo: \\"\\\\u203A\\", rscr: \\"\\\\u{1D4C7}\\", Rscr: \\"\\\\u211B\\", rsh: \\"\\\\u21B1\\", Rsh: \\"\\\\u21B1\\", rsqb: \\"]\\", rsquo: \\"\\\\u2019\\", rsquor: \\"\\\\u2019\\", rthree: \\"\\\\u22CC\\", rtimes: \\"\\\\u22CA\\", rtri: \\"\\\\u25B9\\", rtrie: \\"\\\\u22B5\\", rtrif: \\"\\\\u25B8\\", rtriltri: \\"\\\\u29CE\\", RuleDelayed: \\"\\\\u29F4\\", ruluhar: \\"\\\\u2968\\", rx: \\"\\\\u211E\\", Sacute: \\"\\\\u015A\\", sacute: \\"\\\\u015B\\", sbquo: \\"\\\\u201A\\", scap: \\"\\\\u2AB8\\", Scaron: \\"\\\\u0160\\", scaron: \\"\\\\u0161\\", Sc: \\"\\\\u2ABC\\", sc: \\"\\\\u227B\\", sccue: \\"\\\\u227D\\", sce: \\"\\\\u2AB0\\", scE: \\"\\\\u2AB4\\", Scedil: \\"\\\\u015E\\", scedil: \\"\\\\u015F\\", Scirc: \\"\\\\u015C\\", scirc: \\"\\\\u015D\\", scnap: \\"\\\\u2ABA\\", scnE: \\"\\\\u2AB6\\", scnsim: \\"\\\\u22E9\\", scpolint: \\"\\\\u2A13\\", scsim: \\"\\\\u227F\\", Scy: \\"\\\\u0421\\", scy: \\"\\\\u0441\\", sdotb: \\"\\\\u22A1\\", sdot: \\"\\\\u22C5\\", sdote: \\"\\\\u2A66\\", searhk: \\"\\\\u2925\\", searr: \\"\\\\u2198\\", seArr: \\"\\\\u21D8\\", searrow: \\"\\\\u2198\\", sect: \\"\\\\xA7\\", semi: \\";\\", seswar: \\"\\\\u2929\\", setminus: \\"\\\\u2216\\", setmn: \\"\\\\u2216\\", sext: \\"\\\\u2736\\", Sfr: \\"\\\\u{1D516}\\", sfr: \\"\\\\u{1D530}\\", sfrown: \\"\\\\u2322\\", sharp: \\"\\\\u266F\\", SHCHcy: \\"\\\\u0429\\", shchcy: \\"\\\\u0449\\", SHcy: \\"\\\\u0428\\", shcy: \\"\\\\u0448\\", ShortDownArrow: \\"\\\\u2193\\", ShortLeftArrow: \\"\\\\u2190\\", shortmid: \\"\\\\u2223\\", shortparallel: \\"\\\\u2225\\", ShortRightArrow: \\"\\\\u2192\\", ShortUpArrow: \\"\\\\u2191\\", shy: \\"\\\\xAD\\", Sigma: \\"\\\\u03A3\\", sigma: \\"\\\\u03C3\\", sigmaf: \\"\\\\u03C2\\", sigmav: \\"\\\\u03C2\\", sim: \\"\\\\u223C\\", simdot: \\"\\\\u2A6A\\", sime: \\"\\\\u2243\\", simeq: \\"\\\\u2243\\", simg: \\"\\\\u2A9E\\", simgE: \\"\\\\u2AA0\\", siml: \\"\\\\u2A9D\\", simlE: \\"\\\\u2A9F\\", simne: \\"\\\\u2246\\", simplus: \\"\\\\u2A24\\", simrarr: \\"\\\\u2972\\", slarr: \\"\\\\u2190\\", SmallCircle: \\"\\\\u2218\\", smallsetminus: \\"\\\\u2216\\", smashp: \\"\\\\u2A33\\", smeparsl: \\"\\\\u29E4\\", smid: \\"\\\\u2223\\", smile: \\"\\\\u2323\\", smt: \\"\\\\u2AAA\\", smte: \\"\\\\u2AAC\\", smtes: \\"\\\\u2AAC\\\\uFE00\\", SOFTcy: \\"\\\\u042C\\", softcy: \\"\\\\u044C\\", solbar: \\"\\\\u233F\\", solb: \\"\\\\u29C4\\", sol: \\"/\\", Sopf: \\"\\\\u{1D54A}\\", sopf: \\"\\\\u{1D564}\\", spades: \\"\\\\u2660\\", spadesuit: \\"\\\\u2660\\", spar: \\"\\\\u2225\\", sqcap: \\"\\\\u2293\\", sqcaps: \\"\\\\u2293\\\\uFE00\\", sqcup: \\"\\\\u2294\\", sqcups: \\"\\\\u2294\\\\uFE00\\", Sqrt: \\"\\\\u221A\\", sqsub: \\"\\\\u228F\\", sqsube: \\"\\\\u2291\\", sqsubset: \\"\\\\u228F\\", sqsubseteq: \\"\\\\u2291\\", sqsup: \\"\\\\u2290\\", sqsupe: \\"\\\\u2292\\", sqsupset: \\"\\\\u2290\\", sqsupseteq: \\"\\\\u2292\\", square: \\"\\\\u25A1\\", Square: \\"\\\\u25A1\\", SquareIntersection: \\"\\\\u2293\\", SquareSubset: \\"\\\\u228F\\", SquareSubsetEqual: \\"\\\\u2291\\", SquareSuperset: \\"\\\\u2290\\", SquareSupersetEqual: \\"\\\\u2292\\", SquareUnion: \\"\\\\u2294\\", squarf: \\"\\\\u25AA\\", squ: \\"\\\\u25A1\\", squf: \\"\\\\u25AA\\", srarr: \\"\\\\u2192\\", Sscr: \\"\\\\u{1D4AE}\\", sscr: \\"\\\\u{1D4C8}\\", ssetmn: \\"\\\\u2216\\", ssmile: \\"\\\\u2323\\", sstarf: \\"\\\\u22C6\\", Star: \\"\\\\u22C6\\", star: \\"\\\\u2606\\", starf: \\"\\\\u2605\\", straightepsilon: \\"\\\\u03F5\\", straightphi: \\"\\\\u03D5\\", strns: \\"\\\\xAF\\", sub: \\"\\\\u2282\\", Sub: \\"\\\\u22D0\\", subdot: \\"\\\\u2ABD\\", subE: \\"\\\\u2AC5\\", sube: \\"\\\\u2286\\", subedot: \\"\\\\u2AC3\\", submult: \\"\\\\u2AC1\\", subnE: \\"\\\\u2ACB\\", subne: \\"\\\\u228A\\", subplus: \\"\\\\u2ABF\\", subrarr: \\"\\\\u2979\\", subset: \\"\\\\u2282\\", Subset: \\"\\\\u22D0\\", subseteq: \\"\\\\u2286\\", subseteqq: \\"\\\\u2AC5\\", SubsetEqual: \\"\\\\u2286\\", subsetneq: \\"\\\\u228A\\", subsetneqq: \\"\\\\u2ACB\\", subsim: \\"\\\\u2AC7\\", subsub: \\"\\\\u2AD5\\", subsup: \\"\\\\u2AD3\\", succapprox: \\"\\\\u2AB8\\", succ: \\"\\\\u227B\\", succcurlyeq: \\"\\\\u227D\\", Succeeds: \\"\\\\u227B\\", SucceedsEqual: \\"\\\\u2AB0\\", SucceedsSlantEqual: \\"\\\\u227D\\", SucceedsTilde: \\"\\\\u227F\\", succeq: \\"\\\\u2AB0\\", succnapprox: \\"\\\\u2ABA\\", succneqq: \\"\\\\u2AB6\\", succnsim: \\"\\\\u22E9\\", succsim: \\"\\\\u227F\\", SuchThat: \\"\\\\u220B\\", sum: \\"\\\\u2211\\", Sum: \\"\\\\u2211\\", sung: \\"\\\\u266A\\", sup1: \\"\\\\xB9\\", sup2: \\"\\\\xB2\\", sup3: \\"\\\\xB3\\", sup: \\"\\\\u2283\\", Sup: \\"\\\\u22D1\\", supdot: \\"\\\\u2ABE\\", supdsub: \\"\\\\u2AD8\\", supE: \\"\\\\u2AC6\\", supe: \\"\\\\u2287\\", supedot: \\"\\\\u2AC4\\", Superset: \\"\\\\u2283\\", SupersetEqual: \\"\\\\u2287\\", suphsol: \\"\\\\u27C9\\", suphsub: \\"\\\\u2AD7\\", suplarr: \\"\\\\u297B\\", supmult: \\"\\\\u2AC2\\", supnE: \\"\\\\u2ACC\\", supne: \\"\\\\u228B\\", supplus: \\"\\\\u2AC0\\", supset: \\"\\\\u2283\\", Supset: \\"\\\\u22D1\\", supseteq: \\"\\\\u2287\\", supseteqq: \\"\\\\u2AC6\\", supsetneq: \\"\\\\u228B\\", supsetneqq: \\"\\\\u2ACC\\", supsim: \\"\\\\u2AC8\\", supsub: \\"\\\\u2AD4\\", supsup: \\"\\\\u2AD6\\", swarhk: \\"\\\\u2926\\", swarr: \\"\\\\u2199\\", swArr: \\"\\\\u21D9\\", swarrow: \\"\\\\u2199\\", swnwar: \\"\\\\u292A\\", szlig: \\"\\\\xDF\\", Tab: \\"	\\", target: \\"\\\\u2316\\", Tau: \\"\\\\u03A4\\", tau: \\"\\\\u03C4\\", tbrk: \\"\\\\u23B4\\", Tcaron: \\"\\\\u0164\\", tcaron: \\"\\\\u0165\\", Tcedil: \\"\\\\u0162\\", tcedil: \\"\\\\u0163\\", Tcy: \\"\\\\u0422\\", tcy: \\"\\\\u0442\\", tdot: \\"\\\\u20DB\\", telrec: \\"\\\\u2315\\", Tfr: \\"\\\\u{1D517}\\", tfr: \\"\\\\u{1D531}\\", there4: \\"\\\\u2234\\", therefore: \\"\\\\u2234\\", Therefore: \\"\\\\u2234\\", Theta: \\"\\\\u0398\\", theta: \\"\\\\u03B8\\", thetasym: \\"\\\\u03D1\\", thetav: \\"\\\\u03D1\\", thickapprox: \\"\\\\u2248\\", thicksim: \\"\\\\u223C\\", ThickSpace: \\"\\\\u205F\\\\u200A\\", ThinSpace: \\"\\\\u2009\\", thinsp: \\"\\\\u2009\\", thkap: \\"\\\\u2248\\", thksim: \\"\\\\u223C\\", THORN: \\"\\\\xDE\\", thorn: \\"\\\\xFE\\", tilde: \\"\\\\u02DC\\", Tilde: \\"\\\\u223C\\", TildeEqual: \\"\\\\u2243\\", TildeFullEqual: \\"\\\\u2245\\", TildeTilde: \\"\\\\u2248\\", timesbar: \\"\\\\u2A31\\", timesb: \\"\\\\u22A0\\", times: \\"\\\\xD7\\", timesd: \\"\\\\u2A30\\", tint: \\"\\\\u222D\\", toea: \\"\\\\u2928\\", topbot: \\"\\\\u2336\\", topcir: \\"\\\\u2AF1\\", top: \\"\\\\u22A4\\", Topf: \\"\\\\u{1D54B}\\", topf: \\"\\\\u{1D565}\\", topfork: \\"\\\\u2ADA\\", tosa: \\"\\\\u2929\\", tprime: \\"\\\\u2034\\", trade: \\"\\\\u2122\\", TRADE: \\"\\\\u2122\\", triangle: \\"\\\\u25B5\\", triangledown: \\"\\\\u25BF\\", triangleleft: \\"\\\\u25C3\\", trianglelefteq: \\"\\\\u22B4\\", triangleq: \\"\\\\u225C\\", triangleright: \\"\\\\u25B9\\", trianglerighteq: \\"\\\\u22B5\\", tridot: \\"\\\\u25EC\\", trie: \\"\\\\u225C\\", triminus: \\"\\\\u2A3A\\", TripleDot: \\"\\\\u20DB\\", triplus: \\"\\\\u2A39\\", trisb: \\"\\\\u29CD\\", tritime: \\"\\\\u2A3B\\", trpezium: \\"\\\\u23E2\\", Tscr: \\"\\\\u{1D4AF}\\", tscr: \\"\\\\u{1D4C9}\\", TScy: \\"\\\\u0426\\", tscy: \\"\\\\u0446\\", TSHcy: \\"\\\\u040B\\", tshcy: \\"\\\\u045B\\", Tstrok: \\"\\\\u0166\\", tstrok: \\"\\\\u0167\\", twixt: \\"\\\\u226C\\", twoheadleftarrow: \\"\\\\u219E\\", twoheadrightarrow: \\"\\\\u21A0\\", Uacute: \\"\\\\xDA\\", uacute: \\"\\\\xFA\\", uarr: \\"\\\\u2191\\", Uarr: \\"\\\\u219F\\", uArr: \\"\\\\u21D1\\", Uarrocir: \\"\\\\u2949\\", Ubrcy: \\"\\\\u040E\\", ubrcy: \\"\\\\u045E\\", Ubreve: \\"\\\\u016C\\", ubreve: \\"\\\\u016D\\", Ucirc: \\"\\\\xDB\\", ucirc: \\"\\\\xFB\\", Ucy: \\"\\\\u0423\\", ucy: \\"\\\\u0443\\", udarr: \\"\\\\u21C5\\", Udblac: \\"\\\\u0170\\", udblac: \\"\\\\u0171\\", udhar: \\"\\\\u296E\\", ufisht: \\"\\\\u297E\\", Ufr: \\"\\\\u{1D518}\\", ufr: \\"\\\\u{1D532}\\", Ugrave: \\"\\\\xD9\\", ugrave: \\"\\\\xF9\\", uHar: \\"\\\\u2963\\", uharl: \\"\\\\u21BF\\", uharr: \\"\\\\u21BE\\", uhblk: \\"\\\\u2580\\", ulcorn: \\"\\\\u231C\\", ulcorner: \\"\\\\u231C\\", ulcrop: \\"\\\\u230F\\", ultri: \\"\\\\u25F8\\", Umacr: \\"\\\\u016A\\", umacr: \\"\\\\u016B\\", uml: \\"\\\\xA8\\", UnderBar: \\"_\\", UnderBrace: \\"\\\\u23DF\\", UnderBracket: \\"\\\\u23B5\\", UnderParenthesis: \\"\\\\u23DD\\", Union: \\"\\\\u22C3\\", UnionPlus: \\"\\\\u228E\\", Uogon: \\"\\\\u0172\\", uogon: \\"\\\\u0173\\", Uopf: \\"\\\\u{1D54C}\\", uopf: \\"\\\\u{1D566}\\", UpArrowBar: \\"\\\\u2912\\", uparrow: \\"\\\\u2191\\", UpArrow: \\"\\\\u2191\\", Uparrow: \\"\\\\u21D1\\", UpArrowDownArrow: \\"\\\\u21C5\\", updownarrow: \\"\\\\u2195\\", UpDownArrow: \\"\\\\u2195\\", Updownarrow: \\"\\\\u21D5\\", UpEquilibrium: \\"\\\\u296E\\", upharpoonleft: \\"\\\\u21BF\\", upharpoonright: \\"\\\\u21BE\\", uplus: \\"\\\\u228E\\", UpperLeftArrow: \\"\\\\u2196\\", UpperRightArrow: \\"\\\\u2197\\", upsi: \\"\\\\u03C5\\", Upsi: \\"\\\\u03D2\\", upsih: \\"\\\\u03D2\\", Upsilon: \\"\\\\u03A5\\", upsilon: \\"\\\\u03C5\\", UpTeeArrow: \\"\\\\u21A5\\", UpTee: \\"\\\\u22A5\\", upuparrows: \\"\\\\u21C8\\", urcorn: \\"\\\\u231D\\", urcorner: \\"\\\\u231D\\", urcrop: \\"\\\\u230E\\", Uring: \\"\\\\u016E\\", uring: \\"\\\\u016F\\", urtri: \\"\\\\u25F9\\", Uscr: \\"\\\\u{1D4B0}\\", uscr: \\"\\\\u{1D4CA}\\", utdot: \\"\\\\u22F0\\", Utilde: \\"\\\\u0168\\", utilde: \\"\\\\u0169\\", utri: \\"\\\\u25B5\\", utrif: \\"\\\\u25B4\\", uuarr: \\"\\\\u21C8\\", Uuml: \\"\\\\xDC\\", uuml: \\"\\\\xFC\\", uwangle: \\"\\\\u29A7\\", vangrt: \\"\\\\u299C\\", varepsilon: \\"\\\\u03F5\\", varkappa: \\"\\\\u03F0\\", varnothing: \\"\\\\u2205\\", varphi: \\"\\\\u03D5\\", varpi: \\"\\\\u03D6\\", varpropto: \\"\\\\u221D\\", varr: \\"\\\\u2195\\", vArr: \\"\\\\u21D5\\", varrho: \\"\\\\u03F1\\", varsigma: \\"\\\\u03C2\\", varsubsetneq: \\"\\\\u228A\\\\uFE00\\", varsubsetneqq: \\"\\\\u2ACB\\\\uFE00\\", varsupsetneq: \\"\\\\u228B\\\\uFE00\\", varsupsetneqq: \\"\\\\u2ACC\\\\uFE00\\", vartheta: \\"\\\\u03D1\\", vartriangleleft: \\"\\\\u22B2\\", vartriangleright: \\"\\\\u22B3\\", vBar: \\"\\\\u2AE8\\", Vbar: \\"\\\\u2AEB\\", vBarv: \\"\\\\u2AE9\\", Vcy: \\"\\\\u0412\\", vcy: \\"\\\\u0432\\", vdash: \\"\\\\u22A2\\", vDash: \\"\\\\u22A8\\", Vdash: \\"\\\\u22A9\\", VDash: \\"\\\\u22AB\\", Vdashl: \\"\\\\u2AE6\\", veebar: \\"\\\\u22BB\\", vee: \\"\\\\u2228\\", Vee: \\"\\\\u22C1\\", veeeq: \\"\\\\u225A\\", vellip: \\"\\\\u22EE\\", verbar: \\"|\\", Verbar: \\"\\\\u2016\\", vert: \\"|\\", Vert: \\"\\\\u2016\\", VerticalBar: \\"\\\\u2223\\", VerticalLine: \\"|\\", VerticalSeparator: \\"\\\\u2758\\", VerticalTilde: \\"\\\\u2240\\", VeryThinSpace: \\"\\\\u200A\\", Vfr: \\"\\\\u{1D519}\\", vfr: \\"\\\\u{1D533}\\", vltri: \\"\\\\u22B2\\", vnsub: \\"\\\\u2282\\\\u20D2\\", vnsup: \\"\\\\u2283\\\\u20D2\\", Vopf: \\"\\\\u{1D54D}\\", vopf: \\"\\\\u{1D567}\\", vprop: \\"\\\\u221D\\", vrtri: \\"\\\\u22B3\\", Vscr: \\"\\\\u{1D4B1}\\", vscr: \\"\\\\u{1D4CB}\\", vsubnE: \\"\\\\u2ACB\\\\uFE00\\", vsubne: \\"\\\\u228A\\\\uFE00\\", vsupnE: \\"\\\\u2ACC\\\\uFE00\\", vsupne: \\"\\\\u228B\\\\uFE00\\", Vvdash: \\"\\\\u22AA\\", vzigzag: \\"\\\\u299A\\", Wcirc: \\"\\\\u0174\\", wcirc: \\"\\\\u0175\\", wedbar: \\"\\\\u2A5F\\", wedge: \\"\\\\u2227\\", Wedge: \\"\\\\u22C0\\", wedgeq: \\"\\\\u2259\\", weierp: \\"\\\\u2118\\", Wfr: \\"\\\\u{1D51A}\\", wfr: \\"\\\\u{1D534}\\", Wopf: \\"\\\\u{1D54E}\\", wopf: \\"\\\\u{1D568}\\", wp: \\"\\\\u2118\\", wr: \\"\\\\u2240\\", wreath: \\"\\\\u2240\\", Wscr: \\"\\\\u{1D4B2}\\", wscr: \\"\\\\u{1D4CC}\\", xcap: \\"\\\\u22C2\\", xcirc: \\"\\\\u25EF\\", xcup: \\"\\\\u22C3\\", xdtri: \\"\\\\u25BD\\", Xfr: \\"\\\\u{1D51B}\\", xfr: \\"\\\\u{1D535}\\", xharr: \\"\\\\u27F7\\", xhArr: \\"\\\\u27FA\\", Xi: \\"\\\\u039E\\", xi: \\"\\\\u03BE\\", xlarr: \\"\\\\u27F5\\", xlArr: \\"\\\\u27F8\\", xmap: \\"\\\\u27FC\\", xnis: \\"\\\\u22FB\\", xodot: \\"\\\\u2A00\\", Xopf: \\"\\\\u{1D54F}\\", xopf: \\"\\\\u{1D569}\\", xoplus: \\"\\\\u2A01\\", xotime: \\"\\\\u2A02\\", xrarr: \\"\\\\u27F6\\", xrArr: \\"\\\\u27F9\\", Xscr: \\"\\\\u{1D4B3}\\", xscr: \\"\\\\u{1D4CD}\\", xsqcup: \\"\\\\u2A06\\", xuplus: \\"\\\\u2A04\\", xutri: \\"\\\\u25B3\\", xvee: \\"\\\\u22C1\\", xwedge: \\"\\\\u22C0\\", Yacute: \\"\\\\xDD\\", yacute: \\"\\\\xFD\\", YAcy: \\"\\\\u042F\\", yacy: \\"\\\\u044F\\", Ycirc: \\"\\\\u0176\\", ycirc: \\"\\\\u0177\\", Ycy: \\"\\\\u042B\\", ycy: \\"\\\\u044B\\", yen: \\"\\\\xA5\\", Yfr: \\"\\\\u{1D51C}\\", yfr: \\"\\\\u{1D536}\\", YIcy: \\"\\\\u0407\\", yicy: \\"\\\\u0457\\", Yopf: \\"\\\\u{1D550}\\", yopf: \\"\\\\u{1D56A}\\", Yscr: \\"\\\\u{1D4B4}\\", yscr: \\"\\\\u{1D4CE}\\", YUcy: \\"\\\\u042E\\", yucy: \\"\\\\u044E\\", yuml: \\"\\\\xFF\\", Yuml: \\"\\\\u0178\\", Zacute: \\"\\\\u0179\\", zacute: \\"\\\\u017A\\", Zcaron: \\"\\\\u017D\\", zcaron: \\"\\\\u017E\\", Zcy: \\"\\\\u0417\\", zcy: \\"\\\\u0437\\", Zdot: \\"\\\\u017B\\", zdot: \\"\\\\u017C\\", zeetrf: \\"\\\\u2128\\", ZeroWidthSpace: \\"\\\\u200B\\", Zeta: \\"\\\\u0396\\", zeta: \\"\\\\u03B6\\", zfr: \\"\\\\u{1D537}\\", Zfr: \\"\\\\u2128\\", ZHcy: \\"\\\\u0416\\", zhcy: \\"\\\\u0436\\", zigrarr: \\"\\\\u21DD\\", zopf: \\"\\\\u{1D56B}\\", Zopf: \\"\\\\u2124\\", Zscr: \\"\\\\u{1D4B5}\\", zscr: \\"\\\\u{1D4CF}\\", zwj: \\"\\\\u200D\\", zwnj: \\"\\\\u200C\\" };
  }
});

// node_modules/entities/lib/maps/legacy.json
var require_legacy = __commonJS({
  \\"node_modules/entities/lib/maps/legacy.json\\"(exports2, module2) {
    module2.exports = { Aacute: \\"\\\\xC1\\", aacute: \\"\\\\xE1\\", Acirc: \\"\\\\xC2\\", acirc: \\"\\\\xE2\\", acute: \\"\\\\xB4\\", AElig: \\"\\\\xC6\\", aelig: \\"\\\\xE6\\", Agrave: \\"\\\\xC0\\", agrave: \\"\\\\xE0\\", amp: \\"&\\", AMP: \\"&\\", Aring: \\"\\\\xC5\\", aring: \\"\\\\xE5\\", Atilde: \\"\\\\xC3\\", atilde: \\"\\\\xE3\\", Auml: \\"\\\\xC4\\", auml: \\"\\\\xE4\\", brvbar: \\"\\\\xA6\\", Ccedil: \\"\\\\xC7\\", ccedil: \\"\\\\xE7\\", cedil: \\"\\\\xB8\\", cent: \\"\\\\xA2\\", copy: \\"\\\\xA9\\", COPY: \\"\\\\xA9\\", curren: \\"\\\\xA4\\", deg: \\"\\\\xB0\\", divide: \\"\\\\xF7\\", Eacute: \\"\\\\xC9\\", eacute: \\"\\\\xE9\\", Ecirc: \\"\\\\xCA\\", ecirc: \\"\\\\xEA\\", Egrave: \\"\\\\xC8\\", egrave: \\"\\\\xE8\\", ETH: \\"\\\\xD0\\", eth: \\"\\\\xF0\\", Euml: \\"\\\\xCB\\", euml: \\"\\\\xEB\\", frac12: \\"\\\\xBD\\", frac14: \\"\\\\xBC\\", frac34: \\"\\\\xBE\\", gt: \\">\\", GT: \\">\\", Iacute: \\"\\\\xCD\\", iacute: \\"\\\\xED\\", Icirc: \\"\\\\xCE\\", icirc: \\"\\\\xEE\\", iexcl: \\"\\\\xA1\\", Igrave: \\"\\\\xCC\\", igrave: \\"\\\\xEC\\", iquest: \\"\\\\xBF\\", Iuml: \\"\\\\xCF\\", iuml: \\"\\\\xEF\\", laquo: \\"\\\\xAB\\", lt: \\"<\\", LT: \\"<\\", macr: \\"\\\\xAF\\", micro: \\"\\\\xB5\\", middot: \\"\\\\xB7\\", nbsp: \\"\\\\xA0\\", not: \\"\\\\xAC\\", Ntilde: \\"\\\\xD1\\", ntilde: \\"\\\\xF1\\", Oacute: \\"\\\\xD3\\", oacute: \\"\\\\xF3\\", Ocirc: \\"\\\\xD4\\", ocirc: \\"\\\\xF4\\", Ograve: \\"\\\\xD2\\", ograve: \\"\\\\xF2\\", ordf: \\"\\\\xAA\\", ordm: \\"\\\\xBA\\", Oslash: \\"\\\\xD8\\", oslash: \\"\\\\xF8\\", Otilde: \\"\\\\xD5\\", otilde: \\"\\\\xF5\\", Ouml: \\"\\\\xD6\\", ouml: \\"\\\\xF6\\", para: \\"\\\\xB6\\", plusmn: \\"\\\\xB1\\", pound: \\"\\\\xA3\\", quot: '\\"', QUOT: '\\"', raquo: \\"\\\\xBB\\", reg: \\"\\\\xAE\\", REG: \\"\\\\xAE\\", sect: \\"\\\\xA7\\", shy: \\"\\\\xAD\\", sup1: \\"\\\\xB9\\", sup2: \\"\\\\xB2\\", sup3: \\"\\\\xB3\\", szlig: \\"\\\\xDF\\", THORN: \\"\\\\xDE\\", thorn: \\"\\\\xFE\\", times: \\"\\\\xD7\\", Uacute: \\"\\\\xDA\\", uacute: \\"\\\\xFA\\", Ucirc: \\"\\\\xDB\\", ucirc: \\"\\\\xFB\\", Ugrave: \\"\\\\xD9\\", ugrave: \\"\\\\xF9\\", uml: \\"\\\\xA8\\", Uuml: \\"\\\\xDC\\", uuml: \\"\\\\xFC\\", Yacute: \\"\\\\xDD\\", yacute: \\"\\\\xFD\\", yen: \\"\\\\xA5\\", yuml: \\"\\\\xFF\\" };
  }
});

// node_modules/entities/lib/maps/xml.json
var require_xml = __commonJS({
  \\"node_modules/entities/lib/maps/xml.json\\"(exports2, module2) {
    module2.exports = { amp: \\"&\\", apos: \\"'\\", gt: \\">\\", lt: \\"<\\", quot: '\\"' };
  }
});

// node_modules/entities/lib/maps/decode.json
var require_decode = __commonJS({
  \\"node_modules/entities/lib/maps/decode.json\\"(exports2, module2) {
    module2.exports = { \\"0\\": 65533, \\"128\\": 8364, \\"130\\": 8218, \\"131\\": 402, \\"132\\": 8222, \\"133\\": 8230, \\"134\\": 8224, \\"135\\": 8225, \\"136\\": 710, \\"137\\": 8240, \\"138\\": 352, \\"139\\": 8249, \\"140\\": 338, \\"142\\": 381, \\"145\\": 8216, \\"146\\": 8217, \\"147\\": 8220, \\"148\\": 8221, \\"149\\": 8226, \\"150\\": 8211, \\"151\\": 8212, \\"152\\": 732, \\"153\\": 8482, \\"154\\": 353, \\"155\\": 8250, \\"156\\": 339, \\"158\\": 382, \\"159\\": 376 };
  }
});

// node_modules/entities/lib/decode_codepoint.js
var require_decode_codepoint = __commonJS({
  \\"node_modules/entities/lib/decode_codepoint.js\\"(exports2) {
    \\"use strict\\";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { \\"default\\": mod };
    };
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var decode_json_1 = __importDefault(require_decode());
    var fromCodePoint = String.fromCodePoint || function(codePoint) {
      var output = \\"\\";
      if (codePoint > 65535) {
        codePoint -= 65536;
        output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
        codePoint = 56320 | codePoint & 1023;
      }
      output += String.fromCharCode(codePoint);
      return output;
    };
    function decodeCodePoint(codePoint) {
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return \\"\\\\uFFFD\\";
      }
      if (codePoint in decode_json_1.default) {
        codePoint = decode_json_1.default[codePoint];
      }
      return fromCodePoint(codePoint);
    }
    exports2.default = decodeCodePoint;
  }
});

// node_modules/entities/lib/decode.js
var require_decode2 = __commonJS({
  \\"node_modules/entities/lib/decode.js\\"(exports2) {
    \\"use strict\\";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { \\"default\\": mod };
    };
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.decodeHTML = exports2.decodeHTMLStrict = exports2.decodeXML = void 0;
    var entities_json_1 = __importDefault(require_entities());
    var legacy_json_1 = __importDefault(require_legacy());
    var xml_json_1 = __importDefault(require_xml());
    var decode_codepoint_1 = __importDefault(require_decode_codepoint());
    var strictEntityRe = /&(?:[a-zA-Z0-9]+|#[xX][\\\\da-fA-F]+|#\\\\d+);/g;
    exports2.decodeXML = getStrictDecoder(xml_json_1.default);
    exports2.decodeHTMLStrict = getStrictDecoder(entities_json_1.default);
    function getStrictDecoder(map) {
      var replace = getReplacer(map);
      return function(str) {
        return String(str).replace(strictEntityRe, replace);
      };
    }
    var sorter = function(a, b) {
      return a < b ? 1 : -1;
    };
    exports2.decodeHTML = function() {
      var legacy = Object.keys(legacy_json_1.default).sort(sorter);
      var keys = Object.keys(entities_json_1.default).sort(sorter);
      for (var i = 0, j = 0; i < keys.length; i++) {
        if (legacy[j] === keys[i]) {
          keys[i] += \\";?\\";
          j++;
        } else {
          keys[i] += \\";\\";
        }
      }
      var re = new RegExp(\\"&(?:\\" + keys.join(\\"|\\") + \\"|#[xX][\\\\\\\\da-fA-F]+;?|#\\\\\\\\d+;?)\\", \\"g\\");
      var replace = getReplacer(entities_json_1.default);
      function replacer(str) {
        if (str.substr(-1) !== \\";\\")
          str += \\";\\";
        return replace(str);
      }
      return function(str) {
        return String(str).replace(re, replacer);
      };
    }();
    function getReplacer(map) {
      return function replace(str) {
        if (str.charAt(1) === \\"#\\") {
          var secondChar = str.charAt(2);
          if (secondChar === \\"X\\" || secondChar === \\"x\\") {
            return decode_codepoint_1.default(parseInt(str.substr(3), 16));
          }
          return decode_codepoint_1.default(parseInt(str.substr(2), 10));
        }
        return map[str.slice(1, -1)] || str;
      };
    }
  }
});

// node_modules/entities/lib/encode.js
var require_encode = __commonJS({
  \\"node_modules/entities/lib/encode.js\\"(exports2) {
    \\"use strict\\";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { \\"default\\": mod };
    };
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.escapeUTF8 = exports2.escape = exports2.encodeNonAsciiHTML = exports2.encodeHTML = exports2.encodeXML = void 0;
    var xml_json_1 = __importDefault(require_xml());
    var inverseXML = getInverseObj(xml_json_1.default);
    var xmlReplacer = getInverseReplacer(inverseXML);
    exports2.encodeXML = getASCIIEncoder(inverseXML);
    var entities_json_1 = __importDefault(require_entities());
    var inverseHTML = getInverseObj(entities_json_1.default);
    var htmlReplacer = getInverseReplacer(inverseHTML);
    exports2.encodeHTML = getInverse(inverseHTML, htmlReplacer);
    exports2.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);
    function getInverseObj(obj) {
      return Object.keys(obj).sort().reduce(function(inverse, name) {
        inverse[obj[name]] = \\"&\\" + name + \\";\\";
        return inverse;
      }, {});
    }
    function getInverseReplacer(inverse) {
      var single = [];
      var multiple = [];
      for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {
        var k = _a[_i];
        if (k.length === 1) {
          single.push(\\"\\\\\\\\\\" + k);
        } else {
          multiple.push(k);
        }
      }
      single.sort();
      for (var start = 0; start < single.length - 1; start++) {
        var end = start;
        while (end < single.length - 1 && single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {
          end += 1;
        }
        var count = 1 + end - start;
        if (count < 3)
          continue;
        single.splice(start, count, single[start] + \\"-\\" + single[end]);
      }
      multiple.unshift(\\"[\\" + single.join(\\"\\") + \\"]\\");
      return new RegExp(multiple.join(\\"|\\"), \\"g\\");
    }
    var reNonASCII = /(?:[\\\\x80-\\\\uD7FF\\\\uE000-\\\\uFFFF]|[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\uD800-\\\\uDBFF](?![\\\\uDC00-\\\\uDFFF])|(?:[^\\\\uD800-\\\\uDBFF]|^)[\\\\uDC00-\\\\uDFFF])/g;
    var getCodePoint = String.prototype.codePointAt != null ? function(str) {
      return str.codePointAt(0);
    } : function(c) {
      return (c.charCodeAt(0) - 55296) * 1024 + c.charCodeAt(1) - 56320 + 65536;
    };
    function singleCharReplacer(c) {
      return \\"&#x\\" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0)).toString(16).toUpperCase() + \\";\\";
    }
    function getInverse(inverse, re) {
      return function(data) {
        return data.replace(re, function(name) {
          return inverse[name];
        }).replace(reNonASCII, singleCharReplacer);
      };
    }
    var reEscapeChars = new RegExp(xmlReplacer.source + \\"|\\" + reNonASCII.source, \\"g\\");
    function escape(data) {
      return data.replace(reEscapeChars, singleCharReplacer);
    }
    exports2.escape = escape;
    function escapeUTF8(data) {
      return data.replace(xmlReplacer, singleCharReplacer);
    }
    exports2.escapeUTF8 = escapeUTF8;
    function getASCIIEncoder(obj) {
      return function(data) {
        return data.replace(reEscapeChars, function(c) {
          return obj[c] || singleCharReplacer(c);
        });
      };
    }
  }
});

// node_modules/entities/lib/index.js
var require_lib = __commonJS({
  \\"node_modules/entities/lib/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.decodeXMLStrict = exports2.decodeHTML5Strict = exports2.decodeHTML4Strict = exports2.decodeHTML5 = exports2.decodeHTML4 = exports2.decodeHTMLStrict = exports2.decodeHTML = exports2.decodeXML = exports2.encodeHTML5 = exports2.encodeHTML4 = exports2.escapeUTF8 = exports2.escape = exports2.encodeNonAsciiHTML = exports2.encodeHTML = exports2.encodeXML = exports2.encode = exports2.decodeStrict = exports2.decode = void 0;
    var decode_1 = require_decode2();
    var encode_1 = require_encode();
    function decode(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
    }
    exports2.decode = decode;
    function decodeStrict(data, level) {
      return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
    }
    exports2.decodeStrict = decodeStrict;
    function encode(data, level) {
      return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
    }
    exports2.encode = encode;
    var encode_2 = require_encode();
    Object.defineProperty(exports2, \\"encodeXML\\", { enumerable: true, get: function() {
      return encode_2.encodeXML;
    } });
    Object.defineProperty(exports2, \\"encodeHTML\\", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports2, \\"encodeNonAsciiHTML\\", { enumerable: true, get: function() {
      return encode_2.encodeNonAsciiHTML;
    } });
    Object.defineProperty(exports2, \\"escape\\", { enumerable: true, get: function() {
      return encode_2.escape;
    } });
    Object.defineProperty(exports2, \\"escapeUTF8\\", { enumerable: true, get: function() {
      return encode_2.escapeUTF8;
    } });
    Object.defineProperty(exports2, \\"encodeHTML4\\", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    Object.defineProperty(exports2, \\"encodeHTML5\\", { enumerable: true, get: function() {
      return encode_2.encodeHTML;
    } });
    var decode_2 = require_decode2();
    Object.defineProperty(exports2, \\"decodeXML\\", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
    Object.defineProperty(exports2, \\"decodeHTML\\", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports2, \\"decodeHTMLStrict\\", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports2, \\"decodeHTML4\\", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports2, \\"decodeHTML5\\", { enumerable: true, get: function() {
      return decode_2.decodeHTML;
    } });
    Object.defineProperty(exports2, \\"decodeHTML4Strict\\", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports2, \\"decodeHTML5Strict\\", { enumerable: true, get: function() {
      return decode_2.decodeHTMLStrict;
    } });
    Object.defineProperty(exports2, \\"decodeXMLStrict\\", { enumerable: true, get: function() {
      return decode_2.decodeXML;
    } });
  }
});

// node_modules/fast-xml-parser/src/util.js
var require_util = __commonJS({
  \\"node_modules/fast-xml-parser/src/util.js\\"(exports2) {
    \\"use strict\\";
    var nameStartChar = \\":A-Za-z_\\\\\\\\u00C0-\\\\\\\\u00D6\\\\\\\\u00D8-\\\\\\\\u00F6\\\\\\\\u00F8-\\\\\\\\u02FF\\\\\\\\u0370-\\\\\\\\u037D\\\\\\\\u037F-\\\\\\\\u1FFF\\\\\\\\u200C-\\\\\\\\u200D\\\\\\\\u2070-\\\\\\\\u218F\\\\\\\\u2C00-\\\\\\\\u2FEF\\\\\\\\u3001-\\\\\\\\uD7FF\\\\\\\\uF900-\\\\\\\\uFDCF\\\\\\\\uFDF0-\\\\\\\\uFFFD\\";
    var nameChar = nameStartChar + \\"\\\\\\\\-.\\\\\\\\d\\\\\\\\u00B7\\\\\\\\u0300-\\\\\\\\u036F\\\\\\\\u203F-\\\\\\\\u2040\\";
    var nameRegexp = \\"[\\" + nameStartChar + \\"][\\" + nameChar + \\"]*\\";
    var regexName = new RegExp(\\"^\\" + nameRegexp + \\"$\\");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === \\"undefined\\");
    };
    exports2.isExist = function(v) {
      return typeof v !== \\"undefined\\";
    };
    exports2.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports2.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === \\"strict\\") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports2.getValue = function(v) {
      if (exports2.isExist(v)) {
        return v;
      } else {
        return \\"\\";
      }
    };
    exports2.buildOptions = function(options, defaultOptions, props) {
      var newOptions = {};
      if (!options) {
        return defaultOptions;
      }
      for (let i = 0; i < props.length; i++) {
        if (options[props[i]] !== void 0) {
          newOptions[props[i]] = options[props[i]];
        } else {
          newOptions[props[i]] = defaultOptions[props[i]];
        }
      }
      return newOptions;
    };
    exports2.isTagNameInArrayMode = function(tagName, arrayMode, parentTagName) {
      if (arrayMode === false) {
        return false;
      } else if (arrayMode instanceof RegExp) {
        return arrayMode.test(tagName);
      } else if (typeof arrayMode === \\"function\\") {
        return !!arrayMode(tagName, parentTagName);
      }
      return arrayMode === \\"strict\\";
    };
    exports2.isName = isName;
    exports2.getAllMatches = getAllMatches;
    exports2.nameRegexp = nameRegexp;
  }
});

// node_modules/fast-xml-parser/src/node2json.js
var require_node2json = __commonJS({
  \\"node_modules/fast-xml-parser/src/node2json.js\\"(exports2) {
    \\"use strict\\";
    var util = require_util();
    var convertToJson = function(node, options, parentTagName) {
      const jObj = {};
      if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
        return util.isExist(node.val) ? node.val : \\"\\";
      }
      if (util.isExist(node.val) && !(typeof node.val === \\"string\\" && (node.val === \\"\\" || node.val === options.cdataPositionChar))) {
        const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);
        jObj[options.textNodeName] = asArray ? [node.val] : node.val;
      }
      util.merge(jObj, node.attrsMap, options.arrayMode);
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        const tagName = keys[index];
        if (node.child[tagName] && node.child[tagName].length > 1) {
          jObj[tagName] = [];
          for (let tag in node.child[tagName]) {
            if (node.child[tagName].hasOwnProperty(tag)) {
              jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
            }
          }
        } else {
          const result = convertToJson(node.child[tagName][0], options, tagName);
          const asArray = options.arrayMode === true && typeof result === \\"object\\" || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
          jObj[tagName] = asArray ? [result] : result;
        }
      }
      return jObj;
    };
    exports2.convertToJson = convertToJson;
  }
});

// node_modules/fast-xml-parser/src/xmlNode.js
var require_xmlNode = __commonJS({
  \\"node_modules/fast-xml-parser/src/xmlNode.js\\"(exports2, module2) {
    \\"use strict\\";
    module2.exports = function(tagname, parent, val) {
      this.tagname = tagname;
      this.parent = parent;
      this.child = {};
      this.attrsMap = {};
      this.val = val;
      this.addChild = function(child) {
        if (Array.isArray(this.child[child.tagname])) {
          this.child[child.tagname].push(child);
        } else {
          this.child[child.tagname] = [child];
        }
      };
    };
  }
});

// node_modules/fast-xml-parser/src/xmlstr2xmlnode.js
var require_xmlstr2xmlnode = __commonJS({
  \\"node_modules/fast-xml-parser/src/xmlstr2xmlnode.js\\"(exports2) {
    \\"use strict\\";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var xmlNode = require_xmlNode();
    var regx = \\"<((!\\\\\\\\[CDATA\\\\\\\\[([\\\\\\\\s\\\\\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\\\\\/)(NAME)\\\\\\\\s*>))([^<]*)\\".replace(/NAME/g, util.nameRegexp);
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var defaultOptions = {
      attributeNamePrefix: \\"@_\\",
      attrNodeName: false,
      textNodeName: \\"#text\\",
      ignoreAttributes: true,
      ignoreNameSpace: false,
      allowBooleanAttributes: false,
      parseNodeValue: true,
      parseAttributeValue: false,
      arrayMode: false,
      trimValues: true,
      cdataTagName: false,
      cdataPositionChar: \\"\\\\\\\\c\\",
      tagValueProcessor: function(a, tagName) {
        return a;
      },
      attrValueProcessor: function(a, attrName) {
        return a;
      },
      stopNodes: []
    };
    exports2.defaultOptions = defaultOptions;
    var props = [
      \\"attributeNamePrefix\\",
      \\"attrNodeName\\",
      \\"textNodeName\\",
      \\"ignoreAttributes\\",
      \\"ignoreNameSpace\\",
      \\"allowBooleanAttributes\\",
      \\"parseNodeValue\\",
      \\"parseAttributeValue\\",
      \\"arrayMode\\",
      \\"trimValues\\",
      \\"cdataTagName\\",
      \\"cdataPositionChar\\",
      \\"tagValueProcessor\\",
      \\"attrValueProcessor\\",
      \\"parseTrueNumberOnly\\",
      \\"stopNodes\\"
    ];
    exports2.props = props;
    function processTagValue(tagName, val, options) {
      if (val) {
        if (options.trimValues) {
          val = val.trim();
        }
        val = options.tagValueProcessor(val, tagName);
        val = parseValue(val, options.parseNodeValue, options.parseTrueNumberOnly);
      }
      return val;
    }
    function resolveNameSpace(tagname, options) {
      if (options.ignoreNameSpace) {
        const tags = tagname.split(\\":\\");
        const prefix = tagname.charAt(0) === \\"/\\" ? \\"/\\" : \\"\\";
        if (tags[0] === \\"xmlns\\") {
          return \\"\\";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    function parseValue(val, shouldParse, parseTrueNumberOnly) {
      if (shouldParse && typeof val === \\"string\\") {
        let parsed;
        if (val.trim() === \\"\\" || isNaN(val)) {
          parsed = val === \\"true\\" ? true : val === \\"false\\" ? false : val;
        } else {
          if (val.indexOf(\\"0x\\") !== -1) {
            parsed = Number.parseInt(val, 16);
          } else if (val.indexOf(\\".\\") !== -1) {
            parsed = Number.parseFloat(val);
            val = val.replace(/\\\\.?0+$/, \\"\\");
          } else {
            parsed = Number.parseInt(val, 10);
          }
          if (parseTrueNumberOnly) {
            parsed = String(parsed) === val ? parsed : val;
          }
        }
        return parsed;
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return \\"\\";
        }
      }
    }
    var attrsRegx = new RegExp(\`([^\\\\\\\\s=]+)\\\\\\\\s*(=\\\\\\\\s*(['\\"])(.*?)\\\\\\\\3)?\`, \\"g\\");
    function buildAttributesMap(attrStr, options) {
      if (!options.ignoreAttributes && typeof attrStr === \\"string\\") {
        attrStr = attrStr.replace(/\\\\r?\\\\n/g, \\" \\");
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = resolveNameSpace(matches[i][1], options);
          if (attrName.length) {
            if (matches[i][4] !== void 0) {
              if (options.trimValues) {
                matches[i][4] = matches[i][4].trim();
              }
              matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
              attrs[options.attributeNamePrefix + attrName] = parseValue(
                matches[i][4],
                options.parseAttributeValue,
                options.parseTrueNumberOnly
              );
            } else if (options.allowBooleanAttributes) {
              attrs[options.attributeNamePrefix + attrName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (options.attrNodeName) {
          const attrCollection = {};
          attrCollection[options.attrNodeName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var getTraversalObj = function(xmlData, options) {
      xmlData = xmlData.replace(/\\\\r\\\\n?/g, \\"\\\\n\\");
      options = buildOptions(options, defaultOptions, props);
      const xmlObj = new xmlNode(\\"!xml\\");
      let currentNode = xmlObj;
      let textData = \\"\\";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === \\"<\\") {
          if (xmlData[i + 1] === \\"/\\") {
            const closeIndex = findClosingIndex(xmlData, \\">\\", i, \\"Closing Tag is not closed.\\");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(\\":\\");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (currentNode) {
              if (currentNode.val) {
                currentNode.val = util.getValue(currentNode.val) + \\"\\" + processTagValue(tagName, textData, options);
              } else {
                currentNode.val = processTagValue(tagName, textData, options);
              }
            }
            if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
              currentNode.child = [];
              if (currentNode.attrsMap == void 0) {
                currentNode.attrsMap = {};
              }
              currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
            }
            currentNode = currentNode.parent;
            textData = \\"\\";
            i = closeIndex;
          } else if (xmlData[i + 1] === \\"?\\") {
            i = findClosingIndex(xmlData, \\"?>\\", i, \\"Pi Tag is not closed.\\");
          } else if (xmlData.substr(i + 1, 3) === \\"!--\\") {
            i = findClosingIndex(xmlData, \\"-->\\", i, \\"Comment is not closed.\\");
          } else if (xmlData.substr(i + 1, 2) === \\"!D\\") {
            const closeIndex = findClosingIndex(xmlData, \\">\\", i, \\"DOCTYPE is not closed.\\");
            const tagExp = xmlData.substring(i, closeIndex);
            if (tagExp.indexOf(\\"[\\") >= 0) {
              i = xmlData.indexOf(\\"]>\\", i) + 1;
            } else {
              i = closeIndex;
            }
          } else if (xmlData.substr(i + 1, 2) === \\"![\\") {
            const closeIndex = findClosingIndex(xmlData, \\"]]>\\", i, \\"CDATA is not closed.\\") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            if (textData) {
              currentNode.val = util.getValue(currentNode.val) + \\"\\" + processTagValue(currentNode.tagname, textData, options);
              textData = \\"\\";
            }
            if (options.cdataTagName) {
              const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
              currentNode.addChild(childNode);
              currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
              if (tagExp) {
                childNode.val = tagExp;
              }
            } else {
              currentNode.val = (currentNode.val || \\"\\") + (tagExp || \\"\\");
            }
            i = closeIndex + 2;
          } else {
            const result = closingIndexForOpeningTag(xmlData, i + 1);
            let tagExp = result.data;
            const closeIndex = result.index;
            const separatorIndex = tagExp.indexOf(\\" \\");
            let tagName = tagExp;
            let shouldBuildAttributesMap = true;
            if (separatorIndex !== -1) {
              tagName = tagExp.substr(0, separatorIndex).replace(/\\\\s\\\\s*$/, \\"\\");
              tagExp = tagExp.substr(separatorIndex + 1);
            }
            if (options.ignoreNameSpace) {
              const colonIndex = tagName.indexOf(\\":\\");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
                shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
              }
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== \\"!xml\\") {
                currentNode.val = util.getValue(currentNode.val) + \\"\\" + processTagValue(currentNode.tagname, textData, options);
              }
            }
            if (tagExp.length > 0 && tagExp.lastIndexOf(\\"/\\") === tagExp.length - 1) {
              if (tagName[tagName.length - 1] === \\"/\\") {
                tagName = tagName.substr(0, tagName.length - 1);
                tagExp = tagName;
              } else {
                tagExp = tagExp.substr(0, tagExp.length - 1);
              }
              const childNode = new xmlNode(tagName, currentNode, \\"\\");
              if (tagName !== tagExp) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
            } else {
              const childNode = new xmlNode(tagName, currentNode);
              if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
                childNode.startIndex = closeIndex;
              }
              if (tagName !== tagExp && shouldBuildAttributesMap) {
                childNode.attrsMap = buildAttributesMap(tagExp, options);
              }
              currentNode.addChild(childNode);
              currentNode = childNode;
            }
            textData = \\"\\";
            i = closeIndex;
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj;
    };
    function closingIndexForOpeningTag(data, i) {
      let attrBoundary;
      let tagExp = \\"\\";
      for (let index = i; index < data.length; index++) {
        let ch = data[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = \\"\\";
        } else if (ch === '\\"' || ch === \\"'\\") {
          attrBoundary = ch;
        } else if (ch === \\">\\") {
          return {
            data: tagExp,
            index
          };
        } else if (ch === \\"	\\") {
          ch = \\" \\";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    exports2.getTraversalObj = getTraversalObj;
  }
});

// node_modules/fast-xml-parser/src/validator.js
var require_validator = __commonJS({
  \\"node_modules/fast-xml-parser/src/validator.js\\"(exports2) {
    \\"use strict\\";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false
    };
    var props = [\\"allowBooleanAttributes\\"];
    exports2.validate = function(xmlData, options) {
      options = util.buildOptions(options, defaultOptions, props);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === \\"\\\\uFEFF\\") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === \\"<\\" && xmlData[i + 1] === \\"?\\") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === \\"<\\") {
          i++;
          if (xmlData[i] === \\"!\\") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === \\"/\\") {
              closingTag = true;
              i++;
            }
            let tagName = \\"\\";
            for (; i < xmlData.length && xmlData[i] !== \\">\\" && xmlData[i] !== \\" \\" && xmlData[i] !== \\"	\\" && xmlData[i] !== \\"\\\\n\\" && xmlData[i] !== \\"\\\\r\\"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === \\"/\\") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = \\"There is an unnecessary space between tag name and backward slash '</ ..'.\\";
              } else {
                msg = \\"Tag '\\" + tagName + \\"' is an invalid name.\\";
              }
              return getErrorObject(\\"InvalidTag\\", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject(\\"InvalidAttr\\", \\"Attributes for '\\" + tagName + \\"' have open quote.\\", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === \\"/\\") {
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject(\\"InvalidTag\\", \\"Closing tag '\\" + tagName + \\"' doesn't have proper closing.\\", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject(\\"InvalidTag\\", \\"Closing tag '\\" + tagName + \\"' can't have attributes or invalid starting.\\", getLineNumberForPosition(xmlData, i));
              } else {
                const otg = tags.pop();
                if (tagName !== otg) {
                  return getErrorObject(\\"InvalidTag\\", \\"Closing tag '\\" + otg + \\"' is expected inplace of '\\" + tagName + \\"'.\\", getLineNumberForPosition(xmlData, i));
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject(\\"InvalidXml\\", \\"Multiple possible root nodes found.\\", getLineNumberForPosition(xmlData, i));
              } else {
                tags.push(tagName);
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === \\"<\\") {
                if (xmlData[i + 1] === \\"!\\") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === \\"?\\") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === \\"&\\") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject(\\"InvalidChar\\", \\"char '&' is not expected.\\", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              }
            }
            if (xmlData[i] === \\"<\\") {
              i--;
            }
          }
        } else {
          if (xmlData[i] === \\" \\" || xmlData[i] === \\"	\\" || xmlData[i] === \\"\\\\n\\" || xmlData[i] === \\"\\\\r\\") {
            continue;
          }
          return getErrorObject(\\"InvalidChar\\", \\"char '\\" + xmlData[i] + \\"' is not expected.\\", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject(\\"InvalidXml\\", \\"Start tag expected.\\", 1);
      } else if (tags.length > 0) {
        return getErrorObject(\\"InvalidXml\\", \\"Invalid '\\" + JSON.stringify(tags, null, 4).replace(/\\\\r?\\\\n/g, \\"\\") + \\"' found.\\", 1);
      }
      return true;
    };
    function readPI(xmlData, i) {
      var start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == \\"?\\" || xmlData[i] == \\" \\") {
          var tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === \\"xml\\") {
            return getErrorObject(\\"InvalidXml\\", \\"XML declaration allowed only at the start of the document.\\", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == \\"?\\" && xmlData[i + 1] == \\">\\") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === \\"-\\" && xmlData[i + 2] === \\"-\\") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === \\"-\\" && xmlData[i + 1] === \\"-\\" && xmlData[i + 2] === \\">\\") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === \\"D\\" && xmlData[i + 2] === \\"O\\" && xmlData[i + 3] === \\"C\\" && xmlData[i + 4] === \\"T\\" && xmlData[i + 5] === \\"Y\\" && xmlData[i + 6] === \\"P\\" && xmlData[i + 7] === \\"E\\") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === \\"<\\") {
            angleBracketsCount++;
          } else if (xmlData[i] === \\">\\") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === \\"[\\" && xmlData[i + 2] === \\"C\\" && xmlData[i + 3] === \\"D\\" && xmlData[i + 4] === \\"A\\" && xmlData[i + 5] === \\"T\\" && xmlData[i + 6] === \\"A\\" && xmlData[i + 7] === \\"[\\") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === \\"]\\" && xmlData[i + 1] === \\"]\\" && xmlData[i + 2] === \\">\\") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '\\"';
    var singleQuote = \\"'\\";
    function readAttributeStr(xmlData, i) {
      let attrStr = \\"\\";
      let startChar = \\"\\";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === \\"\\") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
            continue;
          } else {
            startChar = \\"\\";
          }
        } else if (xmlData[i] === \\">\\") {
          if (startChar === \\"\\") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== \\"\\") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(\`(\\\\\\\\s*)([^\\\\\\\\s=]+)(\\\\\\\\s*=)?(\\\\\\\\s*(['\\"])(([\\\\\\\\s\\\\\\\\S])*?)\\\\\\\\5)?\`, \\"g\\");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject(\\"InvalidAttr\\", \\"Attribute '\\" + matches[i][2] + \\"' has no space in starting.\\", getPositionFromMatch(attrStr, matches[i][0]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject(\\"InvalidAttr\\", \\"boolean attribute '\\" + matches[i][2] + \\"' is not allowed.\\", getPositionFromMatch(attrStr, matches[i][0]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject(\\"InvalidAttr\\", \\"Attribute '\\" + attrName + \\"' is an invalid name.\\", getPositionFromMatch(attrStr, matches[i][0]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject(\\"InvalidAttr\\", \\"Attribute '\\" + attrName + \\"' is repeated.\\", getPositionFromMatch(attrStr, matches[i][0]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\\\\d/;
      if (xmlData[i] === \\"x\\") {
        i++;
        re = /[\\\\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === \\";\\")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === \\";\\")
        return -1;
      if (xmlData[i] === \\"#\\") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\\\\w/) && count < 20)
          continue;
        if (xmlData[i] === \\";\\")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      var lines = xmlData.substring(0, index).split(/\\\\r?\\\\n/);
      return lines.length;
    }
    function getPositionFromMatch(attrStr, match) {
      return attrStr.indexOf(match) + match.length;
    }
  }
});

// node_modules/fast-xml-parser/src/nimndata.js
var require_nimndata = __commonJS({
  \\"node_modules/fast-xml-parser/src/nimndata.js\\"(exports2) {
    \\"use strict\\";
    var char = function(a) {
      return String.fromCharCode(a);
    };
    var chars = {
      nilChar: char(176),
      missingChar: char(201),
      nilPremitive: char(175),
      missingPremitive: char(200),
      emptyChar: char(178),
      emptyValue: char(177),
      boundryChar: char(179),
      objStart: char(198),
      arrStart: char(204),
      arrayEnd: char(185)
    };
    var charsArr = [
      chars.nilChar,
      chars.nilPremitive,
      chars.missingChar,
      chars.missingPremitive,
      chars.boundryChar,
      chars.emptyChar,
      chars.emptyValue,
      chars.arrayEnd,
      chars.objStart,
      chars.arrStart
    ];
    var _e = function(node, e_schema, options) {
      if (typeof e_schema === \\"string\\") {
        if (node && node[0] && node[0].val !== void 0) {
          return getValue(node[0].val, e_schema);
        } else {
          return getValue(node, e_schema);
        }
      } else {
        const hasValidData = hasData(node);
        if (hasValidData === true) {
          let str = \\"\\";
          if (Array.isArray(e_schema)) {
            str += chars.arrStart;
            const itemSchema = e_schema[0];
            const arr_len = node.length;
            if (typeof itemSchema === \\"string\\") {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = getValue(node[arr_i].val, itemSchema);
                str = processValue(str, r);
              }
            } else {
              for (let arr_i = 0; arr_i < arr_len; arr_i++) {
                const r = _e(node[arr_i], itemSchema, options);
                str = processValue(str, r);
              }
            }
            str += chars.arrayEnd;
          } else {
            str += chars.objStart;
            const keys = Object.keys(e_schema);
            if (Array.isArray(node)) {
              node = node[0];
            }
            for (let i in keys) {
              const key = keys[i];
              let r;
              if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
                r = _e(node.attrsMap[key], e_schema[key], options);
              } else if (key === options.textNodeName) {
                r = _e(node.val, e_schema[key], options);
              } else {
                r = _e(node.child[key], e_schema[key], options);
              }
              str = processValue(str, r);
            }
          }
          return str;
        } else {
          return hasValidData;
        }
      }
    };
    var getValue = function(a) {
      switch (a) {
        case void 0:
          return chars.missingPremitive;
        case null:
          return chars.nilPremitive;
        case \\"\\":
          return chars.emptyValue;
        default:
          return a;
      }
    };
    var processValue = function(str, r) {
      if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
        str += chars.boundryChar;
      }
      return str + r;
    };
    var isAppChar = function(ch) {
      return charsArr.indexOf(ch) !== -1;
    };
    function hasData(jObj) {
      if (jObj === void 0) {
        return chars.missingChar;
      } else if (jObj === null) {
        return chars.nilChar;
      } else if (jObj.child && Object.keys(jObj.child).length === 0 && (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)) {
        return chars.emptyChar;
      } else {
        return true;
      }
    }
    var x2j = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var convert2nimn = function(node, e_schema, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      return _e(node, e_schema, options);
    };
    exports2.convert2nimn = convert2nimn;
  }
});

// node_modules/fast-xml-parser/src/node2json_str.js
var require_node2json_str = __commonJS({
  \\"node_modules/fast-xml-parser/src/node2json_str.js\\"(exports2) {
    \\"use strict\\";
    var util = require_util();
    var buildOptions = require_util().buildOptions;
    var x2j = require_xmlstr2xmlnode();
    var convertToJsonString = function(node, options) {
      options = buildOptions(options, x2j.defaultOptions, x2j.props);
      options.indentBy = options.indentBy || \\"\\";
      return _cToJsonStr(node, options, 0);
    };
    var _cToJsonStr = function(node, options, level) {
      let jObj = \\"{\\";
      const keys = Object.keys(node.child);
      for (let index = 0; index < keys.length; index++) {
        var tagname = keys[index];
        if (node.child[tagname] && node.child[tagname].length > 1) {
          jObj += '\\"' + tagname + '\\" : [ ';
          for (var tag in node.child[tagname]) {
            jObj += _cToJsonStr(node.child[tagname][tag], options) + \\" , \\";
          }
          jObj = jObj.substr(0, jObj.length - 1) + \\" ] \\";
        } else {
          jObj += '\\"' + tagname + '\\" : ' + _cToJsonStr(node.child[tagname][0], options) + \\" ,\\";
        }
      }
      util.merge(jObj, node.attrsMap);
      if (util.isEmptyObject(jObj)) {
        return util.isExist(node.val) ? node.val : \\"\\";
      } else {
        if (util.isExist(node.val)) {
          if (!(typeof node.val === \\"string\\" && (node.val === \\"\\" || node.val === options.cdataPositionChar))) {
            jObj += '\\"' + options.textNodeName + '\\" : ' + stringval(node.val);
          }
        }
      }
      if (jObj[jObj.length - 1] === \\",\\") {
        jObj = jObj.substr(0, jObj.length - 2);
      }
      return jObj + \\"}\\";
    };
    function stringval(v) {
      if (v === true || v === false || !isNaN(v)) {
        return v;
      } else {
        return '\\"' + v + '\\"';
      }
    }
    exports2.convertToJsonString = convertToJsonString;
  }
});

// node_modules/fast-xml-parser/src/json2xml.js
var require_json2xml = __commonJS({
  \\"node_modules/fast-xml-parser/src/json2xml.js\\"(exports2, module2) {
    \\"use strict\\";
    var buildOptions = require_util().buildOptions;
    var defaultOptions = {
      attributeNamePrefix: \\"@_\\",
      attrNodeName: false,
      textNodeName: \\"#text\\",
      ignoreAttributes: true,
      cdataTagName: false,
      cdataPositionChar: \\"\\\\\\\\c\\",
      format: false,
      indentBy: \\"  \\",
      supressEmptyNode: false,
      tagValueProcessor: function(a) {
        return a;
      },
      attrValueProcessor: function(a) {
        return a;
      }
    };
    var props = [
      \\"attributeNamePrefix\\",
      \\"attrNodeName\\",
      \\"textNodeName\\",
      \\"ignoreAttributes\\",
      \\"cdataTagName\\",
      \\"cdataPositionChar\\",
      \\"format\\",
      \\"indentBy\\",
      \\"supressEmptyNode\\",
      \\"tagValueProcessor\\",
      \\"attrValueProcessor\\"
    ];
    function Parser(options) {
      this.options = buildOptions(options, defaultOptions, props);
      if (this.options.ignoreAttributes || this.options.attrNodeName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      if (this.options.cdataTagName) {
        this.isCDATA = isCDATA;
      } else {
        this.isCDATA = function() {
          return false;
        };
      }
      this.replaceCDATAstr = replaceCDATAstr;
      this.replaceCDATAarr = replaceCDATAarr;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = \\">\\\\n\\";
        this.newLine = \\"\\\\n\\";
      } else {
        this.indentate = function() {
          return \\"\\";
        };
        this.tagEndChar = \\">\\";
        this.newLine = \\"\\";
      }
      if (this.options.supressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
      } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
      }
      this.buildTextValNode = buildTextValNode;
      this.buildObjectNode = buildObjectNode;
    }
    Parser.prototype.parse = function(jObj) {
      return this.j2x(jObj, 0).val;
    };
    Parser.prototype.j2x = function(jObj, level) {
      let attrStr = \\"\\";
      let val = \\"\\";
      const keys = Object.keys(jObj);
      const len = keys.length;
      for (let i = 0; i < len; i++) {
        const key = keys[i];
        if (typeof jObj[key] === \\"undefined\\") {
        } else if (jObj[key] === null) {
          val += this.indentate(level) + \\"<\\" + key + \\"/\\" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextNode(jObj[key], key, \\"\\", level);
        } else if (typeof jObj[key] !== \\"object\\") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += \\" \\" + attr + '=\\"' + this.options.attrValueProcessor(\\"\\" + jObj[key]) + '\\"';
          } else if (this.isCDATA(key)) {
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAstr(\\"\\", jObj[key]);
            }
          } else {
            if (key === this.options.textNodeName) {
              if (jObj[this.options.cdataTagName]) {
              } else {
                val += this.options.tagValueProcessor(\\"\\" + jObj[key]);
              }
            } else {
              val += this.buildTextNode(jObj[key], key, \\"\\", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          if (this.isCDATA(key)) {
            val += this.indentate(level);
            if (jObj[this.options.textNodeName]) {
              val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
            } else {
              val += this.replaceCDATAarr(\\"\\", jObj[key]);
            }
          } else {
            const arrLen = jObj[key].length;
            for (let j = 0; j < arrLen; j++) {
              const item = jObj[key][j];
              if (typeof item === \\"undefined\\") {
              } else if (item === null) {
                val += this.indentate(level) + \\"<\\" + key + \\"/\\" + this.tagEndChar;
              } else if (typeof item === \\"object\\") {
                const result = this.j2x(item, level + 1);
                val += this.buildObjNode(result.val, key, result.attrStr, level);
              } else {
                val += this.buildTextNode(item, key, \\"\\", level);
              }
            }
          }
        } else {
          if (this.options.attrNodeName && key === this.options.attrNodeName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += \\" \\" + Ks[j] + '=\\"' + this.options.attrValueProcessor(\\"\\" + jObj[key][Ks[j]]) + '\\"';
            }
          } else {
            const result = this.j2x(jObj[key], level + 1);
            val += this.buildObjNode(result.val, key, result.attrStr, level);
          }
        }
      }
      return { attrStr, val };
    };
    function replaceCDATAstr(str, cdata) {
      str = this.options.tagValueProcessor(\\"\\" + str);
      if (this.options.cdataPositionChar === \\"\\" || str === \\"\\") {
        return str + \\"<![CDATA[\\" + cdata + \\"]]\\" + this.tagEndChar;
      } else {
        return str.replace(this.options.cdataPositionChar, \\"<![CDATA[\\" + cdata + \\"]]\\" + this.tagEndChar);
      }
    }
    function replaceCDATAarr(str, cdata) {
      str = this.options.tagValueProcessor(\\"\\" + str);
      if (this.options.cdataPositionChar === \\"\\" || str === \\"\\") {
        return str + \\"<![CDATA[\\" + cdata.join(\\"]]><![CDATA[\\") + \\"]]\\" + this.tagEndChar;
      } else {
        for (let v in cdata) {
          str = str.replace(this.options.cdataPositionChar, \\"<![CDATA[\\" + cdata[v] + \\"]]>\\");
        }
        return str + this.newLine;
      }
    }
    function buildObjectNode(val, key, attrStr, level) {
      if (attrStr && !val.includes(\\"<\\")) {
        return this.indentate(level) + \\"<\\" + key + attrStr + \\">\\" + val + \\"</\\" + key + this.tagEndChar;
      } else {
        return this.indentate(level) + \\"<\\" + key + attrStr + this.tagEndChar + val + this.indentate(level) + \\"</\\" + key + this.tagEndChar;
      }
    }
    function buildEmptyObjNode(val, key, attrStr, level) {
      if (val !== \\"\\") {
        return this.buildObjectNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + \\"<\\" + key + attrStr + \\"/\\" + this.tagEndChar;
      }
    }
    function buildTextValNode(val, key, attrStr, level) {
      return this.indentate(level) + \\"<\\" + key + attrStr + \\">\\" + this.options.tagValueProcessor(val) + \\"</\\" + key + this.tagEndChar;
    }
    function buildEmptyTextNode(val, key, attrStr, level) {
      if (val !== \\"\\") {
        return this.buildTextValNode(val, key, attrStr, level);
      } else {
        return this.indentate(level) + \\"<\\" + key + attrStr + \\"/\\" + this.tagEndChar;
      }
    }
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    function isCDATA(name) {
      return name === this.options.cdataTagName;
    }
    module2.exports = Parser;
  }
});

// node_modules/fast-xml-parser/src/parser.js
var require_parser = __commonJS({
  \\"node_modules/fast-xml-parser/src/parser.js\\"(exports2) {
    \\"use strict\\";
    var nodeToJson = require_node2json();
    var xmlToNodeobj = require_xmlstr2xmlnode();
    var x2xmlnode = require_xmlstr2xmlnode();
    var buildOptions = require_util().buildOptions;
    var validator = require_validator();
    exports2.parse = function(xmlData, options, validationOption) {
      if (validationOption) {
        if (validationOption === true)
          validationOption = {};
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) {
          throw Error(result.err.msg);
        }
      }
      options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
      const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
      return nodeToJson.convertToJson(traversableObj, options);
    };
    exports2.convertTonimn = require_nimndata().convert2nimn;
    exports2.getTraversalObj = xmlToNodeobj.getTraversalObj;
    exports2.convertToJson = nodeToJson.convertToJson;
    exports2.convertToJsonString = require_node2json_str().convertToJsonString;
    exports2.validate = validator.validate;
    exports2.j2xParser = require_json2xml();
    exports2.parseToNimn = function(xmlData, schema, options) {
      return exports2.convertTonimn(exports2.getTraversalObj(xmlData, options), schema, options);
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js
var require_Aws_query = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.deserializeAws_queryGetSessionTokenCommand = exports2.deserializeAws_queryGetFederationTokenCommand = exports2.deserializeAws_queryGetCallerIdentityCommand = exports2.deserializeAws_queryGetAccessKeyInfoCommand = exports2.deserializeAws_queryDecodeAuthorizationMessageCommand = exports2.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports2.deserializeAws_queryAssumeRoleWithSAMLCommand = exports2.deserializeAws_queryAssumeRoleCommand = exports2.serializeAws_queryGetSessionTokenCommand = exports2.serializeAws_queryGetFederationTokenCommand = exports2.serializeAws_queryGetCallerIdentityCommand = exports2.serializeAws_queryGetAccessKeyInfoCommand = exports2.serializeAws_queryDecodeAuthorizationMessageCommand = exports2.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports2.serializeAws_queryAssumeRoleWithSAMLCommand = exports2.serializeAws_queryAssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var entities_1 = require_lib();
    var fast_xml_parser_1 = require_parser();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-www-form-urlencoded\\"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleRequest(input, context),
        Action: \\"AssumeRole\\",
        Version: \\"2011-06-15\\"
      });
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-www-form-urlencoded\\"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),
        Action: \\"AssumeRoleWithSAML\\",
        Version: \\"2011-06-15\\"
      });
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-www-form-urlencoded\\"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),
        Action: \\"AssumeRoleWithWebIdentity\\",
        Version: \\"2011-06-15\\"
      });
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-www-form-urlencoded\\"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),
        Action: \\"DecodeAuthorizationMessage\\",
        Version: \\"2011-06-15\\"
      });
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-www-form-urlencoded\\"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),
        Action: \\"GetAccessKeyInfo\\",
        Version: \\"2011-06-15\\"
      });
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-www-form-urlencoded\\"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetCallerIdentityRequest(input, context),
        Action: \\"GetCallerIdentity\\",
        Version: \\"2011-06-15\\"
      });
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-www-form-urlencoded\\"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetFederationTokenRequest(input, context),
        Action: \\"GetFederationToken\\",
        Version: \\"2011-06-15\\"
      });
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = async (input, context) => {
      const headers = {
        \\"content-type\\": \\"application/x-www-form-urlencoded\\"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetSessionTokenRequest(input, context),
        Action: \\"GetSessionToken\\",
        Version: \\"2011-06-15\\"
      });
      return buildHttpRpcRequest(context, headers, \\"/\\", void 0, body);
    };
    exports2.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"ExpiredTokenException\\":
        case \\"com.amazonaws.sts#ExpiredTokenException\\":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case \\"MalformedPolicyDocumentException\\":
        case \\"com.amazonaws.sts#MalformedPolicyDocumentException\\":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case \\"PackedPolicyTooLargeException\\":
        case \\"com.amazonaws.sts#PackedPolicyTooLargeException\\":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case \\"RegionDisabledException\\":
        case \\"com.amazonaws.sts#RegionDisabledException\\":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"ExpiredTokenException\\":
        case \\"com.amazonaws.sts#ExpiredTokenException\\":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case \\"IDPRejectedClaimException\\":
        case \\"com.amazonaws.sts#IDPRejectedClaimException\\":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case \\"InvalidIdentityTokenException\\":
        case \\"com.amazonaws.sts#InvalidIdentityTokenException\\":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case \\"MalformedPolicyDocumentException\\":
        case \\"com.amazonaws.sts#MalformedPolicyDocumentException\\":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case \\"PackedPolicyTooLargeException\\":
        case \\"com.amazonaws.sts#PackedPolicyTooLargeException\\":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case \\"RegionDisabledException\\":
        case \\"com.amazonaws.sts#RegionDisabledException\\":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"ExpiredTokenException\\":
        case \\"com.amazonaws.sts#ExpiredTokenException\\":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case \\"IDPCommunicationErrorException\\":
        case \\"com.amazonaws.sts#IDPCommunicationErrorException\\":
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case \\"IDPRejectedClaimException\\":
        case \\"com.amazonaws.sts#IDPRejectedClaimException\\":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case \\"InvalidIdentityTokenException\\":
        case \\"com.amazonaws.sts#InvalidIdentityTokenException\\":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case \\"MalformedPolicyDocumentException\\":
        case \\"com.amazonaws.sts#MalformedPolicyDocumentException\\":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case \\"PackedPolicyTooLargeException\\":
        case \\"com.amazonaws.sts#PackedPolicyTooLargeException\\":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case \\"RegionDisabledException\\":
        case \\"com.amazonaws.sts#RegionDisabledException\\":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InvalidAuthorizationMessageException\\":
        case \\"com.amazonaws.sts#InvalidAuthorizationMessageException\\":
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"MalformedPolicyDocumentException\\":
        case \\"com.amazonaws.sts#MalformedPolicyDocumentException\\":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case \\"PackedPolicyTooLargeException\\":
        case \\"com.amazonaws.sts#PackedPolicyTooLargeException\\":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case \\"RegionDisabledException\\":
        case \\"com.amazonaws.sts#RegionDisabledException\\":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"RegionDisabledException\\":
        case \\"com.amazonaws.sts#RegionDisabledException\\":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAssumeRoleRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries[\\"RoleArn\\"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries[\\"RoleSessionName\\"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = \`PolicyArns.\${key}\`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries[\\"Policy\\"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries[\\"DurationSeconds\\"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = \`Tags.\${key}\`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = \`TransitiveTagKeys.\${key}\`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries[\\"ExternalId\\"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries[\\"SerialNumber\\"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries[\\"TokenCode\\"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries[\\"SourceIdentity\\"] = input.SourceIdentity;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries[\\"RoleArn\\"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries[\\"PrincipalArn\\"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries[\\"SAMLAssertion\\"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = \`PolicyArns.\${key}\`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries[\\"Policy\\"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries[\\"DurationSeconds\\"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {
      const entries = {};
      if (input.RoleArn != null) {
        entries[\\"RoleArn\\"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries[\\"RoleSessionName\\"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries[\\"WebIdentityToken\\"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries[\\"ProviderId\\"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = \`PolicyArns.\${key}\`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries[\\"Policy\\"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries[\\"DurationSeconds\\"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries[\\"EncodedMessage\\"] = input.EncodedMessage;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries[\\"AccessKeyId\\"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryGetFederationTokenRequest = (input, context) => {
      const entries = {};
      if (input.Name != null) {
        entries[\\"Name\\"] = input.Name;
      }
      if (input.Policy != null) {
        entries[\\"Policy\\"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = \`PolicyArns.\${key}\`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries[\\"DurationSeconds\\"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = \`Tags.\${key}\`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries[\\"DurationSeconds\\"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries[\\"SerialNumber\\"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries[\\"TokenCode\\"] = input.TokenCode;
      }
      return entries;
    };
    var serializeAws_querypolicyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[\`member.\${counter}.\${key}\`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries[\\"arn\\"] = input.arn;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries[\\"Key\\"] = input.Key;
      }
      if (input.Value != null) {
        entries[\\"Value\\"] = input.Value;
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[\`member.\${counter}\`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[\`member.\${counter}.\${key}\`] = value;
        });
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAssumedRoleUser = (output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0
      };
      if (output[\\"AssumedRoleId\\"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output[\\"AssumedRoleId\\"]);
      }
      if (output[\\"Arn\\"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output[\\"Arn\\"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0
      };
      if (output[\\"Credentials\\"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output[\\"Credentials\\"], context);
      }
      if (output[\\"AssumedRoleUser\\"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\\"AssumedRoleUser\\"], context);
      }
      if (output[\\"PackedPolicySize\\"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\\"PackedPolicySize\\"]);
      }
      if (output[\\"SourceIdentity\\"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output[\\"SourceIdentity\\"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0
      };
      if (output[\\"Credentials\\"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output[\\"Credentials\\"], context);
      }
      if (output[\\"AssumedRoleUser\\"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\\"AssumedRoleUser\\"], context);
      }
      if (output[\\"PackedPolicySize\\"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\\"PackedPolicySize\\"]);
      }
      if (output[\\"Subject\\"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output[\\"Subject\\"]);
      }
      if (output[\\"SubjectType\\"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output[\\"SubjectType\\"]);
      }
      if (output[\\"Issuer\\"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output[\\"Issuer\\"]);
      }
      if (output[\\"Audience\\"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output[\\"Audience\\"]);
      }
      if (output[\\"NameQualifier\\"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output[\\"NameQualifier\\"]);
      }
      if (output[\\"SourceIdentity\\"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output[\\"SourceIdentity\\"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0
      };
      if (output[\\"Credentials\\"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output[\\"Credentials\\"], context);
      }
      if (output[\\"SubjectFromWebIdentityToken\\"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output[\\"SubjectFromWebIdentityToken\\"]);
      }
      if (output[\\"AssumedRoleUser\\"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output[\\"AssumedRoleUser\\"], context);
      }
      if (output[\\"PackedPolicySize\\"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\\"PackedPolicySize\\"]);
      }
      if (output[\\"Provider\\"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output[\\"Provider\\"]);
      }
      if (output[\\"Audience\\"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output[\\"Audience\\"]);
      }
      if (output[\\"SourceIdentity\\"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output[\\"SourceIdentity\\"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentials = (output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0
      };
      if (output[\\"AccessKeyId\\"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output[\\"AccessKeyId\\"]);
      }
      if (output[\\"SecretAccessKey\\"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output[\\"SecretAccessKey\\"]);
      }
      if (output[\\"SessionToken\\"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output[\\"SessionToken\\"]);
      }
      if (output[\\"Expiration\\"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output[\\"Expiration\\"]));
      }
      return contents;
    };
    var deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {
        DecodedMessage: void 0
      };
      if (output[\\"DecodedMessage\\"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output[\\"DecodedMessage\\"]);
      }
      return contents;
    };
    var deserializeAws_queryExpiredTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output[\\"message\\"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output[\\"message\\"]);
      }
      return contents;
    };
    var deserializeAws_queryFederatedUser = (output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0
      };
      if (output[\\"FederatedUserId\\"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output[\\"FederatedUserId\\"]);
      }
      if (output[\\"Arn\\"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output[\\"Arn\\"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {
      const contents = {
        Account: void 0
      };
      if (output[\\"Account\\"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output[\\"Account\\"]);
      }
      return contents;
    };
    var deserializeAws_queryGetCallerIdentityResponse = (output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0
      };
      if (output[\\"UserId\\"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output[\\"UserId\\"]);
      }
      if (output[\\"Account\\"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output[\\"Account\\"]);
      }
      if (output[\\"Arn\\"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output[\\"Arn\\"]);
      }
      return contents;
    };
    var deserializeAws_queryGetFederationTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0
      };
      if (output[\\"Credentials\\"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output[\\"Credentials\\"], context);
      }
      if (output[\\"FederatedUser\\"] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output[\\"FederatedUser\\"], context);
      }
      if (output[\\"PackedPolicySize\\"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output[\\"PackedPolicySize\\"]);
      }
      return contents;
    };
    var deserializeAws_queryGetSessionTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0
      };
      if (output[\\"Credentials\\"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output[\\"Credentials\\"], context);
      }
      return contents;
    };
    var deserializeAws_queryIDPCommunicationErrorException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output[\\"message\\"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output[\\"message\\"]);
      }
      return contents;
    };
    var deserializeAws_queryIDPRejectedClaimException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output[\\"message\\"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output[\\"message\\"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output[\\"message\\"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output[\\"message\\"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidIdentityTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output[\\"message\\"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output[\\"message\\"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output[\\"message\\"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output[\\"message\\"]);
      }
      return contents;
    };
    var deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output[\\"message\\"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output[\\"message\\"]);
      }
      return contents;
    };
    var deserializeAws_queryRegionDisabledException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output[\\"message\\"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output[\\"message\\"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers[\\"x-amzn-requestid\\"]) !== null && _a !== void 0 ? _a : output.headers[\\"x-amzn-request-id\\"],
        extendedRequestId: output.headers[\\"x-amz-id-2\\"],
        cfId: output.headers[\\"x-amz-cf-id\\"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = \\"https\\", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: \\"POST\\",
        path: basePath.endsWith(\\"/\\") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parsedObj = (0, fast_xml_parser_1.parse)(encoded, {
          attributeNamePrefix: \\"\\",
          ignoreAttributes: false,
          parseNodeValue: false,
          trimValues: false,
          tagValueProcessor: (val) => val.trim() === \\"\\" && val.includes(\\"\\\\n\\") ? \\"\\" : (0, entities_1.decodeHTML)(val)
        });
        const textNodeName = \\"#text\\";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + \\"=\\" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join(\\"&\\");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return \\"NotFound\\";
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js
var require_AssumeRoleCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.AssumeRoleCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs21();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"STSClient\\";
        const commandName = \\"AssumeRoleCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleCommand)(output, context);
      }
    };
    exports2.AssumeRoleCommand = AssumeRoleCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js
var require_AssumeRoleWithSAMLCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.AssumeRoleWithSAMLCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"STSClient\\";
        const commandName = \\"AssumeRoleWithSAMLCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports2.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js
var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"STSClient\\";
        const commandName = \\"AssumeRoleWithWebIdentityCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports2.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js
var require_DecodeAuthorizationMessageCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DecodeAuthorizationMessageCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs21();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"STSClient\\";
        const commandName = \\"DecodeAuthorizationMessageCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports2.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js
var require_GetAccessKeyInfoCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.GetAccessKeyInfoCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs21();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"STSClient\\";
        const commandName = \\"GetAccessKeyInfoCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand)(output, context);
      }
    };
    exports2.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js
var require_GetCallerIdentityCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.GetCallerIdentityCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs21();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"STSClient\\";
        const commandName = \\"GetCallerIdentityCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCallerIdentityCommand)(output, context);
      }
    };
    exports2.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js
var require_GetFederationTokenCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.GetFederationTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs21();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"STSClient\\";
        const commandName = \\"GetFederationTokenCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetFederationTokenCommand)(output, context);
      }
    };
    exports2.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js
var require_GetSessionTokenCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.GetSessionTokenCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var middleware_signing_1 = require_dist_cjs21();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"STSClient\\";
        const commandName = \\"GetSessionTokenCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSessionTokenCommand)(output, context);
      }
    };
    exports2.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

// node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js
var require_dist_cjs23 = __commonJS({
  \\"node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs21();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    });
    exports2.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

// node_modules/@aws-sdk/client-sts/package.json
var require_package2 = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/package.json\\"(exports2, module2) {
    module2.exports = {
      name: \\"@aws-sdk/client-sts\\",
      description: \\"AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native\\",
      version: \\"3.145.0\\",
      scripts: {
        build: \\"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\\",
        \\"build:cjs\\": \\"tsc -p tsconfig.cjs.json\\",
        \\"build:docs\\": \\"typedoc\\",
        \\"build:es\\": \\"tsc -p tsconfig.es.json\\",
        \\"build:types\\": \\"tsc -p tsconfig.types.json\\",
        \\"build:types:downlevel\\": \\"downlevel-dts dist-types dist-types/ts3.4\\",
        clean: \\"rimraf ./dist-* && rimraf *.tsbuildinfo\\"
      },
      main: \\"./dist-cjs/index.js\\",
      types: \\"./dist-types/index.d.ts\\",
      module: \\"./dist-es/index.js\\",
      sideEffects: false,
      dependencies: {
        \\"@aws-crypto/sha256-browser\\": \\"2.0.0\\",
        \\"@aws-crypto/sha256-js\\": \\"2.0.0\\",
        \\"@aws-sdk/config-resolver\\": \\"3.130.0\\",
        \\"@aws-sdk/credential-provider-node\\": \\"3.145.0\\",
        \\"@aws-sdk/fetch-http-handler\\": \\"3.131.0\\",
        \\"@aws-sdk/hash-node\\": \\"3.127.0\\",
        \\"@aws-sdk/invalid-dependency\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-content-length\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-host-header\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-logger\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-recursion-detection\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-retry\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-sdk-sts\\": \\"3.130.0\\",
        \\"@aws-sdk/middleware-serde\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-signing\\": \\"3.130.0\\",
        \\"@aws-sdk/middleware-stack\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-user-agent\\": \\"3.127.0\\",
        \\"@aws-sdk/node-config-provider\\": \\"3.127.0\\",
        \\"@aws-sdk/node-http-handler\\": \\"3.127.0\\",
        \\"@aws-sdk/protocol-http\\": \\"3.127.0\\",
        \\"@aws-sdk/smithy-client\\": \\"3.142.0\\",
        \\"@aws-sdk/types\\": \\"3.127.0\\",
        \\"@aws-sdk/url-parser\\": \\"3.127.0\\",
        \\"@aws-sdk/util-base64-browser\\": \\"3.109.0\\",
        \\"@aws-sdk/util-base64-node\\": \\"3.55.0\\",
        \\"@aws-sdk/util-body-length-browser\\": \\"3.55.0\\",
        \\"@aws-sdk/util-body-length-node\\": \\"3.55.0\\",
        \\"@aws-sdk/util-defaults-mode-browser\\": \\"3.142.0\\",
        \\"@aws-sdk/util-defaults-mode-node\\": \\"3.142.0\\",
        \\"@aws-sdk/util-user-agent-browser\\": \\"3.127.0\\",
        \\"@aws-sdk/util-user-agent-node\\": \\"3.127.0\\",
        \\"@aws-sdk/util-utf8-browser\\": \\"3.109.0\\",
        \\"@aws-sdk/util-utf8-node\\": \\"3.109.0\\",
        entities: \\"2.2.0\\",
        \\"fast-xml-parser\\": \\"3.19.0\\",
        tslib: \\"^2.3.1\\"
      },
      devDependencies: {
        \\"@aws-sdk/service-client-documentation-generator\\": \\"3.58.0\\",
        \\"@tsconfig/recommended\\": \\"1.0.1\\",
        \\"@types/node\\": \\"^12.7.5\\",
        concurrently: \\"7.0.0\\",
        \\"downlevel-dts\\": \\"0.7.0\\",
        rimraf: \\"3.0.2\\",
        typedoc: \\"0.19.2\\",
        typescript: \\"~4.6.2\\"
      },
      overrides: {
        typedoc: {
          typescript: \\"~4.6.2\\"
        }
      },
      engines: {
        node: \\">=12.0.0\\"
      },
      typesVersions: {
        \\"<4.0\\": {
          \\"dist-types/*\\": [
            \\"dist-types/ts3.4/*\\"
          ]
        }
      },
      files: [
        \\"dist-*\\"
      ],
      author: {
        name: \\"AWS SDK for JavaScript Team\\",
        url: \\"https://aws.amazon.com/javascript/\\"
      },
      license: \\"Apache-2.0\\",
      browser: {
        \\"./dist-es/runtimeConfig\\": \\"./dist-es/runtimeConfig.browser\\"
      },
      \\"react-native\\": {
        \\"./dist-es/runtimeConfig\\": \\"./dist-es/runtimeConfig.native\\"
      },
      homepage: \\"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts\\",
      repository: {
        type: \\"git\\",
        url: \\"https://github.com/aws/aws-sdk-js-v3.git\\",
        directory: \\"clients/client-sts\\"
      }
    };
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js
var require_defaultStsRoleAssumers = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = \\"us-east-1\\";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== \\"function\\") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(\`Invalid response from STS.assumeRole call with role \${params.RoleArn}\`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(\`Invalid response from STS.assumeRoleWithWebIdentity call with role \${params.RoleArn}\`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports2.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports2.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    });
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js
var require_fromEnv = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromEnv = exports2.ENV_EXPIRATION = exports2.ENV_SESSION = exports2.ENV_SECRET = exports2.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs16();
    exports2.ENV_KEY = \\"AWS_ACCESS_KEY_ID\\";
    exports2.ENV_SECRET = \\"AWS_SECRET_ACCESS_KEY\\";
    exports2.ENV_SESSION = \\"AWS_SESSION_TOKEN\\";
    exports2.ENV_EXPIRATION = \\"AWS_CREDENTIAL_EXPIRATION\\";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports2.ENV_KEY];
      const secretAccessKey = process.env[exports2.ENV_SECRET];
      const sessionToken = process.env[exports2.ENV_SESSION];
      const expiry = process.env[exports2.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError(\\"Unable to find environment variable credentials.\\");
    };
    exports2.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js
var require_dist_cjs24 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromEnv(), exports2);
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js
var require_getHomeDir = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getHomeDir = void 0;
    var os_1 = require(\\"os\\");
    var path_1 = require(\\"path\\");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = \`C:\${path_1.sep}\` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return \`\${HOMEDRIVE}\${HOMEPATH}\`;
      return (0, os_1.homedir)();
    };
    exports2.getHomeDir = getHomeDir;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js
var require_getProfileName = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getProfileName = exports2.DEFAULT_PROFILE = exports2.ENV_PROFILE = void 0;
    exports2.ENV_PROFILE = \\"AWS_PROFILE\\";
    exports2.DEFAULT_PROFILE = \\"default\\";
    var getProfileName = (init) => init.profile || process.env[exports2.ENV_PROFILE] || exports2.DEFAULT_PROFILE;
    exports2.getProfileName = getProfileName;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js
var require_getSSOTokenFilepath = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getSSOTokenFilepath = void 0;
    var crypto_1 = require(\\"crypto\\");
    var path_1 = require(\\"path\\");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (ssoStartUrl) => {
      const hasher = (0, crypto_1.createHash)(\\"sha1\\");
      const cacheName = hasher.update(ssoStartUrl).digest(\\"hex\\");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), \\".aws\\", \\"sso\\", \\"cache\\", \`\${cacheName}.json\`);
    };
    exports2.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js
var require_getSSOTokenFromFile = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getSSOTokenFromFile = void 0;
    var fs_1 = require(\\"fs\\");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (ssoStartUrl) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(ssoStartUrl);
      const ssoTokenText = await readFile(ssoTokenFilepath, \\"utf8\\");
      return JSON.parse(ssoTokenText);
    };
    exports2.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js
var require_getConfigFilepath = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getConfigFilepath = exports2.ENV_CONFIG_PATH = void 0;
    var path_1 = require(\\"path\\");
    var getHomeDir_1 = require_getHomeDir();
    exports2.ENV_CONFIG_PATH = \\"AWS_CONFIG_FILE\\";
    var getConfigFilepath = () => process.env[exports2.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), \\".aws\\", \\"config\\");
    exports2.getConfigFilepath = getConfigFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js
var require_getCredentialsFilepath = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getCredentialsFilepath = exports2.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require(\\"path\\");
    var getHomeDir_1 = require_getHomeDir();
    exports2.ENV_CREDENTIALS_PATH = \\"AWS_SHARED_CREDENTIALS_FILE\\";
    var getCredentialsFilepath = () => process.env[exports2.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), \\".aws\\", \\"credentials\\");
    exports2.getCredentialsFilepath = getCredentialsFilepath;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js
var require_getProfileData = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getProfileData = void 0;
    var profileKeyRegex = /^profile\\\\s([\\"'])?([^\\\\1]+)\\\\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    });
    exports2.getProfileData = getProfileData;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js
var require_parseIni = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.parseIni = void 0;
    var profileNameBlockList = [\\"__proto__\\", \\"profile __proto__\\"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\\\\r?\\\\n/)) {
        line = line.split(/(^|\\\\s)[;#]/)[0].trim();
        const isSection = line[0] === \\"[\\" && line[line.length - 1] === \\"]\\";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(\`Found invalid profile name \\"\${currentSection}\\"\`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf(\\"=\\");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports2.parseIni = parseIni;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js
var require_slurpFile = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.slurpFile = void 0;
    var fs_1 = require(\\"fs\\");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, \\"utf8\\");
      }
      return filePromisesHash[path];
    };
    exports2.slurpFile = slurpFile;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js
var require_loadSharedConfigFiles = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports2.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js
var require_parseKnownFiles = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile
      };
    };
    exports2.parseKnownFiles = parseKnownFiles;
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js
var require_types2 = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
  }
});

// node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js
var require_dist_cjs25 = __commonJS({
  \\"node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_getHomeDir(), exports2);
    tslib_1.__exportStar(require_getProfileName(), exports2);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports2);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports2);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports2);
    tslib_1.__exportStar(require_parseKnownFiles(), exports2);
    tslib_1.__exportStar(require_types2(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js
var require_httpRequest2 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs16();
    var buffer_1 = require(\\"buffer\\");
    var http_1 = require(\\"http\\");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: \\"GET\\",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\\\\[(.+)\\\\]$/, \\"$1\\")
        });
        req.on(\\"error\\", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError(\\"Unable to connect to instance metadata service\\"), err));
          req.destroy();
        });
        req.on(\\"timeout\\", () => {
          reject(new property_provider_1.ProviderError(\\"TimeoutError from instance metadata service\\"));
          req.destroy();
        });
        req.on(\\"response\\", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError(\\"Error response received from instance metadata service\\"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on(\\"data\\", (chunk) => {
            chunks.push(chunk);
          });
          res.on(\\"end\\", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports2.httpRequest = httpRequest;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js
var require_ImdsCredentials = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromImdsCredentials = exports2.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === \\"object\\" && typeof arg.AccessKeyId === \\"string\\" && typeof arg.SecretAccessKey === \\"string\\" && typeof arg.Token === \\"string\\" && typeof arg.Expiration === \\"string\\";
    exports2.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports2.fromImdsCredentials = fromImdsCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js
var require_RemoteProviderInit = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.providerConfigFromInit = exports2.DEFAULT_MAX_RETRIES = exports2.DEFAULT_TIMEOUT = void 0;
    exports2.DEFAULT_TIMEOUT = 1e3;
    exports2.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports2.DEFAULT_MAX_RETRIES, timeout = exports2.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports2.providerConfigFromInit = providerConfigFromInit;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js
var require_retry = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports2.retry = retry;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js
var require_fromContainerMetadata = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromContainerMetadata = exports2.ENV_CMDS_AUTH_TOKEN = exports2.ENV_CMDS_RELATIVE_URI = exports2.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs16();
    var url_1 = require(\\"url\\");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports2.ENV_CMDS_FULL_URI = \\"AWS_CONTAINER_CREDENTIALS_FULL_URI\\";
    exports2.ENV_CMDS_RELATIVE_URI = \\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\\";
    exports2.ENV_CMDS_AUTH_TOKEN = \\"AWS_CONTAINER_AUTHORIZATION_TOKEN\\";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError(\\"Invalid response received from instance metadata service.\\");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports2.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports2.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports2.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = \\"169.254.170.2\\";
    var GREENGRASS_HOSTS = {
      localhost: true,
      \\"127.0.0.1\\": true
    };
    var GREENGRASS_PROTOCOLS = {
      \\"http:\\": true,
      \\"https:\\": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports2.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports2.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports2.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports2.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(\`\${parsed.hostname} is not a valid container metadata service hostname\`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(\`\${parsed.protocol} is not a valid container metadata service protocol\`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(\`The container metadata credential provider cannot be used unless the \${exports2.ENV_CMDS_RELATIVE_URI} or \${exports2.ENV_CMDS_FULL_URI} environment variable is set\`, false);
    };
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js
var require_fromEnv2 = __commonJS({
  \\"node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs16();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || \`Cannot load config from environment variables with getter: \${envVarSelector}\`);
      }
    };
    exports2.fromEnv = fromEnv;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js
var require_fromSharedConfigFiles = __commonJS({
  \\"node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs25();
    var fromSharedConfigFiles = (configSelector, { preferredFile = \\"config\\", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === \\"config\\" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || \`Cannot load config for profile \${profile} in SDK configuration files with getter: \${configSelector}\`);
      }
    };
    exports2.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js
var require_fromStatic2 = __commonJS({
  \\"node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs16();
    var isFunction = (func) => typeof func === \\"function\\";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports2.fromStatic = fromStatic;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js
var require_configLoader = __commonJS({
  \\"node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs16();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports2.loadConfig = loadConfig;
  }
});

// node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js
var require_dist_cjs26 = __commonJS({
  \\"node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_configLoader(), exports2);
  }
});

// node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js
var require_dist_cjs27 = __commonJS({
  \\"node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\\\\?/, \\"\\");
      if (querystring) {
        for (const pair of querystring.split(\\"&\\")) {
          let [key, value = null] = pair.split(\\"=\\");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports2.parseQueryString = parseQueryString;
  }
});

// node_modules/@aws-sdk/url-parser/dist-cjs/index.js
var require_dist_cjs28 = __commonJS({
  \\"node_modules/@aws-sdk/url-parser/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs27();
    var parseUrl = (url) => {
      const { hostname, pathname, port, protocol, search } = new URL(url);
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports2.parseUrl = parseUrl;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js
var require_Endpoint2 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2[\\"IPv4\\"] = \\"http://169.254.169.254\\";
      Endpoint2[\\"IPv6\\"] = \\"http://[fd00:ec2::254]\\";
    })(Endpoint = exports2.Endpoint || (exports2.Endpoint = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js
var require_EndpointConfigOptions = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ENDPOINT_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_NAME = exports2.ENV_ENDPOINT_NAME = void 0;
    exports2.ENV_ENDPOINT_NAME = \\"AWS_EC2_METADATA_SERVICE_ENDPOINT\\";
    exports2.CONFIG_ENDPOINT_NAME = \\"ec2_metadata_service_endpoint\\";
    exports2.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js
var require_EndpointMode = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2[\\"IPv4\\"] = \\"IPv4\\";
      EndpointMode2[\\"IPv6\\"] = \\"IPv6\\";
    })(EndpointMode = exports2.EndpointMode || (exports2.EndpointMode = {}));
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js
var require_EndpointModeConfigOptions = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_MODE_NAME = exports2.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports2.ENV_ENDPOINT_MODE_NAME = \\"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\\";
    exports2.CONFIG_ENDPOINT_MODE_NAME = \\"ec2_metadata_service_endpoint_mode\\";
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js
var require_getInstanceMetadataEndpoint = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs26();
    var url_parser_1 = require_dist_cjs28();
    var Endpoint_1 = require_Endpoint2();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports2.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(\`Unsupported endpoint mode: \${endpointMode}. Select from \${Object.values(EndpointMode_1.EndpointMode)}\`);
      }
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js
var require_getExtendedInstanceMetadataCredentials = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = \\"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\\";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn(\\"Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after \${new Date(newExpiration)}.\\\\nFor more information, please visit: \\" + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports2.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js
var require_staticStabilityProvider = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn(\\"Credential renew failed: \\", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports2.staticStabilityProvider = staticStabilityProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js
var require_fromInstanceMetadata = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs16();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = \\"/latest/meta-data/iam/security-credentials/\\";
    var IMDS_TOKEN_PATH = \\"/latest/api/token\\";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports2.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: \\"EC2 Metadata token request returned error\\"
              });
            } else if (error.message === \\"TimeoutError\\" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              \\"x-aws-ec2-metadata-token\\": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: \\"PUT\\",
      headers: {
        \\"x-aws-ec2-metadata-token-ttl-seconds\\": \\"21600\\"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError(\\"Invalid response received from instance metadata service.\\");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js
var require_types3 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js
var require_dist_cjs29 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getInstanceMetadataEndpoint = exports2.httpRequest = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromContainerMetadata(), exports2);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports2);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports2);
    tslib_1.__exportStar(require_types3(), exports2);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports2, \\"httpRequest\\", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports2, \\"getInstanceMetadataEndpoint\\", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js
var require_resolveCredentialSource = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs24();
    var credential_provider_imds_1 = require_dist_cjs29();
    var property_provider_1 = require_dist_cjs16();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(\`Unsupported credential source in profile \${profileName}. Got \${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.\`);
      }
    };
    exports2.resolveCredentialSource = resolveCredentialSource;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js
var require_resolveAssumeRoleCredentials = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveAssumeRoleCredentials = exports2.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs25();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === \\"object\\" && typeof arg.role_arn === \\"string\\" && [\\"undefined\\", \\"string\\"].indexOf(typeof arg.role_session_name) > -1 && [\\"undefined\\", \\"string\\"].indexOf(typeof arg.external_id) > -1 && [\\"undefined\\", \\"string\\"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports2.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === \\"string\\" && typeof arg.credential_source === \\"undefined\\";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === \\"string\\" && typeof arg.source_profile === \\"undefined\\";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(\`Profile \${profileName} requires a role to be assumed, but no role assumption callback was provided.\`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(\`Detected a cycle attempting to resolve credentials for profile \${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: \` + Object.keys(visitedProfiles).join(\\", \\"), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || \`aws-sdk-js-\${Date.now()}\`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(\`Profile \${profileName} requires multi-factor authentication, but no MFA code callback was provided.\`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports2.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js
var require_isSsoProfile = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === \\"string\\" || typeof arg.sso_account_id === \\"string\\" || typeof arg.sso_region === \\"string\\" || typeof arg.sso_role_name === \\"string\\");
    exports2.isSsoProfile = isSsoProfile;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js
var require_SSOServiceException = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports2.SSOServiceException = SSOServiceException;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js
var require_models_03 = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.LogoutRequestFilterSensitiveLog = exports2.ListAccountsResponseFilterSensitiveLog = exports2.ListAccountsRequestFilterSensitiveLog = exports2.ListAccountRolesResponseFilterSensitiveLog = exports2.RoleInfoFilterSensitiveLog = exports2.ListAccountRolesRequestFilterSensitiveLog = exports2.GetRoleCredentialsResponseFilterSensitiveLog = exports2.RoleCredentialsFilterSensitiveLog = exports2.GetRoleCredentialsRequestFilterSensitiveLog = exports2.AccountInfoFilterSensitiveLog = exports2.UnauthorizedException = exports2.TooManyRequestsException = exports2.ResourceNotFoundException = exports2.InvalidRequestException = void 0;
    var smithy_client_1 = require_dist_cjs3();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: \\"InvalidRequestException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"InvalidRequestException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports2.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: \\"ResourceNotFoundException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"ResourceNotFoundException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports2.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: \\"TooManyRequestsException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"TooManyRequestsException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports2.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: \\"UnauthorizedException\\",
          $fault: \\"client\\",
          ...opts
        });
        this.name = \\"UnauthorizedException\\";
        this.$fault = \\"client\\";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports2.UnauthorizedException = UnauthorizedException;
    var AccountInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AccountInfoFilterSensitiveLog = AccountInfoFilterSensitiveLog;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports2.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    });
    exports2.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var RoleInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RoleInfoFilterSensitiveLog = RoleInfoFilterSensitiveLog;
    var ListAccountRolesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListAccountRolesResponseFilterSensitiveLog = ListAccountRolesResponseFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var ListAccountsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListAccountsResponseFilterSensitiveLog = ListAccountsResponseFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js
var require_Aws_restJson1 = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.deserializeAws_restJson1LogoutCommand = exports2.deserializeAws_restJson1ListAccountsCommand = exports2.deserializeAws_restJson1ListAccountRolesCommand = exports2.deserializeAws_restJson1GetRoleCredentialsCommand = exports2.serializeAws_restJson1LogoutCommand = exports2.serializeAws_restJson1ListAccountsCommand = exports2.serializeAws_restJson1ListAccountRolesCommand = exports2.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = \\"https\\", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        \\"x-amz-sso_bearer_token\\": input.accessToken
      });
      const resolvedPath = \`\${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\\"/\\")) ? basePath.slice(0, -1) : basePath || \\"\\"}/federation/credentials\`;
      const query = map({
        role_name: [, input.roleName],
        account_id: [, input.accountId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: \\"GET\\",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = \\"https\\", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        \\"x-amz-sso_bearer_token\\": input.accessToken
      });
      const resolvedPath = \`\${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\\"/\\")) ? basePath.slice(0, -1) : basePath || \\"\\"}/assignment/roles\`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, input.accountId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: \\"GET\\",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = \\"https\\", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        \\"x-amz-sso_bearer_token\\": input.accessToken
      });
      const resolvedPath = \`\${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\\"/\\")) ? basePath.slice(0, -1) : basePath || \\"\\"}/assignment/accounts\`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: \\"GET\\",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = \\"https\\", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        \\"x-amz-sso_bearer_token\\": input.accessToken
      });
      const resolvedPath = \`\${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith(\\"/\\")) ? basePath.slice(0, -1) : basePath || \\"\\"}/logout\`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: \\"POST\\",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), \\"body\\");
      if (data.roleCredentials != null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InvalidRequestException\\":
        case \\"com.amazonaws.sso#InvalidRequestException\\":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.sso#ResourceNotFoundException\\":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case \\"TooManyRequestsException\\":
        case \\"com.amazonaws.sso#TooManyRequestsException\\":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case \\"UnauthorizedException\\":
        case \\"com.amazonaws.sso#UnauthorizedException\\":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), \\"body\\");
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      if (data.roleList != null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InvalidRequestException\\":
        case \\"com.amazonaws.sso#InvalidRequestException\\":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.sso#ResourceNotFoundException\\":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case \\"TooManyRequestsException\\":
        case \\"com.amazonaws.sso#TooManyRequestsException\\":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case \\"UnauthorizedException\\":
        case \\"com.amazonaws.sso#UnauthorizedException\\":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), \\"body\\");
      if (data.accountList != null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InvalidRequestException\\":
        case \\"com.amazonaws.sso#InvalidRequestException\\":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case \\"ResourceNotFoundException\\":
        case \\"com.amazonaws.sso#ResourceNotFoundException\\":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case \\"TooManyRequestsException\\":
        case \\"com.amazonaws.sso#TooManyRequestsException\\":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case \\"UnauthorizedException\\":
        case \\"com.amazonaws.sso#UnauthorizedException\\":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case \\"InvalidRequestException\\":
        case \\"com.amazonaws.sso#InvalidRequestException\\":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case \\"TooManyRequestsException\\":
        case \\"com.amazonaws.sso#TooManyRequestsException\\":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case \\"UnauthorizedException\\":
        case \\"com.amazonaws.sso#UnauthorizedException\\":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName)
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => {
      var _a;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers[\\"x-amzn-requestid\\"]) !== null && _a !== void 0 ? _a : output.headers[\\"x-amzn-request-id\\"],
        extendedRequestId: output.headers[\\"x-amz-id-2\\"],
        cfId: output.headers[\\"x-amz-cf-id\\"]
      };
    };
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== \\"\\" && (!Object.getOwnPropertyNames(value).includes(\\"length\\") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes(\\"size\\") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === \\"number\\") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(\\":\\") >= 0) {
          cleanValue = cleanValue.split(\\":\\")[0];
        }
        if (cleanValue.indexOf(\\"#\\") >= 0) {
          cleanValue = cleanValue.split(\\"#\\")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, \\"x-amzn-errortype\\");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data[\\"__type\\"] !== void 0) {
        return sanitizeErrorCode(data[\\"__type\\"]);
      }
    };
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js
var require_GetRoleCredentialsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.GetRoleCredentialsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"SSOClient\\";
        const commandName = \\"GetRoleCredentialsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    exports2.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js
var require_ListAccountRolesCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ListAccountRolesCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"SSOClient\\";
        const commandName = \\"ListAccountRolesCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    exports2.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js
var require_ListAccountsCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.ListAccountsCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"SSOClient\\";
        const commandName = \\"ListAccountsCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    exports2.ListAccountsCommand = ListAccountsCommand;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js
var require_LogoutCommand = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.LogoutCommand = void 0;
    var middleware_serde_1 = require_dist_cjs();
    var smithy_client_1 = require_dist_cjs3();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = \\"SSOClient\\";
        const commandName = \\"LogoutCommand\\";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    exports2.LogoutCommand = LogoutCommand;
  }
});

// node_modules/@aws-sdk/client-sso/package.json
var require_package3 = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/package.json\\"(exports2, module2) {
    module2.exports = {
      name: \\"@aws-sdk/client-sso\\",
      description: \\"AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native\\",
      version: \\"3.145.0\\",
      scripts: {
        build: \\"concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'\\",
        \\"build:cjs\\": \\"tsc -p tsconfig.cjs.json\\",
        \\"build:docs\\": \\"typedoc\\",
        \\"build:es\\": \\"tsc -p tsconfig.es.json\\",
        \\"build:types\\": \\"tsc -p tsconfig.types.json\\",
        \\"build:types:downlevel\\": \\"downlevel-dts dist-types dist-types/ts3.4\\",
        clean: \\"rimraf ./dist-* && rimraf *.tsbuildinfo\\"
      },
      main: \\"./dist-cjs/index.js\\",
      types: \\"./dist-types/index.d.ts\\",
      module: \\"./dist-es/index.js\\",
      sideEffects: false,
      dependencies: {
        \\"@aws-crypto/sha256-browser\\": \\"2.0.0\\",
        \\"@aws-crypto/sha256-js\\": \\"2.0.0\\",
        \\"@aws-sdk/config-resolver\\": \\"3.130.0\\",
        \\"@aws-sdk/fetch-http-handler\\": \\"3.131.0\\",
        \\"@aws-sdk/hash-node\\": \\"3.127.0\\",
        \\"@aws-sdk/invalid-dependency\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-content-length\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-host-header\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-logger\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-recursion-detection\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-retry\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-serde\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-stack\\": \\"3.127.0\\",
        \\"@aws-sdk/middleware-user-agent\\": \\"3.127.0\\",
        \\"@aws-sdk/node-config-provider\\": \\"3.127.0\\",
        \\"@aws-sdk/node-http-handler\\": \\"3.127.0\\",
        \\"@aws-sdk/protocol-http\\": \\"3.127.0\\",
        \\"@aws-sdk/smithy-client\\": \\"3.142.0\\",
        \\"@aws-sdk/types\\": \\"3.127.0\\",
        \\"@aws-sdk/url-parser\\": \\"3.127.0\\",
        \\"@aws-sdk/util-base64-browser\\": \\"3.109.0\\",
        \\"@aws-sdk/util-base64-node\\": \\"3.55.0\\",
        \\"@aws-sdk/util-body-length-browser\\": \\"3.55.0\\",
        \\"@aws-sdk/util-body-length-node\\": \\"3.55.0\\",
        \\"@aws-sdk/util-defaults-mode-browser\\": \\"3.142.0\\",
        \\"@aws-sdk/util-defaults-mode-node\\": \\"3.142.0\\",
        \\"@aws-sdk/util-user-agent-browser\\": \\"3.127.0\\",
        \\"@aws-sdk/util-user-agent-node\\": \\"3.127.0\\",
        \\"@aws-sdk/util-utf8-browser\\": \\"3.109.0\\",
        \\"@aws-sdk/util-utf8-node\\": \\"3.109.0\\",
        tslib: \\"^2.3.1\\"
      },
      devDependencies: {
        \\"@aws-sdk/service-client-documentation-generator\\": \\"3.58.0\\",
        \\"@tsconfig/recommended\\": \\"1.0.1\\",
        \\"@types/node\\": \\"^12.7.5\\",
        concurrently: \\"7.0.0\\",
        \\"downlevel-dts\\": \\"0.7.0\\",
        rimraf: \\"3.0.2\\",
        typedoc: \\"0.19.2\\",
        typescript: \\"~4.6.2\\"
      },
      overrides: {
        typedoc: {
          typescript: \\"~4.6.2\\"
        }
      },
      engines: {
        node: \\">=12.0.0\\"
      },
      typesVersions: {
        \\"<4.0\\": {
          \\"dist-types/*\\": [
            \\"dist-types/ts3.4/*\\"
          ]
        }
      },
      files: [
        \\"dist-*\\"
      ],
      author: {
        name: \\"AWS SDK for JavaScript Team\\",
        url: \\"https://aws.amazon.com/javascript/\\"
      },
      license: \\"Apache-2.0\\",
      browser: {
        \\"./dist-es/runtimeConfig\\": \\"./dist-es/runtimeConfig.browser\\"
      },
      \\"react-native\\": {
        \\"./dist-es/runtimeConfig\\": \\"./dist-es/runtimeConfig.native\\"
      },
      homepage: \\"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso\\",
      repository: {
        type: \\"git\\",
        url: \\"https://github.com/aws/aws-sdk-js-v3.git\\",
        directory: \\"clients/client-sso\\"
      }
    };
  }
});

// node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js
var require_dist_cjs30 = __commonJS({
  \\"node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromString = exports2.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs19();
    var buffer_1 = require(\\"buffer\\");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(\`The \\"input\\" argument must be ArrayBuffer. Received type \${typeof input} (\${input})\`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports2.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== \\"string\\") {
        throw new TypeError(\`The \\"input\\" argument must be of type string. Received type \${typeof input} (\${input})\`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports2.fromString = fromString;
  }
});

// node_modules/@aws-sdk/hash-node/dist-cjs/index.js
var require_dist_cjs31 = __commonJS({
  \\"node_modules/@aws-sdk/hash-node/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs30();
    var buffer_1 = require(\\"buffer\\");
    var crypto_1 = require(\\"crypto\\");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.hash = secret ? (0, crypto_1.createHmac)(algorithmIdentifier, castSourceData(secret)) : (0, crypto_1.createHash)(algorithmIdentifier);
      }
      update(toHash, encoding) {
        this.hash.update(castSourceData(toHash, encoding));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
    };
    exports2.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === \\"string\\") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

// node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js
var require_dist_cjs32 = __commonJS({
  \\"node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs18();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(\`\${key}=\${(0, util_uri_escape_1.escapeUri)(value[i])}\`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === \\"string\\") {
            qsEntry += \`=\${(0, util_uri_escape_1.escapeUri)(value)}\`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join(\\"&\\");
    }
    exports2.buildQueryString = buildQueryString;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js
var require_constants6 = __commonJS({
  \\"node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports2.NODEJS_TIMEOUT_ERROR_CODES = [\\"ECONNRESET\\", \\"EPIPE\\", \\"ETIMEDOUT\\"];
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js
var require_get_transformed_headers = __commonJS({
  \\"node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(\\",\\") : headerValues;
      }
      return transformedHeaders;
    };
    exports2.getTransformedHeaders = getTransformedHeaders;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js
var require_set_connection_timeout = __commonJS({
  \\"node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on(\\"socket\\", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(\`Socket timed out without establishing a connection within \${timeoutInMs} ms\`), {
              name: \\"TimeoutError\\"
            }));
          }, timeoutInMs);
          socket.on(\\"connect\\", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports2.setConnectionTimeout = setConnectionTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js
var require_set_socket_timeout = __commonJS({
  \\"node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(\`Connection timed out after \${timeoutInMs} ms\`), { name: \\"TimeoutError\\" }));
      });
    };
    exports2.setSocketTimeout = setSocketTimeout;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js
var require_write_request_body = __commonJS({
  \\"node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.writeRequestBody = void 0;
    var stream_1 = require(\\"stream\\");
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers[\\"Expect\\"] || request.headers[\\"expect\\"];
      if (expect === \\"100-continue\\") {
        httpRequest.on(\\"continue\\", () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports2.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js
var require_node_http_handler = __commonJS({
  \\"node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs32();
    var http_1 = require(\\"http\\");
    var https_1 = require(\\"https\\");
    var constants_1 = require_constants6();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: \\"http/1.1\\" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === \\"function\\") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error(\\"Node HTTP request handler config is not resolved\\");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error(\\"Request aborted\\");
            abortError.name = \\"AbortError\\";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === \\"https:\\";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? \`\${request.path}?\${queryString}\` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on(\\"error\\", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: \\"TimeoutError\\" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error(\\"Request aborted\\");
              abortError.name = \\"AbortError\\";
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports2.NodeHttpHandler = NodeHttpHandler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js
var require_node_http2_handler = __commonJS({
  \\"node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs4();
    var querystring_builder_1 = require_dist_cjs32();
    var http2_1 = require(\\"http2\\");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: \\"h2\\" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === \\"function\\") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error(\\"Request aborted\\");
            abortError.name = \\"AbortError\\";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = \`\${protocol}//\${hostname}\${port ? \`:\${port}\` : \\"\\"}\`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? \`\${path}?\${queryString}\` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on(\\"response\\", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[\\":status\\"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(\`Stream timed out because of no activity for \${requestTimeout} ms\`);
              timeoutError.name = \\"TimeoutError\\";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error(\\"Request aborted\\");
              abortError.name = \\"AbortError\\";
              reject(abortError);
            };
          }
          req.on(\\"frameError\\", (type, code, id) => {
            reject(new Error(\`Frame type id \${type} in stream id \${id} has failed with code \${code}.\`));
          });
          req.on(\\"error\\", reject);
          req.on(\\"aborted\\", () => {
            reject(new Error(\`HTTP/2 stream is abnormally aborted in mid-communication with result code \${req.rstCode}.\`));
          });
          req.on(\\"close\\", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error(\\"Unexpected error: http2 request did not get a response\\"));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on(\\"goaway\\", destroySessionCb);
        newSession.on(\\"error\\", destroySessionCb);
        newSession.on(\\"frameError\\", destroySessionCb);
        newSession.on(\\"close\\", () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    exports2.NodeHttp2Handler = NodeHttp2Handler;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js
var require_collector = __commonJS({
  \\"node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.Collector = void 0;
    var stream_1 = require(\\"stream\\");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports2.Collector = Collector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js
var require_stream_collector = __commonJS({
  \\"node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on(\\"error\\", (err) => {
        collector.end();
        reject(err);
      });
      collector.on(\\"error\\", reject);
      collector.on(\\"finish\\", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports2.streamCollector = streamCollector;
  }
});

// node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js
var require_dist_cjs33 = __commonJS({
  \\"node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_node_http_handler(), exports2);
    tslib_1.__exportStar(require_node_http2_handler(), exports2);
    tslib_1.__exportStar(require_stream_collector(), exports2);
  }
});

// node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js
var require_dist_cjs34 = __commonJS({
  \\"node_modules/@aws-sdk/util-base64-node/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.toBase64 = exports2.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs30();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    function fromBase64(input) {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(\`Incorrect padding on base64 string.\`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(\`Invalid base64 string.\`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, \\"base64\\");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    exports2.fromBase64 = fromBase64;
    function toBase64(input) {
      return (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(\\"base64\\");
    }
    exports2.toBase64 = toBase64;
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js
var require_calculateBodyLength = __commonJS({
  \\"node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.calculateBodyLength = void 0;
    var fs_1 = require(\\"fs\\");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === \\"string\\") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === \\"number\\") {
        return body.byteLength;
      } else if (typeof body.size === \\"number\\") {
        return body.size;
      } else if (typeof body.path === \\"string\\" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === \\"number\\") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(\`Body Length computation failed for \${body}\`);
    };
    exports2.calculateBodyLength = calculateBodyLength;
  }
});

// node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js
var require_dist_cjs35 = __commonJS({
  \\"node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_calculateBodyLength(), exports2);
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js
var require_is_crt_available = __commonJS({
  \\"node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js\\"(exports2, module2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === \\"function\\" && typeof module2 !== \\"undefined\\" && module2.require && require(\\"aws-crt\\")) {
          return [\\"md/crt-avail\\"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports2.isCrtAvailable = isCrtAvailable;
  }
});

// node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js
var require_dist_cjs36 = __commonJS({
  \\"node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.defaultUserAgent = exports2.UA_APP_ID_INI_NAME = exports2.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs26();
    var os_1 = require(\\"os\\");
    var process_1 = require(\\"process\\");
    var is_crt_available_1 = require_is_crt_available();
    exports2.UA_APP_ID_ENV_NAME = \\"AWS_SDK_UA_APP_ID\\";
    exports2.UA_APP_ID_INI_NAME = \\"sdk-ua-app-id\\";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        [\\"aws-sdk-js\\", clientVersion],
        [\`os/\${(0, os_1.platform)()}\`, (0, os_1.release)()],
        [\\"lang/js\\"],
        [\\"md/nodejs\\", \`\${process_1.versions.node}\`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([\`api/\${serviceId}\`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([\`exec-env/\${process_1.env.AWS_EXECUTION_ENV}\`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports2.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports2.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [\`app/\${appId}\`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports2.defaultUserAgent = defaultUserAgent;
  }
});

// node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js
var require_dist_cjs37 = __commonJS({
  \\"node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs30();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, \\"utf8\\");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports2.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString(\\"utf8\\");
    exports2.toUtf8 = toUtf8;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js
var require_endpoints = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/endpoints.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      \\"ap-east-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.ap-east-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"ap-east-1\\"
      },
      \\"ap-northeast-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.ap-northeast-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"ap-northeast-1\\"
      },
      \\"ap-northeast-2\\": {
        variants: [
          {
            hostname: \\"portal.sso.ap-northeast-2.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"ap-northeast-2\\"
      },
      \\"ap-northeast-3\\": {
        variants: [
          {
            hostname: \\"portal.sso.ap-northeast-3.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"ap-northeast-3\\"
      },
      \\"ap-south-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.ap-south-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"ap-south-1\\"
      },
      \\"ap-southeast-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.ap-southeast-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"ap-southeast-1\\"
      },
      \\"ap-southeast-2\\": {
        variants: [
          {
            hostname: \\"portal.sso.ap-southeast-2.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"ap-southeast-2\\"
      },
      \\"ca-central-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.ca-central-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"ca-central-1\\"
      },
      \\"eu-central-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.eu-central-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"eu-central-1\\"
      },
      \\"eu-north-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.eu-north-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"eu-north-1\\"
      },
      \\"eu-south-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.eu-south-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"eu-south-1\\"
      },
      \\"eu-west-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.eu-west-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"eu-west-1\\"
      },
      \\"eu-west-2\\": {
        variants: [
          {
            hostname: \\"portal.sso.eu-west-2.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"eu-west-2\\"
      },
      \\"eu-west-3\\": {
        variants: [
          {
            hostname: \\"portal.sso.eu-west-3.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"eu-west-3\\"
      },
      \\"me-south-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.me-south-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"me-south-1\\"
      },
      \\"sa-east-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.sa-east-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"sa-east-1\\"
      },
      \\"us-east-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.us-east-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"us-east-1\\"
      },
      \\"us-east-2\\": {
        variants: [
          {
            hostname: \\"portal.sso.us-east-2.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"us-east-2\\"
      },
      \\"us-gov-east-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.us-gov-east-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"us-gov-east-1\\"
      },
      \\"us-gov-west-1\\": {
        variants: [
          {
            hostname: \\"portal.sso.us-gov-west-1.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"us-gov-west-1\\"
      },
      \\"us-west-2\\": {
        variants: [
          {
            hostname: \\"portal.sso.us-west-2.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"us-west-2\\"
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          \\"af-south-1\\",
          \\"ap-east-1\\",
          \\"ap-northeast-1\\",
          \\"ap-northeast-2\\",
          \\"ap-northeast-3\\",
          \\"ap-south-1\\",
          \\"ap-southeast-1\\",
          \\"ap-southeast-2\\",
          \\"ap-southeast-3\\",
          \\"ca-central-1\\",
          \\"eu-central-1\\",
          \\"eu-north-1\\",
          \\"eu-south-1\\",
          \\"eu-west-1\\",
          \\"eu-west-2\\",
          \\"eu-west-3\\",
          \\"me-south-1\\",
          \\"sa-east-1\\",
          \\"us-east-1\\",
          \\"us-east-2\\",
          \\"us-west-1\\",
          \\"us-west-2\\"
        ],
        regionRegex: \\"^(us|eu|ap|sa|ca|me|af)\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"portal.sso.{region}.amazonaws.com\\",
            tags: []
          },
          {
            hostname: \\"portal.sso-fips.{region}.amazonaws.com\\",
            tags: [\\"fips\\"]
          },
          {
            hostname: \\"portal.sso-fips.{region}.api.aws\\",
            tags: [\\"dualstack\\", \\"fips\\"]
          },
          {
            hostname: \\"portal.sso.{region}.api.aws\\",
            tags: [\\"dualstack\\"]
          }
        ]
      },
      \\"aws-cn\\": {
        regions: [\\"cn-north-1\\", \\"cn-northwest-1\\"],
        regionRegex: \\"^cn\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"portal.sso.{region}.amazonaws.com.cn\\",
            tags: []
          },
          {
            hostname: \\"portal.sso-fips.{region}.amazonaws.com.cn\\",
            tags: [\\"fips\\"]
          },
          {
            hostname: \\"portal.sso-fips.{region}.api.amazonwebservices.com.cn\\",
            tags: [\\"dualstack\\", \\"fips\\"]
          },
          {
            hostname: \\"portal.sso.{region}.api.amazonwebservices.com.cn\\",
            tags: [\\"dualstack\\"]
          }
        ]
      },
      \\"aws-iso\\": {
        regions: [\\"us-iso-east-1\\", \\"us-iso-west-1\\"],
        regionRegex: \\"^us\\\\\\\\-iso\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"portal.sso.{region}.c2s.ic.gov\\",
            tags: []
          },
          {
            hostname: \\"portal.sso-fips.{region}.c2s.ic.gov\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"aws-iso-b\\": {
        regions: [\\"us-isob-east-1\\"],
        regionRegex: \\"^us\\\\\\\\-isob\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"portal.sso.{region}.sc2s.sgov.gov\\",
            tags: []
          },
          {
            hostname: \\"portal.sso-fips.{region}.sc2s.sgov.gov\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"aws-us-gov\\": {
        regions: [\\"us-gov-east-1\\", \\"us-gov-west-1\\"],
        regionRegex: \\"^us\\\\\\\\-gov\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"portal.sso.{region}.amazonaws.com\\",
            tags: []
          },
          {
            hostname: \\"portal.sso-fips.{region}.amazonaws.com\\",
            tags: [\\"fips\\"]
          },
          {
            hostname: \\"portal.sso-fips.{region}.api.aws\\",
            tags: [\\"dualstack\\", \\"fips\\"]
          },
          {
            hostname: \\"portal.sso.{region}.api.aws\\",
            tags: [\\"dualstack\\"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, {
      ...options,
      signingService: \\"awsssoportal\\",
      regionHash,
      partitionHash
    });
    exports2.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs28();
    var endpoints_1 = require_endpoints();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: \\"2019-06-10\\",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : \\"SSO\\",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js
var require_constants7 = __commonJS({
  \\"node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.IMDS_REGION_PATH = exports2.DEFAULTS_MODE_OPTIONS = exports2.ENV_IMDS_DISABLED = exports2.AWS_DEFAULT_REGION_ENV = exports2.AWS_REGION_ENV = exports2.AWS_EXECUTION_ENV = void 0;
    exports2.AWS_EXECUTION_ENV = \\"AWS_EXECUTION_ENV\\";
    exports2.AWS_REGION_ENV = \\"AWS_REGION\\";
    exports2.AWS_DEFAULT_REGION_ENV = \\"AWS_DEFAULT_REGION\\";
    exports2.ENV_IMDS_DISABLED = \\"AWS_EC2_METADATA_DISABLED\\";
    exports2.DEFAULTS_MODE_OPTIONS = [\\"in-region\\", \\"cross-region\\", \\"mobile\\", \\"standard\\", \\"legacy\\"];
    exports2.IMDS_REGION_PATH = \\"/latest/meta-data/placement/region\\";
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js
var require_defaultsModeConfig = __commonJS({
  \\"node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = \\"AWS_DEFAULTS_MODE\\";
    var AWS_DEFAULTS_MODE_CONFIG = \\"defaults_mode\\";
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: \\"legacy\\"
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js
var require_resolveDefaultsModeConfig = __commonJS({
  \\"node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_imds_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs26();
    var property_provider_1 = require_dist_cjs16();
    var constants_1 = require_constants7();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === \\"function\\" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case \\"auto\\":
          return resolveNodeDefaultsModeAuto(region);
        case \\"in-region\\":
        case \\"cross-region\\":
        case \\"mobile\\":
        case \\"standard\\":
        case \\"legacy\\":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve(\\"legacy\\");
        default:
          throw new Error(\`Invalid parameter for \\"defaultsMode\\", expect \${constants_1.DEFAULTS_MODE_OPTIONS.join(\\", \\")}, got \${mode}\`);
      }
    });
    exports2.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === \\"function\\" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return \\"standard\\";
        }
        if (resolvedRegion === inferredRegion) {
          return \\"in-region\\";
        } else {
          return \\"cross-region\\";
        }
      }
      return \\"standard\\";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

// node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js
var require_dist_cjs38 = __commonJS({
  \\"node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js
var require_runtimeConfig = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs7();
    var hash_node_1 = require_dist_cjs31();
    var middleware_retry_1 = require_dist_cjs15();
    var node_config_provider_1 = require_dist_cjs26();
    var node_http_handler_1 = require_dist_cjs33();
    var util_base64_node_1 = require_dist_cjs34();
    var util_body_length_node_1 = require_dist_cjs35();
    var util_user_agent_node_1 = require_dist_cjs36();
    var util_utf8_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs38();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: \\"node\\",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (_d = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _d !== void 0 ? _d : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_e = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _e !== void 0 ? _e : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_f = config === null || config === void 0 ? void 0 : config.region) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_g = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _g !== void 0 ? _g : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_h = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _h !== void 0 ? _h : (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (_j = config === null || config === void 0 ? void 0 : config.sha256) !== null && _j !== void 0 ? _j : hash_node_1.Hash.bind(null, \\"sha256\\"),
        streamCollector: (_k = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _k !== void 0 ? _k : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_l = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _l !== void 0 ? _l : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_o = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _o !== void 0 ? _o : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.toUtf8
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js
var require_SSOClient = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_host_header_1 = require_dist_cjs11();
    var middleware_logger_1 = require_dist_cjs12();
    var middleware_recursion_detection_1 = require_dist_cjs13();
    var middleware_retry_1 = require_dist_cjs15();
    var middleware_user_agent_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_4);
        super(_config_5);
        this.config = _config_5;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SSOClient = SSOClient;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js
var require_SSO = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.SSO = SSO;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js
var require_commands = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports2);
    tslib_1.__exportStar(require_LogoutCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js
var require_models = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_03(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js
var require_Interfaces = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js
var require_ListAccountRolesPaginator = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccountRoles(input, ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input[\\"maxResults\\"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error(\\"Invalid client, expected SSO | SSOClient\\");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAccountRoles = paginateListAccountRoles;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js
var require_ListAccountsPaginator = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccounts(input, ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input[\\"maxResults\\"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error(\\"Invalid client, expected SSO | SSOClient\\");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAccounts = paginateListAccounts;
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js
var require_pagination = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports2);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports2);
  }
});

// node_modules/@aws-sdk/client-sso/dist-cjs/index.js
var require_dist_cjs39 = __commonJS({
  \\"node_modules/@aws-sdk/client-sso/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.SSOServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_SSO(), exports2);
    tslib_1.__exportStar(require_SSOClient(), exports2);
    tslib_1.__exportStar(require_commands(), exports2);
    tslib_1.__exportStar(require_models(), exports2);
    tslib_1.__exportStar(require_pagination(), exports2);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports2, \\"SSOServiceException\\", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js
var require_resolveSSOCredentials = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs39();
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs25();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient }) => {
      let token;
      const refreshMessage = \`To refresh this SSO session run aws sso login with the corresponding profile.\`;
      try {
        token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(\`The SSO session associated with this profile is invalid. \${refreshMessage}\`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(\`The SSO session associated with this profile has expired. \${refreshMessage}\`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError(\\"SSO returns an invalid temporary credential.\\", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports2.resolveSSOCredentials = resolveSSOCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js
var require_validateSsoProfile = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs16();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(\`Profile is configured with invalid SSO credentials. Required parameters \\"sso_account_id\\", \\"sso_region\\", \\"sso_role_name\\", \\"sso_start_url\\". Got \${Object.keys(profile).join(\\", \\")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html\`, false);
      }
      return profile;
    };
    exports2.validateSsoProfile = validateSsoProfile;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js
var require_fromSSO = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs25();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient } = init;
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
        const profile = profiles[profileName];
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(\`Profile \${profileName} is not configured with SSO credentials.\`);
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include \\"ssoStartUrl\\", \\"ssoAccountId\\", \\"ssoRegion\\", \\"ssoRoleName\\"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({ ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient });
      }
    };
    exports2.fromSSO = fromSSO;
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js
var require_types4 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
  }
});

// node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js
var require_dist_cjs40 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromSSO(), exports2);
    tslib_1.__exportStar(require_isSsoProfile(), exports2);
    tslib_1.__exportStar(require_types4(), exports2);
    tslib_1.__exportStar(require_validateSsoProfile(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js
var require_resolveSsoCredentials = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveSsoCredentials = exports2.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs40();
    var credential_provider_sso_2 = require_dist_cjs40();
    Object.defineProperty(exports2, \\"isSsoProfile\\", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports2.resolveSsoCredentials = resolveSsoCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js
var require_resolveStaticCredentials = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveStaticCredentials = exports2.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === \\"object\\" && typeof arg.aws_access_key_id === \\"string\\" && typeof arg.aws_secret_access_key === \\"string\\" && [\\"undefined\\", \\"string\\"].indexOf(typeof arg.aws_session_token) > -1;
    exports2.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports2.resolveStaticCredentials = resolveStaticCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js
var require_fromWebToken = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs16();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(\`Role Arn '\${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.\`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : \`aws-sdk-js-session-\${Date.now()}\`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports2.fromWebToken = fromWebToken;
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js
var require_fromTokenFile = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs16();
    var fs_1 = require(\\"fs\\");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = \\"AWS_WEB_IDENTITY_TOKEN_FILE\\";
    var ENV_ROLE_ARN = \\"AWS_ROLE_ARN\\";
    var ENV_ROLE_SESSION_NAME = \\"AWS_ROLE_SESSION_NAME\\";
    var fromTokenFile = (init = {}) => async () => {
      return resolveTokenFile(init);
    };
    exports2.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError(\\"Web identity configuration not specified\\");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: \\"ascii\\" }),
        roleArn,
        roleSessionName
      })();
    };
  }
});

// node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js
var require_dist_cjs41 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromTokenFile(), exports2);
    tslib_1.__exportStar(require_fromWebToken(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js
var require_resolveWebIdentityCredentials = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveWebIdentityCredentials = exports2.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs41();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === \\"object\\" && typeof arg.web_identity_token_file === \\"string\\" && typeof arg.role_arn === \\"string\\" && [\\"undefined\\", \\"string\\"].indexOf(typeof arg.role_session_name) > -1;
    exports2.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports2.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js
var require_resolveProfileData = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs16();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(\`Profile \${profileName} could not be found or parsed in shared credentials file.\`);
    };
    exports2.resolveProfileData = resolveProfileData;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js
var require_fromIni = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs25();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports2.fromIni = fromIni;
  }
});

// node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js
var require_dist_cjs42 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromIni(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js
var require_getValidatedProcessCredentials = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(\`Profile \${profileName} credential_process did not return Version 1.\`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(\`Profile \${profileName} credential_process returned invalid credentials.\`);
      }
      if (data.Expiration) {
        const currentTime = new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(\`Profile \${profileName} credential_process returned expired credentials.\`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    };
    exports2.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js
var require_resolveProcessCredentials = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs16();
    var child_process_1 = require(\\"child_process\\");
    var util_1 = require(\\"util\\");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile[\\"credential_process\\"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(\`Profile \${profileName} credential_process returned invalid JSON.\`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(\`Profile \${profileName} did not contain credential_process.\`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(\`Profile \${profileName} could not be found in shared credentials file.\`);
      }
    };
    exports2.resolveProcessCredentials = resolveProcessCredentials;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js
var require_fromProcess = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs25();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports2.fromProcess = fromProcess;
  }
});

// node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js
var require_dist_cjs43 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_fromProcess(), exports2);
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js
var require_remoteProvider = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.remoteProvider = exports2.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs29();
    var property_provider_1 = require_dist_cjs16();
    exports2.ENV_IMDS_DISABLED = \\"AWS_EC2_METADATA_DISABLED\\";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports2.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError(\\"EC2 Instance Metadata Service access disabled\\");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports2.remoteProvider = remoteProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js
var require_defaultProvider = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs24();
    var credential_provider_ini_1 = require_dist_cjs42();
    var credential_provider_process_1 = require_dist_cjs43();
    var credential_provider_sso_1 = require_dist_cjs40();
    var credential_provider_web_identity_1 = require_dist_cjs41();
    var property_provider_1 = require_dist_cjs16();
    var shared_ini_file_loader_1 = require_dist_cjs25();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError(\\"Could not load credentials from any providers\\", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports2.defaultProvider = defaultProvider;
  }
});

// node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js
var require_dist_cjs44 = __commonJS({
  \\"node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_defaultProvider(), exports2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js
var require_endpoints2 = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/endpoints.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      \\"aws-global\\": {
        variants: [
          {
            hostname: \\"sts.amazonaws.com\\",
            tags: []
          }
        ],
        signingRegion: \\"us-east-1\\"
      },
      \\"us-east-1\\": {
        variants: [
          {
            hostname: \\"sts-fips.us-east-1.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"us-east-2\\": {
        variants: [
          {
            hostname: \\"sts-fips.us-east-2.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"us-gov-east-1\\": {
        variants: [
          {
            hostname: \\"sts.us-gov-east-1.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"us-gov-west-1\\": {
        variants: [
          {
            hostname: \\"sts.us-gov-west-1.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"us-west-1\\": {
        variants: [
          {
            hostname: \\"sts-fips.us-west-1.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"us-west-2\\": {
        variants: [
          {
            hostname: \\"sts-fips.us-west-2.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          \\"af-south-1\\",
          \\"ap-east-1\\",
          \\"ap-northeast-1\\",
          \\"ap-northeast-2\\",
          \\"ap-northeast-3\\",
          \\"ap-south-1\\",
          \\"ap-southeast-1\\",
          \\"ap-southeast-2\\",
          \\"ap-southeast-3\\",
          \\"aws-global\\",
          \\"ca-central-1\\",
          \\"eu-central-1\\",
          \\"eu-north-1\\",
          \\"eu-south-1\\",
          \\"eu-west-1\\",
          \\"eu-west-2\\",
          \\"eu-west-3\\",
          \\"me-south-1\\",
          \\"sa-east-1\\",
          \\"us-east-1\\",
          \\"us-east-1-fips\\",
          \\"us-east-2\\",
          \\"us-east-2-fips\\",
          \\"us-west-1\\",
          \\"us-west-1-fips\\",
          \\"us-west-2\\",
          \\"us-west-2-fips\\"
        ],
        regionRegex: \\"^(us|eu|ap|sa|ca|me|af)\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"sts.{region}.amazonaws.com\\",
            tags: []
          },
          {
            hostname: \\"sts-fips.{region}.amazonaws.com\\",
            tags: [\\"fips\\"]
          },
          {
            hostname: \\"sts-fips.{region}.api.aws\\",
            tags: [\\"dualstack\\", \\"fips\\"]
          },
          {
            hostname: \\"sts.{region}.api.aws\\",
            tags: [\\"dualstack\\"]
          }
        ]
      },
      \\"aws-cn\\": {
        regions: [\\"cn-north-1\\", \\"cn-northwest-1\\"],
        regionRegex: \\"^cn\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"sts.{region}.amazonaws.com.cn\\",
            tags: []
          },
          {
            hostname: \\"sts-fips.{region}.amazonaws.com.cn\\",
            tags: [\\"fips\\"]
          },
          {
            hostname: \\"sts-fips.{region}.api.amazonwebservices.com.cn\\",
            tags: [\\"dualstack\\", \\"fips\\"]
          },
          {
            hostname: \\"sts.{region}.api.amazonwebservices.com.cn\\",
            tags: [\\"dualstack\\"]
          }
        ]
      },
      \\"aws-iso\\": {
        regions: [\\"us-iso-east-1\\", \\"us-iso-west-1\\"],
        regionRegex: \\"^us\\\\\\\\-iso\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"sts.{region}.c2s.ic.gov\\",
            tags: []
          },
          {
            hostname: \\"sts-fips.{region}.c2s.ic.gov\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"aws-iso-b\\": {
        regions: [\\"us-isob-east-1\\"],
        regionRegex: \\"^us\\\\\\\\-isob\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"sts.{region}.sc2s.sgov.gov\\",
            tags: []
          },
          {
            hostname: \\"sts-fips.{region}.sc2s.sgov.gov\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"aws-us-gov\\": {
        regions: [\\"us-gov-east-1\\", \\"us-gov-east-1-fips\\", \\"us-gov-west-1\\", \\"us-gov-west-1-fips\\"],
        regionRegex: \\"^us\\\\\\\\-gov\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"sts.{region}.amazonaws.com\\",
            tags: []
          },
          {
            hostname: \\"sts.{region}.amazonaws.com\\",
            tags: [\\"fips\\"]
          },
          {
            hostname: \\"sts-fips.{region}.api.aws\\",
            tags: [\\"dualstack\\", \\"fips\\"]
          },
          {
            hostname: \\"sts.{region}.api.aws\\",
            tags: [\\"dualstack\\"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, {
      ...options,
      signingService: \\"sts\\",
      regionHash,
      partitionHash
    });
    exports2.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared2 = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs28();
    var endpoints_1 = require_endpoints2();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: \\"2011-06-15\\",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : \\"STS\\",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js
var require_runtimeConfig2 = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_node_1 = require_dist_cjs44();
    var hash_node_1 = require_dist_cjs31();
    var middleware_retry_1 = require_dist_cjs15();
    var node_config_provider_1 = require_dist_cjs26();
    var node_http_handler_1 = require_dist_cjs33();
    var util_base64_node_1 = require_dist_cjs34();
    var util_body_length_node_1 = require_dist_cjs35();
    var util_user_agent_node_1 = require_dist_cjs36();
    var util_utf8_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs38();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: \\"node\\",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (_f = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_g = config === null || config === void 0 ? void 0 : config.region) !== null && _g !== void 0 ? _g : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_h = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _h !== void 0 ? _h : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_j = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _j !== void 0 ? _j : (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (_k = config === null || config === void 0 ? void 0 : config.sha256) !== null && _k !== void 0 ? _k : hash_node_1.Hash.bind(null, \\"sha256\\"),
        streamCollector: (_l = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _l !== void 0 ? _l : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_m = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _m !== void 0 ? _m : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _o !== void 0 ? _o : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_p = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _p !== void 0 ? _p : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.toUtf8
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js
var require_STSClient = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_host_header_1 = require_dist_cjs11();
    var middleware_logger_1 = require_dist_cjs12();
    var middleware_recursion_detection_1 = require_dist_cjs13();
    var middleware_retry_1 = require_dist_cjs15();
    var middleware_sdk_sts_1 = require_dist_cjs23();
    var middleware_user_agent_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs3();
    var runtimeConfig_1 = require_runtimeConfig2();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_4, { stsClientCtor: STSClient });
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.STSClient = STSClient;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/STS.js
var require_STS = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/STS.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.STS = STS;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js
var require_commands2 = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports2);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports2);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports2);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports2);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports2);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js
var require_defaultRoleAssumers = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getDefaultRoleAssumer = (stsOptions = {}) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, STSClient_1.STSClient);
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, STSClient_1.STSClient);
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports2.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports2.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    });
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js
var require_models2 = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_02(), exports2);
  }
});

// node_modules/@aws-sdk/client-sts/dist-cjs/index.js
var require_dist_cjs45 = __commonJS({
  \\"node_modules/@aws-sdk/client-sts/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.STSServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_STS(), exports2);
    tslib_1.__exportStar(require_STSClient(), exports2);
    tslib_1.__exportStar(require_commands2(), exports2);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports2);
    tslib_1.__exportStar(require_models2(), exports2);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports2, \\"STSServiceException\\", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoints.js
var require_endpoints3 = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/endpoints.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.defaultRegionInfoProvider = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var regionHash = {
      \\"ca-central-1\\": {
        variants: [
          {
            hostname: \\"dynamodb-fips.ca-central-1.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      local: {
        variants: [
          {
            hostname: \\"localhost:8000\\",
            tags: []
          }
        ],
        signingRegion: \\"us-east-1\\"
      },
      \\"us-east-1\\": {
        variants: [
          {
            hostname: \\"dynamodb-fips.us-east-1.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"us-east-2\\": {
        variants: [
          {
            hostname: \\"dynamodb-fips.us-east-2.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"us-gov-east-1\\": {
        variants: [
          {
            hostname: \\"dynamodb.us-gov-east-1.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"us-gov-west-1\\": {
        variants: [
          {
            hostname: \\"dynamodb.us-gov-west-1.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"us-west-1\\": {
        variants: [
          {
            hostname: \\"dynamodb-fips.us-west-1.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"us-west-2\\": {
        variants: [
          {
            hostname: \\"dynamodb-fips.us-west-2.amazonaws.com\\",
            tags: [\\"fips\\"]
          }
        ]
      }
    };
    var partitionHash = {
      aws: {
        regions: [
          \\"af-south-1\\",
          \\"ap-east-1\\",
          \\"ap-northeast-1\\",
          \\"ap-northeast-2\\",
          \\"ap-northeast-3\\",
          \\"ap-south-1\\",
          \\"ap-southeast-1\\",
          \\"ap-southeast-2\\",
          \\"ap-southeast-3\\",
          \\"ca-central-1\\",
          \\"ca-central-1-fips\\",
          \\"eu-central-1\\",
          \\"eu-north-1\\",
          \\"eu-south-1\\",
          \\"eu-west-1\\",
          \\"eu-west-2\\",
          \\"eu-west-3\\",
          \\"local\\",
          \\"me-south-1\\",
          \\"sa-east-1\\",
          \\"us-east-1\\",
          \\"us-east-1-fips\\",
          \\"us-east-2\\",
          \\"us-east-2-fips\\",
          \\"us-west-1\\",
          \\"us-west-1-fips\\",
          \\"us-west-2\\",
          \\"us-west-2-fips\\"
        ],
        regionRegex: \\"^(us|eu|ap|sa|ca|me|af)\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"dynamodb.{region}.amazonaws.com\\",
            tags: []
          },
          {
            hostname: \\"dynamodb-fips.{region}.amazonaws.com\\",
            tags: [\\"fips\\"]
          },
          {
            hostname: \\"dynamodb-fips.{region}.api.aws\\",
            tags: [\\"dualstack\\", \\"fips\\"]
          },
          {
            hostname: \\"dynamodb.{region}.api.aws\\",
            tags: [\\"dualstack\\"]
          }
        ]
      },
      \\"aws-cn\\": {
        regions: [\\"cn-north-1\\", \\"cn-northwest-1\\"],
        regionRegex: \\"^cn\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"dynamodb.{region}.amazonaws.com.cn\\",
            tags: []
          },
          {
            hostname: \\"dynamodb-fips.{region}.amazonaws.com.cn\\",
            tags: [\\"fips\\"]
          },
          {
            hostname: \\"dynamodb-fips.{region}.api.amazonwebservices.com.cn\\",
            tags: [\\"dualstack\\", \\"fips\\"]
          },
          {
            hostname: \\"dynamodb.{region}.api.amazonwebservices.com.cn\\",
            tags: [\\"dualstack\\"]
          }
        ]
      },
      \\"aws-iso\\": {
        regions: [\\"us-iso-east-1\\", \\"us-iso-west-1\\"],
        regionRegex: \\"^us\\\\\\\\-iso\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"dynamodb.{region}.c2s.ic.gov\\",
            tags: []
          },
          {
            hostname: \\"dynamodb-fips.{region}.c2s.ic.gov\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"aws-iso-b\\": {
        regions: [\\"us-isob-east-1\\"],
        regionRegex: \\"^us\\\\\\\\-isob\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"dynamodb.{region}.sc2s.sgov.gov\\",
            tags: []
          },
          {
            hostname: \\"dynamodb-fips.{region}.sc2s.sgov.gov\\",
            tags: [\\"fips\\"]
          }
        ]
      },
      \\"aws-us-gov\\": {
        regions: [\\"us-gov-east-1\\", \\"us-gov-east-1-fips\\", \\"us-gov-west-1\\", \\"us-gov-west-1-fips\\"],
        regionRegex: \\"^us\\\\\\\\-gov\\\\\\\\-\\\\\\\\w+\\\\\\\\-\\\\\\\\d+$\\",
        variants: [
          {
            hostname: \\"dynamodb.{region}.amazonaws.com\\",
            tags: []
          },
          {
            hostname: \\"dynamodb.{region}.amazonaws.com\\",
            tags: [\\"fips\\"]
          },
          {
            hostname: \\"dynamodb-fips.{region}.api.aws\\",
            tags: [\\"dualstack\\", \\"fips\\"]
          },
          {
            hostname: \\"dynamodb.{region}.api.aws\\",
            tags: [\\"dualstack\\"]
          }
        ]
      }
    };
    var defaultRegionInfoProvider = async (region, options) => (0, config_resolver_1.getRegionInfo)(region, {
      ...options,
      signingService: \\"dynamodb\\",
      regionHash,
      partitionHash
    });
    exports2.defaultRegionInfoProvider = defaultRegionInfoProvider;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js
var require_runtimeConfig_shared3 = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.shared.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getRuntimeConfig = void 0;
    var url_parser_1 = require_dist_cjs28();
    var endpoints_1 = require_endpoints3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e;
      return {
        apiVersion: \\"2012-08-10\\",
        disableHostPrefix: (_a = config === null || config === void 0 ? void 0 : config.disableHostPrefix) !== null && _a !== void 0 ? _a : false,
        logger: (_b = config === null || config === void 0 ? void 0 : config.logger) !== null && _b !== void 0 ? _b : {},
        regionInfoProvider: (_c = config === null || config === void 0 ? void 0 : config.regionInfoProvider) !== null && _c !== void 0 ? _c : endpoints_1.defaultRegionInfoProvider,
        serviceId: (_d = config === null || config === void 0 ? void 0 : config.serviceId) !== null && _d !== void 0 ? _d : \\"DynamoDB\\",
        urlParser: (_e = config === null || config === void 0 ? void 0 : config.urlParser) !== null && _e !== void 0 ? _e : url_parser_1.parseUrl
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js
var require_runtimeConfig3 = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/runtimeConfig.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = require_tslib();
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs45();
    var config_resolver_1 = require_dist_cjs7();
    var credential_provider_node_1 = require_dist_cjs44();
    var hash_node_1 = require_dist_cjs31();
    var middleware_endpoint_discovery_1 = require_dist_cjs10();
    var middleware_retry_1 = require_dist_cjs15();
    var node_config_provider_1 = require_dist_cjs26();
    var node_http_handler_1 = require_dist_cjs33();
    var util_base64_node_1 = require_dist_cjs34();
    var util_body_length_node_1 = require_dist_cjs35();
    var util_user_agent_node_1 = require_dist_cjs36();
    var util_utf8_node_1 = require_dist_cjs37();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs3();
    var util_defaults_mode_node_1 = require_dist_cjs38();
    var smithy_client_2 = require_dist_cjs3();
    var getRuntimeConfig = (config) => {
      var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: \\"node\\",
        defaultsMode,
        base64Decoder: (_a = config === null || config === void 0 ? void 0 : config.base64Decoder) !== null && _a !== void 0 ? _a : util_base64_node_1.fromBase64,
        base64Encoder: (_b = config === null || config === void 0 ? void 0 : config.base64Encoder) !== null && _b !== void 0 ? _b : util_base64_node_1.toBase64,
        bodyLengthChecker: (_c = config === null || config === void 0 ? void 0 : config.bodyLengthChecker) !== null && _c !== void 0 ? _c : util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (_d = config === null || config === void 0 ? void 0 : config.credentialDefaultProvider) !== null && _d !== void 0 ? _d : (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (_e = config === null || config === void 0 ? void 0 : config.defaultUserAgentProvider) !== null && _e !== void 0 ? _e : (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        endpointDiscoveryEnabledProvider: (_f = config === null || config === void 0 ? void 0 : config.endpointDiscoveryEnabledProvider) !== null && _f !== void 0 ? _f : (0, node_config_provider_1.loadConfig)(middleware_endpoint_discovery_1.NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS),
        maxAttempts: (_g = config === null || config === void 0 ? void 0 : config.maxAttempts) !== null && _g !== void 0 ? _g : (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (_h = config === null || config === void 0 ? void 0 : config.region) !== null && _h !== void 0 ? _h : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (_j = config === null || config === void 0 ? void 0 : config.requestHandler) !== null && _j !== void 0 ? _j : new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (_k = config === null || config === void 0 ? void 0 : config.retryMode) !== null && _k !== void 0 ? _k : (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || middleware_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (_l = config === null || config === void 0 ? void 0 : config.sha256) !== null && _l !== void 0 ? _l : hash_node_1.Hash.bind(null, \\"sha256\\"),
        streamCollector: (_m = config === null || config === void 0 ? void 0 : config.streamCollector) !== null && _m !== void 0 ? _m : node_http_handler_1.streamCollector,
        useDualstackEndpoint: (_o = config === null || config === void 0 ? void 0 : config.useDualstackEndpoint) !== null && _o !== void 0 ? _o : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (_p = config === null || config === void 0 ? void 0 : config.useFipsEndpoint) !== null && _p !== void 0 ? _p : (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (_q = config === null || config === void 0 ? void 0 : config.utf8Decoder) !== null && _q !== void 0 ? _q : util_utf8_node_1.fromUtf8,
        utf8Encoder: (_r = config === null || config === void 0 ? void 0 : config.utf8Encoder) !== null && _r !== void 0 ? _r : util_utf8_node_1.toUtf8
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js
var require_DynamoDBClient = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDBClient.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DynamoDBClient = void 0;
    var config_resolver_1 = require_dist_cjs7();
    var middleware_content_length_1 = require_dist_cjs8();
    var middleware_endpoint_discovery_1 = require_dist_cjs10();
    var middleware_host_header_1 = require_dist_cjs11();
    var middleware_logger_1 = require_dist_cjs12();
    var middleware_recursion_detection_1 = require_dist_cjs13();
    var middleware_retry_1 = require_dist_cjs15();
    var middleware_signing_1 = require_dist_cjs21();
    var middleware_user_agent_1 = require_dist_cjs22();
    var smithy_client_1 = require_dist_cjs3();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var runtimeConfig_1 = require_runtimeConfig3();
    var DynamoDBClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, config_resolver_1.resolveRegionConfig)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveEndpointsConfig)(_config_1);
        const _config_3 = (0, middleware_retry_1.resolveRetryConfig)(_config_2);
        const _config_4 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_3);
        const _config_5 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        const _config_7 = (0, middleware_endpoint_discovery_1.resolveEndpointDiscoveryConfig)(_config_6, {
          endpointDiscoveryCommandCtor: DescribeEndpointsCommand_1.DescribeEndpointsCommand
        });
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.DynamoDBClient = DynamoDBClient;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js
var require_DynamoDB = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/DynamoDB.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DynamoDB = void 0;
    var BatchExecuteStatementCommand_1 = require_BatchExecuteStatementCommand();
    var BatchGetItemCommand_1 = require_BatchGetItemCommand();
    var BatchWriteItemCommand_1 = require_BatchWriteItemCommand();
    var CreateBackupCommand_1 = require_CreateBackupCommand();
    var CreateGlobalTableCommand_1 = require_CreateGlobalTableCommand();
    var CreateTableCommand_1 = require_CreateTableCommand();
    var DeleteBackupCommand_1 = require_DeleteBackupCommand();
    var DeleteItemCommand_1 = require_DeleteItemCommand();
    var DeleteTableCommand_1 = require_DeleteTableCommand();
    var DescribeBackupCommand_1 = require_DescribeBackupCommand();
    var DescribeContinuousBackupsCommand_1 = require_DescribeContinuousBackupsCommand();
    var DescribeContributorInsightsCommand_1 = require_DescribeContributorInsightsCommand();
    var DescribeEndpointsCommand_1 = require_DescribeEndpointsCommand();
    var DescribeExportCommand_1 = require_DescribeExportCommand();
    var DescribeGlobalTableCommand_1 = require_DescribeGlobalTableCommand();
    var DescribeGlobalTableSettingsCommand_1 = require_DescribeGlobalTableSettingsCommand();
    var DescribeKinesisStreamingDestinationCommand_1 = require_DescribeKinesisStreamingDestinationCommand();
    var DescribeLimitsCommand_1 = require_DescribeLimitsCommand();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var DescribeTableReplicaAutoScalingCommand_1 = require_DescribeTableReplicaAutoScalingCommand();
    var DescribeTimeToLiveCommand_1 = require_DescribeTimeToLiveCommand();
    var DisableKinesisStreamingDestinationCommand_1 = require_DisableKinesisStreamingDestinationCommand();
    var EnableKinesisStreamingDestinationCommand_1 = require_EnableKinesisStreamingDestinationCommand();
    var ExecuteStatementCommand_1 = require_ExecuteStatementCommand();
    var ExecuteTransactionCommand_1 = require_ExecuteTransactionCommand();
    var ExportTableToPointInTimeCommand_1 = require_ExportTableToPointInTimeCommand();
    var GetItemCommand_1 = require_GetItemCommand();
    var ListBackupsCommand_1 = require_ListBackupsCommand();
    var ListContributorInsightsCommand_1 = require_ListContributorInsightsCommand();
    var ListExportsCommand_1 = require_ListExportsCommand();
    var ListGlobalTablesCommand_1 = require_ListGlobalTablesCommand();
    var ListTablesCommand_1 = require_ListTablesCommand();
    var ListTagsOfResourceCommand_1 = require_ListTagsOfResourceCommand();
    var PutItemCommand_1 = require_PutItemCommand();
    var QueryCommand_1 = require_QueryCommand();
    var RestoreTableFromBackupCommand_1 = require_RestoreTableFromBackupCommand();
    var RestoreTableToPointInTimeCommand_1 = require_RestoreTableToPointInTimeCommand();
    var ScanCommand_1 = require_ScanCommand();
    var TagResourceCommand_1 = require_TagResourceCommand();
    var TransactGetItemsCommand_1 = require_TransactGetItemsCommand();
    var TransactWriteItemsCommand_1 = require_TransactWriteItemsCommand();
    var UntagResourceCommand_1 = require_UntagResourceCommand();
    var UpdateContinuousBackupsCommand_1 = require_UpdateContinuousBackupsCommand();
    var UpdateContributorInsightsCommand_1 = require_UpdateContributorInsightsCommand();
    var UpdateGlobalTableCommand_1 = require_UpdateGlobalTableCommand();
    var UpdateGlobalTableSettingsCommand_1 = require_UpdateGlobalTableSettingsCommand();
    var UpdateItemCommand_1 = require_UpdateItemCommand();
    var UpdateTableCommand_1 = require_UpdateTableCommand();
    var UpdateTableReplicaAutoScalingCommand_1 = require_UpdateTableReplicaAutoScalingCommand();
    var UpdateTimeToLiveCommand_1 = require_UpdateTimeToLiveCommand();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var DynamoDB = class extends DynamoDBClient_1.DynamoDBClient {
      batchExecuteStatement(args, optionsOrCb, cb) {
        const command = new BatchExecuteStatementCommand_1.BatchExecuteStatementCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchGetItem(args, optionsOrCb, cb) {
        const command = new BatchGetItemCommand_1.BatchGetItemCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      batchWriteItem(args, optionsOrCb, cb) {
        const command = new BatchWriteItemCommand_1.BatchWriteItemCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createBackup(args, optionsOrCb, cb) {
        const command = new CreateBackupCommand_1.CreateBackupCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createGlobalTable(args, optionsOrCb, cb) {
        const command = new CreateGlobalTableCommand_1.CreateGlobalTableCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createTable(args, optionsOrCb, cb) {
        const command = new CreateTableCommand_1.CreateTableCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBackup(args, optionsOrCb, cb) {
        const command = new DeleteBackupCommand_1.DeleteBackupCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteItem(args, optionsOrCb, cb) {
        const command = new DeleteItemCommand_1.DeleteItemCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteTable(args, optionsOrCb, cb) {
        const command = new DeleteTableCommand_1.DeleteTableCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeBackup(args, optionsOrCb, cb) {
        const command = new DescribeBackupCommand_1.DescribeBackupCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeContinuousBackups(args, optionsOrCb, cb) {
        const command = new DescribeContinuousBackupsCommand_1.DescribeContinuousBackupsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeContributorInsights(args, optionsOrCb, cb) {
        const command = new DescribeContributorInsightsCommand_1.DescribeContributorInsightsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeEndpoints(args, optionsOrCb, cb) {
        const command = new DescribeEndpointsCommand_1.DescribeEndpointsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeExport(args, optionsOrCb, cb) {
        const command = new DescribeExportCommand_1.DescribeExportCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeGlobalTable(args, optionsOrCb, cb) {
        const command = new DescribeGlobalTableCommand_1.DescribeGlobalTableCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeGlobalTableSettings(args, optionsOrCb, cb) {
        const command = new DescribeGlobalTableSettingsCommand_1.DescribeGlobalTableSettingsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new DescribeKinesisStreamingDestinationCommand_1.DescribeKinesisStreamingDestinationCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeLimits(args, optionsOrCb, cb) {
        const command = new DescribeLimitsCommand_1.DescribeLimitsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeTable(args, optionsOrCb, cb) {
        const command = new DescribeTableCommand_1.DescribeTableCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeTableReplicaAutoScaling(args, optionsOrCb, cb) {
        const command = new DescribeTableReplicaAutoScalingCommand_1.DescribeTableReplicaAutoScalingCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      describeTimeToLive(args, optionsOrCb, cb) {
        const command = new DescribeTimeToLiveCommand_1.DescribeTimeToLiveCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      disableKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new DisableKinesisStreamingDestinationCommand_1.DisableKinesisStreamingDestinationCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      enableKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new EnableKinesisStreamingDestinationCommand_1.EnableKinesisStreamingDestinationCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeStatement(args, optionsOrCb, cb) {
        const command = new ExecuteStatementCommand_1.ExecuteStatementCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      executeTransaction(args, optionsOrCb, cb) {
        const command = new ExecuteTransactionCommand_1.ExecuteTransactionCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      exportTableToPointInTime(args, optionsOrCb, cb) {
        const command = new ExportTableToPointInTimeCommand_1.ExportTableToPointInTimeCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getItem(args, optionsOrCb, cb) {
        const command = new GetItemCommand_1.GetItemCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listBackups(args, optionsOrCb, cb) {
        const command = new ListBackupsCommand_1.ListBackupsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listContributorInsights(args, optionsOrCb, cb) {
        const command = new ListContributorInsightsCommand_1.ListContributorInsightsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listExports(args, optionsOrCb, cb) {
        const command = new ListExportsCommand_1.ListExportsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listGlobalTables(args, optionsOrCb, cb) {
        const command = new ListGlobalTablesCommand_1.ListGlobalTablesCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTables(args, optionsOrCb, cb) {
        const command = new ListTablesCommand_1.ListTablesCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listTagsOfResource(args, optionsOrCb, cb) {
        const command = new ListTagsOfResourceCommand_1.ListTagsOfResourceCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putItem(args, optionsOrCb, cb) {
        const command = new PutItemCommand_1.PutItemCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      query(args, optionsOrCb, cb) {
        const command = new QueryCommand_1.QueryCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreTableFromBackup(args, optionsOrCb, cb) {
        const command = new RestoreTableFromBackupCommand_1.RestoreTableFromBackupCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreTableToPointInTime(args, optionsOrCb, cb) {
        const command = new RestoreTableToPointInTimeCommand_1.RestoreTableToPointInTimeCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      scan(args, optionsOrCb, cb) {
        const command = new ScanCommand_1.ScanCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      tagResource(args, optionsOrCb, cb) {
        const command = new TagResourceCommand_1.TagResourceCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactGetItems(args, optionsOrCb, cb) {
        const command = new TransactGetItemsCommand_1.TransactGetItemsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      transactWriteItems(args, optionsOrCb, cb) {
        const command = new TransactWriteItemsCommand_1.TransactWriteItemsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      untagResource(args, optionsOrCb, cb) {
        const command = new UntagResourceCommand_1.UntagResourceCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateContinuousBackups(args, optionsOrCb, cb) {
        const command = new UpdateContinuousBackupsCommand_1.UpdateContinuousBackupsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateContributorInsights(args, optionsOrCb, cb) {
        const command = new UpdateContributorInsightsCommand_1.UpdateContributorInsightsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateGlobalTable(args, optionsOrCb, cb) {
        const command = new UpdateGlobalTableCommand_1.UpdateGlobalTableCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateGlobalTableSettings(args, optionsOrCb, cb) {
        const command = new UpdateGlobalTableSettingsCommand_1.UpdateGlobalTableSettingsCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateItem(args, optionsOrCb, cb) {
        const command = new UpdateItemCommand_1.UpdateItemCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTable(args, optionsOrCb, cb) {
        const command = new UpdateTableCommand_1.UpdateTableCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTableReplicaAutoScaling(args, optionsOrCb, cb) {
        const command = new UpdateTableReplicaAutoScalingCommand_1.UpdateTableReplicaAutoScalingCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      updateTimeToLive(args, optionsOrCb, cb) {
        const command = new UpdateTimeToLiveCommand_1.UpdateTimeToLiveCommand(args);
        if (typeof optionsOrCb === \\"function\\") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === \\"function\\") {
          if (typeof optionsOrCb !== \\"object\\")
            throw new Error(\`Expect http options but get \${typeof optionsOrCb}\`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.DynamoDB = DynamoDB;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js
var require_commands3 = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/commands/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_BatchExecuteStatementCommand(), exports2);
    tslib_1.__exportStar(require_BatchGetItemCommand(), exports2);
    tslib_1.__exportStar(require_BatchWriteItemCommand(), exports2);
    tslib_1.__exportStar(require_CreateBackupCommand(), exports2);
    tslib_1.__exportStar(require_CreateGlobalTableCommand(), exports2);
    tslib_1.__exportStar(require_CreateTableCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBackupCommand(), exports2);
    tslib_1.__exportStar(require_DeleteItemCommand(), exports2);
    tslib_1.__exportStar(require_DeleteTableCommand(), exports2);
    tslib_1.__exportStar(require_DescribeBackupCommand(), exports2);
    tslib_1.__exportStar(require_DescribeContinuousBackupsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeContributorInsightsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeEndpointsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeExportCommand(), exports2);
    tslib_1.__exportStar(require_DescribeGlobalTableCommand(), exports2);
    tslib_1.__exportStar(require_DescribeGlobalTableSettingsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeKinesisStreamingDestinationCommand(), exports2);
    tslib_1.__exportStar(require_DescribeLimitsCommand(), exports2);
    tslib_1.__exportStar(require_DescribeTableCommand(), exports2);
    tslib_1.__exportStar(require_DescribeTableReplicaAutoScalingCommand(), exports2);
    tslib_1.__exportStar(require_DescribeTimeToLiveCommand(), exports2);
    tslib_1.__exportStar(require_DisableKinesisStreamingDestinationCommand(), exports2);
    tslib_1.__exportStar(require_EnableKinesisStreamingDestinationCommand(), exports2);
    tslib_1.__exportStar(require_ExecuteStatementCommand(), exports2);
    tslib_1.__exportStar(require_ExecuteTransactionCommand(), exports2);
    tslib_1.__exportStar(require_ExportTableToPointInTimeCommand(), exports2);
    tslib_1.__exportStar(require_GetItemCommand(), exports2);
    tslib_1.__exportStar(require_ListBackupsCommand(), exports2);
    tslib_1.__exportStar(require_ListContributorInsightsCommand(), exports2);
    tslib_1.__exportStar(require_ListExportsCommand(), exports2);
    tslib_1.__exportStar(require_ListGlobalTablesCommand(), exports2);
    tslib_1.__exportStar(require_ListTablesCommand(), exports2);
    tslib_1.__exportStar(require_ListTagsOfResourceCommand(), exports2);
    tslib_1.__exportStar(require_PutItemCommand(), exports2);
    tslib_1.__exportStar(require_QueryCommand(), exports2);
    tslib_1.__exportStar(require_RestoreTableFromBackupCommand(), exports2);
    tslib_1.__exportStar(require_RestoreTableToPointInTimeCommand(), exports2);
    tslib_1.__exportStar(require_ScanCommand(), exports2);
    tslib_1.__exportStar(require_TagResourceCommand(), exports2);
    tslib_1.__exportStar(require_TransactGetItemsCommand(), exports2);
    tslib_1.__exportStar(require_TransactWriteItemsCommand(), exports2);
    tslib_1.__exportStar(require_UntagResourceCommand(), exports2);
    tslib_1.__exportStar(require_UpdateContinuousBackupsCommand(), exports2);
    tslib_1.__exportStar(require_UpdateContributorInsightsCommand(), exports2);
    tslib_1.__exportStar(require_UpdateGlobalTableCommand(), exports2);
    tslib_1.__exportStar(require_UpdateGlobalTableSettingsCommand(), exports2);
    tslib_1.__exportStar(require_UpdateItemCommand(), exports2);
    tslib_1.__exportStar(require_UpdateTableCommand(), exports2);
    tslib_1.__exportStar(require_UpdateTableReplicaAutoScalingCommand(), exports2);
    tslib_1.__exportStar(require_UpdateTimeToLiveCommand(), exports2);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js
var require_models3 = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/models/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_models_0(), exports2);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js
var require_Interfaces2 = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/Interfaces.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js
var require_ListContributorInsightsPaginator = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListContributorInsightsPaginator.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.paginateListContributorInsights = void 0;
    var ListContributorInsightsCommand_1 = require_ListContributorInsightsCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListContributorInsightsCommand_1.ListContributorInsightsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listContributorInsights(input, ...args);
    };
    async function* paginateListContributorInsights(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input[\\"MaxResults\\"] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error(\\"Invalid client, expected DynamoDB | DynamoDBClient\\");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListContributorInsights = paginateListContributorInsights;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js
var require_ListExportsPaginator = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListExportsPaginator.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.paginateListExports = void 0;
    var ListExportsCommand_1 = require_ListExportsCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListExportsCommand_1.ListExportsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listExports(input, ...args);
    };
    async function* paginateListExports(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.NextToken = token;
        input[\\"MaxResults\\"] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error(\\"Invalid client, expected DynamoDB | DynamoDBClient\\");
        }
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListExports = paginateListExports;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js
var require_ListTablesPaginator = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ListTablesPaginator.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.paginateListTables = void 0;
    var ListTablesCommand_1 = require_ListTablesCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListTablesCommand_1.ListTablesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listTables(input, ...args);
    };
    async function* paginateListTables(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartTableName = token;
        input[\\"Limit\\"] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error(\\"Invalid client, expected DynamoDB | DynamoDBClient\\");
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedTableName;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListTables = paginateListTables;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js
var require_QueryPaginator = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/QueryPaginator.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.paginateQuery = void 0;
    var QueryCommand_1 = require_QueryCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new QueryCommand_1.QueryCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.query(input, ...args);
    };
    async function* paginateQuery(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input[\\"Limit\\"] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error(\\"Invalid client, expected DynamoDB | DynamoDBClient\\");
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateQuery = paginateQuery;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js
var require_ScanPaginator = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/ScanPaginator.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.paginateScan = void 0;
    var ScanCommand_1 = require_ScanCommand();
    var DynamoDB_1 = require_DynamoDB();
    var DynamoDBClient_1 = require_DynamoDBClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ScanCommand_1.ScanCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.scan(input, ...args);
    };
    async function* paginateScan(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ExclusiveStartKey = token;
        input[\\"Limit\\"] = config.pageSize;
        if (config.client instanceof DynamoDB_1.DynamoDB) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof DynamoDBClient_1.DynamoDBClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error(\\"Invalid client, expected DynamoDB | DynamoDBClient\\");
        }
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateScan = paginateScan;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js
var require_pagination2 = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/pagination/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_Interfaces2(), exports2);
    tslib_1.__exportStar(require_ListContributorInsightsPaginator(), exports2);
    tslib_1.__exportStar(require_ListExportsPaginator(), exports2);
    tslib_1.__exportStar(require_ListTablesPaginator(), exports2);
    tslib_1.__exportStar(require_QueryPaginator(), exports2);
    tslib_1.__exportStar(require_ScanPaginator(), exports2);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js
var require_sleep = __commonJS({
  \\"node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports2.sleep = sleep;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js
var require_waiter = __commonJS({
  \\"node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.checkExceptions = exports2.WaiterState = exports2.waiterServiceDefaults = void 0;
    exports2.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2[\\"ABORTED\\"] = \\"ABORTED\\";
      WaiterState2[\\"FAILURE\\"] = \\"FAILURE\\";
      WaiterState2[\\"SUCCESS\\"] = \\"SUCCESS\\";
      WaiterState2[\\"RETRY\\"] = \\"RETRY\\";
      WaiterState2[\\"TIMEOUT\\"] = \\"TIMEOUT\\";
    })(WaiterState = exports2.WaiterState || (exports2.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(\`\${JSON.stringify({
          ...result,
          reason: \\"Request was aborted\\"
        })}\`);
        abortError.name = \\"AbortError\\";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(\`\${JSON.stringify({
          ...result,
          reason: \\"Waiter has timed out\\"
        })}\`);
        timeoutError.name = \\"TimeoutError\\";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(\`\${JSON.stringify({ result })}\`);
      }
      return result;
    };
    exports2.checkExceptions = checkExceptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js
var require_poller = __commonJS({
  \\"node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2 };
        }
        currentAttempt += 1;
      }
    };
    exports2.runPolling = runPolling;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js
var require_validate2 = __commonJS({
  \\"node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(\`WaiterConfiguration.maxWaitTime must be greater than 0\`);
      } else if (options.minDelay < 1) {
        throw new Error(\`WaiterConfiguration.minDelay must be greater than 0\`);
      } else if (options.maxDelay < 1) {
        throw new Error(\`WaiterConfiguration.maxDelay must be greater than 0\`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(\`WaiterConfiguration.maxWaitTime [\${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [\${options.minDelay}] for this waiter\`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(\`WaiterConfiguration.maxDelay [\${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [\${options.minDelay}] for this waiter\`);
      }
    };
    exports2.validateWaiterOptions = validateWaiterOptions;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js
var require_utils = __commonJS({
  \\"node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_sleep(), exports2);
    tslib_1.__exportStar(require_validate2(), exports2);
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js
var require_createWaiter = __commonJS({
  \\"node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils();
    var waiter_1 = require_waiter();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports2.createWaiter = createWaiter;
  }
});

// node_modules/@aws-sdk/util-waiter/dist-cjs/index.js
var require_dist_cjs46 = __commonJS({
  \\"node_modules/@aws-sdk/util-waiter/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_createWaiter(), exports2);
    tslib_1.__exportStar(require_waiter(), exports2);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js
var require_waitForTableExists = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableExists.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.waitUntilTableExists = exports2.waitForTableExists = void 0;
    var util_waiter_1 = require_dist_cjs46();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTableCommand_1.DescribeTableCommand(input));
        reason = result;
        try {
          const returnComparator = () => {
            return result.Table.TableStatus;
          };
          if (returnComparator() === \\"ACTIVE\\") {
            return { state: util_waiter_1.WaiterState.SUCCESS, reason };
          }
        } catch (e) {
        }
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == \\"ResourceNotFoundException\\") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForTableExists = waitForTableExists;
    var waitUntilTableExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilTableExists = waitUntilTableExists;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js
var require_waitForTableNotExists = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/waitForTableNotExists.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.waitUntilTableNotExists = exports2.waitForTableNotExists = void 0;
    var util_waiter_1 = require_dist_cjs46();
    var DescribeTableCommand_1 = require_DescribeTableCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new DescribeTableCommand_1.DescribeTableCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == \\"ResourceNotFoundException\\") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForTableNotExists = waitForTableNotExists;
    var waitUntilTableNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 20, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilTableNotExists = waitUntilTableNotExists;
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js
var require_waiters = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/waiters/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_waitForTableExists(), exports2);
    tslib_1.__exportStar(require_waitForTableNotExists(), exports2);
  }
});

// node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js
var require_dist_cjs47 = __commonJS({
  \\"node_modules/@aws-sdk/client-dynamodb/dist-cjs/index.js\\"(exports2) {
    \\"use strict\\";
    Object.defineProperty(exports2, \\"__esModule\\", { value: true });
    exports2.DynamoDBServiceException = void 0;
    var tslib_1 = require_tslib();
    tslib_1.__exportStar(require_DynamoDB(), exports2);
    tslib_1.__exportStar(require_DynamoDBClient(), exports2);
    tslib_1.__exportStar(require_commands3(), exports2);
    tslib_1.__exportStar(require_models3(), exports2);
    tslib_1.__exportStar(require_pagination2(), exports2);
    tslib_1.__exportStar(require_waiters(), exports2);
    var DynamoDBServiceException_1 = require_DynamoDBServiceException();
    Object.defineProperty(exports2, \\"DynamoDBServiceException\\", { enumerable: true, get: function() {
      return DynamoDBServiceException_1.DynamoDBServiceException;
    } });
  }
});

// <stdin>
var v2 = require_dist_cjs47();
var v3 = v2.DynamoDBClient;
var v1 = v3;
var v0 = () => {
  const client = new v1({});
  return client.config.serviceId;
};
exports.handler = v0;
"
`;

exports[`instantiating the AWS SDK without esbuild 1`] = `
"const v2 = {};
const v3 = {};
v3.environment = \\"nodejs\\";
const v4 = v3.engine;
v3.engine = v4;
const v5 = v3.userAgent;
v3.userAgent = v5;
const v6 = v3.uriEscape;
v3.uriEscape = v6;
const v7 = v3.uriEscapePath;
v3.uriEscapePath = v7;
const v8 = v3.urlParse;
v3.urlParse = v8;
const v9 = v3.urlFormat;
v3.urlFormat = v9;
const v10 = v3.queryStringParse;
v3.queryStringParse = v10;
const v11 = v3.queryParamsToString;
v3.queryParamsToString = v11;
const v12 = v3.readFileSync;
v3.readFileSync = v12;
const v13 = {};
v13.encode = (function encode64(string) {
    if (typeof string === \\"number\\") {
        throw util.error(new Error(\\"Cannot base64 encode number \\" + string));
    }
    if (string === null || typeof string === \\"undefined\\") {
        return string;
    }
    var buf = util.buffer.toBuffer(string);
    return buf.toString(\\"base64\\");
});
v13.decode = (function decode64(string) {
    if (typeof string === \\"number\\") {
        throw util.error(new Error(\\"Cannot base64 decode number \\" + string));
    }
    if (string === null || typeof string === \\"undefined\\") {
        return string;
    }
    return util.buffer.toBuffer(string, \\"base64\\");
});
v3.base64 = v13;
const v14 = {};
v14.toBuffer = (function (data, encoding) {
    return (typeof util.Buffer.from === \\"function\\" && util.Buffer.from !== Uint8Array.from) ? util.Buffer.from(data, encoding) : new util.Buffer(data, encoding);
});
v14.alloc = (function (size, fill, encoding) {
    if (typeof size !== \\"number\\") {
        throw new Error(\\"size passed to alloc must be a number.\\");
    }
    if (typeof util.Buffer.alloc === \\"function\\") {
        return util.Buffer.alloc(size, fill, encoding);
    }
    else {
        var buf = new util.Buffer(size);
        if (fill !== undefined && typeof buf.fill === \\"function\\") {
            buf.fill(fill, undefined, undefined, encoding);
        }
        return buf;
    }
});
v14.toStream = (function toStream(buffer) {
    if (!util.Buffer.isBuffer(buffer))
        buffer = util.buffer.toBuffer(buffer);
    var readable = new (util.stream.Readable)();
    var pos = 0;
    readable._read = function (size) {
        if (pos >= buffer.length)
            return readable.push(null);
        var end = pos + size;
        if (end > buffer.length)
            end = buffer.length;
        readable.push(buffer.slice(pos, end));
        pos = end;
    };
    return readable;
});
v14.concat = (function (buffers) {
    var length = 0, offset = 0, buffer = null, i;
    for (i = 0; i < buffers.length; i++) {
        length += buffers[i].length;
    }
    buffer = util.buffer.alloc(length);
    for (i = 0; i < buffers.length; i++) {
        buffers[i].copy(buffer, offset);
        offset += buffers[i].length;
    }
    return buffer;
});
v3.buffer = v14;
const v15 = {};
v15.byteLength = (function byteLength(string) {
    if (string === null || string === undefined)
        return 0;
    if (typeof string === \\"string\\")
        string = util.buffer.toBuffer(string);
    if (typeof string.byteLength === \\"number\\") {
        return string.byteLength;
    }
    else if (typeof string.length === \\"number\\") {
        return string.length;
    }
    else if (typeof string.size === \\"number\\") {
        return string.size;
    }
    else if (typeof string.path === \\"string\\") {
        return require(\\"fs\\").lstatSync(string.path).size;
    }
    else {
        throw util.error(new Error(\\"Cannot determine length of \\" + string), { object: string });
    }
});
v15.upperFirst = (function upperFirst(string) {
    return string[0].toUpperCase() + string.substr(1);
});
v15.lowerFirst = (function lowerFirst(string) {
    return string[0].toLowerCase() + string.substr(1);
});
v3.string = v15;
const v16 = {};
v16.parse = (function string(ini) {
    var currentSection, map = {};
    util.arrayEach(ini.split(/\\\\r?\\\\n/), function (line) {
        line = line.split(/(^|\\\\s)[;#]/)[0].trim();
        var isSection = line[0] === \\"[\\" && line[line.length - 1] === \\"]\\";
        if (isSection) {
            currentSection = line.substring(1, line.length - 1);
            if (currentSection === \\"__proto__\\" || currentSection.split(/\\\\s/)[1] === \\"__proto__\\") {
                throw util.error(new Error(\\"Cannot load profile name '\\" + currentSection + \\"' from shared ini file.\\"));
            }
        }
        else if (currentSection) {
            var indexOfEqualsSign = line.indexOf(\\"=\\");
            var start = 0;
            var end = line.length - 1;
            var isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
            if (isAssignment) {
                var name = line.substring(0, indexOfEqualsSign).trim();
                var value = line.substring(indexOfEqualsSign + 1).trim();
                map[currentSection] = map[currentSection] || {};
                map[currentSection][name] = value;
            }
        }
    });
    return map;
});
v3.ini = v16;
const v17 = {};
v17.noop = (function () { });
v17.callback = (function (err) { if (err)
    throw err; });
v17.makeAsync = (function makeAsync(fn, expectedArgs) {
    if (expectedArgs && expectedArgs <= fn.length) {
        return fn;
    }
    return function () {
        var args = Array.prototype.slice.call(arguments, 0);
        var callback = args.pop();
        var result = fn.apply(null, args);
        callback(result);
    };
});
v3.fn = v17;
const v18 = {};
v18.getDate = (function getDate() {
    if (!AWS)
        AWS = require(\\"./core\\");
    if (AWS.config.systemClockOffset) {
        return new Date(new Date().getTime() + AWS.config.systemClockOffset);
    }
    else {
        return new Date();
    }
});
v18.iso8601 = (function iso8601(date) {
    if (date === undefined) {
        date = util.date.getDate();
    }
    return date.toISOString().replace(/\\\\.\\\\d{3}Z$/, \\"Z\\");
});
v18.rfc822 = (function rfc822(date) {
    if (date === undefined) {
        date = util.date.getDate();
    }
    return date.toUTCString();
});
v18.unixTimestamp = (function unixTimestamp(date) {
    if (date === undefined) {
        date = util.date.getDate();
    }
    return date.getTime() / 1000;
});
v18.from = (function format(date) {
    if (typeof date === \\"number\\") {
        return new Date(date * 1000);
    }
    else {
        return new Date(date);
    }
});
v18.format = (function format(date, formatter) {
    if (!formatter)
        formatter = \\"iso8601\\";
    return util.date[formatter](util.date.from(date));
});
v18.parseTimestamp = (function parseTimestamp(value) {
    if (typeof value === \\"number\\") {
        return new Date(value * 1000);
    }
    else if (value.match(/^\\\\d+$/)) {
        return new Date(value * 1000);
    }
    else if (value.match(/^\\\\d{4}/)) {
        return new Date(value);
    }
    else if (value.match(/^\\\\w{3},/)) {
        return new Date(value);
    }
    else {
        throw util.error(new Error(\\"unhandled timestamp format: \\" + value), { code: \\"TimestampParserError\\" });
    }
});
v3.date = v18;
const v19 = {};
const v20 = [];
v20.push(0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117);
v19.crc32Table = v20;
v19.crc32 = (function crc32(data) {
    var tbl = util.crypto.crc32Table;
    var crc = 0 ^ -1;
    if (typeof data === \\"string\\") {
        data = util.buffer.toBuffer(data);
    }
    for (var i = 0; i < data.length; i++) {
        var code = data.readUInt8(i);
        crc = (crc >>> 8) ^ tbl[(crc ^ code) & 255];
    }
    return (crc ^ -1) >>> 0;
});
v19.hmac = (function hmac(key, string, digest, fn) {
    if (!digest)
        digest = \\"binary\\";
    if (digest === \\"buffer\\") {
        digest = undefined;
    }
    if (!fn)
        fn = \\"sha256\\";
    if (typeof string === \\"string\\")
        string = util.buffer.toBuffer(string);
    return util.crypto.lib.createHmac(fn, key).update(string).digest(digest);
});
v19.md5 = (function md5(data, digest, callback) {
    return util.crypto.hash(\\"md5\\", data, digest, callback);
});
v19.sha256 = (function sha256(data, digest, callback) {
    return util.crypto.hash(\\"sha256\\", data, digest, callback);
});
v19.hash = (function (algorithm, data, digest, callback) {
    var hash = util.crypto.createHash(algorithm);
    if (!digest) {
        digest = \\"binary\\";
    }
    if (digest === \\"buffer\\") {
        digest = undefined;
    }
    if (typeof data === \\"string\\")
        data = util.buffer.toBuffer(data);
    var sliceFn = util.arraySliceFn(data);
    var isBuffer = util.Buffer.isBuffer(data);
    if (util.isBrowser() && typeof ArrayBuffer !== \\"undefined\\" && data && data.buffer instanceof ArrayBuffer)
        isBuffer = true;
    if (callback && typeof data === \\"object\\" && typeof data.on === \\"function\\" && !isBuffer) {
        data.on(\\"data\\", function (chunk) { hash.update(chunk); });
        data.on(\\"error\\", function (err) { callback(err); });
        data.on(\\"end\\", function () { callback(null, hash.digest(digest)); });
    }
    else if (callback && sliceFn && !isBuffer && typeof FileReader !== \\"undefined\\") {
        var index = 0, size = 1024 * 512;
        var reader = new FileReader();
        reader.onerror = function () {
            callback(new Error(\\"Failed to read data.\\"));
        };
        reader.onload = function () {
            var buf = new util.Buffer(new Uint8Array(reader.result));
            hash.update(buf);
            index += buf.length;
            reader._continueReading();
        };
        reader._continueReading = function () {
            if (index >= data.size) {
                callback(null, hash.digest(digest));
                return;
            }
            var back = index + size;
            if (back > data.size)
                back = data.size;
            reader.readAsArrayBuffer(sliceFn.call(data, index, back));
        };
        reader._continueReading();
    }
    else {
        if (util.isBrowser() && typeof data === \\"object\\" && !isBuffer) {
            data = new util.Buffer(new Uint8Array(data));
        }
        var out = hash.update(data).digest(digest);
        if (callback)
            callback(null, out);
        return out;
    }
});
v19.toHex = (function toHex(data) {
    var out = [];
    for (var i = 0; i < data.length; i++) {
        out.push((\\"0\\" + data.charCodeAt(i).toString(16)).substr(-2, 2));
    }
    return out.join(\\"\\");
});
v19.createHash = (function createHash(algorithm) {
    return util.crypto.lib.createHash(algorithm);
});
const v21 = Object.create(null);
v21.__defineGetter__ = (function __defineGetter__() { [native, code]; });
v21.__defineSetter__ = (function __defineSetter__() { [native, code]; });
v21.hasOwnProperty = (function hasOwnProperty() { [native, code]; });
v21.__lookupGetter__ = (function __lookupGetter__() { [native, code]; });
v21.__lookupSetter__ = (function __lookupSetter__() { [native, code]; });
v21.isPrototypeOf = (function isPrototypeOf() { [native, code]; });
v21.propertyIsEnumerable = (function propertyIsEnumerable() { [native, code]; });
v21.toString = (function toString() { [native, code]; });
v21.valueOf = (function valueOf() { [native, code]; });
v21.toLocaleString = (function toLocaleString() { [native, code]; });
const v22 = Object.create(v21);
v22.checkPrime = (function checkPrime(candidate, options = {}, callback) {
    if (typeof candidate === \\"bigint\\")
        candidate = unsignedBigIntToBuffer(candidate, \\"candidate\\");
    if (!isAnyArrayBuffer(candidate) && !isArrayBufferView(candidate)) {
        throw new ERR_INVALID_ARG_TYPE(\\"candidate\\", [
            \\"ArrayBuffer\\",
            \\"TypedArray\\",
            \\"Buffer\\",
            \\"DataView\\",
            \\"bigint\\",
        ], candidate);
    }
    if (typeof options === \\"function\\") {
        callback = options;
        options = {};
    }
    validateCallback(callback);
    validateObject(options, \\"options\\");
    const { checks = 0, } = options;
    validateUint32(checks, \\"options.checks\\");
    const job = new CheckPrimeJob(kCryptoJobAsync, candidate, checks);
    job.ondone = callback;
    job.run();
});
v22.checkPrimeSync = (function checkPrimeSync(candidate, options = {}) {
    if (typeof candidate === \\"bigint\\")
        candidate = unsignedBigIntToBuffer(candidate, \\"candidate\\");
    if (!isAnyArrayBuffer(candidate) && !isArrayBufferView(candidate)) {
        throw new ERR_INVALID_ARG_TYPE(\\"candidate\\", [
            \\"ArrayBuffer\\",
            \\"TypedArray\\",
            \\"Buffer\\",
            \\"DataView\\",
            \\"bigint\\",
        ], candidate);
    }
    validateObject(options, \\"options\\");
    const { checks = 0, } = options;
    validateUint32(checks, \\"options.checks\\");
    const job = new CheckPrimeJob(kCryptoJobSync, candidate, checks);
    const { 0: err, 1: result } = job.run();
    if (err)
        throw err;
    return result;
});
v22.createCipheriv = (function createCipheriv(cipher, key, iv, options) {
    return new Cipheriv(cipher, key, iv, options);
});
v22.createDecipheriv = (function createDecipheriv(cipher, key, iv, options) {
    return new Decipheriv(cipher, key, iv, options);
});
v22.createDiffieHellman = (function createDiffieHellman(sizeOrKey, keyEncoding, generator, genEncoding) {
    return new DiffieHellman(sizeOrKey, keyEncoding, generator, genEncoding);
});
v22.createDiffieHellmanGroup = (function createDiffieHellmanGroup(name) {
    return new DiffieHellmanGroup(name);
});
v22.createECDH = (function createECDH(curve) {
    return new ECDH(curve);
});
v22.createHash = (function createHash(algorithm, options) {
    return new Hash(algorithm, options);
});
v22.createHmac = (function createHmac(hmac, key, options) {
    return new Hmac(hmac, key, options);
});
v22.createPrivateKey = (function createPrivateKey(key) {
    const { format, type, data, passphrase } = prepareAsymmetricKey(key, kCreatePrivate);
    let handle;
    if (format === \\"jwk\\") {
        handle = data;
    }
    else {
        handle = new KeyObjectHandle();
        handle.init(kKeyTypePrivate, data, format, type, passphrase);
    }
    return new PrivateKeyObject(handle);
});
v22.createPublicKey = (function createPublicKey(key) {
    const { format, type, data, passphrase } = prepareAsymmetricKey(key, kCreatePublic);
    let handle;
    if (format === \\"jwk\\") {
        handle = data;
    }
    else {
        handle = new KeyObjectHandle();
        handle.init(kKeyTypePublic, data, format, type, passphrase);
    }
    return new PublicKeyObject(handle);
});
v22.createSecretKey = (function createSecretKey(key, encoding) {
    key = prepareSecretKey(key, encoding, true);
    if (key.byteLength === 0)
        throw new ERR_OUT_OF_RANGE(\\"key.byteLength\\", \\"> 0\\", key.byteLength);
    const handle = new KeyObjectHandle();
    handle.init(kKeyTypeSecret, key);
    return new SecretKeyObject(handle);
});
v22.createSign = (function createSign(algorithm, options) {
    return new Sign(algorithm, options);
});
v22.createVerify = (function createVerify(algorithm, options) {
    return new Verify(algorithm, options);
});
v22.diffieHellman = (function diffieHellman(options) {
    validateObject(options, \\"options\\");
    const { privateKey, publicKey } = options;
    if (!(privateKey instanceof KeyObject))
        throw new ERR_INVALID_ARG_VALUE(\\"options.privateKey\\", privateKey);
    if (!(publicKey instanceof KeyObject))
        throw new ERR_INVALID_ARG_VALUE(\\"options.publicKey\\", publicKey);
    if (privateKey.type !== \\"private\\")
        throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(privateKey.type, \\"private\\");
    if (publicKey.type !== \\"public\\" && publicKey.type !== \\"private\\") {
        throw new ERR_CRYPTO_INVALID_KEY_OBJECT_TYPE(publicKey.type, \\"private or public\\");
    }
    const privateType = privateKey.asymmetricKeyType;
    const publicType = publicKey.asymmetricKeyType;
    if (privateType !== publicType || !dhEnabledKeyTypes.has(privateType)) {
        throw new ERR_CRYPTO_INCOMPATIBLE_KEY(\\"key types for Diffie-Hellman\\", \`\${privateType} and \${publicType}\`);
    }
    return statelessDH(privateKey[kHandle], publicKey[kHandle]);
});
v22.generatePrime = (function generatePrime(size, options, callback) {
    validateUint32(size, \\"size\\", true);
    if (typeof options === \\"function\\") {
        callback = options;
        options = {};
    }
    validateCallback(callback);
    const job = createRandomPrimeJob(kCryptoJobAsync, size, options);
    job.ondone = (err, prime) => {
        if (err) {
            callback(err);
            return;
        }
        callback(undefined, job.result(prime));
    };
    job.run();
});
v22.generatePrimeSync = (function generatePrimeSync(size, options = {}) {
    validateUint32(size, \\"size\\", true);
    const job = createRandomPrimeJob(kCryptoJobSync, size, options);
    const { 0: err, 1: prime } = job.run();
    if (err)
        throw err;
    return job.result(prime);
});
v22.getCiphers = (() => {
    if (result === undefined)
        result = fn();
    return ArrayPrototypeSlice(result);
});
v22.getCipherInfo = (function getCipherInfo(nameOrNid, options) {
    if (typeof nameOrNid !== \\"string\\" && typeof nameOrNid !== \\"number\\") {
        throw new ERR_INVALID_ARG_TYPE(\\"nameOrNid\\", [\\"string\\", \\"number\\"], nameOrNid);
    }
    if (typeof nameOrNid === \\"number\\")
        validateInt32(nameOrNid, \\"nameOrNid\\");
    let keyLength, ivLength;
    if (options !== undefined) {
        validateObject(options, \\"options\\");
        ({ keyLength, ivLength } = options);
        if (keyLength !== undefined)
            validateInt32(keyLength, \\"options.keyLength\\");
        if (ivLength !== undefined)
            validateInt32(ivLength, \\"options.ivLength\\");
    }
    const ret = _getCipherInfo({}, nameOrNid, keyLength, ivLength);
    if (ret !== undefined) {
        if (ret.name)
            ret.name = StringPrototypeToLowerCase(ret.name);
        if (ret.type)
            ret.type = StringPrototypeToLowerCase(ret.type);
    }
    return ret;
});
v22.getCurves = (() => {
    if (result === undefined)
        result = fn();
    return ArrayPrototypeSlice(result);
});
v22.getDiffieHellman = (function createDiffieHellmanGroup(name) {
    return new DiffieHellmanGroup(name);
});
v22.getHashes = (() => {
    if (result === undefined)
        result = fn();
    return ArrayPrototypeSlice(result);
});
v22.hkdf = (function hkdf(hash, key, salt, info, length, callback) {
    ({
        hash,
        key,
        salt,
        info,
        length
    } = validateParameters(hash, key, salt, info, length));
    validateCallback(callback);
    const job = new HKDFJob(kCryptoJobAsync, hash, key, salt, info, length);
    job.ondone = (error, bits) => {
        if (error)
            return FunctionPrototypeCall(callback, job, error);
        FunctionPrototypeCall(callback, job, null, bits);
    };
    job.run();
});
v22.hkdfSync = (function hkdfSync(hash, key, salt, info, length) {
    ({
        hash,
        key,
        salt,
        info,
        length
    } = validateParameters(hash, key, salt, info, length));
    const job = new HKDFJob(kCryptoJobSync, hash, key, salt, info, length);
    const { 0: err, 1: bits } = job.run();
    if (err !== undefined)
        throw err;
    return bits;
});
v22.pbkdf2 = (function pbkdf2(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === \\"function\\") {
        callback = digest;
        digest = undefined;
    }
    ({ password, salt, iterations, keylen, digest } = check(password, salt, iterations, keylen, digest));
    validateCallback(callback);
    const job = new PBKDF2Job(kCryptoJobAsync, password, salt, iterations, keylen, digest);
    const encoding = getDefaultEncoding();
    job.ondone = (err, result) => {
        if (err !== undefined)
            return FunctionPrototypeCall(callback, job, err);
        const buf = Buffer.from(result);
        if (encoding === \\"buffer\\")
            return FunctionPrototypeCall(callback, job, null, buf);
        FunctionPrototypeCall(callback, job, null, buf.toString(encoding));
    };
    job.run();
});
v22.pbkdf2Sync = (function pbkdf2Sync(password, salt, iterations, keylen, digest) {
    ({ password, salt, iterations, keylen, digest } = check(password, salt, iterations, keylen, digest));
    const job = new PBKDF2Job(kCryptoJobSync, password, salt, iterations, keylen, digest);
    const { 0: err, 1: result } = job.run();
    if (err !== undefined)
        throw err;
    const buf = Buffer.from(result);
    const encoding = getDefaultEncoding();
    return encoding === \\"buffer\\" ? buf : buf.toString(encoding);
});
v22.generateKeyPair = (function generateKeyPair(type, options, callback) {
    if (typeof options === \\"function\\") {
        callback = options;
        options = undefined;
    }
    validateCallback(callback);
    const job = createJob(kCryptoJobAsync, type, options);
    job.ondone = (error, result) => {
        if (error)
            return FunctionPrototypeCall(callback, job, error);
        let { 0: pubkey, 1: privkey } = result;
        pubkey = wrapKey(pubkey, PublicKeyObject);
        privkey = wrapKey(privkey, PrivateKeyObject);
        FunctionPrototypeCall(callback, job, null, pubkey, privkey);
    };
    job.run();
});
v22.generateKeyPairSync = (function generateKeyPairSync(type, options) {
    return handleError(createJob(kCryptoJobSync, type, options).run());
});
v22.generateKey = (function generateKey(type, options, callback) {
    if (typeof options === \\"function\\") {
        callback = options;
        options = undefined;
    }
    validateCallback(callback);
    const job = generateKeyJob(kCryptoJobAsync, type, options);
    job.ondone = (error, key) => {
        if (error)
            return FunctionPrototypeCall(callback, job, error);
        FunctionPrototypeCall(callback, job, null, wrapKey(key, SecretKeyObject));
    };
    handleGenerateKeyError(job.run());
});
v22.generateKeySync = (function generateKeySync(type, options) {
    return handleGenerateKeyError(generateKeyJob(kCryptoJobSync, type, options).run());
});
v22.privateDecrypt = ((options, buffer) => {
    const { format, type, data, passphrase } = keyType === \\"private\\" ? preparePrivateKey(options) : preparePublicOrPrivateKey(options);
    const padding = options.padding || defaultPadding;
    const { oaepHash, encoding } = options;
    let { oaepLabel } = options;
    if (oaepHash !== undefined)
        validateString(oaepHash, \\"key.oaepHash\\");
    if (oaepLabel !== undefined)
        oaepLabel = getArrayBufferOrView(oaepLabel, \\"key.oaepLabel\\", encoding);
    buffer = getArrayBufferOrView(buffer, \\"buffer\\", encoding);
    return method(data, format, type, passphrase, buffer, padding, oaepHash, oaepLabel);
});
v22.privateEncrypt = ((options, buffer) => {
    const { format, type, data, passphrase } = keyType === \\"private\\" ? preparePrivateKey(options) : preparePublicOrPrivateKey(options);
    const padding = options.padding || defaultPadding;
    const { oaepHash, encoding } = options;
    let { oaepLabel } = options;
    if (oaepHash !== undefined)
        validateString(oaepHash, \\"key.oaepHash\\");
    if (oaepLabel !== undefined)
        oaepLabel = getArrayBufferOrView(oaepLabel, \\"key.oaepLabel\\", encoding);
    buffer = getArrayBufferOrView(buffer, \\"buffer\\", encoding);
    return method(data, format, type, passphrase, buffer, padding, oaepHash, oaepLabel);
});
v22.publicDecrypt = ((options, buffer) => {
    const { format, type, data, passphrase } = keyType === \\"private\\" ? preparePrivateKey(options) : preparePublicOrPrivateKey(options);
    const padding = options.padding || defaultPadding;
    const { oaepHash, encoding } = options;
    let { oaepLabel } = options;
    if (oaepHash !== undefined)
        validateString(oaepHash, \\"key.oaepHash\\");
    if (oaepLabel !== undefined)
        oaepLabel = getArrayBufferOrView(oaepLabel, \\"key.oaepLabel\\", encoding);
    buffer = getArrayBufferOrView(buffer, \\"buffer\\", encoding);
    return method(data, format, type, passphrase, buffer, padding, oaepHash, oaepLabel);
});
v22.publicEncrypt = ((options, buffer) => {
    const { format, type, data, passphrase } = keyType === \\"private\\" ? preparePrivateKey(options) : preparePublicOrPrivateKey(options);
    const padding = options.padding || defaultPadding;
    const { oaepHash, encoding } = options;
    let { oaepLabel } = options;
    if (oaepHash !== undefined)
        validateString(oaepHash, \\"key.oaepHash\\");
    if (oaepLabel !== undefined)
        oaepLabel = getArrayBufferOrView(oaepLabel, \\"key.oaepLabel\\", encoding);
    buffer = getArrayBufferOrView(buffer, \\"buffer\\", encoding);
    return method(data, format, type, passphrase, buffer, padding, oaepHash, oaepLabel);
});
v22.randomBytes = (function randomBytes(size, callback) {
    size = assertSize(size, 1, 0, Infinity);
    if (callback !== undefined) {
        validateCallback(callback);
    }
    const buf = new FastBuffer(size);
    if (callback === undefined) {
        randomFillSync(buf.buffer, 0, size);
        return buf;
    }
    randomFill(buf.buffer, 0, size, function (error) {
        if (error)
            return FunctionPrototypeCall(callback, this, error);
        FunctionPrototypeCall(callback, this, null, buf);
    });
});
v22.randomFill = (function randomFill(buf, offset, size, callback) {
    if (!isAnyArrayBuffer(buf) && !isArrayBufferView(buf)) {
        throw new ERR_INVALID_ARG_TYPE(\\"buf\\", [\\"ArrayBuffer\\", \\"ArrayBufferView\\"], buf);
    }
    const elementSize = buf.BYTES_PER_ELEMENT || 1;
    if (typeof offset === \\"function\\") {
        callback = offset;
        offset = 0;
        size = buf.length;
    }
    else if (typeof size === \\"function\\") {
        callback = size;
        size = buf.length - offset;
    }
    else {
        validateCallback(callback);
    }
    offset = assertOffset(offset, elementSize, buf.byteLength);
    if (size === undefined) {
        size = buf.byteLength - offset;
    }
    else {
        size = assertSize(size, elementSize, offset, buf.byteLength);
    }
    if (size === 0) {
        callback(null, buf);
        return;
    }
    const job = new RandomBytesJob(kCryptoJobAsync, buf, offset, size);
    job.ondone = FunctionPrototypeBind(onJobDone, job, buf, callback);
    job.run();
});
v22.randomFillSync = (function randomFillSync(buf, offset = 0, size) {
    if (!isAnyArrayBuffer(buf) && !isArrayBufferView(buf)) {
        throw new ERR_INVALID_ARG_TYPE(\\"buf\\", [\\"ArrayBuffer\\", \\"ArrayBufferView\\"], buf);
    }
    const elementSize = buf.BYTES_PER_ELEMENT || 1;
    offset = assertOffset(offset, elementSize, buf.byteLength);
    if (size === undefined) {
        size = buf.byteLength - offset;
    }
    else {
        size = assertSize(size, elementSize, offset, buf.byteLength);
    }
    if (size === 0)
        return buf;
    const job = new RandomBytesJob(kCryptoJobSync, buf, offset, size);
    const err = job.run()[0];
    if (err)
        throw err;
    return buf;
});
v22.randomInt = (function randomInt(min, max, callback) {
    const minNotSpecified = typeof max === \\"undefined\\" || typeof max === \\"function\\";
    if (minNotSpecified) {
        callback = max;
        max = min;
        min = 0;
    }
    const isSync = typeof callback === \\"undefined\\";
    if (!isSync) {
        validateCallback(callback);
    }
    if (!NumberIsSafeInteger(min)) {
        throw new ERR_INVALID_ARG_TYPE(\\"min\\", \\"a safe integer\\", min);
    }
    if (!NumberIsSafeInteger(max)) {
        throw new ERR_INVALID_ARG_TYPE(\\"max\\", \\"a safe integer\\", max);
    }
    if (max <= min) {
        throw new ERR_OUT_OF_RANGE(\\"max\\", \`greater than the value of \\"min\\" (\${min})\`, max);
    }
    const range = max - min;
    if (!(range <= RAND_MAX)) {
        throw new ERR_OUT_OF_RANGE(\`max\${minNotSpecified ? \\"\\" : \\" - min\\"}\`, \`<= \${RAND_MAX}\`, range);
    }
    const randLimit = RAND_MAX - (RAND_MAX % range);
    while (isSync || (randomCacheOffset < randomCache.length)) {
        if (randomCacheOffset === randomCache.length) {
            randomFillSync(randomCache);
            randomCacheOffset = 0;
        }
        const x = randomCache.readUIntBE(randomCacheOffset, 6);
        randomCacheOffset += 6;
        if (x < randLimit) {
            const n = (x % range) + min;
            if (isSync)
                return n;
            process.nextTick(callback, undefined, n);
            return;
        }
    }
    ArrayPrototypePush(asyncCachePendingTasks, { min, max, callback });
    asyncRefillRandomIntCache();
});
v22.randomUUID = (function randomUUID(options) {
    if (options !== undefined)
        validateObject(options, \\"options\\");
    const { disableEntropyCache = false, } = options || {};
    validateBoolean(disableEntropyCache, \\"options.disableEntropyCache\\");
    return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID();
});
v22.scrypt = (function scrypt(password, salt, keylen, options, callback = defaults) {
    if (callback === defaults) {
        callback = options;
        options = defaults;
    }
    options = check(password, salt, keylen, options);
    const { N, r, p, maxmem } = options;
    ({ password, salt, keylen } = options);
    validateCallback(callback);
    const job = new ScryptJob(kCryptoJobAsync, password, salt, N, r, p, maxmem, keylen);
    const encoding = getDefaultEncoding();
    job.ondone = (error, result) => {
        if (error !== undefined)
            return FunctionPrototypeCall(callback, job, error);
        const buf = Buffer.from(result);
        if (encoding === \\"buffer\\")
            return FunctionPrototypeCall(callback, job, null, buf);
        FunctionPrototypeCall(callback, job, null, buf.toString(encoding));
    };
    job.run();
});
v22.scryptSync = (function scryptSync(password, salt, keylen, options = defaults) {
    options = check(password, salt, keylen, options);
    const { N, r, p, maxmem } = options;
    ({ password, salt, keylen } = options);
    const job = new ScryptJob(kCryptoJobSync, password, salt, N, r, p, maxmem, keylen);
    const { 0: err, 1: result } = job.run();
    if (err !== undefined)
        throw err;
    const buf = Buffer.from(result);
    const encoding = getDefaultEncoding();
    return encoding === \\"buffer\\" ? buf : buf.toString(encoding);
});
v22.sign = (function signOneShot(algorithm, data, key, callback) {
    if (algorithm != null)
        validateString(algorithm, \\"algorithm\\");
    if (callback !== undefined)
        validateCallback(callback);
    data = getArrayBufferOrView(data, \\"data\\");
    if (!key)
        throw new ERR_CRYPTO_SIGN_KEY_REQUIRED();
    const rsaPadding = getPadding(key);
    const pssSaltLength = getSaltLength(key);
    const dsaSigEnc = getDSASignatureEncoding(key);
    const { data: keyData, format: keyFormat, type: keyType, passphrase: keyPassphrase } = preparePrivateKey(key);
    const job = new SignJob(callback ? kCryptoJobAsync : kCryptoJobSync, kSignJobModeSign, keyData, keyFormat, keyType, keyPassphrase, data, algorithm, pssSaltLength, rsaPadding, dsaSigEnc);
    if (!callback) {
        const { 0: err, 1: signature } = job.run();
        if (err !== undefined)
            throw err;
        return Buffer.from(signature);
    }
    job.ondone = (error, signature) => {
        if (error)
            return FunctionPrototypeCall(callback, job, error);
        FunctionPrototypeCall(callback, job, null, Buffer.from(signature));
    };
    job.run();
});
v22.setEngine = (function setEngine(id, flags) {
    validateString(id, \\"id\\");
    if (flags)
        validateNumber(flags, \\"flags\\");
    flags = flags >>> 0;
    if (flags === 0)
        flags = ENGINE_METHOD_ALL;
    if (!_setEngine(id, flags))
        throw new ERR_CRYPTO_ENGINE_UNKNOWN(id);
});
v22.timingSafeEqual = (function timingSafeEqual() { [native, code]; });
v22.getFips = (function getFipsCrypto() { [native, code]; });
v22.setFips = (function setFipsCrypto() { [native, code]; });
v22.verify = (function verifyOneShot(algorithm, data, key, signature, callback) {
    if (algorithm != null)
        validateString(algorithm, \\"algorithm\\");
    if (callback !== undefined)
        validateCallback(callback);
    data = getArrayBufferOrView(data, \\"data\\");
    if (!isArrayBufferView(data)) {
        throw new ERR_INVALID_ARG_TYPE(\\"data\\", [\\"Buffer\\", \\"TypedArray\\", \\"DataView\\"], data);
    }
    const rsaPadding = getPadding(key);
    const pssSaltLength = getSaltLength(key);
    const dsaSigEnc = getDSASignatureEncoding(key);
    if (!isArrayBufferView(signature)) {
        throw new ERR_INVALID_ARG_TYPE(\\"signature\\", [\\"Buffer\\", \\"TypedArray\\", \\"DataView\\"], signature);
    }
    const { data: keyData, format: keyFormat, type: keyType, passphrase: keyPassphrase } = preparePublicOrPrivateKey(key);
    const job = new SignJob(callback ? kCryptoJobAsync : kCryptoJobSync, kSignJobModeVerify, keyData, keyFormat, keyType, keyPassphrase, data, algorithm, pssSaltLength, rsaPadding, dsaSigEnc, signature);
    if (!callback) {
        const { 0: err, 1: result } = job.run();
        if (err !== undefined)
            throw err;
        return result;
    }
    job.ondone = (error, result) => {
        if (error)
            return FunctionPrototypeCall(callback, job, error);
        FunctionPrototypeCall(callback, job, null, result);
    };
    job.run();
});
v22.Certificate = (function Certificate() {
    if (!(this instanceof Certificate))
        return new Certificate();
});
v22.Cipher = (function Cipher(cipher, password, options) {
    if (!(this instanceof Cipher))
        return new Cipher(cipher, password, options);
    ReflectApply(createCipher, this, [cipher, password, options, true]);
});
v22.Cipheriv = (function Cipheriv(cipher, key, iv, options) {
    if (!(this instanceof Cipheriv))
        return new Cipheriv(cipher, key, iv, options);
    ReflectApply(createCipherWithIV, this, [cipher, key, options, true, iv]);
});
v22.Decipher = (function Decipher(cipher, password, options) {
    if (!(this instanceof Decipher))
        return new Decipher(cipher, password, options);
    ReflectApply(createCipher, this, [cipher, password, options, false]);
});
v22.Decipheriv = (function Decipheriv(cipher, key, iv, options) {
    if (!(this instanceof Decipheriv))
        return new Decipheriv(cipher, key, iv, options);
    ReflectApply(createCipherWithIV, this, [cipher, key, options, false, iv]);
});
v22.DiffieHellman = (function DiffieHellman(sizeOrKey, keyEncoding, generator, genEncoding) {
    if (!(this instanceof DiffieHellman))
        return new DiffieHellman(sizeOrKey, keyEncoding, generator, genEncoding);
    if (typeof sizeOrKey !== \\"number\\" && typeof sizeOrKey !== \\"string\\" && !isArrayBufferView(sizeOrKey) && !isAnyArrayBuffer(sizeOrKey)) {
        throw new ERR_INVALID_ARG_TYPE(\\"sizeOrKey\\", [\\"number\\", \\"string\\", \\"ArrayBuffer\\", \\"Buffer\\", \\"TypedArray\\", \\"DataView\\"], sizeOrKey);
    }
    if (typeof sizeOrKey === \\"number\\")
        validateInt32(sizeOrKey, \\"sizeOrKey\\");
    if (keyEncoding && !Buffer.isEncoding(keyEncoding) && keyEncoding !== \\"buffer\\") {
        genEncoding = generator;
        generator = keyEncoding;
        keyEncoding = false;
    }
    const encoding = getDefaultEncoding();
    keyEncoding = keyEncoding || encoding;
    genEncoding = genEncoding || encoding;
    if (typeof sizeOrKey !== \\"number\\")
        sizeOrKey = toBuf(sizeOrKey, keyEncoding);
    if (!generator) {
        generator = DH_GENERATOR;
    }
    else if (typeof generator === \\"number\\") {
        validateInt32(generator, \\"generator\\");
    }
    else if (typeof generator === \\"string\\") {
        generator = toBuf(generator, genEncoding);
    }
    else if (!isArrayBufferView(generator) && !isAnyArrayBuffer(generator)) {
        throw new ERR_INVALID_ARG_TYPE(\\"generator\\", [\\"number\\", \\"string\\", \\"ArrayBuffer\\", \\"Buffer\\", \\"TypedArray\\", \\"DataView\\"], generator);
    }
    this[kHandle] = new _DiffieHellman(sizeOrKey, generator);
    ObjectDefineProperty(this, \\"verifyError\\", {
        enumerable: true,
        value: this[kHandle].verifyError,
        writable: false
    });
});
v22.DiffieHellmanGroup = (function DiffieHellmanGroup(name) {
    if (!(this instanceof DiffieHellmanGroup))
        return new DiffieHellmanGroup(name);
    this[kHandle] = new _DiffieHellmanGroup(name);
    ObjectDefineProperty(this, \\"verifyError\\", {
        enumerable: true,
        value: this[kHandle].verifyError,
        writable: false
    });
});
v22.ECDH = (function ECDH(curve) {
    if (!(this instanceof ECDH))
        return new ECDH(curve);
    validateString(curve, \\"curve\\");
    this[kHandle] = new _ECDH(curve);
});
v22.Hash = (function Hash(algorithm, options) {
    if (!(this instanceof Hash))
        return new Hash(algorithm, options);
    if (!(algorithm instanceof _Hash))
        validateString(algorithm, \\"algorithm\\");
    const xofLen = typeof options === \\"object\\" && options !== null ? options.outputLength : undefined;
    if (xofLen !== undefined)
        validateUint32(xofLen, \\"options.outputLength\\");
    this[kHandle] = new _Hash(algorithm, xofLen);
    this[kState] = {
        [kFinalized]: false
    };
    ReflectApply(LazyTransform, this, [options]);
});
v22.Hmac = (function Hmac(hmac, key, options) {
    if (!(this instanceof Hmac))
        return new Hmac(hmac, key, options);
    validateString(hmac, \\"hmac\\");
    const encoding = getStringOption(options, \\"encoding\\");
    key = prepareSecretKey(key, encoding);
    this[kHandle] = new _Hmac();
    this[kHandle].init(hmac, key);
    this[kState] = {
        [kFinalized]: false
    };
    ReflectApply(LazyTransform, this, [options]);
});
v22.KeyObject = (class KeyObject extends NativeKeyObject {
    constructor(type, handle) {
        if (type !== \\"secret\\" && type !== \\"public\\" && type !== \\"private\\")
            throw new ERR_INVALID_ARG_VALUE(\\"type\\", type);
        if (typeof handle !== \\"object\\" || !(handle instanceof KeyObjectHandle))
            throw new ERR_INVALID_ARG_TYPE(\\"handle\\", \\"object\\", handle);
        super(handle);
        this[kKeyType] = type;
        ObjectDefineProperty(this, kHandle, {
            value: handle,
            enumerable: false,
            configurable: false,
            writable: false
        });
    }
    get type() {
        return this[kKeyType];
    }
    static from(key) {
        if (!isCryptoKey(key))
            throw new ERR_INVALID_ARG_TYPE(\\"key\\", \\"CryptoKey\\", key);
        return key[kKeyObject];
    }
});
v22.Sign = (function Sign(algorithm, options) {
    if (!(this instanceof Sign))
        return new Sign(algorithm, options);
    validateString(algorithm, \\"algorithm\\");
    this[kHandle] = new _Sign();
    this[kHandle].init(algorithm);
    ReflectApply(Writable, this, [options]);
});
v22.Verify = (function Verify(algorithm, options) {
    if (!(this instanceof Verify))
        return new Verify(algorithm, options);
    validateString(algorithm, \\"algorithm\\");
    this[kHandle] = new _Verify();
    this[kHandle].init(algorithm);
    ReflectApply(Writable, this, [options]);
});
v22.X509Certificate = (class X509Certificate extends JSTransferable {
    [kInternalState] = new SafeMap();
    constructor(buffer) {
        if (typeof buffer === \\"string\\")
            buffer = Buffer.from(buffer);
        if (!isArrayBufferView(buffer)) {
            throw new ERR_INVALID_ARG_TYPE(\\"buffer\\", [\\"string\\", \\"Buffer\\", \\"TypedArray\\", \\"DataView\\"], buffer);
        }
        super();
        this[kHandle] = parseX509(buffer);
    }
    [kInspect](depth, options) {
        if (depth < 0)
            return this;
        const opts = {
            ...options,
            depth: options.depth == null ? null : options.depth - 1
        };
        return \`X509Certificate \${inspect({
            subject: this.subject,
            subjectAltName: this.subjectAltName,
            issuer: this.issuer,
            infoAccess: this.infoAccess,
            validFrom: this.validFrom,
            validTo: this.validTo,
            fingerprint: this.fingerprint,
            fingerprint256: this.fingerprint256,
            fingerprint512: this.fingerprint512,
            keyUsage: this.keyUsage,
            serialNumber: this.serialNumber
        }, opts)}\`;
    }
    [kClone]() {
        const handle = this[kHandle];
        return {
            data: { handle },
            deserializeInfo: \\"internal/crypto/x509:InternalX509Certificate\\"
        };
    }
    [kDeserialize]({ handle }) {
        this[kHandle] = handle;
    }
    get subject() {
        let value = this[kInternalState].get(\\"subject\\");
        if (value === undefined) {
            value = this[kHandle].subject();
            this[kInternalState].set(\\"subject\\", value);
        }
        return value;
    }
    get subjectAltName() {
        let value = this[kInternalState].get(\\"subjectAltName\\");
        if (value === undefined) {
            value = this[kHandle].subjectAltName();
            this[kInternalState].set(\\"subjectAltName\\", value);
        }
        return value;
    }
    get issuer() {
        let value = this[kInternalState].get(\\"issuer\\");
        if (value === undefined) {
            value = this[kHandle].issuer();
            this[kInternalState].set(\\"issuer\\", value);
        }
        return value;
    }
    get issuerCertificate() {
        let value = this[kInternalState].get(\\"issuerCertificate\\");
        if (value === undefined) {
            const cert = this[kHandle].getIssuerCert();
            if (cert)
                value = new InternalX509Certificate(this[kHandle].getIssuerCert());
            this[kInternalState].set(\\"issuerCertificate\\", value);
        }
        return value;
    }
    get infoAccess() {
        let value = this[kInternalState].get(\\"infoAccess\\");
        if (value === undefined) {
            value = this[kHandle].infoAccess();
            this[kInternalState].set(\\"infoAccess\\", value);
        }
        return value;
    }
    get validFrom() {
        let value = this[kInternalState].get(\\"validFrom\\");
        if (value === undefined) {
            value = this[kHandle].validFrom();
            this[kInternalState].set(\\"validFrom\\", value);
        }
        return value;
    }
    get validTo() {
        let value = this[kInternalState].get(\\"validTo\\");
        if (value === undefined) {
            value = this[kHandle].validTo();
            this[kInternalState].set(\\"validTo\\", value);
        }
        return value;
    }
    get fingerprint() {
        let value = this[kInternalState].get(\\"fingerprint\\");
        if (value === undefined) {
            value = this[kHandle].fingerprint();
            this[kInternalState].set(\\"fingerprint\\", value);
        }
        return value;
    }
    get fingerprint256() {
        let value = this[kInternalState].get(\\"fingerprint256\\");
        if (value === undefined) {
            value = this[kHandle].fingerprint256();
            this[kInternalState].set(\\"fingerprint256\\", value);
        }
        return value;
    }
    get fingerprint512() {
        let value = this[kInternalState].get(\\"fingerprint512\\");
        if (value === undefined) {
            value = this[kHandle].fingerprint512();
            this[kInternalState].set(\\"fingerprint512\\", value);
        }
        return value;
    }
    get keyUsage() {
        let value = this[kInternalState].get(\\"keyUsage\\");
        if (value === undefined) {
            value = this[kHandle].keyUsage();
            this[kInternalState].set(\\"keyUsage\\", value);
        }
        return value;
    }
    get serialNumber() {
        let value = this[kInternalState].get(\\"serialNumber\\");
        if (value === undefined) {
            value = this[kHandle].serialNumber();
            this[kInternalState].set(\\"serialNumber\\", value);
        }
        return value;
    }
    get raw() {
        let value = this[kInternalState].get(\\"raw\\");
        if (value === undefined) {
            value = this[kHandle].raw();
            this[kInternalState].set(\\"raw\\", value);
        }
        return value;
    }
    get publicKey() {
        let value = this[kInternalState].get(\\"publicKey\\");
        if (value === undefined) {
            value = new PublicKeyObject(this[kHandle].publicKey());
            this[kInternalState].set(\\"publicKey\\", value);
        }
        return value;
    }
    toString() {
        let value = this[kInternalState].get(\\"pem\\");
        if (value === undefined) {
            value = this[kHandle].pem();
            this[kInternalState].set(\\"pem\\", value);
        }
        return value;
    }
    toJSON() { return this.toString(); }
    get ca() {
        let value = this[kInternalState].get(\\"ca\\");
        if (value === undefined) {
            value = this[kHandle].checkCA();
            this[kInternalState].set(\\"ca\\", value);
        }
        return value;
    }
    checkHost(name, options) {
        validateString(name, \\"name\\");
        return this[kHandle].checkHost(name, getFlags(options));
    }
    checkEmail(email, options) {
        validateString(email, \\"email\\");
        return this[kHandle].checkEmail(email, getFlags(options));
    }
    checkIP(ip, options) {
        validateString(ip, \\"ip\\");
        return this[kHandle].checkIP(ip, getFlags(options));
    }
    checkIssued(otherCert) {
        if (!isX509Certificate(otherCert))
            throw new ERR_INVALID_ARG_TYPE(\\"otherCert\\", \\"X509Certificate\\", otherCert);
        return this[kHandle].checkIssued(otherCert[kHandle]);
    }
    checkPrivateKey(pkey) {
        if (!isKeyObject(pkey))
            throw new ERR_INVALID_ARG_TYPE(\\"pkey\\", \\"KeyObject\\", pkey);
        if (pkey.type !== \\"private\\")
            throw new ERR_INVALID_ARG_VALUE(\\"pkey\\", pkey);
        return this[kHandle].checkPrivateKey(pkey[kHandle]);
    }
    verify(pkey) {
        if (!isKeyObject(pkey))
            throw new ERR_INVALID_ARG_TYPE(\\"pkey\\", \\"KeyObject\\", pkey);
        if (pkey.type !== \\"public\\")
            throw new ERR_INVALID_ARG_VALUE(\\"pkey\\", pkey);
        return this[kHandle].verify(pkey[kHandle]);
    }
    toLegacyObject() {
        return this[kHandle].toLegacy();
    }
});
v22.secureHeapUsed = (function secureHeapUsed() {
    const val = _secureHeapUsed();
    if (val === undefined)
        return { total: 0, used: 0, utilization: 0, min: 0 };
    const used = Number(_secureHeapUsed());
    const total = Number(getOptionValue(\\"--secure-heap\\"));
    const min = Number(getOptionValue(\\"--secure-heap-min\\"));
    const utilization = used / total;
    return { total, used, utilization, min };
});
v22.prng = (function randomBytes(size, callback) {
    size = assertSize(size, 1, 0, Infinity);
    if (callback !== undefined) {
        validateCallback(callback);
    }
    const buf = new FastBuffer(size);
    if (callback === undefined) {
        randomFillSync(buf.buffer, 0, size);
        return buf;
    }
    randomFill(buf.buffer, 0, size, function (error) {
        if (error)
            return FunctionPrototypeCall(callback, this, error);
        FunctionPrototypeCall(callback, this, null, buf);
    });
});
v22.pseudoRandomBytes = (function randomBytes(size, callback) {
    size = assertSize(size, 1, 0, Infinity);
    if (callback !== undefined) {
        validateCallback(callback);
    }
    const buf = new FastBuffer(size);
    if (callback === undefined) {
        randomFillSync(buf.buffer, 0, size);
        return buf;
    }
    randomFill(buf.buffer, 0, size, function (error) {
        if (error)
            return FunctionPrototypeCall(callback, this, error);
        FunctionPrototypeCall(callback, this, null, buf);
    });
});
v22.rng = (function randomBytes(size, callback) {
    size = assertSize(size, 1, 0, Infinity);
    if (callback !== undefined) {
        validateCallback(callback);
    }
    const buf = new FastBuffer(size);
    if (callback === undefined) {
        randomFillSync(buf.buffer, 0, size);
        return buf;
    }
    randomFill(buf.buffer, 0, size, function (error) {
        if (error)
            return FunctionPrototypeCall(callback, this, error);
        FunctionPrototypeCall(callback, this, null, buf);
    });
});
v19.lib = v22;
v3.crypto = v19;
const v23 = {};
v3.abort = v23;
const v24 = v3.each;
v3.each = v24;
const v25 = v3.arrayEach;
v3.arrayEach = v25;
const v26 = v3.update;
v3.update = v26;
const v27 = v3.merge;
v3.merge = v27;
const v28 = v3.copy;
v3.copy = v28;
const v29 = v3.isEmpty;
v3.isEmpty = v29;
const v30 = v3.arraySliceFn;
v3.arraySliceFn = v30;
const v31 = v3.isType;
v3.isType = v31;
const v32 = v3.typeName;
v3.typeName = v32;
const v33 = v3.error;
v3.error = v33;
const v34 = v3.inherit;
v3.inherit = v34;
const v35 = v3.mixin;
v3.mixin = v35;
const v36 = v3.hideProperties;
v3.hideProperties = v36;
const v37 = v3.property;
v3.property = v37;
const v38 = v3.memoizedProperty;
v3.memoizedProperty = v38;
const v39 = v3.hoistPayloadMember;
v3.hoistPayloadMember = v39;
const v40 = v3.computeSha256;
v3.computeSha256 = v40;
const v41 = v3.isClockSkewed;
v3.isClockSkewed = v41;
const v42 = v3.applyClockOffset;
v3.applyClockOffset = v42;
const v43 = v3.extractRequestId;
v3.extractRequestId = v43;
const v44 = v3.addPromises;
v3.addPromises = v44;
const v45 = v3.promisifyMethod;
v3.promisifyMethod = v45;
const v46 = v3.isDualstackAvailable;
v3.isDualstackAvailable = v46;
const v47 = v3.calculateRetryDelay;
v3.calculateRetryDelay = v47;
const v48 = v3.handleRequestWithRetries;
v3.handleRequestWithRetries = v48;
const v49 = {};
v49.v4 = (function uuidV4() {
    return require(\\"uuid\\").v4();
});
v3.uuid = v49;
const v50 = v3.convertPayloadToString;
v3.convertPayloadToString = v50;
const v51 = v3.defer;
v3.defer = v51;
const v52 = v3.getRequestPayloadShape;
v3.getRequestPayloadShape = v52;
const v53 = v3.getProfilesFromSharedConfig;
v3.getProfilesFromSharedConfig = v53;
const v54 = {};
v54.validate = (function validateARN(str) {
    return str && str.indexOf(\\"arn:\\") === 0 && str.split(\\":\\").length >= 6;
});
v54.parse = (function parseARN(arn) {
    var matched = arn.split(\\":\\");
    return {
        partition: matched[1],
        service: matched[2],
        region: matched[3],
        accountId: matched[4],
        resource: matched.slice(5).join(\\":\\")
    };
});
v54.build = (function buildARN(arnObject) {
    if (arnObject.service === undefined || arnObject.region === undefined || arnObject.accountId === undefined || arnObject.resource === undefined)
        throw util.error(new Error(\\"Input ARN object is invalid\\"));
    return \\"arn:\\" + (arnObject.partition || \\"aws\\") + \\":\\" + arnObject.service + \\":\\" + arnObject.region + \\":\\" + arnObject.accountId + \\":\\" + arnObject.resource;
});
v3.ARN = v54;
v3.defaultProfile = \\"default\\";
v3.configOptInEnv = \\"AWS_SDK_LOAD_CONFIG\\";
v3.sharedCredentialsFileEnv = \\"AWS_SHARED_CREDENTIALS_FILE\\";
v3.sharedConfigFileEnv = \\"AWS_CONFIG_FILE\\";
v3.imdsDisabledEnv = \\"AWS_EC2_METADATA_DISABLED\\";
const v55 = v3.isBrowser;
v3.isBrowser = v55;
const v56 = v3.isNode;
v3.isNode = v56;
const v57 = v3.Buffer;
v3.Buffer = v57;
const v58 = Object.create(v21);
const v59 = [];
v59.push();
v58._stack = v59;
v58.Domain = (class Domain extends EventEmitter {
    constructor() {
        super();
        this.members = [];
        this[kWeak] = new WeakReference(this);
        asyncHook.enable();
        this.on(\\"removeListener\\", updateExceptionCapture);
        this.on(\\"newListener\\", updateExceptionCapture);
    }
});
v58.createDomain = (function createDomain() {
    return new Domain();
});
v58.create = (function createDomain() {
    return new Domain();
});
v58.active = null;
v3.domain = v58;
const v60 = v3.stream;
v3.stream = v60;
const v61 = Object.create(v21);
v61.Url = (function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
});
v61.parse = (function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url instanceof Url)
        return url;
    const urlObject = new Url();
    urlObject.parse(url, parseQueryString, slashesDenoteHost);
    return urlObject;
});
v61.resolve = (function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
});
v61.resolveObject = (function urlResolveObject(source, relative) {
    if (!source)
        return relative;
    return urlParse(source, false, true).resolveObject(relative);
});
v61.format = (function urlFormat(urlObject, options) {
    if (typeof urlObject === \\"string\\") {
        urlObject = urlParse(urlObject);
    }
    else if (typeof urlObject !== \\"object\\" || urlObject === null) {
        throw new ERR_INVALID_ARG_TYPE(\\"urlObject\\", [\\"Object\\", \\"string\\"], urlObject);
    }
    else if (!(urlObject instanceof Url)) {
        const format = urlObject[formatSymbol];
        return format ? format.call(urlObject, options) : Url.prototype.format.call(urlObject);
    }
    return urlObject.format();
});
v61.URL = (class URL {
    constructor(input, base = undefined) {
        input = \`\${input}\`;
        let base_context;
        if (base !== undefined) {
            base_context = new URL(base)[context];
        }
        this[context] = new URLContext();
        parse(input, -1, base_context, undefined, FunctionPrototypeBind(onParseComplete, this), onParseError);
    }
    get [special]() {
        return (this[context].flags & URL_FLAGS_SPECIAL) !== 0;
    }
    get [cannotBeBase]() {
        return (this[context].flags & URL_FLAGS_CANNOT_BE_BASE) !== 0;
    }
    get [cannotHaveUsernamePasswordPort]() {
        const { host, scheme } = this[context];
        return ((host == null || host === \\"\\") || this[cannotBeBase] || scheme === \\"file:\\");
    }
    [inspect.custom](depth, opts) {
        if (this == null || ObjectGetPrototypeOf(this[context]) !== URLContext.prototype) {
            throw new ERR_INVALID_THIS(\\"URL\\");
        }
        if (typeof depth === \\"number\\" && depth < 0)
            return this;
        const constructor = getConstructorOf(this) || URL;
        const obj = ObjectCreate({ constructor });
        obj.href = this.href;
        obj.origin = this.origin;
        obj.protocol = this.protocol;
        obj.username = this.username;
        obj.password = this.password;
        obj.host = this.host;
        obj.hostname = this.hostname;
        obj.port = this.port;
        obj.pathname = this.pathname;
        obj.search = this.search;
        obj.searchParams = this.searchParams;
        obj.hash = this.hash;
        if (opts.showHidden) {
            obj.cannotBeBase = this[cannotBeBase];
            obj.special = this[special];
            obj[context] = this[context];
        }
        return \`\${constructor.name} \${inspect(obj, opts)}\`;
    }
    [kFormat](options) {
        if (options)
            validateObject(options, \\"options\\");
        options = {
            fragment: true,
            unicode: false,
            search: true,
            auth: true,
            ...options
        };
        const ctx = this[context];
        let ret = ctx.scheme;
        if (ctx.host !== null) {
            ret += \\"//\\";
            const has_username = ctx.username !== \\"\\";
            const has_password = ctx.password !== \\"\\";
            if (options.auth && (has_username || has_password)) {
                if (has_username)
                    ret += ctx.username;
                if (has_password)
                    ret += \`:\${ctx.password}\`;
                ret += \\"@\\";
            }
            ret += options.unicode ? domainToUnicode(ctx.host) : ctx.host;
            if (ctx.port !== null)
                ret += \`:\${ctx.port}\`;
        }
        if (this[cannotBeBase]) {
            ret += ctx.path[0];
        }
        else {
            if (ctx.host === null && ctx.path.length > 1 && ctx.path[0] === \\"\\") {
                ret += \\"/.\\";
            }
            if (ctx.path.length) {
                ret += \\"/\\" + ArrayPrototypeJoin(ctx.path, \\"/\\");
            }
        }
        if (options.search && ctx.query !== null)
            ret += \`?\${ctx.query}\`;
        if (options.fragment && ctx.fragment !== null)
            ret += \`#\${ctx.fragment}\`;
        return ret;
    }
    toString() {
        return this[kFormat]({});
    }
    get href() {
        return this[kFormat]({});
    }
    set href(input) {
        input = \`\${input}\`;
        parse(input, -1, undefined, undefined, FunctionPrototypeBind(onParseComplete, this), onParseError);
    }
    get origin() {
        const ctx = this[context];
        switch (ctx.scheme) {
            case \\"blob:\\":
                if (ctx.path.length > 0) {
                    try {
                        return (new URL(ctx.path[0])).origin;
                    }
                    catch {
                    }
                }
                return kOpaqueOrigin;
            case \\"ftp:\\":
            case \\"http:\\":
            case \\"https:\\":
            case \\"ws:\\":
            case \\"wss:\\": return serializeTupleOrigin(ctx.scheme, ctx.host, ctx.port);
        }
        return kOpaqueOrigin;
    }
    get protocol() {
        return this[context].scheme;
    }
    set protocol(scheme) {
        scheme = \`\${scheme}\`;
        if (scheme.length === 0)
            return;
        const ctx = this[context];
        parse(scheme, kSchemeStart, null, ctx, FunctionPrototypeBind(onParseProtocolComplete, this));
    }
    get username() {
        return this[context].username;
    }
    set username(username) {
        username = \`\${username}\`;
        if (this[cannotHaveUsernamePasswordPort])
            return;
        const ctx = this[context];
        if (username === \\"\\") {
            ctx.username = \\"\\";
            ctx.flags &= ~URL_FLAGS_HAS_USERNAME;
            return;
        }
        ctx.username = encodeAuth(username);
        ctx.flags |= URL_FLAGS_HAS_USERNAME;
    }
    get password() {
        return this[context].password;
    }
    set password(password) {
        password = \`\${password}\`;
        if (this[cannotHaveUsernamePasswordPort])
            return;
        const ctx = this[context];
        if (password === \\"\\") {
            ctx.password = \\"\\";
            ctx.flags &= ~URL_FLAGS_HAS_PASSWORD;
            return;
        }
        ctx.password = encodeAuth(password);
        ctx.flags |= URL_FLAGS_HAS_PASSWORD;
    }
    get host() {
        const ctx = this[context];
        let ret = ctx.host || \\"\\";
        if (ctx.port !== null)
            ret += \`:\${ctx.port}\`;
        return ret;
    }
    set host(host) {
        const ctx = this[context];
        host = \`\${host}\`;
        if (this[cannotBeBase]) {
            return;
        }
        parse(host, kHost, null, ctx, FunctionPrototypeBind(onParseHostComplete, this));
    }
    get hostname() {
        return this[context].host || \\"\\";
    }
    set hostname(host) {
        const ctx = this[context];
        host = \`\${host}\`;
        if (this[cannotBeBase]) {
            return;
        }
        parse(host, kHostname, null, ctx, onParseHostnameComplete.bind(this));
    }
    get port() {
        const port = this[context].port;
        return port === null ? \\"\\" : String(port);
    }
    set port(port) {
        port = \`\${port}\`;
        if (this[cannotHaveUsernamePasswordPort])
            return;
        const ctx = this[context];
        if (port === \\"\\") {
            ctx.port = null;
            return;
        }
        parse(port, kPort, null, ctx, FunctionPrototypeBind(onParsePortComplete, this));
    }
    get pathname() {
        const ctx = this[context];
        if (this[cannotBeBase])
            return ctx.path[0];
        if (ctx.path.length === 0)
            return \\"\\";
        return \`/\${ArrayPrototypeJoin(ctx.path, \\"/\\")}\`;
    }
    set pathname(path) {
        path = \`\${path}\`;
        if (this[cannotBeBase])
            return;
        parse(path, kPathStart, null, this[context], onParsePathComplete.bind(this));
    }
    get search() {
        const { query } = this[context];
        if (query === null || query === \\"\\")
            return \\"\\";
        return \`?\${query}\`;
    }
    set search(search) {
        const ctx = this[context];
        search = toUSVString(search);
        if (search === \\"\\") {
            ctx.query = null;
            ctx.flags &= ~URL_FLAGS_HAS_QUERY;
        }
        else {
            if (search[0] === \\"?\\")
                search = StringPrototypeSlice(search, 1);
            ctx.query = \\"\\";
            ctx.flags |= URL_FLAGS_HAS_QUERY;
            if (search) {
                parse(search, kQuery, null, ctx, FunctionPrototypeBind(onParseSearchComplete, this));
            }
        }
        initSearchParams(this[searchParams], search);
    }
    get searchParams() {
        return this[searchParams];
    }
    get hash() {
        const { fragment } = this[context];
        if (fragment === null || fragment === \\"\\")
            return \\"\\";
        return \`#\${fragment}\`;
    }
    set hash(hash) {
        const ctx = this[context];
        hash = \`\${hash}\`;
        if (!hash) {
            ctx.fragment = null;
            ctx.flags &= ~URL_FLAGS_HAS_FRAGMENT;
            return;
        }
        if (hash[0] === \\"#\\")
            hash = StringPrototypeSlice(hash, 1);
        ctx.fragment = \\"\\";
        ctx.flags |= URL_FLAGS_HAS_FRAGMENT;
        parse(hash, kFragment, null, ctx, FunctionPrototypeBind(onParseHashComplete, this));
    }
    toJSON() {
        return this[kFormat]({});
    }
    static createObjectURL(obj) {
        const cryptoRandom = lazyCryptoRandom();
        if (cryptoRandom === undefined)
            throw new ERR_NO_CRYPTO();
        const blob = lazyBlob();
        if (!blob.isBlob(obj))
            throw new ERR_INVALID_ARG_TYPE(\\"obj\\", \\"Blob\\", obj);
        const id = cryptoRandom.randomUUID();
        storeDataObject(id, obj[blob.kHandle], obj.size, obj.type);
        return \`blob:nodedata:\${id}\`;
    }
    static revokeObjectURL(url) {
        url = \`\${url}\`;
        try {
            const parsed = new URL(url);
            const split = StringPrototypeSplit(parsed.pathname, \\":\\");
            if (split.length === 2)
                revokeDataObject(split[1]);
        }
        catch {
        }
    }
});
v61.URLSearchParams = (class URLSearchParams {
    constructor(init = undefined) {
        if (init === null || init === undefined) {
            this[searchParams] = [];
        }
        else if (typeof init === \\"object\\" || typeof init === \\"function\\") {
            const method = init[SymbolIterator];
            if (method === this[SymbolIterator]) {
                const childParams = init[searchParams];
                this[searchParams] = childParams.slice();
            }
            else if (method !== null && method !== undefined) {
                if (typeof method !== \\"function\\") {
                    throw new ERR_ARG_NOT_ITERABLE(\\"Query pairs\\");
                }
                const pairs = [];
                for (const pair of init) {
                    if ((typeof pair !== \\"object\\" && typeof pair !== \\"function\\") || pair === null || typeof pair[SymbolIterator] !== \\"function\\") {
                        throw new ERR_INVALID_TUPLE(\\"Each query pair\\", \\"[name, value]\\");
                    }
                    const convertedPair = [];
                    for (const element of pair)
                        ArrayPrototypePush(convertedPair, toUSVString(element));
                    ArrayPrototypePush(pairs, convertedPair);
                }
                this[searchParams] = [];
                for (const pair of pairs) {
                    if (pair.length !== 2) {
                        throw new ERR_INVALID_TUPLE(\\"Each query pair\\", \\"[name, value]\\");
                    }
                    ArrayPrototypePush(this[searchParams], pair[0], pair[1]);
                }
            }
            else {
                this[searchParams] = [];
                const keys = ReflectOwnKeys(init);
                for (let i = 0; i < keys.length; i++) {
                    const key = keys[i];
                    const desc = ReflectGetOwnPropertyDescriptor(init, key);
                    if (desc !== undefined && desc.enumerable) {
                        const typedKey = toUSVString(key);
                        const typedValue = toUSVString(init[key]);
                        this[searchParams].push(typedKey, typedValue);
                    }
                }
            }
        }
        else {
            init = toUSVString(init);
            if (init[0] === \\"?\\")
                init = init.slice(1);
            initSearchParams(this, init);
        }
        this[context] = null;
    }
    [inspect.custom](recurseTimes, ctx) {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        if (typeof recurseTimes === \\"number\\" && recurseTimes < 0)
            return ctx.stylize(\\"[Object]\\", \\"special\\");
        const separator = \\", \\";
        const innerOpts = { ...ctx };
        if (recurseTimes !== null) {
            innerOpts.depth = recurseTimes - 1;
        }
        const innerInspect = (v) => inspect(v, innerOpts);
        const list = this[searchParams];
        const output = [];
        for (let i = 0; i < list.length; i += 2)
            ArrayPrototypePush(output, \`\${innerInspect(list[i])} => \${innerInspect(list[i + 1])}\`);
        const length = ArrayPrototypeReduce(output, (prev, cur) => prev + removeColors(cur).length + separator.length, -separator.length);
        if (length > ctx.breakLength) {
            return \`\${this.constructor.name} {\\\\n\` + \`  \${ArrayPrototypeJoin(output, \\",\\\\n  \\")} }\`;
        }
        else if (output.length) {
            return \`\${this.constructor.name} { \` + \`\${ArrayPrototypeJoin(output, separator)} }\`;
        }
        return \`\${this.constructor.name} {}\`;
    }
    append(name, value) {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        if (arguments.length < 2) {
            throw new ERR_MISSING_ARGS(\\"name\\", \\"value\\");
        }
        name = toUSVString(name);
        value = toUSVString(value);
        ArrayPrototypePush(this[searchParams], name, value);
        update(this[context], this);
    }
    delete(name) {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        if (arguments.length < 1) {
            throw new ERR_MISSING_ARGS(\\"name\\");
        }
        const list = this[searchParams];
        name = toUSVString(name);
        for (let i = 0; i < list.length;) {
            const cur = list[i];
            if (cur === name) {
                list.splice(i, 2);
            }
            else {
                i += 2;
            }
        }
        update(this[context], this);
    }
    get(name) {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        if (arguments.length < 1) {
            throw new ERR_MISSING_ARGS(\\"name\\");
        }
        const list = this[searchParams];
        name = toUSVString(name);
        for (let i = 0; i < list.length; i += 2) {
            if (list[i] === name) {
                return list[i + 1];
            }
        }
        return null;
    }
    getAll(name) {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        if (arguments.length < 1) {
            throw new ERR_MISSING_ARGS(\\"name\\");
        }
        const list = this[searchParams];
        const values = [];
        name = toUSVString(name);
        for (let i = 0; i < list.length; i += 2) {
            if (list[i] === name) {
                values.push(list[i + 1]);
            }
        }
        return values;
    }
    has(name) {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        if (arguments.length < 1) {
            throw new ERR_MISSING_ARGS(\\"name\\");
        }
        const list = this[searchParams];
        name = toUSVString(name);
        for (let i = 0; i < list.length; i += 2) {
            if (list[i] === name) {
                return true;
            }
        }
        return false;
    }
    set(name, value) {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        if (arguments.length < 2) {
            throw new ERR_MISSING_ARGS(\\"name\\", \\"value\\");
        }
        const list = this[searchParams];
        name = toUSVString(name);
        value = toUSVString(value);
        let found = false;
        for (let i = 0; i < list.length;) {
            const cur = list[i];
            if (cur === name) {
                if (!found) {
                    list[i + 1] = value;
                    found = true;
                    i += 2;
                }
                else {
                    list.splice(i, 2);
                }
            }
            else {
                i += 2;
            }
        }
        if (!found) {
            ArrayPrototypePush(list, name, value);
        }
        update(this[context], this);
    }
    sort() {
        const a = this[searchParams];
        const len = a.length;
        if (len <= 2) {
        }
        else if (len < 100) {
            for (let i = 2; i < len; i += 2) {
                const curKey = a[i];
                const curVal = a[i + 1];
                let j;
                for (j = i - 2; j >= 0; j -= 2) {
                    if (a[j] > curKey) {
                        a[j + 2] = a[j];
                        a[j + 3] = a[j + 1];
                    }
                    else {
                        break;
                    }
                }
                a[j + 2] = curKey;
                a[j + 3] = curVal;
            }
        }
        else {
            const lBuffer = new Array(len);
            const rBuffer = new Array(len);
            for (let step = 2; step < len; step *= 2) {
                for (let start = 0; start < len - 2; start += 2 * step) {
                    const mid = start + step;
                    let end = mid + step;
                    end = end < len ? end : len;
                    if (mid > end)
                        continue;
                    merge(a, start, mid, end, lBuffer, rBuffer);
                }
            }
        }
        update(this[context], this);
    }
    entries() {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        return createSearchParamsIterator(this, \\"key+value\\");
    }
    forEach(callback, thisArg = undefined) {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        validateCallback(callback);
        let list = this[searchParams];
        let i = 0;
        while (i < list.length) {
            const key = list[i];
            const value = list[i + 1];
            callback.call(thisArg, value, key, this);
            list = this[searchParams];
            i += 2;
        }
    }
    keys() {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        return createSearchParamsIterator(this, \\"key\\");
    }
    values() {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        return createSearchParamsIterator(this, \\"value\\");
    }
    toString() {
        if (!isURLSearchParams(this))
            throw new ERR_INVALID_THIS(\\"URLSearchParams\\");
        return serializeParams(this[searchParams]);
    }
});
v61.domainToASCII = (function domainToASCII(domain) {
    if (arguments.length < 1)
        throw new ERR_MISSING_ARGS(\\"domain\\");
    return _domainToASCII(\`\${domain}\`);
});
v61.domainToUnicode = (function domainToUnicode(domain) {
    if (arguments.length < 1)
        throw new ERR_MISSING_ARGS(\\"domain\\");
    return _domainToUnicode(\`\${domain}\`);
});
v61.pathToFileURL = (function pathToFileURL(filepath) {
    const outURL = new URL(\\"file://\\");
    if (isWindows && StringPrototypeStartsWith(filepath, \\"\\\\\\\\\\\\\\\\\\")) {
        const paths = StringPrototypeSplit(filepath, \\"\\\\\\\\\\");
        if (paths.length <= 3) {
            throw new ERR_INVALID_ARG_VALUE(\\"filepath\\", filepath, \\"Missing UNC resource path\\");
        }
        const hostname = paths[2];
        if (hostname.length === 0) {
            throw new ERR_INVALID_ARG_VALUE(\\"filepath\\", filepath, \\"Empty UNC servername\\");
        }
        outURL.hostname = domainToASCII(hostname);
        outURL.pathname = encodePathChars(ArrayPrototypeJoin(ArrayPrototypeSlice(paths, 3), \\"/\\"));
    }
    else {
        let resolved = path.resolve(filepath);
        const filePathLast = StringPrototypeCharCodeAt(filepath, filepath.length - 1);
        if ((filePathLast === CHAR_FORWARD_SLASH || (isWindows && filePathLast === CHAR_BACKWARD_SLASH)) && resolved[resolved.length - 1] !== path.sep)
            resolved += \\"/\\";
        outURL.pathname = encodePathChars(resolved);
    }
    return outURL;
});
v61.fileURLToPath = (function fileURLToPath(path) {
    if (typeof path === \\"string\\")
        path = new URL(path);
    else if (!isURLInstance(path))
        throw new ERR_INVALID_ARG_TYPE(\\"path\\", [\\"string\\", \\"URL\\"], path);
    if (path.protocol !== \\"file:\\")
        throw new ERR_INVALID_URL_SCHEME(\\"file\\");
    return isWindows ? getPathFromURLWin32(path) : getPathFromURLPosix(path);
});
v61.urlToHttpOptions = (function urlToHttpOptions(url) {
    const options = {
        protocol: url.protocol,
        hostname: typeof url.hostname === \\"string\\" && StringPrototypeStartsWith(url.hostname, \\"[\\") ? StringPrototypeSlice(url.hostname, 1, -1) : url.hostname,
        hash: url.hash,
        search: url.search,
        pathname: url.pathname,
        path: \`\${url.pathname || \\"\\"}\${url.search || \\"\\"}\`,
        href: url.href
    };
    if (url.port !== \\"\\") {
        options.port = Number(url.port);
    }
    if (url.username || url.password) {
        options.auth = \`\${decodeURIComponent(url.username)}:\${decodeURIComponent(url.password)}\`;
    }
    return options;
});
v3.url = v61;
const v62 = Object.create(v21);
v62.unescapeBuffer = (function unescapeBuffer(s, decodeSpaces) {
    const out = Buffer.allocUnsafe(s.length);
    let index = 0;
    let outIndex = 0;
    let currentChar;
    let nextChar;
    let hexHigh;
    let hexLow;
    const maxLength = s.length - 2;
    let hasHex = false;
    while (index < s.length) {
        currentChar = StringPrototypeCharCodeAt(s, index);
        if (currentChar === 43 && decodeSpaces) {
            out[outIndex++] = 32;
            index++;
            continue;
        }
        if (currentChar === 37 && index < maxLength) {
            currentChar = StringPrototypeCharCodeAt(s, ++index);
            hexHigh = unhexTable[currentChar];
            if (!(hexHigh >= 0)) {
                out[outIndex++] = 37;
                continue;
            }
            else {
                nextChar = StringPrototypeCharCodeAt(s, ++index);
                hexLow = unhexTable[nextChar];
                if (!(hexLow >= 0)) {
                    out[outIndex++] = 37;
                    index--;
                }
                else {
                    hasHex = true;
                    currentChar = hexHigh * 16 + hexLow;
                }
            }
        }
        out[outIndex++] = currentChar;
        index++;
    }
    return hasHex ? out.slice(0, outIndex) : out;
});
v62.unescape = (function qsUnescape(s, decodeSpaces) {
    try {
        return decodeURIComponent(s);
    }
    catch {
        return QueryString.unescapeBuffer(s, decodeSpaces).toString();
    }
});
v62.escape = (function qsEscape(str) {
    if (typeof str !== \\"string\\") {
        if (typeof str === \\"object\\")
            str = String(str);
        else
            str += \\"\\";
    }
    return encodeStr(str, noEscape, hexTable);
});
v62.stringify = (function stringify(obj, sep, eq, options) {
    sep = sep || \\"&\\";
    eq = eq || \\"=\\";
    let encode = QueryString.escape;
    if (options && typeof options.encodeURIComponent === \\"function\\") {
        encode = options.encodeURIComponent;
    }
    const convert = (encode === qsEscape ? encodeStringified : encodeStringifiedCustom);
    if (obj !== null && typeof obj === \\"object\\") {
        const keys = ObjectKeys(obj);
        const len = keys.length;
        let fields = \\"\\";
        for (let i = 0; i < len; ++i) {
            const k = keys[i];
            const v = obj[k];
            let ks = convert(k, encode);
            ks += eq;
            if (ArrayIsArray(v)) {
                const vlen = v.length;
                if (vlen === 0)
                    continue;
                if (fields)
                    fields += sep;
                for (let j = 0; j < vlen; ++j) {
                    if (j)
                        fields += sep;
                    fields += ks;
                    fields += convert(v[j], encode);
                }
            }
            else {
                if (fields)
                    fields += sep;
                fields += ks;
                fields += convert(v, encode);
            }
        }
        return fields;
    }
    return \\"\\";
});
v62.encode = (function stringify(obj, sep, eq, options) {
    sep = sep || \\"&\\";
    eq = eq || \\"=\\";
    let encode = QueryString.escape;
    if (options && typeof options.encodeURIComponent === \\"function\\") {
        encode = options.encodeURIComponent;
    }
    const convert = (encode === qsEscape ? encodeStringified : encodeStringifiedCustom);
    if (obj !== null && typeof obj === \\"object\\") {
        const keys = ObjectKeys(obj);
        const len = keys.length;
        let fields = \\"\\";
        for (let i = 0; i < len; ++i) {
            const k = keys[i];
            const v = obj[k];
            let ks = convert(k, encode);
            ks += eq;
            if (ArrayIsArray(v)) {
                const vlen = v.length;
                if (vlen === 0)
                    continue;
                if (fields)
                    fields += sep;
                for (let j = 0; j < vlen; ++j) {
                    if (j)
                        fields += sep;
                    fields += ks;
                    fields += convert(v[j], encode);
                }
            }
            else {
                if (fields)
                    fields += sep;
                fields += ks;
                fields += convert(v, encode);
            }
        }
        return fields;
    }
    return \\"\\";
});
v62.parse = (function parse(qs, sep, eq, options) {
    const obj = ObjectCreate(null);
    if (typeof qs !== \\"string\\" || qs.length === 0) {
        return obj;
    }
    const sepCodes = (!sep ? defSepCodes : charCodes(String(sep)));
    const eqCodes = (!eq ? defEqCodes : charCodes(String(eq)));
    const sepLen = sepCodes.length;
    const eqLen = eqCodes.length;
    let pairs = 1000;
    if (options && typeof options.maxKeys === \\"number\\") {
        pairs = (options.maxKeys > 0 ? options.maxKeys : -1);
    }
    let decode = QueryString.unescape;
    if (options && typeof options.decodeURIComponent === \\"function\\") {
        decode = options.decodeURIComponent;
    }
    const customDecode = (decode !== qsUnescape);
    let lastPos = 0;
    let sepIdx = 0;
    let eqIdx = 0;
    let key = \\"\\";
    let value = \\"\\";
    let keyEncoded = customDecode;
    let valEncoded = customDecode;
    const plusChar = (customDecode ? \\"%20\\" : \\" \\");
    let encodeCheck = 0;
    for (let i = 0; i < qs.length; ++i) {
        const code = StringPrototypeCharCodeAt(qs, i);
        if (code === sepCodes[sepIdx]) {
            if (++sepIdx === sepLen) {
                const end = i - sepIdx + 1;
                if (eqIdx < eqLen) {
                    if (lastPos < end) {
                        key += StringPrototypeSlice(qs, lastPos, end);
                    }
                    else if (key.length === 0) {
                        if (--pairs === 0)
                            return obj;
                        lastPos = i + 1;
                        sepIdx = eqIdx = 0;
                        continue;
                    }
                }
                else if (lastPos < end) {
                    value += StringPrototypeSlice(qs, lastPos, end);
                }
                addKeyVal(obj, key, value, keyEncoded, valEncoded, decode);
                if (--pairs === 0)
                    return obj;
                keyEncoded = valEncoded = customDecode;
                key = value = \\"\\";
                encodeCheck = 0;
                lastPos = i + 1;
                sepIdx = eqIdx = 0;
            }
        }
        else {
            sepIdx = 0;
            if (eqIdx < eqLen) {
                if (code === eqCodes[eqIdx]) {
                    if (++eqIdx === eqLen) {
                        const end = i - eqIdx + 1;
                        if (lastPos < end)
                            key += StringPrototypeSlice(qs, lastPos, end);
                        encodeCheck = 0;
                        lastPos = i + 1;
                    }
                    continue;
                }
                else {
                    eqIdx = 0;
                    if (!keyEncoded) {
                        if (code === 37) {
                            encodeCheck = 1;
                            continue;
                        }
                        else if (encodeCheck > 0) {
                            if (isHexTable[code] === 1) {
                                if (++encodeCheck === 3)
                                    keyEncoded = true;
                                continue;
                            }
                            else {
                                encodeCheck = 0;
                            }
                        }
                    }
                }
                if (code === 43) {
                    if (lastPos < i)
                        key += StringPrototypeSlice(qs, lastPos, i);
                    key += plusChar;
                    lastPos = i + 1;
                    continue;
                }
            }
            if (code === 43) {
                if (lastPos < i)
                    value += StringPrototypeSlice(qs, lastPos, i);
                value += plusChar;
                lastPos = i + 1;
            }
            else if (!valEncoded) {
                if (code === 37) {
                    encodeCheck = 1;
                }
                else if (encodeCheck > 0) {
                    if (isHexTable[code] === 1) {
                        if (++encodeCheck === 3)
                            valEncoded = true;
                    }
                    else {
                        encodeCheck = 0;
                    }
                }
            }
        }
    }
    if (lastPos < qs.length) {
        if (eqIdx < eqLen)
            key += StringPrototypeSlice(qs, lastPos);
        else if (sepIdx < sepLen)
            value += StringPrototypeSlice(qs, lastPos);
    }
    else if (eqIdx === 0 && key.length === 0) {
        return obj;
    }
    addKeyVal(obj, key, value, keyEncoded, valEncoded, decode);
    return obj;
});
v62.decode = (function parse(qs, sep, eq, options) {
    const obj = ObjectCreate(null);
    if (typeof qs !== \\"string\\" || qs.length === 0) {
        return obj;
    }
    const sepCodes = (!sep ? defSepCodes : charCodes(String(sep)));
    const eqCodes = (!eq ? defEqCodes : charCodes(String(eq)));
    const sepLen = sepCodes.length;
    const eqLen = eqCodes.length;
    let pairs = 1000;
    if (options && typeof options.maxKeys === \\"number\\") {
        pairs = (options.maxKeys > 0 ? options.maxKeys : -1);
    }
    let decode = QueryString.unescape;
    if (options && typeof options.decodeURIComponent === \\"function\\") {
        decode = options.decodeURIComponent;
    }
    const customDecode = (decode !== qsUnescape);
    let lastPos = 0;
    let sepIdx = 0;
    let eqIdx = 0;
    let key = \\"\\";
    let value = \\"\\";
    let keyEncoded = customDecode;
    let valEncoded = customDecode;
    const plusChar = (customDecode ? \\"%20\\" : \\" \\");
    let encodeCheck = 0;
    for (let i = 0; i < qs.length; ++i) {
        const code = StringPrototypeCharCodeAt(qs, i);
        if (code === sepCodes[sepIdx]) {
            if (++sepIdx === sepLen) {
                const end = i - sepIdx + 1;
                if (eqIdx < eqLen) {
                    if (lastPos < end) {
                        key += StringPrototypeSlice(qs, lastPos, end);
                    }
                    else if (key.length === 0) {
                        if (--pairs === 0)
                            return obj;
                        lastPos = i + 1;
                        sepIdx = eqIdx = 0;
                        continue;
                    }
                }
                else if (lastPos < end) {
                    value += StringPrototypeSlice(qs, lastPos, end);
                }
                addKeyVal(obj, key, value, keyEncoded, valEncoded, decode);
                if (--pairs === 0)
                    return obj;
                keyEncoded = valEncoded = customDecode;
                key = value = \\"\\";
                encodeCheck = 0;
                lastPos = i + 1;
                sepIdx = eqIdx = 0;
            }
        }
        else {
            sepIdx = 0;
            if (eqIdx < eqLen) {
                if (code === eqCodes[eqIdx]) {
                    if (++eqIdx === eqLen) {
                        const end = i - eqIdx + 1;
                        if (lastPos < end)
                            key += StringPrototypeSlice(qs, lastPos, end);
                        encodeCheck = 0;
                        lastPos = i + 1;
                    }
                    continue;
                }
                else {
                    eqIdx = 0;
                    if (!keyEncoded) {
                        if (code === 37) {
                            encodeCheck = 1;
                            continue;
                        }
                        else if (encodeCheck > 0) {
                            if (isHexTable[code] === 1) {
                                if (++encodeCheck === 3)
                                    keyEncoded = true;
                                continue;
                            }
                            else {
                                encodeCheck = 0;
                            }
                        }
                    }
                }
                if (code === 43) {
                    if (lastPos < i)
                        key += StringPrototypeSlice(qs, lastPos, i);
                    key += plusChar;
                    lastPos = i + 1;
                    continue;
                }
            }
            if (code === 43) {
                if (lastPos < i)
                    value += StringPrototypeSlice(qs, lastPos, i);
                value += plusChar;
                lastPos = i + 1;
            }
            else if (!valEncoded) {
                if (code === 37) {
                    encodeCheck = 1;
                }
                else if (encodeCheck > 0) {
                    if (isHexTable[code] === 1) {
                        if (++encodeCheck === 3)
                            valEncoded = true;
                    }
                    else {
                        encodeCheck = 0;
                    }
                }
            }
        }
    }
    if (lastPos < qs.length) {
        if (eqIdx < eqLen)
            key += StringPrototypeSlice(qs, lastPos);
        else if (sepIdx < sepLen)
            value += StringPrototypeSlice(qs, lastPos);
    }
    else if (eqIdx === 0 && key.length === 0) {
        return obj;
    }
    addKeyVal(obj, key, value, keyEncoded, valEncoded, decode);
    return obj;
});
v3.querystring = v62;
const v63 = require(\\"aws-sdk\\");
const v64 = v63.createEventStream;
v3.createEventStream = v64;
const v65 = {};
const v66 = v65.now;
v65.now = v66;
v3.realClock = v65;
const v67 = {};
const v68 = require(\\"aws-sdk\\");
const v69 = v68.Publisher;
v67.Publisher = v69;
const v70 = require(\\"aws-sdk\\");
const v71 = v70;
v67.configProvider = v71;
v3.clientSideMonitoring = v67;
const v72 = {};
v72.clearCachedFiles = (function clearCachedFiles() {
    this.resolvedProfiles = {};
});
v72.loadFrom = (function loadFrom(options) {
    options = options || {};
    var isConfig = options.isConfig === true;
    var filename = options.filename || this.getDefaultFilePath(isConfig);
    if (!this.resolvedProfiles[filename]) {
        var fileContent = this.parseFile(filename, isConfig);
        Object.defineProperty(this.resolvedProfiles, filename, { value: fileContent });
    }
    return this.resolvedProfiles[filename];
});
const v73 = require(\\"aws-sdk\\");
const v74 = v73.parseFile;
v72.parseFile = v74;
v72.getDefaultFilePath = (function getDefaultFilePath(isConfig) {
    return path.join(this.getHomeDir(), \\".aws\\", isConfig ? \\"config\\" : \\"credentials\\");
});
v72.getHomeDir = (function getHomeDir() {
    var env = process.env;
    var home = env.HOME || env.USERPROFILE || (env.HOMEPATH ? ((env.HOMEDRIVE || \\"C:/\\") + env.HOMEPATH) : null);
    if (home) {
        return home;
    }
    if (typeof os.homedir === \\"function\\") {
        return os.homedir();
    }
    throw AWS.util.error(new Error(\\"Cannot load credentials, HOME path not set\\"));
});
const v75 = Object.create(v72);
const v76 = {};
v75.resolvedProfiles = v76;
v3.iniLoader = v75;
const v77 = v3.getSystemErrorName;
v3.getSystemErrorName = v77;
const v78 = v3.loadConfig;
v3.loadConfig = v78;
v2.util = v3;
v2.VERSION = \\"2.1193.0\\";
const v79 = {};
const v80 = require(\\"aws-sdk\\");
const v81 = v80.__super__;
v79.RequestSigner = v81;
const v82 = require(\\"aws-sdk\\");
const v83 = v82;
v79.V2 = v83;
const v84 = require(\\"aws-sdk\\");
const v85 = v84.__super__;
v79.V3 = v85;
v79.V3Https = v84;
const v86 = require(\\"aws-sdk\\");
const v87 = v86;
v79.V4 = v87;
v79.S3 = v80;
const v88 = require(\\"aws-sdk\\");
const v89 = v88;
v79.Presign = v89;
v2.Signers = v79;
const v90 = {};
const v91 = {};
const v92 = v91.buildRequest;
v91.buildRequest = v92;
const v93 = v91.extractError;
v91.extractError = v93;
const v94 = v91.extractData;
v91.extractData = v94;
v90.Json = v91;
const v95 = {};
const v96 = v95.buildRequest;
v95.buildRequest = v96;
const v97 = v95.extractError;
v95.extractError = v97;
const v98 = v95.extractData;
v95.extractData = v98;
v90.Query = v95;
const v99 = {};
const v100 = v99.buildRequest;
v99.buildRequest = v100;
const v101 = v99.extractError;
v99.extractError = v101;
const v102 = v99.extractData;
v99.extractData = v102;
const v103 = v99.generateURI;
v99.generateURI = v103;
v90.Rest = v99;
const v104 = {};
const v105 = v104.buildRequest;
v104.buildRequest = v105;
const v106 = v104.extractError;
v104.extractError = v106;
const v107 = v104.extractData;
v104.extractData = v107;
v90.RestJson = v104;
const v108 = {};
const v109 = v108.buildRequest;
v108.buildRequest = v109;
const v110 = v108.extractError;
v108.extractError = v110;
const v111 = v108.extractData;
v108.extractData = v111;
v90.RestXml = v108;
v2.Protocol = v90;
const v112 = {};
const v113 = require(\\"aws-sdk\\");
const v114 = v113;
v112.Builder = v114;
const v115 = require(\\"aws-sdk\\");
const v116 = v115;
v112.Parser = v116;
v2.XML = v112;
const v117 = {};
const v118 = require(\\"aws-sdk\\");
const v119 = v118;
v117.Builder = v119;
const v120 = require(\\"aws-sdk\\");
const v121 = v120;
v117.Parser = v121;
v2.JSON = v117;
const v122 = {};
const v123 = require(\\"aws-sdk\\");
const v124 = v123;
v122.Api = v124;
const v125 = require(\\"aws-sdk\\");
const v126 = v125;
v122.Operation = v126;
const v127 = require(\\"aws-sdk\\");
const v128 = v127;
v122.Shape = v128;
const v129 = require(\\"aws-sdk\\");
const v130 = v129;
v122.Paginator = v130;
const v131 = require(\\"aws-sdk\\");
const v132 = v131;
v122.ResourceWaiter = v132;
v2.Model = v122;
const v133 = require(\\"aws-sdk\\");
const v134 = v133;
v2.apiLoader = v134;
const v135 = require(\\"aws-sdk\\");
const v136 = v135.EndpointCache;
v2.EndpointCache = v136;
const v137 = require(\\"aws-sdk\\");
const v138 = v137;
v2.SequentialExecutor = v138;
const v139 = require(\\"aws-sdk\\");
const v140 = v139.__super__;
v2.Service = v140;
const v141 = v2.Credentials;
v2.Credentials = v141;
const v142 = v2.CredentialProviderChain;
v2.CredentialProviderChain = v142;
const v143 = v2.Config;
v2.Config = v143;
const v144 = {};
v144.getCredentials = (function getCredentials(callback) {
    var self = this;
    function finish(err) {
        callback(err, err ? null : self.credentials);
    }
    function credError(msg, err) {
        return new AWS.util.error(err || new Error(), {
            code: \\"CredentialsError\\",
            message: msg,
            name: \\"CredentialsError\\"
        });
    }
    function getAsyncCredentials() {
        self.credentials.get(function (err) {
            if (err) {
                var msg = \\"Could not load credentials from \\" + self.credentials.constructor.name;
                err = credError(msg, err);
            }
            finish(err);
        });
    }
    function getStaticCredentials() {
        var err = null;
        if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {
            err = credError(\\"Missing credentials\\");
        }
        finish(err);
    }
    if (self.credentials) {
        if (typeof self.credentials.get === \\"function\\") {
            getAsyncCredentials();
        }
        else {
            getStaticCredentials();
        }
    }
    else if (self.credentialProvider) {
        self.credentialProvider.resolve(function (err, creds) {
            if (err) {
                err = credError(\\"Could not load credentials from any providers\\", err);
            }
            self.credentials = creds;
            finish(err);
        });
    }
    else {
        finish(credError(\\"No credentials to load\\"));
    }
});
v144.update = (function update(options, allowUnknownKeys) {
    allowUnknownKeys = allowUnknownKeys || false;
    options = this.extractCredentials(options);
    AWS.util.each.call(this, options, function (key, value) {
        if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) || AWS.Service.hasService(key)) {
            this.set(key, value);
        }
    });
});
v144.loadFromPath = (function loadFromPath(path) {
    this.clear();
    var options = JSON.parse(AWS.util.readFileSync(path));
    var fileSystemCreds = new AWS.FileSystemCredentials(path);
    var chain = new AWS.CredentialProviderChain();
    chain.providers.unshift(fileSystemCreds);
    chain.resolve(function (err, creds) {
        if (err)
            throw err;
        else
            options.credentials = creds;
    });
    this.constructor(options);
    return this;
});
v144.clear = (function clear() {
    AWS.util.each.call(this, this.keys, function (key) {
        delete this[key];
    });
    this.set(\\"credentials\\", undefined);
    this.set(\\"credentialProvider\\", undefined);
});
v144.set = (function set(property, value, defaultValue) {
    if (value === undefined) {
        if (defaultValue === undefined) {
            defaultValue = this.keys[property];
        }
        if (typeof defaultValue === \\"function\\") {
            this[property] = defaultValue.call(this);
        }
        else {
            this[property] = defaultValue;
        }
    }
    else if (property === \\"httpOptions\\" && this[property]) {
        this[property] = AWS.util.merge(this[property], value);
    }
    else {
        this[property] = value;
    }
});
const v145 = {};
v145.credentials = (function () {
    var credentials = null;
    new AWS.CredentialProviderChain([
        function () { return new AWS.EnvironmentCredentials(\\"AWS\\"); },
        function () { return new AWS.EnvironmentCredentials(\\"AMAZON\\"); },
        function () { return new AWS.SharedIniFileCredentials({ disableAssumeRole: true }); }
    ]).resolve(function (err, creds) {
        if (!err)
            credentials = creds;
    });
    return credentials;
});
v145.credentialProvider = (function () {
    return new AWS.CredentialProviderChain();
});
v145.region = (function () {
    var region = getRegion();
    return region ? getRealRegion(region) : undefined;
});
v145.logger = (function () {
    return process.env.AWSJS_DEBUG ? console : null;
});
const v146 = {};
v145.apiVersions = v146;
v145.apiVersion = null;
v145.endpoint = undefined;
const v147 = {};
v147.timeout = 120000;
v145.httpOptions = v147;
v145.maxRetries = undefined;
v145.maxRedirects = 10;
v145.paramValidation = true;
v145.sslEnabled = true;
v145.s3ForcePathStyle = false;
v145.s3BucketEndpoint = false;
v145.s3DisableBodySigning = true;
v145.s3UsEast1RegionalEndpoint = \\"legacy\\";
v145.s3UseArnRegion = undefined;
v145.computeChecksums = true;
v145.convertResponseTypes = true;
v145.correctClockSkew = false;
v145.customUserAgent = null;
v145.dynamoDbCrc32 = true;
v145.systemClockOffset = 0;
v145.signatureVersion = null;
v145.signatureCache = true;
const v148 = {};
v145.retryDelayOptions = v148;
v145.useAccelerateEndpoint = false;
v145.clientSideMonitoring = false;
v145.endpointDiscoveryEnabled = undefined;
v145.endpointCacheSize = 1000;
v145.hostPrefixEnabled = true;
v145.stsRegionalEndpoints = \\"legacy\\";
v145.useFipsEndpoint = (function () {
    var region = getRegion();
    return isFipsRegion(region) ? true : util.loadConfig(USE_FIPS_ENDPOINT_CONFIG_OPTIONS);
});
v145.useDualstackEndpoint = (function () {
    return util.loadConfig(USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS);
});
v144.keys = v145;
v144.extractCredentials = (function extractCredentials(options) {
    if (options.accessKeyId && options.secretAccessKey) {
        options = AWS.util.copy(options);
        options.credentials = new AWS.Credentials(options);
    }
    return options;
});
v144.setPromisesDependency = (function setPromisesDependency(dep) {
    PromisesDependency = dep;
    if (dep === null && typeof Promise === \\"function\\") {
        PromisesDependency = Promise;
    }
    var constructors = [AWS.Request, AWS.Credentials, AWS.CredentialProviderChain];
    if (AWS.S3) {
        constructors.push(AWS.S3);
        if (AWS.S3.ManagedUpload) {
            constructors.push(AWS.S3.ManagedUpload);
        }
    }
    AWS.util.addPromises(constructors, PromisesDependency);
});
v144.getPromisesDependency = (function getPromisesDependency() {
    return PromisesDependency;
});
const v149 = Object.create(v144);
const v150 = {};
v150.expiryWindow = 15;
v150.needsRefresh = (function needsRefresh() {
    var currentTime = AWS.util.date.getDate().getTime();
    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);
    if (this.expireTime && adjustedTime > this.expireTime) {
        return true;
    }
    else {
        return this.expired || !this.accessKeyId || !this.secretAccessKey;
    }
});
v150.get = (function get(callback) {
    var self = this;
    if (this.needsRefresh()) {
        this.refresh(function (err) {
            if (!err)
                self.expired = false;
            if (callback)
                callback(err);
        });
    }
    else if (callback) {
        callback();
    }
});
v150.refresh = (function refresh(callback) {
    this.expired = false;
    callback();
});
v150.coalesceRefresh = (function coalesceRefresh(callback, sync) {
    var self = this;
    if (self.refreshCallbacks.push(callback) === 1) {
        self.load(function onLoad(err) {
            AWS.util.arrayEach(self.refreshCallbacks, function (callback) {
                if (sync) {
                    callback(err);
                }
                else {
                    AWS.util.defer(function () {
                        callback(err);
                    });
                }
            });
            self.refreshCallbacks.length = 0;
        });
    }
});
v150.load = (function load(callback) {
    callback();
});
v150.getPromise = (function promise() {
    var self = this;
    var args = Array.prototype.slice.call(arguments);
    return new PromiseDependency(function (resolve, reject) {
        args.push(function (err, data) {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
        self[methodName].apply(self, args);
    });
});
v150.refreshPromise = (function promise() {
    var self = this;
    var args = Array.prototype.slice.call(arguments);
    return new PromiseDependency(function (resolve, reject) {
        args.push(function (err, data) {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
        self[methodName].apply(self, args);
    });
});
const v151 = Object.create(v150);
v151.load = (function load(callback) {
    var self = this;
    try {
        var profiles = AWS.util.getProfilesFromSharedConfig(iniLoader, this.filename);
        var profile = profiles[this.profile] || {};
        if (Object.keys(profile).length === 0) {
            throw AWS.util.error(new Error(\\"Profile \\" + this.profile + \\" not found\\"), { code: \\"SharedIniFileCredentialsProviderFailure\\" });
        }
        var preferStaticCredentialsToRoleArn = Boolean(this.preferStaticCredentials && profile[\\"aws_access_key_id\\"] && profile[\\"aws_secret_access_key\\"]);
        if (profile[\\"role_arn\\"] && !preferStaticCredentialsToRoleArn) {
            this.loadRoleProfile(profiles, profile, function (err, data) {
                if (err) {
                    callback(err);
                }
                else {
                    self.expired = false;
                    self.accessKeyId = data.Credentials.AccessKeyId;
                    self.secretAccessKey = data.Credentials.SecretAccessKey;
                    self.sessionToken = data.Credentials.SessionToken;
                    self.expireTime = data.Credentials.Expiration;
                    callback(null);
                }
            });
            return;
        }
        this.accessKeyId = profile[\\"aws_access_key_id\\"];
        this.secretAccessKey = profile[\\"aws_secret_access_key\\"];
        this.sessionToken = profile[\\"aws_session_token\\"];
        if (!this.accessKeyId || !this.secretAccessKey) {
            throw AWS.util.error(new Error(\\"Credentials not set for profile \\" + this.profile), { code: \\"SharedIniFileCredentialsProviderFailure\\" });
        }
        this.expired = false;
        callback(null);
    }
    catch (err) {
        callback(err);
    }
});
v151.refresh = (function refresh(callback) {
    iniLoader.clearCachedFiles();
    this.coalesceRefresh(callback || AWS.util.fn.callback, this.disableAssumeRole);
});
v151.loadRoleProfile = (function loadRoleProfile(creds, roleProfile, callback) {
    if (this.disableAssumeRole) {
        throw AWS.util.error(new Error(\\"Role assumption profiles are disabled. \\" + \\"Failed to load profile \\" + this.profile + \\" from \\" + creds.filename), { code: \\"SharedIniFileCredentialsProviderFailure\\" });
    }
    var self = this;
    var roleArn = roleProfile[\\"role_arn\\"];
    var roleSessionName = roleProfile[\\"role_session_name\\"];
    var externalId = roleProfile[\\"external_id\\"];
    var mfaSerial = roleProfile[\\"mfa_serial\\"];
    var sourceProfileName = roleProfile[\\"source_profile\\"];
    var profileRegion = roleProfile[\\"region\\"] || ASSUME_ROLE_DEFAULT_REGION;
    if (!sourceProfileName) {
        throw AWS.util.error(new Error(\\"source_profile is not set using profile \\" + this.profile), { code: \\"SharedIniFileCredentialsProviderFailure\\" });
    }
    var sourceProfileExistanceTest = creds[sourceProfileName];
    if (typeof sourceProfileExistanceTest !== \\"object\\") {
        throw AWS.util.error(new Error(\\"source_profile \\" + sourceProfileName + \\" using profile \\" + this.profile + \\" does not exist\\"), { code: \\"SharedIniFileCredentialsProviderFailure\\" });
    }
    var sourceCredentials = new AWS.SharedIniFileCredentials(AWS.util.merge(this.options || {}, {
        profile: sourceProfileName,
        preferStaticCredentials: true
    }));
    this.roleArn = roleArn;
    var sts = new STS({
        credentials: sourceCredentials,
        region: profileRegion,
        httpOptions: this.httpOptions
    });
    var roleParams = {
        RoleArn: roleArn,
        RoleSessionName: roleSessionName || \\"aws-sdk-js-\\" + Date.now()
    };
    if (externalId) {
        roleParams.ExternalId = externalId;
    }
    if (mfaSerial && self.tokenCodeFn) {
        roleParams.SerialNumber = mfaSerial;
        self.tokenCodeFn(mfaSerial, function (err, token) {
            if (err) {
                var message;
                if (err instanceof Error) {
                    message = err.message;
                }
                else {
                    message = err;
                }
                callback(AWS.util.error(new Error(\\"Error fetching MFA token: \\" + message), { code: \\"SharedIniFileCredentialsProviderFailure\\" }));
                return;
            }
            roleParams.TokenCode = token;
            sts.assumeRole(roleParams, callback);
        });
        return;
    }
    sts.assumeRole(roleParams, callback);
});
const v152 = Object.create(v151);
v152.secretAccessKey = \\"hFtbgbtjmEVRnPRGHIeunft+g7PBUUYISFrP5ksw\\";
v152.expired = false;
v152.expireTime = null;
const v153 = [];
v153.push();
v152.refreshCallbacks = v153;
v152.accessKeyId = \\"AKIA2PTXRDHQCY72R4HM\\";
v152.sessionToken = undefined;
v152.filename = undefined;
v152.profile = \\"default\\";
v152.disableAssumeRole = true;
v152.preferStaticCredentials = false;
v152.tokenCodeFn = null;
v152.httpOptions = null;
v149.credentials = v152;
const v154 = Object.create(v150);
v154.resolve = (function resolve(callback) {
    var self = this;
    if (self.providers.length === 0) {
        callback(new Error(\\"No providers\\"));
        return self;
    }
    if (self.resolveCallbacks.push(callback) === 1) {
        var index = 0;
        var providers = self.providers.slice(0);
        function resolveNext(err, creds) {
            if ((!err && creds) || index === providers.length) {
                AWS.util.arrayEach(self.resolveCallbacks, function (callback) {
                    callback(err, creds);
                });
                self.resolveCallbacks.length = 0;
                return;
            }
            var provider = providers[index++];
            if (typeof provider === \\"function\\") {
                creds = provider.call();
            }
            else {
                creds = provider;
            }
            if (creds.get) {
                creds.get(function (getErr) {
                    resolveNext(getErr, getErr ? null : creds);
                });
            }
            else {
                resolveNext(null, creds);
            }
        }
        resolveNext();
    }
    return self;
});
v154.resolvePromise = (function promise() {
    var self = this;
    var args = Array.prototype.slice.call(arguments);
    return new PromiseDependency(function (resolve, reject) {
        args.push(function (err, data) {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
        self[methodName].apply(self, args);
    });
});
const v155 = Object.create(v154);
const v156 = [];
v156.push((function () { return new AWS.EnvironmentCredentials(\\"AWS\\"); }), (function () { return new AWS.EnvironmentCredentials(\\"AMAZON\\"); }), (function () { return new AWS.SsoCredentials(); }), (function () { return new AWS.SharedIniFileCredentials(); }), (function () { return new AWS.ECSCredentials(); }), (function () { return new AWS.ProcessCredentials(); }), (function () { return new AWS.TokenFileWebIdentityCredentials(); }), (function () { return new AWS.EC2MetadataCredentials(); }));
v155.providers = v156;
const v157 = [];
v157.push();
v155.resolveCallbacks = v157;
v149.credentialProvider = v155;
v149.region = undefined;
v149.logger = null;
v149.apiVersions = v146;
v149.apiVersion = null;
v149.endpoint = undefined;
v149.httpOptions = v147;
v149.maxRetries = undefined;
v149.maxRedirects = 10;
v149.paramValidation = true;
v149.sslEnabled = true;
v149.s3ForcePathStyle = false;
v149.s3BucketEndpoint = false;
v149.s3DisableBodySigning = true;
v149.s3UsEast1RegionalEndpoint = \\"legacy\\";
v149.s3UseArnRegion = undefined;
v149.computeChecksums = true;
v149.convertResponseTypes = true;
v149.correctClockSkew = false;
v149.customUserAgent = null;
v149.dynamoDbCrc32 = true;
v149.systemClockOffset = 0;
v149.signatureVersion = null;
v149.signatureCache = true;
v149.retryDelayOptions = v148;
v149.useAccelerateEndpoint = false;
v149.clientSideMonitoring = false;
v149.endpointDiscoveryEnabled = undefined;
v149.endpointCacheSize = 1000;
v149.hostPrefixEnabled = true;
v149.stsRegionalEndpoints = \\"legacy\\";
v149.useFipsEndpoint = false;
v149.useDualstackEndpoint = false;
v2.config = v149;
const v158 = v2.Endpoint;
v2.Endpoint = v158;
const v159 = v2.HttpRequest;
v2.HttpRequest = v159;
const v160 = v2.HttpResponse;
v2.HttpResponse = v160;
const v161 = v2.HttpClient;
v2.HttpClient = v161;
const v162 = {};
const v163 = {};
v163.listeners = (function listeners(eventName) {
    return this._events[eventName] ? this._events[eventName].slice(0) : [];
});
v163.on = (function on(eventName, listener, toHead) {
    if (this._events[eventName]) {
        toHead ? this._events[eventName].unshift(listener) : this._events[eventName].push(listener);
    }
    else {
        this._events[eventName] = [listener];
    }
    return this;
});
v163.onAsync = (function onAsync(eventName, listener, toHead) {
    listener._isAsync = true;
    return this.on(eventName, listener, toHead);
});
v163.removeListener = (function removeListener(eventName, listener) {
    var listeners = this._events[eventName];
    if (listeners) {
        var length = listeners.length;
        var position = -1;
        for (var i = 0; i < length; ++i) {
            if (listeners[i] === listener) {
                position = i;
            }
        }
        if (position > -1) {
            listeners.splice(position, 1);
        }
    }
    return this;
});
v163.removeAllListeners = (function removeAllListeners(eventName) {
    if (eventName) {
        delete this._events[eventName];
    }
    else {
        this._events = {};
    }
    return this;
});
v163.emit = (function emit(eventName, eventArgs, doneCallback) {
    if (!doneCallback)
        doneCallback = function () { };
    var listeners = this.listeners(eventName);
    var count = listeners.length;
    this.callListeners(listeners, eventArgs, doneCallback);
    return count > 0;
});
v163.callListeners = (function callListeners(listeners, args, doneCallback, prevError) {
    var self = this;
    var error = prevError || null;
    function callNextListener(err) {
        if (err) {
            error = AWS.util.error(error || new Error(), err);
            if (self._haltHandlersOnError) {
                return doneCallback.call(self, error);
            }
        }
        self.callListeners(listeners, args, doneCallback, error);
    }
    while (listeners.length > 0) {
        var listener = listeners.shift();
        if (listener._isAsync) {
            listener.apply(self, args.concat([callNextListener]));
            return;
        }
        else {
            try {
                listener.apply(self, args);
            }
            catch (err) {
                error = AWS.util.error(error || new Error(), err);
            }
            if (error && self._haltHandlersOnError) {
                doneCallback.call(self, error);
                return;
            }
        }
    }
    doneCallback.call(self, error);
});
v163.addListeners = (function addListeners(listeners) {
    var self = this;
    if (listeners._events)
        listeners = listeners._events;
    AWS.util.each(listeners, function (event, callbacks) {
        if (typeof callbacks === \\"function\\")
            callbacks = [callbacks];
        AWS.util.arrayEach(callbacks, function (callback) {
            self.on(event, callback);
        });
    });
    return self;
});
v163.addNamedListener = (function addNamedListener(name, eventName, callback, toHead) {
    this[name] = callback;
    this.addListener(eventName, callback, toHead);
    return this;
});
v163.addNamedAsyncListener = (function addNamedAsyncListener(name, eventName, callback, toHead) {
    callback._isAsync = true;
    return this.addNamedListener(name, eventName, callback, toHead);
});
v163.addNamedListeners = (function addNamedListeners(callback) {
    var self = this;
    callback(function () {
        self.addNamedListener.apply(self, arguments);
    }, function () {
        self.addNamedAsyncListener.apply(self, arguments);
    });
    return this;
});
v163.addListener = (function on(eventName, listener, toHead) {
    if (this._events[eventName]) {
        toHead ? this._events[eventName].unshift(listener) : this._events[eventName].push(listener);
    }
    else {
        this._events[eventName] = [listener];
    }
    return this;
});
const v164 = Object.create(v163);
const v165 = {};
const v166 = [];
v166.push((function VALIDATE_CREDENTIALS(req, done) {
    if (!req.service.api.signatureVersion && !req.service.config.signatureVersion)
        return done();
    req.service.config.getCredentials(function (err) {
        if (err) {
            req.response.error = AWS.util.error(err, { code: \\"CredentialsError\\", message: \\"Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1\\" });
        }
        done();
    });
}), (function VALIDATE_REGION(req) {
    if (!req.service.isGlobalEndpoint) {
        var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
        if (!req.service.config.region) {
            req.response.error = AWS.util.error(new Error(), { code: \\"ConfigError\\", message: \\"Missing region in config\\" });
        }
        else if (!dnsHostRegex.test(req.service.config.region)) {
            req.response.error = AWS.util.error(new Error(), { code: \\"ConfigError\\", message: \\"Invalid region in config\\" });
        }
    }
}), (function BUILD_IDEMPOTENCY_TOKENS(req) {
    if (!req.service.api.operations) {
        return;
    }
    var operation = req.service.api.operations[req.operation];
    if (!operation) {
        return;
    }
    var idempotentMembers = operation.idempotentMembers;
    if (!idempotentMembers.length) {
        return;
    }
    var params = AWS.util.copy(req.params);
    for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {
        if (!params[idempotentMembers[i]]) {
            params[idempotentMembers[i]] = AWS.util.uuid.v4();
        }
    }
    req.params = params;
}), (function VALIDATE_PARAMETERS(req) {
    if (!req.service.api.operations) {
        return;
    }
    var rules = req.service.api.operations[req.operation].input;
    var validation = req.service.config.paramValidation;
    new AWS.ParamValidator(validation).validate(rules, req.params);
}));
v165.validate = v166;
const v167 = [];
v167.push((function COMPUTE_CHECKSUM(req) {
    if (!req.service.api.operations) {
        return;
    }
    var operation = req.service.api.operations[req.operation];
    if (!operation) {
        return;
    }
    var body = req.httpRequest.body;
    var isNonStreamingPayload = body && (AWS.util.Buffer.isBuffer(body) || typeof body === \\"string\\");
    var headers = req.httpRequest.headers;
    if (operation.httpChecksumRequired && req.service.config.computeChecksums && isNonStreamingPayload && !headers[\\"Content-MD5\\"]) {
        var md5 = AWS.util.crypto.md5(body, \\"base64\\");
        headers[\\"Content-MD5\\"] = md5;
    }
}), (function COMPUTE_SHA256(req, done) {
    req.haltHandlersOnError();
    if (!req.service.api.operations) {
        return;
    }
    var operation = req.service.api.operations[req.operation];
    var authtype = operation ? operation.authtype : \\"\\";
    if (!req.service.api.signatureVersion && !authtype && !req.service.config.signatureVersion)
        return done();
    if (req.service.getSignerClass(req) === AWS.Signers.V4) {
        var body = req.httpRequest.body || \\"\\";
        if (authtype.indexOf(\\"unsigned-body\\") >= 0) {
            req.httpRequest.headers[\\"X-Amz-Content-Sha256\\"] = \\"UNSIGNED-PAYLOAD\\";
            return done();
        }
        AWS.util.computeSha256(body, function (err, sha) {
            if (err) {
                done(err);
            }
            else {
                req.httpRequest.headers[\\"X-Amz-Content-Sha256\\"] = sha;
                done();
            }
        });
    }
    else {
        done();
    }
}), (function SET_CONTENT_LENGTH(req) {
    var authtype = getOperationAuthtype(req);
    var payloadMember = AWS.util.getRequestPayloadShape(req);
    if (req.httpRequest.headers[\\"Content-Length\\"] === undefined) {
        try {
            var length = AWS.util.string.byteLength(req.httpRequest.body);
            req.httpRequest.headers[\\"Content-Length\\"] = length;
        }
        catch (err) {
            if (payloadMember && payloadMember.isStreaming) {
                if (payloadMember.requiresLength) {
                    throw err;
                }
                else if (authtype.indexOf(\\"unsigned-body\\") >= 0) {
                    req.httpRequest.headers[\\"Transfer-Encoding\\"] = \\"chunked\\";
                    return;
                }
                else {
                    throw err;
                }
            }
            throw err;
        }
    }
}), (function SET_HTTP_HOST(req) {
    req.httpRequest.headers[\\"Host\\"] = req.httpRequest.endpoint.host;
}), (function SET_TRACE_ID(req) {
    var traceIdHeaderName = \\"X-Amzn-Trace-Id\\";
    if (AWS.util.isNode() && !Object.hasOwnProperty.call(req.httpRequest.headers, traceIdHeaderName)) {
        var ENV_LAMBDA_FUNCTION_NAME = \\"AWS_LAMBDA_FUNCTION_NAME\\";
        var ENV_TRACE_ID = \\"_X_AMZN_TRACE_ID\\";
        var functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
        var traceId = process.env[ENV_TRACE_ID];
        if (typeof functionName === \\"string\\" && functionName.length > 0 && typeof traceId === \\"string\\" && traceId.length > 0) {
            req.httpRequest.headers[traceIdHeaderName] = traceId;
        }
    }
}));
v165.afterBuild = v167;
const v168 = [];
v168.push((function RESTART() {
    var err = this.response.error;
    if (!err || !err.retryable)
        return;
    this.httpRequest = new AWS.HttpRequest(this.service.endpoint, this.service.region);
    if (this.response.retryCount < this.service.config.maxRetries) {
        this.response.retryCount++;
    }
    else {
        this.response.error = null;
    }
}));
v165.restart = v168;
const v169 = [];
const v170 = require(\\"aws-sdk\\");
const v171 = v170.discoverEndpoint;
v169.push(v171, (function SIGN(req, done) {
    var service = req.service;
    var operations = req.service.api.operations || {};
    var operation = operations[req.operation];
    var authtype = operation ? operation.authtype : \\"\\";
    if (!service.api.signatureVersion && !authtype && !service.config.signatureVersion)
        return done();
    service.config.getCredentials(function (err, credentials) {
        if (err) {
            req.response.error = err;
            return done();
        }
        try {
            var date = service.getSkewCorrectedDate();
            var SignerClass = service.getSignerClass(req);
            var signer = new SignerClass(req.httpRequest, service.getSigningName(req), {
                signatureCache: service.config.signatureCache,
                operation: operation,
                signatureVersion: service.api.signatureVersion
            });
            signer.setServiceClientId(service._clientId);
            delete req.httpRequest.headers[\\"Authorization\\"];
            delete req.httpRequest.headers[\\"Date\\"];
            delete req.httpRequest.headers[\\"X-Amz-Date\\"];
            signer.addAuthorization(credentials, date);
            req.signedAt = date;
        }
        catch (e) {
            req.response.error = e;
        }
        done();
    });
}));
v165.sign = v169;
const v172 = [];
v172.push((function VALIDATE_RESPONSE(resp) {
    if (this.service.successfulResponse(resp, this)) {
        resp.data = {};
        resp.error = null;
    }
    else {
        resp.data = null;
        resp.error = AWS.util.error(new Error(), { code: \\"UnknownError\\", message: \\"An unknown error occurred.\\" });
    }
}));
v165.validateResponse = v172;
const v173 = [];
v173.push((function ERROR(err, resp) {
    var errorCodeMapping = resp.request.service.api.errorCodeMapping;
    if (errorCodeMapping && err && err.code) {
        var mapping = errorCodeMapping[err.code];
        if (mapping) {
            resp.error.code = mapping.code;
        }
    }
}));
v165.error = v173;
const v174 = [];
v174.push((function SEND(resp, done) {
    resp.httpResponse._abortCallback = done;
    resp.error = null;
    resp.data = null;
    function callback(httpResp) {
        resp.httpResponse.stream = httpResp;
        var stream = resp.request.httpRequest.stream;
        var service = resp.request.service;
        var api = service.api;
        var operationName = resp.request.operation;
        var operation = api.operations[operationName] || {};
        httpResp.on(\\"headers\\", function onHeaders(statusCode, headers, statusMessage) {
            resp.request.emit(\\"httpHeaders\\", [statusCode, headers, resp, statusMessage]);
            if (!resp.httpResponse.streaming) {
                if (AWS.HttpClient.streamsApiVersion === 2) {
                    if (operation.hasEventOutput && service.successfulResponse(resp)) {
                        resp.request.emit(\\"httpDone\\");
                        done();
                        return;
                    }
                    httpResp.on(\\"readable\\", function onReadable() {
                        var data = httpResp.read();
                        if (data !== null) {
                            resp.request.emit(\\"httpData\\", [data, resp]);
                        }
                    });
                }
                else {
                    httpResp.on(\\"data\\", function onData(data) {
                        resp.request.emit(\\"httpData\\", [data, resp]);
                    });
                }
            }
        });
        httpResp.on(\\"end\\", function onEnd() {
            if (!stream || !stream.didCallback) {
                if (AWS.HttpClient.streamsApiVersion === 2 && (operation.hasEventOutput && service.successfulResponse(resp))) {
                    return;
                }
                resp.request.emit(\\"httpDone\\");
                done();
            }
        });
    }
    function progress(httpResp) {
        httpResp.on(\\"sendProgress\\", function onSendProgress(value) {
            resp.request.emit(\\"httpUploadProgress\\", [value, resp]);
        });
        httpResp.on(\\"receiveProgress\\", function onReceiveProgress(value) {
            resp.request.emit(\\"httpDownloadProgress\\", [value, resp]);
        });
    }
    function error(err) {
        if (err.code !== \\"RequestAbortedError\\") {
            var errCode = err.code === \\"TimeoutError\\" ? err.code : \\"NetworkingError\\";
            err = AWS.util.error(err, {
                code: errCode,
                region: resp.request.httpRequest.region,
                hostname: resp.request.httpRequest.endpoint.hostname,
                retryable: true
            });
        }
        resp.error = err;
        resp.request.emit(\\"httpError\\", [resp.error, resp], function () {
            done();
        });
    }
    function executeSend() {
        var http = AWS.HttpClient.getInstance();
        var httpOptions = resp.request.service.config.httpOptions || {};
        try {
            var stream = http.handleRequest(resp.request.httpRequest, httpOptions, callback, error);
            progress(stream);
        }
        catch (err) {
            error(err);
        }
    }
    var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1000;
    if (timeDiff >= 60 * 10) {
        this.emit(\\"sign\\", [this], function (err) {
            if (err)
                done(err);
            else
                executeSend();
        });
    }
    else {
        executeSend();
    }
}));
v165.send = v174;
const v175 = [];
v175.push((function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {
    resp.httpResponse.statusCode = statusCode;
    resp.httpResponse.statusMessage = statusMessage;
    resp.httpResponse.headers = headers;
    resp.httpResponse.body = AWS.util.buffer.toBuffer(\\"\\");
    resp.httpResponse.buffers = [];
    resp.httpResponse.numBytes = 0;
    var dateHeader = headers.date || headers.Date;
    var service = resp.request.service;
    if (dateHeader) {
        var serverTime = Date.parse(dateHeader);
        if (service.config.correctClockSkew && service.isClockSkewed(serverTime)) {
            service.applyClockOffset(serverTime);
        }
    }
}));
v165.httpHeaders = v175;
const v176 = [];
v176.push((function HTTP_DATA(chunk, resp) {
    if (chunk) {
        if (AWS.util.isNode()) {
            resp.httpResponse.numBytes += chunk.length;
            var total = resp.httpResponse.headers[\\"content-length\\"];
            var progress = { loaded: resp.httpResponse.numBytes, total: total };
            resp.request.emit(\\"httpDownloadProgress\\", [progress, resp]);
        }
        resp.httpResponse.buffers.push(AWS.util.buffer.toBuffer(chunk));
    }
}));
v165.httpData = v176;
const v177 = [];
v177.push((function HTTP_DONE(resp) {
    if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);
        resp.httpResponse.body = body;
    }
    delete resp.httpResponse.numBytes;
    delete resp.httpResponse.buffers;
}));
v165.httpDone = v177;
const v178 = [];
v178.push((function FINALIZE_ERROR(resp) {
    if (resp.httpResponse.statusCode) {
        resp.error.statusCode = resp.httpResponse.statusCode;
        if (resp.error.retryable === undefined) {
            resp.error.retryable = this.service.retryableError(resp.error, this);
        }
    }
}), (function INVALIDATE_CREDENTIALS(resp) {
    if (!resp.error)
        return;
    switch (resp.error.code) {
        case \\"RequestExpired\\":
        case \\"ExpiredTokenException\\":
        case \\"ExpiredToken\\":
            resp.error.retryable = true;
            resp.request.service.config.credentials.expired = true;
    }
}), (function EXPIRED_SIGNATURE(resp) {
    var err = resp.error;
    if (!err)
        return;
    if (typeof err.code === \\"string\\" && typeof err.message === \\"string\\") {
        if (err.code.match(/Signature/) && err.message.match(/expired/)) {
            resp.error.retryable = true;
        }
    }
}), (function CLOCK_SKEWED(resp) {
    if (!resp.error)
        return;
    if (this.service.clockSkewError(resp.error) && this.service.config.correctClockSkew) {
        resp.error.retryable = true;
    }
}), (function REDIRECT(resp) {
    if (resp.error && resp.error.statusCode >= 300 && resp.error.statusCode < 400 && resp.httpResponse.headers[\\"location\\"]) {
        this.httpRequest.endpoint = new AWS.Endpoint(resp.httpResponse.headers[\\"location\\"]);
        this.httpRequest.headers[\\"Host\\"] = this.httpRequest.endpoint.host;
        resp.error.redirect = true;
        resp.error.retryable = true;
    }
}), (function RETRY_CHECK(resp) {
    if (resp.error) {
        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
            resp.error.retryDelay = 0;
        }
        else if (resp.retryCount < resp.maxRetries) {
            resp.error.retryDelay = this.service.retryDelays(resp.retryCount, resp.error) || 0;
        }
    }
}));
v165.retry = v178;
const v179 = [];
v179.push((function RESET_RETRY_STATE(resp, done) {
    var delay, willRetry = false;
    if (resp.error) {
        delay = resp.error.retryDelay || 0;
        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
            resp.retryCount++;
            willRetry = true;
        }
        else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
            resp.redirectCount++;
            willRetry = true;
        }
    }
    if (willRetry && delay >= 0) {
        resp.error = null;
        setTimeout(done, delay);
    }
    else {
        done();
    }
}));
v165.afterRetry = v179;
v164._events = v165;
v164.VALIDATE_CREDENTIALS = (function VALIDATE_CREDENTIALS(req, done) {
    if (!req.service.api.signatureVersion && !req.service.config.signatureVersion)
        return done();
    req.service.config.getCredentials(function (err) {
        if (err) {
            req.response.error = AWS.util.error(err, { code: \\"CredentialsError\\", message: \\"Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1\\" });
        }
        done();
    });
});
v164.VALIDATE_REGION = (function VALIDATE_REGION(req) {
    if (!req.service.isGlobalEndpoint) {
        var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
        if (!req.service.config.region) {
            req.response.error = AWS.util.error(new Error(), { code: \\"ConfigError\\", message: \\"Missing region in config\\" });
        }
        else if (!dnsHostRegex.test(req.service.config.region)) {
            req.response.error = AWS.util.error(new Error(), { code: \\"ConfigError\\", message: \\"Invalid region in config\\" });
        }
    }
});
v164.BUILD_IDEMPOTENCY_TOKENS = (function BUILD_IDEMPOTENCY_TOKENS(req) {
    if (!req.service.api.operations) {
        return;
    }
    var operation = req.service.api.operations[req.operation];
    if (!operation) {
        return;
    }
    var idempotentMembers = operation.idempotentMembers;
    if (!idempotentMembers.length) {
        return;
    }
    var params = AWS.util.copy(req.params);
    for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {
        if (!params[idempotentMembers[i]]) {
            params[idempotentMembers[i]] = AWS.util.uuid.v4();
        }
    }
    req.params = params;
});
v164.VALIDATE_PARAMETERS = (function VALIDATE_PARAMETERS(req) {
    if (!req.service.api.operations) {
        return;
    }
    var rules = req.service.api.operations[req.operation].input;
    var validation = req.service.config.paramValidation;
    new AWS.ParamValidator(validation).validate(rules, req.params);
});
v164.COMPUTE_CHECKSUM = (function COMPUTE_CHECKSUM(req) {
    if (!req.service.api.operations) {
        return;
    }
    var operation = req.service.api.operations[req.operation];
    if (!operation) {
        return;
    }
    var body = req.httpRequest.body;
    var isNonStreamingPayload = body && (AWS.util.Buffer.isBuffer(body) || typeof body === \\"string\\");
    var headers = req.httpRequest.headers;
    if (operation.httpChecksumRequired && req.service.config.computeChecksums && isNonStreamingPayload && !headers[\\"Content-MD5\\"]) {
        var md5 = AWS.util.crypto.md5(body, \\"base64\\");
        headers[\\"Content-MD5\\"] = md5;
    }
});
v164.COMPUTE_SHA256 = (function COMPUTE_SHA256(req, done) {
    req.haltHandlersOnError();
    if (!req.service.api.operations) {
        return;
    }
    var operation = req.service.api.operations[req.operation];
    var authtype = operation ? operation.authtype : \\"\\";
    if (!req.service.api.signatureVersion && !authtype && !req.service.config.signatureVersion)
        return done();
    if (req.service.getSignerClass(req) === AWS.Signers.V4) {
        var body = req.httpRequest.body || \\"\\";
        if (authtype.indexOf(\\"unsigned-body\\") >= 0) {
            req.httpRequest.headers[\\"X-Amz-Content-Sha256\\"] = \\"UNSIGNED-PAYLOAD\\";
            return done();
        }
        AWS.util.computeSha256(body, function (err, sha) {
            if (err) {
                done(err);
            }
            else {
                req.httpRequest.headers[\\"X-Amz-Content-Sha256\\"] = sha;
                done();
            }
        });
    }
    else {
        done();
    }
});
v164.SET_CONTENT_LENGTH = (function SET_CONTENT_LENGTH(req) {
    var authtype = getOperationAuthtype(req);
    var payloadMember = AWS.util.getRequestPayloadShape(req);
    if (req.httpRequest.headers[\\"Content-Length\\"] === undefined) {
        try {
            var length = AWS.util.string.byteLength(req.httpRequest.body);
            req.httpRequest.headers[\\"Content-Length\\"] = length;
        }
        catch (err) {
            if (payloadMember && payloadMember.isStreaming) {
                if (payloadMember.requiresLength) {
                    throw err;
                }
                else if (authtype.indexOf(\\"unsigned-body\\") >= 0) {
                    req.httpRequest.headers[\\"Transfer-Encoding\\"] = \\"chunked\\";
                    return;
                }
                else {
                    throw err;
                }
            }
            throw err;
        }
    }
});
v164.SET_HTTP_HOST = (function SET_HTTP_HOST(req) {
    req.httpRequest.headers[\\"Host\\"] = req.httpRequest.endpoint.host;
});
v164.SET_TRACE_ID = (function SET_TRACE_ID(req) {
    var traceIdHeaderName = \\"X-Amzn-Trace-Id\\";
    if (AWS.util.isNode() && !Object.hasOwnProperty.call(req.httpRequest.headers, traceIdHeaderName)) {
        var ENV_LAMBDA_FUNCTION_NAME = \\"AWS_LAMBDA_FUNCTION_NAME\\";
        var ENV_TRACE_ID = \\"_X_AMZN_TRACE_ID\\";
        var functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
        var traceId = process.env[ENV_TRACE_ID];
        if (typeof functionName === \\"string\\" && functionName.length > 0 && typeof traceId === \\"string\\" && traceId.length > 0) {
            req.httpRequest.headers[traceIdHeaderName] = traceId;
        }
    }
});
v164.RESTART = (function RESTART() {
    var err = this.response.error;
    if (!err || !err.retryable)
        return;
    this.httpRequest = new AWS.HttpRequest(this.service.endpoint, this.service.region);
    if (this.response.retryCount < this.service.config.maxRetries) {
        this.response.retryCount++;
    }
    else {
        this.response.error = null;
    }
});
v164.DISCOVER_ENDPOINT = v171;
v164.SIGN = (function SIGN(req, done) {
    var service = req.service;
    var operations = req.service.api.operations || {};
    var operation = operations[req.operation];
    var authtype = operation ? operation.authtype : \\"\\";
    if (!service.api.signatureVersion && !authtype && !service.config.signatureVersion)
        return done();
    service.config.getCredentials(function (err, credentials) {
        if (err) {
            req.response.error = err;
            return done();
        }
        try {
            var date = service.getSkewCorrectedDate();
            var SignerClass = service.getSignerClass(req);
            var signer = new SignerClass(req.httpRequest, service.getSigningName(req), {
                signatureCache: service.config.signatureCache,
                operation: operation,
                signatureVersion: service.api.signatureVersion
            });
            signer.setServiceClientId(service._clientId);
            delete req.httpRequest.headers[\\"Authorization\\"];
            delete req.httpRequest.headers[\\"Date\\"];
            delete req.httpRequest.headers[\\"X-Amz-Date\\"];
            signer.addAuthorization(credentials, date);
            req.signedAt = date;
        }
        catch (e) {
            req.response.error = e;
        }
        done();
    });
});
v164.VALIDATE_RESPONSE = (function VALIDATE_RESPONSE(resp) {
    if (this.service.successfulResponse(resp, this)) {
        resp.data = {};
        resp.error = null;
    }
    else {
        resp.data = null;
        resp.error = AWS.util.error(new Error(), { code: \\"UnknownError\\", message: \\"An unknown error occurred.\\" });
    }
});
v164.ERROR = (function ERROR(err, resp) {
    var errorCodeMapping = resp.request.service.api.errorCodeMapping;
    if (errorCodeMapping && err && err.code) {
        var mapping = errorCodeMapping[err.code];
        if (mapping) {
            resp.error.code = mapping.code;
        }
    }
});
v164.SEND = (function SEND(resp, done) {
    resp.httpResponse._abortCallback = done;
    resp.error = null;
    resp.data = null;
    function callback(httpResp) {
        resp.httpResponse.stream = httpResp;
        var stream = resp.request.httpRequest.stream;
        var service = resp.request.service;
        var api = service.api;
        var operationName = resp.request.operation;
        var operation = api.operations[operationName] || {};
        httpResp.on(\\"headers\\", function onHeaders(statusCode, headers, statusMessage) {
            resp.request.emit(\\"httpHeaders\\", [statusCode, headers, resp, statusMessage]);
            if (!resp.httpResponse.streaming) {
                if (AWS.HttpClient.streamsApiVersion === 2) {
                    if (operation.hasEventOutput && service.successfulResponse(resp)) {
                        resp.request.emit(\\"httpDone\\");
                        done();
                        return;
                    }
                    httpResp.on(\\"readable\\", function onReadable() {
                        var data = httpResp.read();
                        if (data !== null) {
                            resp.request.emit(\\"httpData\\", [data, resp]);
                        }
                    });
                }
                else {
                    httpResp.on(\\"data\\", function onData(data) {
                        resp.request.emit(\\"httpData\\", [data, resp]);
                    });
                }
            }
        });
        httpResp.on(\\"end\\", function onEnd() {
            if (!stream || !stream.didCallback) {
                if (AWS.HttpClient.streamsApiVersion === 2 && (operation.hasEventOutput && service.successfulResponse(resp))) {
                    return;
                }
                resp.request.emit(\\"httpDone\\");
                done();
            }
        });
    }
    function progress(httpResp) {
        httpResp.on(\\"sendProgress\\", function onSendProgress(value) {
            resp.request.emit(\\"httpUploadProgress\\", [value, resp]);
        });
        httpResp.on(\\"receiveProgress\\", function onReceiveProgress(value) {
            resp.request.emit(\\"httpDownloadProgress\\", [value, resp]);
        });
    }
    function error(err) {
        if (err.code !== \\"RequestAbortedError\\") {
            var errCode = err.code === \\"TimeoutError\\" ? err.code : \\"NetworkingError\\";
            err = AWS.util.error(err, {
                code: errCode,
                region: resp.request.httpRequest.region,
                hostname: resp.request.httpRequest.endpoint.hostname,
                retryable: true
            });
        }
        resp.error = err;
        resp.request.emit(\\"httpError\\", [resp.error, resp], function () {
            done();
        });
    }
    function executeSend() {
        var http = AWS.HttpClient.getInstance();
        var httpOptions = resp.request.service.config.httpOptions || {};
        try {
            var stream = http.handleRequest(resp.request.httpRequest, httpOptions, callback, error);
            progress(stream);
        }
        catch (err) {
            error(err);
        }
    }
    var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1000;
    if (timeDiff >= 60 * 10) {
        this.emit(\\"sign\\", [this], function (err) {
            if (err)
                done(err);
            else
                executeSend();
        });
    }
    else {
        executeSend();
    }
});
v164.HTTP_HEADERS = (function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {
    resp.httpResponse.statusCode = statusCode;
    resp.httpResponse.statusMessage = statusMessage;
    resp.httpResponse.headers = headers;
    resp.httpResponse.body = AWS.util.buffer.toBuffer(\\"\\");
    resp.httpResponse.buffers = [];
    resp.httpResponse.numBytes = 0;
    var dateHeader = headers.date || headers.Date;
    var service = resp.request.service;
    if (dateHeader) {
        var serverTime = Date.parse(dateHeader);
        if (service.config.correctClockSkew && service.isClockSkewed(serverTime)) {
            service.applyClockOffset(serverTime);
        }
    }
});
v164.HTTP_DATA = (function HTTP_DATA(chunk, resp) {
    if (chunk) {
        if (AWS.util.isNode()) {
            resp.httpResponse.numBytes += chunk.length;
            var total = resp.httpResponse.headers[\\"content-length\\"];
            var progress = { loaded: resp.httpResponse.numBytes, total: total };
            resp.request.emit(\\"httpDownloadProgress\\", [progress, resp]);
        }
        resp.httpResponse.buffers.push(AWS.util.buffer.toBuffer(chunk));
    }
});
v164.HTTP_DONE = (function HTTP_DONE(resp) {
    if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);
        resp.httpResponse.body = body;
    }
    delete resp.httpResponse.numBytes;
    delete resp.httpResponse.buffers;
});
v164.FINALIZE_ERROR = (function FINALIZE_ERROR(resp) {
    if (resp.httpResponse.statusCode) {
        resp.error.statusCode = resp.httpResponse.statusCode;
        if (resp.error.retryable === undefined) {
            resp.error.retryable = this.service.retryableError(resp.error, this);
        }
    }
});
v164.INVALIDATE_CREDENTIALS = (function INVALIDATE_CREDENTIALS(resp) {
    if (!resp.error)
        return;
    switch (resp.error.code) {
        case \\"RequestExpired\\":
        case \\"ExpiredTokenException\\":
        case \\"ExpiredToken\\":
            resp.error.retryable = true;
            resp.request.service.config.credentials.expired = true;
    }
});
v164.EXPIRED_SIGNATURE = (function EXPIRED_SIGNATURE(resp) {
    var err = resp.error;
    if (!err)
        return;
    if (typeof err.code === \\"string\\" && typeof err.message === \\"string\\") {
        if (err.code.match(/Signature/) && err.message.match(/expired/)) {
            resp.error.retryable = true;
        }
    }
});
v164.CLOCK_SKEWED = (function CLOCK_SKEWED(resp) {
    if (!resp.error)
        return;
    if (this.service.clockSkewError(resp.error) && this.service.config.correctClockSkew) {
        resp.error.retryable = true;
    }
});
v164.REDIRECT = (function REDIRECT(resp) {
    if (resp.error && resp.error.statusCode >= 300 && resp.error.statusCode < 400 && resp.httpResponse.headers[\\"location\\"]) {
        this.httpRequest.endpoint = new AWS.Endpoint(resp.httpResponse.headers[\\"location\\"]);
        this.httpRequest.headers[\\"Host\\"] = this.httpRequest.endpoint.host;
        resp.error.redirect = true;
        resp.error.retryable = true;
    }
});
v164.RETRY_CHECK = (function RETRY_CHECK(resp) {
    if (resp.error) {
        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
            resp.error.retryDelay = 0;
        }
        else if (resp.retryCount < resp.maxRetries) {
            resp.error.retryDelay = this.service.retryDelays(resp.retryCount, resp.error) || 0;
        }
    }
});
v164.RESET_RETRY_STATE = (function RESET_RETRY_STATE(resp, done) {
    var delay, willRetry = false;
    if (resp.error) {
        delay = resp.error.retryDelay || 0;
        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
            resp.retryCount++;
            willRetry = true;
        }
        else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
            resp.redirectCount++;
            willRetry = true;
        }
    }
    if (willRetry && delay >= 0) {
        resp.error = null;
        setTimeout(done, delay);
    }
    else {
        done();
    }
});
v162.Core = v164;
const v180 = Object.create(v163);
const v181 = {};
const v182 = [];
v182.push(v43);
v181.extractData = v182;
const v183 = [];
v183.push(v43);
v181.extractError = v183;
const v184 = [];
v184.push((function ENOTFOUND_ERROR(err) {
    function isDNSError(err) {
        return err.errno === \\"ENOTFOUND\\" || typeof err.errno === \\"number\\" && typeof AWS.util.getSystemErrorName === \\"function\\" && [\\"EAI_NONAME\\", \\"EAI_NODATA\\"].indexOf(AWS.util.getSystemErrorName(err.errno) >= 0);
    }
    if (err.code === \\"NetworkingError\\" && isDNSError(err)) {
        var message = \\"Inaccessible host: \`\\" + err.hostname + \\"' at port \`\\" + err.port + \\"'. This service may not be available in the \`\\" + err.region + \\"' region.\\";
        this.response.error = AWS.util.error(new Error(message), {
            code: \\"UnknownEndpoint\\",
            region: err.region,
            hostname: err.hostname,
            retryable: true,
            originalError: err
        });
    }
}));
v181.httpError = v184;
v180._events = v181;
v180.EXTRACT_REQUEST_ID = v43;
v180.ENOTFOUND_ERROR = (function ENOTFOUND_ERROR(err) {
    function isDNSError(err) {
        return err.errno === \\"ENOTFOUND\\" || typeof err.errno === \\"number\\" && typeof AWS.util.getSystemErrorName === \\"function\\" && [\\"EAI_NONAME\\", \\"EAI_NODATA\\"].indexOf(AWS.util.getSystemErrorName(err.errno) >= 0);
    }
    if (err.code === \\"NetworkingError\\" && isDNSError(err)) {
        var message = \\"Inaccessible host: \`\\" + err.hostname + \\"' at port \`\\" + err.port + \\"'. This service may not be available in the \`\\" + err.region + \\"' region.\\";
        this.response.error = AWS.util.error(new Error(message), {
            code: \\"UnknownEndpoint\\",
            region: err.region,
            hostname: err.hostname,
            retryable: true,
            originalError: err
        });
    }
});
v162.CorePost = v180;
const v185 = Object.create(v163);
const v186 = {};
const v187 = [];
v187.push((function LOG_REQUEST(resp) {
    var req = resp.request;
    var logger = req.service.config.logger;
    if (!logger)
        return;
    function filterSensitiveLog(inputShape, shape) {
        if (!shape) {
            return shape;
        }
        if (inputShape.isSensitive) {
            return \\"***SensitiveInformation***\\";
        }
        switch (inputShape.type) {
            case \\"structure\\":
                var struct = {};
                AWS.util.each(shape, function (subShapeName, subShape) {
                    if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {
                        struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);
                    }
                    else {
                        struct[subShapeName] = subShape;
                    }
                });
                return struct;
            case \\"list\\":
                var list = [];
                AWS.util.arrayEach(shape, function (subShape, index) {
                    list.push(filterSensitiveLog(inputShape.member, subShape));
                });
                return list;
            case \\"map\\":
                var map = {};
                AWS.util.each(shape, function (key, value) {
                    map[key] = filterSensitiveLog(inputShape.value, value);
                });
                return map;
            default: return shape;
        }
    }
    function buildMessage() {
        var time = resp.request.service.getSkewCorrectedDate().getTime();
        var delta = (time - req.startTime.getTime()) / 1000;
        var ansi = logger.isTTY ? true : false;
        var status = resp.httpResponse.statusCode;
        var censoredParams = req.params;
        if (req.service.api.operations && req.service.api.operations[req.operation] && req.service.api.operations[req.operation].input) {
            var inputShape = req.service.api.operations[req.operation].input;
            censoredParams = filterSensitiveLog(inputShape, req.params);
        }
        var params = require(\\"util\\").inspect(censoredParams, true, null);
        var message = \\"\\";
        if (ansi)
            message += \\"\\\\u001B[33m\\";
        message += \\"[AWS \\" + req.service.serviceIdentifier + \\" \\" + status;
        message += \\" \\" + delta.toString() + \\"s \\" + resp.retryCount + \\" retries]\\";
        if (ansi)
            message += \\"\\\\u001B[0;1m\\";
        message += \\" \\" + AWS.util.string.lowerFirst(req.operation);
        message += \\"(\\" + params + \\")\\";
        if (ansi)
            message += \\"\\\\u001B[0m\\";
        return message;
    }
    var line = buildMessage();
    if (typeof logger.log === \\"function\\") {
        logger.log(line);
    }
    else if (typeof logger.write === \\"function\\") {
        logger.write(line + \\"\\\\n\\");
    }
}));
v186.complete = v187;
v185._events = v186;
v185.LOG_REQUEST = (function LOG_REQUEST(resp) {
    var req = resp.request;
    var logger = req.service.config.logger;
    if (!logger)
        return;
    function filterSensitiveLog(inputShape, shape) {
        if (!shape) {
            return shape;
        }
        if (inputShape.isSensitive) {
            return \\"***SensitiveInformation***\\";
        }
        switch (inputShape.type) {
            case \\"structure\\":
                var struct = {};
                AWS.util.each(shape, function (subShapeName, subShape) {
                    if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {
                        struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);
                    }
                    else {
                        struct[subShapeName] = subShape;
                    }
                });
                return struct;
            case \\"list\\":
                var list = [];
                AWS.util.arrayEach(shape, function (subShape, index) {
                    list.push(filterSensitiveLog(inputShape.member, subShape));
                });
                return list;
            case \\"map\\":
                var map = {};
                AWS.util.each(shape, function (key, value) {
                    map[key] = filterSensitiveLog(inputShape.value, value);
                });
                return map;
            default: return shape;
        }
    }
    function buildMessage() {
        var time = resp.request.service.getSkewCorrectedDate().getTime();
        var delta = (time - req.startTime.getTime()) / 1000;
        var ansi = logger.isTTY ? true : false;
        var status = resp.httpResponse.statusCode;
        var censoredParams = req.params;
        if (req.service.api.operations && req.service.api.operations[req.operation] && req.service.api.operations[req.operation].input) {
            var inputShape = req.service.api.operations[req.operation].input;
            censoredParams = filterSensitiveLog(inputShape, req.params);
        }
        var params = require(\\"util\\").inspect(censoredParams, true, null);
        var message = \\"\\";
        if (ansi)
            message += \\"\\\\u001B[33m\\";
        message += \\"[AWS \\" + req.service.serviceIdentifier + \\" \\" + status;
        message += \\" \\" + delta.toString() + \\"s \\" + resp.retryCount + \\" retries]\\";
        if (ansi)
            message += \\"\\\\u001B[0;1m\\";
        message += \\" \\" + AWS.util.string.lowerFirst(req.operation);
        message += \\"(\\" + params + \\")\\";
        if (ansi)
            message += \\"\\\\u001B[0m\\";
        return message;
    }
    var line = buildMessage();
    if (typeof logger.log === \\"function\\") {
        logger.log(line);
    }
    else if (typeof logger.write === \\"function\\") {
        logger.write(line + \\"\\\\n\\");
    }
});
v162.Logger = v185;
const v188 = Object.create(v163);
const v189 = {};
const v190 = [];
v190.push(v92);
v189.build = v190;
const v191 = [];
v191.push(v94);
v189.extractData = v191;
const v192 = [];
v192.push(v93);
v189.extractError = v192;
v188._events = v189;
v188.BUILD = v92;
v188.EXTRACT_DATA = v94;
v188.EXTRACT_ERROR = v93;
v162.Json = v188;
const v193 = Object.create(v163);
const v194 = {};
const v195 = [];
v195.push(v100);
v194.build = v195;
const v196 = [];
v196.push(v102);
v194.extractData = v196;
const v197 = [];
v197.push(v101);
v194.extractError = v197;
v193._events = v194;
v193.BUILD = v100;
v193.EXTRACT_DATA = v102;
v193.EXTRACT_ERROR = v101;
v162.Rest = v193;
const v198 = Object.create(v163);
const v199 = {};
const v200 = [];
v200.push(v105);
v199.build = v200;
const v201 = [];
v201.push(v107);
v199.extractData = v201;
const v202 = [];
v202.push(v106);
v199.extractError = v202;
v198._events = v199;
v198.BUILD = v105;
v198.EXTRACT_DATA = v107;
v198.EXTRACT_ERROR = v106;
v162.RestJson = v198;
const v203 = Object.create(v163);
const v204 = {};
const v205 = [];
v205.push(v109);
v204.build = v205;
const v206 = [];
v206.push(v111);
v204.extractData = v206;
const v207 = [];
v207.push(v110);
v204.extractError = v207;
v203._events = v204;
v203.BUILD = v109;
v203.EXTRACT_DATA = v111;
v203.EXTRACT_ERROR = v110;
v162.RestXml = v203;
const v208 = Object.create(v163);
const v209 = {};
const v210 = [];
v210.push(v96);
v209.build = v210;
const v211 = [];
v211.push(v98);
v209.extractData = v211;
const v212 = [];
v212.push(v97);
v209.extractError = v212;
v208._events = v209;
v208.BUILD = v96;
v208.EXTRACT_DATA = v98;
v208.EXTRACT_ERROR = v97;
v162.Query = v208;
v2.EventListeners = v162;
const v213 = v2.Request;
v2.Request = v213;
const v214 = v2.Response;
v2.Response = v214;
const v215 = v2.ResourceWaiter;
v2.ResourceWaiter = v215;
const v216 = v2.ParamValidator;
v2.ParamValidator = v216;
const v217 = Object.create(v163);
const v218 = {};
v217._events = v218;
v2.events = v217;
const v219 = v73.IniLoader;
v2.IniLoader = v219;
const v220 = require(\\"aws-sdk\\");
const v221 = v220.STS;
v2.STS = v221;
const v222 = v2.TemporaryCredentials;
v2.TemporaryCredentials = v222;
const v223 = v2.ChainableTemporaryCredentials;
v2.ChainableTemporaryCredentials = v223;
const v224 = v2.WebIdentityCredentials;
v2.WebIdentityCredentials = v224;
const v225 = v220.CognitoIdentity;
v2.CognitoIdentity = v225;
const v226 = v2.CognitoIdentityCredentials;
v2.CognitoIdentityCredentials = v226;
const v227 = v2.SAMLCredentials;
v2.SAMLCredentials = v227;
const v228 = v2.ProcessCredentials;
v2.ProcessCredentials = v228;
const v229 = v2.NodeHttpClient;
v2.NodeHttpClient = v229;
const v230 = v2.TokenFileWebIdentityCredentials;
v2.TokenFileWebIdentityCredentials = v230;
const v231 = require(\\"aws-sdk\\");
const v232 = v231;
v2.MetadataService = v232;
const v233 = v2.EC2MetadataCredentials;
v2.EC2MetadataCredentials = v233;
const v234 = v2.ECSCredentials;
v2.RemoteCredentials = v234;
v2.ECSCredentials = v234;
const v235 = v2.EnvironmentCredentials;
v2.EnvironmentCredentials = v235;
const v236 = v2.FileSystemCredentials;
v2.FileSystemCredentials = v236;
const v237 = v2.SharedIniFileCredentials;
v2.SharedIniFileCredentials = v237;
const v238 = v2.SsoCredentials;
v2.SsoCredentials = v238;
const v239 = require(\\"aws-sdk\\");
const v240 = v239;
v2.ACM = v240;
const v241 = require(\\"aws-sdk\\");
const v242 = v241;
v2.APIGateway = v242;
const v243 = require(\\"aws-sdk\\");
const v244 = v243;
v2.ApplicationAutoScaling = v244;
const v245 = require(\\"aws-sdk\\");
const v246 = v245;
v2.AppStream = v246;
const v247 = require(\\"aws-sdk\\");
const v248 = v247;
v2.AutoScaling = v248;
const v249 = require(\\"aws-sdk\\");
const v250 = v249;
v2.Batch = v250;
const v251 = require(\\"aws-sdk\\");
const v252 = v251;
v2.Budgets = v252;
const v253 = require(\\"aws-sdk\\");
const v254 = v253;
v2.CloudDirectory = v254;
const v255 = require(\\"aws-sdk\\");
const v256 = v255;
v2.CloudFormation = v256;
const v257 = require(\\"aws-sdk\\");
const v258 = v257;
v2.CloudFront = v258;
const v259 = require(\\"aws-sdk\\");
const v260 = v259;
v2.CloudHSM = v260;
const v261 = require(\\"aws-sdk\\");
const v262 = v261;
v2.CloudSearch = v262;
const v263 = require(\\"aws-sdk\\");
const v264 = v263;
v2.CloudSearchDomain = v264;
const v265 = require(\\"aws-sdk\\");
const v266 = v265;
v2.CloudTrail = v266;
const v267 = require(\\"aws-sdk\\");
const v268 = v267;
v2.CloudWatch = v268;
const v269 = require(\\"aws-sdk\\");
const v270 = v269;
v2.CloudWatchEvents = v270;
const v271 = require(\\"aws-sdk\\");
const v272 = v271;
v2.CloudWatchLogs = v272;
const v273 = require(\\"aws-sdk\\");
const v274 = v273;
v2.CodeBuild = v274;
const v275 = require(\\"aws-sdk\\");
const v276 = v275;
v2.CodeCommit = v276;
const v277 = require(\\"aws-sdk\\");
const v278 = v277;
v2.CodeDeploy = v278;
const v279 = require(\\"aws-sdk\\");
const v280 = v279;
v2.CodePipeline = v280;
const v281 = require(\\"aws-sdk\\");
const v282 = v281;
v2.CognitoIdentityServiceProvider = v282;
const v283 = require(\\"aws-sdk\\");
const v284 = v283;
v2.CognitoSync = v284;
const v285 = require(\\"aws-sdk\\");
const v286 = v285;
v2.ConfigService = v286;
const v287 = require(\\"aws-sdk\\");
const v288 = v287;
v2.CUR = v288;
const v289 = require(\\"aws-sdk\\");
const v290 = v289;
v2.DataPipeline = v290;
const v291 = require(\\"aws-sdk\\");
const v292 = v291;
v2.DeviceFarm = v292;
const v293 = require(\\"aws-sdk\\");
const v294 = v293;
v2.DirectConnect = v294;
const v295 = require(\\"aws-sdk\\");
const v296 = v295;
v2.DirectoryService = v296;
const v297 = require(\\"aws-sdk\\");
const v298 = v297;
v2.Discovery = v298;
const v299 = require(\\"aws-sdk\\");
const v300 = v299;
v2.DMS = v300;
const v301 = require(\\"aws-sdk\\");
const v302 = v301;
v2.DynamoDB = v302;
const v303 = require(\\"aws-sdk\\");
const v304 = v303;
v2.DynamoDBStreams = v304;
const v305 = require(\\"aws-sdk\\");
const v306 = v305;
v2.EC2 = v306;
const v307 = require(\\"aws-sdk\\");
const v308 = v307;
v2.ECR = v308;
const v309 = require(\\"aws-sdk\\");
const v310 = v309;
v2.ECS = v310;
const v311 = require(\\"aws-sdk\\");
const v312 = v311;
v2.EFS = v312;
const v313 = require(\\"aws-sdk\\");
const v314 = v313;
v2.ElastiCache = v314;
const v315 = require(\\"aws-sdk\\");
const v316 = v315;
v2.ElasticBeanstalk = v316;
const v317 = require(\\"aws-sdk\\");
const v318 = v317;
v2.ELB = v318;
const v319 = require(\\"aws-sdk\\");
const v320 = v319;
v2.ELBv2 = v320;
const v321 = require(\\"aws-sdk\\");
const v322 = v321;
v2.EMR = v322;
const v323 = require(\\"aws-sdk\\");
const v324 = v323;
v2.ES = v324;
const v325 = require(\\"aws-sdk\\");
const v326 = v325;
v2.ElasticTranscoder = v326;
const v327 = require(\\"aws-sdk\\");
const v328 = v327;
v2.Firehose = v328;
const v329 = require(\\"aws-sdk\\");
const v330 = v329;
v2.GameLift = v330;
const v331 = require(\\"aws-sdk\\");
const v332 = v331;
v2.Glacier = v332;
const v333 = require(\\"aws-sdk\\");
const v334 = v333;
v2.Health = v334;
const v335 = require(\\"aws-sdk\\");
const v336 = v335;
v2.IAM = v336;
const v337 = require(\\"aws-sdk\\");
const v338 = v337;
v2.ImportExport = v338;
const v339 = require(\\"aws-sdk\\");
const v340 = v339;
v2.Inspector = v340;
const v341 = require(\\"aws-sdk\\");
const v342 = v341;
v2.Iot = v342;
const v343 = require(\\"aws-sdk\\");
const v344 = v343;
v2.IotData = v344;
const v345 = require(\\"aws-sdk\\");
const v346 = v345;
v2.Kinesis = v346;
const v347 = require(\\"aws-sdk\\");
const v348 = v347;
v2.KinesisAnalytics = v348;
const v349 = require(\\"aws-sdk\\");
const v350 = v349;
v2.KMS = v350;
const v351 = require(\\"aws-sdk\\");
const v352 = v351;
v2.Lambda = v352;
const v353 = require(\\"aws-sdk\\");
const v354 = v353;
v2.LexRuntime = v354;
const v355 = require(\\"aws-sdk\\");
const v356 = v355;
v2.Lightsail = v356;
const v357 = require(\\"aws-sdk\\");
const v358 = v357;
v2.MachineLearning = v358;
const v359 = require(\\"aws-sdk\\");
const v360 = v359;
v2.MarketplaceCommerceAnalytics = v360;
const v361 = require(\\"aws-sdk\\");
const v362 = v361;
v2.MarketplaceMetering = v362;
const v363 = require(\\"aws-sdk\\");
const v364 = v363;
v2.MTurk = v364;
const v365 = require(\\"aws-sdk\\");
const v366 = v365;
v2.MobileAnalytics = v366;
const v367 = require(\\"aws-sdk\\");
const v368 = v367;
v2.OpsWorks = v368;
const v369 = require(\\"aws-sdk\\");
const v370 = v369;
v2.OpsWorksCM = v370;
const v371 = require(\\"aws-sdk\\");
const v372 = v371;
v2.Organizations = v372;
const v373 = require(\\"aws-sdk\\");
const v374 = v373;
v2.Pinpoint = v374;
const v375 = require(\\"aws-sdk\\");
const v376 = v375;
v2.Polly = v376;
const v377 = require(\\"aws-sdk\\");
const v378 = v377;
v2.RDS = v378;
const v379 = require(\\"aws-sdk\\");
const v380 = v379;
v2.Redshift = v380;
const v381 = require(\\"aws-sdk\\");
const v382 = v381;
v2.Rekognition = v382;
const v383 = require(\\"aws-sdk\\");
const v384 = v383;
v2.ResourceGroupsTaggingAPI = v384;
const v385 = require(\\"aws-sdk\\");
const v386 = v385;
v2.Route53 = v386;
const v387 = require(\\"aws-sdk\\");
const v388 = v387;
v2.Route53Domains = v388;
const v389 = require(\\"aws-sdk\\");
const v390 = v389;
v2.S3 = v390;
const v391 = require(\\"aws-sdk\\");
const v392 = v391;
v2.S3Control = v392;
const v393 = require(\\"aws-sdk\\");
const v394 = v393;
v2.ServiceCatalog = v394;
const v395 = require(\\"aws-sdk\\");
const v396 = v395;
v2.SES = v396;
const v397 = require(\\"aws-sdk\\");
const v398 = v397;
v2.Shield = v398;
const v399 = require(\\"aws-sdk\\");
const v400 = v399;
v2.SimpleDB = v400;
const v401 = require(\\"aws-sdk\\");
const v402 = v401;
v2.SMS = v402;
const v403 = require(\\"aws-sdk\\");
const v404 = v403;
v2.Snowball = v404;
const v405 = require(\\"aws-sdk\\");
const v406 = v405;
v2.SNS = v406;
const v407 = require(\\"aws-sdk\\");
const v408 = v407;
v2.SQS = v408;
const v409 = require(\\"aws-sdk\\");
const v410 = v409;
v2.SSM = v410;
const v411 = require(\\"aws-sdk\\");
const v412 = v411;
v2.StorageGateway = v412;
const v413 = require(\\"aws-sdk\\");
const v414 = v413;
v2.StepFunctions = v414;
const v415 = require(\\"aws-sdk\\");
const v416 = v415;
v2.Support = v416;
const v417 = require(\\"aws-sdk\\");
const v418 = v417;
v2.SWF = v418;
v2.SimpleWorkflow = v418;
const v419 = require(\\"aws-sdk\\");
const v420 = v419;
v2.XRay = v420;
const v421 = require(\\"aws-sdk\\");
const v422 = v421;
v2.WAF = v422;
const v423 = require(\\"aws-sdk\\");
const v424 = v423;
v2.WAFRegional = v424;
const v425 = require(\\"aws-sdk\\");
const v426 = v425;
v2.WorkDocs = v426;
const v427 = require(\\"aws-sdk\\");
const v428 = v427;
v2.WorkSpaces = v428;
const v429 = require(\\"aws-sdk\\");
const v430 = v429;
v2.CodeStar = v430;
const v431 = require(\\"aws-sdk\\");
const v432 = v431;
v2.LexModelBuildingService = v432;
const v433 = require(\\"aws-sdk\\");
const v434 = v433;
v2.MarketplaceEntitlementService = v434;
const v435 = require(\\"aws-sdk\\");
const v436 = v435;
v2.Athena = v436;
const v437 = require(\\"aws-sdk\\");
const v438 = v437;
v2.Greengrass = v438;
const v439 = require(\\"aws-sdk\\");
const v440 = v439;
v2.DAX = v440;
const v441 = require(\\"aws-sdk\\");
const v442 = v441;
v2.MigrationHub = v442;
const v443 = require(\\"aws-sdk\\");
const v444 = v443;
v2.CloudHSMV2 = v444;
const v445 = require(\\"aws-sdk\\");
const v446 = v445;
v2.Glue = v446;
const v447 = require(\\"aws-sdk\\");
const v448 = v447;
v2.Mobile = v448;
const v449 = require(\\"aws-sdk\\");
const v450 = v449;
v2.Pricing = v450;
const v451 = require(\\"aws-sdk\\");
const v452 = v451;
v2.CostExplorer = v452;
const v453 = require(\\"aws-sdk\\");
const v454 = v453;
v2.MediaConvert = v454;
const v455 = require(\\"aws-sdk\\");
const v456 = v455;
v2.MediaLive = v456;
const v457 = require(\\"aws-sdk\\");
const v458 = v457;
v2.MediaPackage = v458;
const v459 = require(\\"aws-sdk\\");
const v460 = v459;
v2.MediaStore = v460;
const v461 = require(\\"aws-sdk\\");
const v462 = v461;
v2.MediaStoreData = v462;
const v463 = require(\\"aws-sdk\\");
const v464 = v463;
v2.AppSync = v464;
const v465 = require(\\"aws-sdk\\");
const v466 = v465;
v2.GuardDuty = v466;
const v467 = require(\\"aws-sdk\\");
const v468 = v467;
v2.MQ = v468;
const v469 = require(\\"aws-sdk\\");
const v470 = v469;
v2.Comprehend = v470;
const v471 = require(\\"aws-sdk\\");
const v472 = v471;
v2.IoTJobsDataPlane = v472;
const v473 = require(\\"aws-sdk\\");
const v474 = v473;
v2.KinesisVideoArchivedMedia = v474;
const v475 = require(\\"aws-sdk\\");
const v476 = v475;
v2.KinesisVideoMedia = v476;
const v477 = require(\\"aws-sdk\\");
const v478 = v477;
v2.KinesisVideo = v478;
const v479 = require(\\"aws-sdk\\");
const v480 = v479;
v2.SageMakerRuntime = v480;
const v481 = require(\\"aws-sdk\\");
const v482 = v481;
v2.SageMaker = v482;
const v483 = require(\\"aws-sdk\\");
const v484 = v483;
v2.Translate = v484;
const v485 = require(\\"aws-sdk\\");
const v486 = v485;
v2.ResourceGroups = v486;
const v487 = require(\\"aws-sdk\\");
const v488 = v487;
v2.AlexaForBusiness = v488;
const v489 = require(\\"aws-sdk\\");
const v490 = v489;
v2.Cloud9 = v490;
const v491 = require(\\"aws-sdk\\");
const v492 = v491;
v2.ServerlessApplicationRepository = v492;
const v493 = require(\\"aws-sdk\\");
const v494 = v493;
v2.ServiceDiscovery = v494;
const v495 = require(\\"aws-sdk\\");
const v496 = v495;
v2.WorkMail = v496;
const v497 = require(\\"aws-sdk\\");
const v498 = v497;
v2.AutoScalingPlans = v498;
const v499 = require(\\"aws-sdk\\");
const v500 = v499;
v2.TranscribeService = v500;
const v501 = require(\\"aws-sdk\\");
const v502 = v501;
v2.Connect = v502;
const v503 = require(\\"aws-sdk\\");
const v504 = v503;
v2.ACMPCA = v504;
const v505 = require(\\"aws-sdk\\");
const v506 = v505;
v2.FMS = v506;
const v507 = require(\\"aws-sdk\\");
const v508 = v507;
v2.SecretsManager = v508;
const v509 = require(\\"aws-sdk\\");
const v510 = v509;
v2.IoTAnalytics = v510;
const v511 = require(\\"aws-sdk\\");
const v512 = v511;
v2.IoT1ClickDevicesService = v512;
const v513 = require(\\"aws-sdk\\");
const v514 = v513;
v2.IoT1ClickProjects = v514;
const v515 = require(\\"aws-sdk\\");
const v516 = v515;
v2.PI = v516;
const v517 = require(\\"aws-sdk\\");
const v518 = v517;
v2.Neptune = v518;
const v519 = require(\\"aws-sdk\\");
const v520 = v519;
v2.MediaTailor = v520;
const v521 = require(\\"aws-sdk\\");
const v522 = v521;
v2.EKS = v522;
const v523 = require(\\"aws-sdk\\");
const v524 = v523;
v2.Macie = v524;
const v525 = require(\\"aws-sdk\\");
const v526 = v525;
v2.DLM = v526;
const v527 = require(\\"aws-sdk\\");
const v528 = v527;
v2.Signer = v528;
const v529 = require(\\"aws-sdk\\");
const v530 = v529;
v2.Chime = v530;
const v531 = require(\\"aws-sdk\\");
const v532 = v531;
v2.PinpointEmail = v532;
const v533 = require(\\"aws-sdk\\");
const v534 = v533;
v2.RAM = v534;
const v535 = require(\\"aws-sdk\\");
const v536 = v535;
v2.Route53Resolver = v536;
const v537 = require(\\"aws-sdk\\");
const v538 = v537;
v2.PinpointSMSVoice = v538;
const v539 = require(\\"aws-sdk\\");
const v540 = v539;
v2.QuickSight = v540;
const v541 = require(\\"aws-sdk\\");
const v542 = v541;
v2.RDSDataService = v542;
const v543 = require(\\"aws-sdk\\");
const v544 = v543;
v2.Amplify = v544;
const v545 = require(\\"aws-sdk\\");
const v546 = v545;
v2.DataSync = v546;
const v547 = require(\\"aws-sdk\\");
const v548 = v547;
v2.RoboMaker = v548;
const v549 = require(\\"aws-sdk\\");
const v550 = v549;
v2.Transfer = v550;
const v551 = require(\\"aws-sdk\\");
const v552 = v551;
v2.GlobalAccelerator = v552;
const v553 = require(\\"aws-sdk\\");
const v554 = v553;
v2.ComprehendMedical = v554;
const v555 = require(\\"aws-sdk\\");
const v556 = v555;
v2.KinesisAnalyticsV2 = v556;
const v557 = require(\\"aws-sdk\\");
const v558 = v557;
v2.MediaConnect = v558;
const v559 = require(\\"aws-sdk\\");
const v560 = v559;
v2.FSx = v560;
const v561 = require(\\"aws-sdk\\");
const v562 = v561;
v2.SecurityHub = v562;
const v563 = require(\\"aws-sdk\\");
const v564 = v563;
v2.AppMesh = v564;
const v565 = require(\\"aws-sdk\\");
const v566 = v565;
v2.LicenseManager = v566;
const v567 = require(\\"aws-sdk\\");
const v568 = v567;
v2.Kafka = v568;
const v569 = require(\\"aws-sdk\\");
const v570 = v569;
v2.ApiGatewayManagementApi = v570;
const v571 = require(\\"aws-sdk\\");
const v572 = v571;
v2.ApiGatewayV2 = v572;
const v573 = require(\\"aws-sdk\\");
const v574 = v573;
v2.DocDB = v574;
const v575 = require(\\"aws-sdk\\");
const v576 = v575;
v2.Backup = v576;
const v577 = require(\\"aws-sdk\\");
const v578 = v577;
v2.WorkLink = v578;
const v579 = require(\\"aws-sdk\\");
const v580 = v579;
v2.Textract = v580;
const v581 = require(\\"aws-sdk\\");
const v582 = v581;
v2.ManagedBlockchain = v582;
const v583 = require(\\"aws-sdk\\");
const v584 = v583;
v2.MediaPackageVod = v584;
const v585 = require(\\"aws-sdk\\");
const v586 = v585;
v2.GroundStation = v586;
const v587 = require(\\"aws-sdk\\");
const v588 = v587;
v2.IoTThingsGraph = v588;
const v589 = require(\\"aws-sdk\\");
const v590 = v589;
v2.IoTEvents = v590;
const v591 = require(\\"aws-sdk\\");
const v592 = v591;
v2.IoTEventsData = v592;
const v593 = require(\\"aws-sdk\\");
const v594 = v593;
v2.Personalize = v594;
const v595 = require(\\"aws-sdk\\");
const v596 = v595;
v2.PersonalizeEvents = v596;
const v597 = require(\\"aws-sdk\\");
const v598 = v597;
v2.PersonalizeRuntime = v598;
const v599 = require(\\"aws-sdk\\");
const v600 = v599;
v2.ApplicationInsights = v600;
const v601 = require(\\"aws-sdk\\");
const v602 = v601;
v2.ServiceQuotas = v602;
const v603 = require(\\"aws-sdk\\");
const v604 = v603;
v2.EC2InstanceConnect = v604;
const v605 = require(\\"aws-sdk\\");
const v606 = v605;
v2.EventBridge = v606;
const v607 = require(\\"aws-sdk\\");
const v608 = v607;
v2.LakeFormation = v608;
const v609 = require(\\"aws-sdk\\");
const v610 = v609;
v2.ForecastService = v610;
const v611 = require(\\"aws-sdk\\");
const v612 = v611;
v2.ForecastQueryService = v612;
const v613 = require(\\"aws-sdk\\");
const v614 = v613;
v2.QLDB = v614;
const v615 = require(\\"aws-sdk\\");
const v616 = v615;
v2.QLDBSession = v616;
const v617 = require(\\"aws-sdk\\");
const v618 = v617;
v2.WorkMailMessageFlow = v618;
const v619 = require(\\"aws-sdk\\");
const v620 = v619;
v2.CodeStarNotifications = v620;
const v621 = require(\\"aws-sdk\\");
const v622 = v621;
v2.SavingsPlans = v622;
const v623 = require(\\"aws-sdk\\");
const v624 = v623;
v2.SSO = v624;
const v625 = require(\\"aws-sdk\\");
const v626 = v625;
v2.SSOOIDC = v626;
const v627 = require(\\"aws-sdk\\");
const v628 = v627;
v2.MarketplaceCatalog = v628;
const v629 = require(\\"aws-sdk\\");
const v630 = v629;
v2.DataExchange = v630;
const v631 = require(\\"aws-sdk\\");
const v632 = v631;
v2.SESV2 = v632;
const v633 = require(\\"aws-sdk\\");
const v634 = v633;
v2.MigrationHubConfig = v634;
const v635 = require(\\"aws-sdk\\");
const v636 = v635;
v2.ConnectParticipant = v636;
const v637 = require(\\"aws-sdk\\");
const v638 = v637;
v2.AppConfig = v638;
const v639 = require(\\"aws-sdk\\");
const v640 = v639;
v2.IoTSecureTunneling = v640;
const v641 = require(\\"aws-sdk\\");
const v642 = v641;
v2.WAFV2 = v642;
const v643 = require(\\"aws-sdk\\");
const v644 = v643;
v2.ElasticInference = v644;
const v645 = require(\\"aws-sdk\\");
const v646 = v645;
v2.Imagebuilder = v646;
const v647 = require(\\"aws-sdk\\");
const v648 = v647;
v2.Schemas = v648;
const v649 = require(\\"aws-sdk\\");
const v650 = v649;
v2.AccessAnalyzer = v650;
const v651 = require(\\"aws-sdk\\");
const v652 = v651;
v2.CodeGuruReviewer = v652;
const v653 = require(\\"aws-sdk\\");
const v654 = v653;
v2.CodeGuruProfiler = v654;
const v655 = require(\\"aws-sdk\\");
const v656 = v655;
v2.ComputeOptimizer = v656;
const v657 = require(\\"aws-sdk\\");
const v658 = v657;
v2.FraudDetector = v658;
const v659 = require(\\"aws-sdk\\");
const v660 = v659;
v2.Kendra = v660;
const v661 = require(\\"aws-sdk\\");
const v662 = v661;
v2.NetworkManager = v662;
const v663 = require(\\"aws-sdk\\");
const v664 = v663;
v2.Outposts = v664;
const v665 = require(\\"aws-sdk\\");
const v666 = v665;
v2.AugmentedAIRuntime = v666;
const v667 = require(\\"aws-sdk\\");
const v668 = v667;
v2.EBS = v668;
const v669 = require(\\"aws-sdk\\");
const v670 = v669;
v2.KinesisVideoSignalingChannels = v670;
const v671 = require(\\"aws-sdk\\");
const v672 = v671;
v2.Detective = v672;
const v673 = require(\\"aws-sdk\\");
const v674 = v673;
v2.CodeStarconnections = v674;
const v675 = require(\\"aws-sdk\\");
const v676 = v675;
v2.Synthetics = v676;
const v677 = require(\\"aws-sdk\\");
const v678 = v677;
v2.IoTSiteWise = v678;
const v679 = require(\\"aws-sdk\\");
const v680 = v679;
v2.Macie2 = v680;
const v681 = require(\\"aws-sdk\\");
const v682 = v681;
v2.CodeArtifact = v682;
const v683 = require(\\"aws-sdk\\");
const v684 = v683;
v2.Honeycode = v684;
const v685 = require(\\"aws-sdk\\");
const v686 = v685;
v2.IVS = v686;
const v687 = require(\\"aws-sdk\\");
const v688 = v687;
v2.Braket = v688;
const v689 = require(\\"aws-sdk\\");
const v690 = v689;
v2.IdentityStore = v690;
const v691 = require(\\"aws-sdk\\");
const v692 = v691;
v2.Appflow = v692;
const v693 = require(\\"aws-sdk\\");
const v694 = v693;
v2.RedshiftData = v694;
const v695 = require(\\"aws-sdk\\");
const v696 = v695;
v2.SSOAdmin = v696;
const v697 = require(\\"aws-sdk\\");
const v698 = v697;
v2.TimestreamQuery = v698;
const v699 = require(\\"aws-sdk\\");
const v700 = v699;
v2.TimestreamWrite = v700;
const v701 = require(\\"aws-sdk\\");
const v702 = v701;
v2.S3Outposts = v702;
const v703 = require(\\"aws-sdk\\");
const v704 = v703;
v2.DataBrew = v704;
const v705 = require(\\"aws-sdk\\");
const v706 = v705;
v2.ServiceCatalogAppRegistry = v706;
const v707 = require(\\"aws-sdk\\");
const v708 = v707;
v2.NetworkFirewall = v708;
const v709 = require(\\"aws-sdk\\");
const v710 = v709;
v2.MWAA = v710;
const v711 = require(\\"aws-sdk\\");
const v712 = v711;
v2.AmplifyBackend = v712;
const v713 = require(\\"aws-sdk\\");
const v714 = v713;
v2.AppIntegrations = v714;
const v715 = require(\\"aws-sdk\\");
const v716 = v715;
v2.ConnectContactLens = v716;
const v717 = require(\\"aws-sdk\\");
const v718 = v717;
v2.DevOpsGuru = v718;
const v719 = require(\\"aws-sdk\\");
const v720 = v719;
v2.ECRPUBLIC = v720;
const v721 = require(\\"aws-sdk\\");
const v722 = v721;
v2.LookoutVision = v722;
const v723 = require(\\"aws-sdk\\");
const v724 = v723;
v2.SageMakerFeatureStoreRuntime = v724;
const v725 = require(\\"aws-sdk\\");
const v726 = v725;
v2.CustomerProfiles = v726;
const v727 = require(\\"aws-sdk\\");
const v728 = v727;
v2.AuditManager = v728;
const v729 = require(\\"aws-sdk\\");
const v730 = v729;
v2.EMRcontainers = v730;
const v731 = require(\\"aws-sdk\\");
const v732 = v731;
v2.HealthLake = v732;
const v733 = require(\\"aws-sdk\\");
const v734 = v733;
v2.SagemakerEdge = v734;
const v735 = require(\\"aws-sdk\\");
const v736 = v735;
v2.Amp = v736;
const v737 = require(\\"aws-sdk\\");
const v738 = v737;
v2.GreengrassV2 = v738;
const v739 = require(\\"aws-sdk\\");
const v740 = v739;
v2.IotDeviceAdvisor = v740;
const v741 = require(\\"aws-sdk\\");
const v742 = v741;
v2.IoTFleetHub = v742;
const v743 = require(\\"aws-sdk\\");
const v744 = v743;
v2.IoTWireless = v744;
const v745 = require(\\"aws-sdk\\");
const v746 = v745;
v2.Location = v746;
const v747 = require(\\"aws-sdk\\");
const v748 = v747;
v2.WellArchitected = v748;
const v749 = require(\\"aws-sdk\\");
const v750 = v749;
v2.LexModelsV2 = v750;
const v751 = require(\\"aws-sdk\\");
const v752 = v751;
v2.LexRuntimeV2 = v752;
const v753 = require(\\"aws-sdk\\");
const v754 = v753;
v2.Fis = v754;
const v755 = require(\\"aws-sdk\\");
const v756 = v755;
v2.LookoutMetrics = v756;
const v757 = require(\\"aws-sdk\\");
const v758 = v757;
v2.Mgn = v758;
const v759 = require(\\"aws-sdk\\");
const v760 = v759;
v2.LookoutEquipment = v760;
const v761 = require(\\"aws-sdk\\");
const v762 = v761;
v2.Nimble = v762;
const v763 = require(\\"aws-sdk\\");
const v764 = v763;
v2.Finspace = v764;
const v765 = require(\\"aws-sdk\\");
const v766 = v765;
v2.Finspacedata = v766;
const v767 = require(\\"aws-sdk\\");
const v768 = v767;
v2.SSMContacts = v768;
const v769 = require(\\"aws-sdk\\");
const v770 = v769;
v2.SSMIncidents = v770;
const v771 = require(\\"aws-sdk\\");
const v772 = v771;
v2.ApplicationCostProfiler = v772;
const v773 = require(\\"aws-sdk\\");
const v774 = v773;
v2.AppRunner = v774;
const v775 = require(\\"aws-sdk\\");
const v776 = v775;
v2.Proton = v776;
const v777 = require(\\"aws-sdk\\");
const v778 = v777;
v2.Route53RecoveryCluster = v778;
const v779 = require(\\"aws-sdk\\");
const v780 = v779;
v2.Route53RecoveryControlConfig = v780;
const v781 = require(\\"aws-sdk\\");
const v782 = v781;
v2.Route53RecoveryReadiness = v782;
const v783 = require(\\"aws-sdk\\");
const v784 = v783;
v2.ChimeSDKIdentity = v784;
const v785 = require(\\"aws-sdk\\");
const v786 = v785;
v2.ChimeSDKMessaging = v786;
const v787 = require(\\"aws-sdk\\");
const v788 = v787;
v2.SnowDeviceManagement = v788;
const v789 = require(\\"aws-sdk\\");
const v790 = v789;
v2.MemoryDB = v790;
const v791 = require(\\"aws-sdk\\");
const v792 = v791;
v2.OpenSearch = v792;
const v793 = require(\\"aws-sdk\\");
const v794 = v793;
v2.KafkaConnect = v794;
const v795 = require(\\"aws-sdk\\");
const v796 = v795;
v2.VoiceID = v796;
const v797 = require(\\"aws-sdk\\");
const v798 = v797;
v2.Wisdom = v798;
const v799 = require(\\"aws-sdk\\");
const v800 = v799;
v2.Account = v800;
const v801 = require(\\"aws-sdk\\");
const v802 = v801;
v2.CloudControl = v802;
const v803 = require(\\"aws-sdk\\");
const v804 = v803;
v2.Grafana = v804;
const v805 = require(\\"aws-sdk\\");
const v806 = v805;
v2.Panorama = v806;
const v807 = require(\\"aws-sdk\\");
const v808 = v807;
v2.ChimeSDKMeetings = v808;
const v809 = require(\\"aws-sdk\\");
const v810 = v809;
v2.Resiliencehub = v810;
const v811 = require(\\"aws-sdk\\");
const v812 = v811;
v2.MigrationHubStrategy = v812;
const v813 = require(\\"aws-sdk\\");
const v814 = v813;
v2.AppConfigData = v814;
const v815 = require(\\"aws-sdk\\");
const v816 = v815;
v2.Drs = v816;
const v817 = require(\\"aws-sdk\\");
const v818 = v817;
v2.MigrationHubRefactorSpaces = v818;
const v819 = require(\\"aws-sdk\\");
const v820 = v819;
v2.Evidently = v820;
const v821 = require(\\"aws-sdk\\");
const v822 = v821;
v2.Inspector2 = v822;
const v823 = require(\\"aws-sdk\\");
const v824 = v823;
v2.Rbin = v824;
const v825 = require(\\"aws-sdk\\");
const v826 = v825;
v2.RUM = v826;
const v827 = require(\\"aws-sdk\\");
const v828 = v827;
v2.BackupGateway = v828;
const v829 = require(\\"aws-sdk\\");
const v830 = v829;
v2.IoTTwinMaker = v830;
const v831 = require(\\"aws-sdk\\");
const v832 = v831;
v2.WorkSpacesWeb = v832;
const v833 = require(\\"aws-sdk\\");
const v834 = v833;
v2.AmplifyUIBuilder = v834;
const v835 = require(\\"aws-sdk\\");
const v836 = v835;
v2.Keyspaces = v836;
const v837 = require(\\"aws-sdk\\");
const v838 = v837;
v2.Billingconductor = v838;
const v839 = require(\\"aws-sdk\\");
const v840 = v839;
v2.GameSparks = v840;
const v841 = require(\\"aws-sdk\\");
const v842 = v841;
v2.PinpointSMSVoiceV2 = v842;
const v843 = require(\\"aws-sdk\\");
const v844 = v843;
v2.Ivschat = v844;
const v845 = require(\\"aws-sdk\\");
const v846 = v845;
v2.ChimeSDKMediaPipelines = v846;
const v847 = require(\\"aws-sdk\\");
const v848 = v847;
v2.EMRServerless = v848;
const v849 = require(\\"aws-sdk\\");
const v850 = v849;
v2.M2 = v850;
const v851 = require(\\"aws-sdk\\");
const v852 = v851;
v2.ConnectCampaigns = v852;
const v853 = require(\\"aws-sdk\\");
const v854 = v853;
v2.RedshiftServerless = v854;
const v855 = require(\\"aws-sdk\\");
const v856 = v855;
v2.RolesAnywhere = v856;
const v857 = require(\\"aws-sdk\\");
const v858 = v857;
v2.LicenseManagerUserSubscriptions = v858;
const v859 = require(\\"aws-sdk\\");
const v860 = v859;
v2.BackupStorage = v860;
v2.PrivateNetworks = v139;
var v1 = v2;
const v0 = () => { const client = new v1.DynamoDB(); return client.config.endpoint; };
exports.handler = v0;
"
`;

exports[`serialize a class declaration 1`] = `
"// <stdin>
var v3 = 0;
var v2 = class Foo {
  method() {
    v3++;
    return v3;
  }
};
var v1 = v2;
var v0 = () => {
  const foo = new v1();
  foo.method();
  foo.method();
  return v3;
};
exports.handler = v0;
"
`;

exports[`serialize a class declaration with constructor 1`] = `
"// <stdin>
var v3 = 0;
var v2 = class Foo {
  constructor() {
    v3 += 1;
  }
  method() {
    v3++;
    return v3;
  }
};
var v1 = v2;
var v0 = () => {
  const foo = new v1();
  foo.method();
  foo.method();
  return v3;
};
exports.handler = v0;
"
`;

exports[`serialize a class hierarchy 1`] = `
"// <stdin>
var v5 = 0;
var v4 = class Foo {
  method() {
    return v5 += 1;
  }
};
var v3 = v4;
var v2 = class Bar extends v3 {
  method() {
    return super.method() + 1;
  }
};
var v1 = v2;
var v0 = () => {
  const bar = new v1();
  return [bar.method(), v5];
};
exports.handler = v0;
"
`;

exports[`serialize a class mix-in 1`] = `
"// <stdin>
var v5 = 0;
var v4 = () => {
  return class Foo {
    method() {
      return v5 += 1;
    }
  };
};
var v3 = v4;
var v2 = class Bar extends v3() {
  method() {
    return super.method() + 1;
  }
};
var v1 = v2;
var v0 = () => {
  const bar = new v1();
  return [bar.method(), v5];
};
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class getter 1`] = `
"// <stdin>
var v3 = 0;
var v2 = class Foo {
  get method() {
    return v3 += 1;
  }
};
Object.defineProperty(v2.prototype, \\"method\\", { get: function get() {
  return v3 += 2;
} });
var v1 = v2;
var v0 = () => {
  const foo = new v1();
  foo.method;
  foo.method;
  return v3;
};
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class getter and setter 1`] = `
"// <stdin>
var v3 = 0;
var v2 = class Foo {
  set method(val) {
    v3 += val;
  }
  get method() {
    return v3;
  }
};
Object.defineProperty(v2.prototype, \\"method\\", { get: function get() {
  return v3 + 1;
}, set: function set(val) {
  v3 += val + 1;
} });
var v1 = v2;
var v0 = () => {
  const foo = new v1();
  foo.method = 1;
  foo.method = 1;
  return foo.method;
};
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class getter while setter remains unchanged 1`] = `
"// <stdin>
var v3 = 0;
var v2 = class Foo {
  set method(val) {
    v3 += val;
  }
  get method() {
    return v3;
  }
};
Object.defineProperty(v2.prototype, \\"method\\", { get: function get() {
  return v3 + 1;
}, set: Object.getOwnPropertyDescriptor(v2.prototype, \\"method\\").set });
var v1 = v2;
var v0 = () => {
  const foo = new v1();
  foo.method = 1;
  foo.method = 1;
  return foo.method;
};
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class method 1`] = `
"// <stdin>
var v3 = 0;
var v2 = class Foo {
  method() {
    v3 += 1;
  }
};
var v4 = function() {
  v3 += 2;
};
var v5 = {};
v4.prototype = v5;
v2.prototype.method = v4;
var v1 = v2;
var v0 = () => {
  const foo = new v1();
  foo.method();
  foo.method();
  return v3;
};
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class method that has been re-set 1`] = `
"// <stdin>
var v3 = 0;
var v2 = class Foo {
  method() {
    v3 += 1;
  }
};
var v4 = function() {
  v3 += 2;
};
var v5 = {};
v4.prototype = v5;
v2.prototype.method = v4;
var v1 = v2;
var v6 = {};
v6.method = v4;
var v7 = function method() {
  v3 += 1;
};
var v0 = () => {
  const foo = new v1();
  foo.method();
  v6.method = v7;
  foo.method();
  return v3;
};
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class setter 1`] = `
"// <stdin>
var v3 = 0;
var v2 = class Foo {
  set method(val) {
    v3 += val;
  }
};
Object.defineProperty(v2.prototype, \\"method\\", { set: function set(val) {
  v3 += val + 1;
} });
var v1 = v2;
var v0 = () => {
  const foo = new v1();
  foo.method = 1;
  foo.method = 1;
  return v3;
};
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched static class arrow function 1`] = `
"var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== \\"symbol\\" ? key + \\"\\" : key, value);
  return value;
};

// <stdin>
var v3 = 0;
var _a;
var v2 = (_a = class {
}, __publicField(_a, \\"method\\", () => {
  v3 += 1;
}), _a);
var v4 = function() {
  v3 += 2;
};
var v5 = {};
v4.prototype = v5;
v2.method = v4;
var v1 = v2;
var v0 = () => {
  v1.method();
  v1.method();
  return v3;
};
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched static class method 1`] = `
"// <stdin>
var v3 = 0;
var v2 = class Foo {
  method() {
    v3 += 1;
  }
};
var v4 = function() {
  v3 += 2;
};
var v5 = {};
v4.prototype = v5;
v2.method = v4;
var v1 = v2;
var v0 = () => {
  v1.method();
  v1.method();
  return v3;
};
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched static class property 1`] = `
"// <stdin>
var v0 = () => {
  return 2;
};
exports.handler = v0;
"
`;

exports[`serialize an imported module 1`] = `
"// <stdin>
var v0 = function isNode(a) {
  return typeof (a == null ? void 0 : a.kind) === \\"number\\";
};
var v1 = {};
v0.prototype = v1;
exports.handler = v0;
"
`;
