// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`all observers of a free variable share the same reference 1`] = `
"var v3 = 0;
const v2 = function up() { v3 += 1; };
var v1 = v2;
const v5 = function down() { v3 -= 1; };
var v4 = v5;
const v0 = () => { v1(); v4(); return v3; };
exports.handler = v0;
"
`;

exports[`serialize a class declaration 1`] = `
"var v4 = 0;
const v3 = class Foo {
    method() { v4++; return v4; }
};
const v2 = v3;
var v1 = v2;
const v0 = () => { const foo = new v1(); foo.method(); foo.method(); return v4; };
exports.handler = v0;
"
`;

exports[`serialize a class declaration with constructor 1`] = `
"var v4 = 0;
const v3 = class Foo {
    constructor() { v4 += 1; }
    method() { v4++; return v4; }
};
const v2 = v3;
var v1 = v2;
const v0 = () => { const foo = new v1(); foo.method(); foo.method(); return v4; };
exports.handler = v0;
"
`;

exports[`serialize a class hierarchy 1`] = `
"var v7 = 0;
const v6 = class Foo {
    method() { return (v7 += 1); }
};
const v5 = v6;
var v4 = v5;
const v3 = class Bar extends v4 {
    method() { return super.method() + 1; }
};
const v2 = v3;
var v1 = v2;
const v0 = () => { const bar = new v1(); return [bar.method(), v7]; };
exports.handler = v0;
"
`;

exports[`serialize a class mix-in 1`] = `
"var v6 = 0;
const v5 = () => { return class Foo {
    method() { return (v6 += 1); }
}; };
var v4 = v5;
const v3 = class Bar extends v4() {
    method() { return super.method() + 1; }
};
const v2 = v3;
var v1 = v2;
const v0 = () => { const bar = new v1(); return [bar.method(), v6]; };
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class getter 1`] = `
"var v4 = 0;
const v3 = class Foo {
    get method() { return (v4 += 1); }
};
const v5 = function get() { return (v4 += 2); };
Object.defineProperty(v3.prototype, \\"method\\", { get: v5 });
const v2 = v3;
var v1 = v2;
const v0 = () => { const foo = new v1(); foo.method; foo.method; return v4; };
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class getter and setter 1`] = `
"var v4 = 0;
const v3 = class Foo {
    set method(val) { v4 += val; }
    get method() { return v4; }
};
const v5 = function get() { return v4 + 1; };
const v6 = function set(val) { v4 += val + 1; };
Object.defineProperty(v3.prototype, \\"method\\", { get: v5, set: v6 });
const v2 = v3;
var v1 = v2;
const v0 = () => { const foo = new v1(); foo.method = 1; foo.method = 1; return foo.method; };
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class getter while setter remains unchanged 1`] = `
"var v4 = 0;
const v3 = class Foo {
    set method(val) { v4 += val; }
    get method() { return v4; }
};
const v5 = function get() { return v4 + 1; };
Object.defineProperty(v3.prototype, \\"method\\", { get: v5, set: Object.getOwnPropertyDescriptor(v3.prototype, \\"method\\").set });
const v2 = v3;
var v1 = v2;
const v0 = () => { const foo = new v1(); foo.method = 1; foo.method = 1; return foo.method; };
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class method 1`] = `
"var v4 = 0;
const v3 = class Foo {
    method() { v4 += 1; }
};
const v5 = function () { v4 += 2; };
v3.prototype.method = v5;
const v2 = v3;
var v1 = v2;
const v0 = () => { const foo = new v1(); foo.method(); foo.method(); return v4; };
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched class setter 1`] = `
"var v4 = 0;
const v3 = class Foo {
    set method(val) { v4 += val; }
};
const v5 = function set(val) { v4 += val + 1; };
Object.defineProperty(v3.prototype, \\"method\\", { set: v5 });
const v2 = v3;
var v1 = v2;
const v0 = () => { const foo = new v1(); foo.method = 1; foo.method = 1; return v4; };
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched static class arrow function 1`] = `
"var v4 = 0;
const v3 = class Foo {
    static method = () => { v4 += 1; };
};
const v5 = function () { v4 += 2; };
v3.method = v5;
const v2 = v3;
var v1 = v2;
const v0 = () => { v1.method(); v1.method(); return v4; };
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched static class method 1`] = `
"var v4 = 0;
const v3 = class Foo {
    method() { v4 += 1; }
};
const v5 = function () { v4 += 2; };
v3.method = v5;
const v2 = v3;
var v1 = v2;
const v0 = () => { v1.method(); v1.method(); return v4; };
exports.handler = v0;
"
`;

exports[`serialize a monkey-patched static class property 1`] = `
"const v3 = class Foo {
    static prop = 1;
};
v3.prop = 2;
const v2 = v3;
var v1 = v2;
const v0 = () => { return v1.prop; };
exports.handler = v0;
"
`;

exports[`serialize an imported module 1`] = `
"const v0 = function isNode(a) { return typeof a?.kind === \\"number\\"; };
exports.handler = v0;
"
`;
