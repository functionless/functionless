// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`$SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.forEach(input.list, function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.list, function(item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map([1, 2, 3], (item) => nitem) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.map([1, 2, 3], function(item))": Object {
      "ItemsPath": "$.heap1",
      "Iterator": Object {
        "StartAt": "return n\${item}",
        "States": Object {
          "1__return n\${item}": Object {
            "End": true,
            "InputPath": "$.heap0.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return n\${item}": Object {
            "Next": "1__return n\${item}",
            "Parameters": Object {
              "string.$": "States.Format('n{}',$.item)",
            },
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.map([1, 2, 3], function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "1__return $SFN.map([1, 2, 3], function(item))": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map([1, 2, 3], function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map([1, 2, 3], function(item))": Object {
      "Next": "$SFN.map([1, 2, 3], function(item))",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.map(input.list, function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.map(input.list, function(item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index) => item > index) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function(item, index))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > index": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function(item, index))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function(item, index))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function(item, index))": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function(item, index))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "check__[1, 2, 3, 4].filter(function(item, index))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function(item, index)",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function(item, index))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function(item, index))": Object {
      "Next": "set__end__[1, 2, 3, 4].filter(function(item, index))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > index": Object {
      "Next": "1__return item > index",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "function(item, index)": Object {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "index",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function(item, index))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function(item, index))",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function(item, index))",
      "Type": "Choice",
    },
    "index": Object {
      "InputPath": "$.heap1.arr[0].index",
      "Next": "return item > index",
      "ResultPath": "$.index",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function(item, index))": Object {
      "Next": "check__[1, 2, 3, 4].filter(function(item, index))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function(item, index))": Object {
      "Next": "[1, 2, 3, 4].filter(function(item, index))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > index": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "StringGreaterThanPath": "$.index",
                      "Variable": "$.item",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "NumericGreaterThanPath": "$.index",
                      "Variable": "$.item",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > index",
        },
      ],
      "Default": "false__return item > index",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function(item, index))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function(item, index))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function(item, index))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function(item, index))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > index": Object {
      "Next": "1__return item > index",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index, array) => item > 1 + 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function(item, _, arr))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > arr[0]": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function(item, _, arr))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function(item, _, arr))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function(item, _, arr))": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function(item, _, arr))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "_": Object {
      "InputPath": "$.heap1.arr[0].index",
      "Next": "arr",
      "ResultPath": "$._",
      "Type": "Pass",
    },
    "arr": Object {
      "InputPath": "$.heap0",
      "Next": "return item > arr[0]",
      "ResultPath": "$.arr",
      "Type": "Pass",
    },
    "check__[1, 2, 3, 4].filter(function(item, _, arr))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function(item, _, arr)",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function(item, _, arr))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function(item, _, arr))": Object {
      "Next": "set__end__[1, 2, 3, 4].filter(function(item, _, arr))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > arr[0]": Object {
      "Next": "1__return item > arr[0]",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "function(item, _, arr)": Object {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "_",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function(item, _, arr))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function(item, _, arr))",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function(item, _, arr))",
      "Type": "Choice",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function(item, _, arr))": Object {
      "Next": "check__[1, 2, 3, 4].filter(function(item, _, arr))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function(item, _, arr))": Object {
      "Next": "[1, 2, 3, 4].filter(function(item, _, arr))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > arr[0]": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "StringGreaterThanPath": "$.arr[0]",
                      "Variable": "$.item",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "NumericGreaterThanPath": "$.arr[0]",
                      "Variable": "$.item",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > arr[0]",
        },
      ],
      "Default": "false__return item > arr[0]",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function(item, _, arr))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function(item, _, arr))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function(item, _, arr))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function(item, _, arr))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > arr[0]": Object {
      "Next": "1__return item > arr[0]",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index, array) => item > 1 + 2) 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function(item, _, [first]))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > first": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function(item, _, [first]))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function(item, _, [first]))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function(item, _, [first]))": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function(item, _, [first]))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "_": Object {
      "InputPath": "$.heap1.arr[0].index",
      "Next": "first",
      "ResultPath": "$._",
      "Type": "Pass",
    },
    "check__[1, 2, 3, 4].filter(function(item, _, [first]))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function(item, _, [first])",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function(item, _, [first]))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function(item, _, [first]))": Object {
      "Next": "set__end__[1, 2, 3, 4].filter(function(item, _, [first]))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > first": Object {
      "Next": "1__return item > first",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "first": Object {
      "InputPath": "$.heap0[0]",
      "Next": "return item > first",
      "ResultPath": "$.first",
      "Type": "Pass",
    },
    "function(item, _, [first])": Object {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "_",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function(item, _, [first]))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function(item, _, [first])",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function(item, _, [first]))",
      "Type": "Choice",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function(item, _, [first])": Object {
      "Next": "check__[1, 2, 3, 4].filter(function(item, _, [first]))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function(item, _, [first]))": Object {
      "Next": "[1, 2, 3, 4].filter(function(item, _, [first]))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > first": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "StringGreaterThanPath": "$.first",
                      "Variable": "$.item",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "NumericGreaterThanPath": "$.first",
                      "Variable": "$.item",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > first",
        },
      ],
      "Default": "false__return item > first",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function(item, _, [first]))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function(item, _, [first]))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function(item, _, [first]))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function(item, _, [first]))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > first": Object {
      "Next": "1__return item > first",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > {}) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [{}].filter(function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item === {a: \\"a\\"}": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[{}].filter(function(item))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [{}].filter(function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[{}].filter(function(item))": Object {
      "Next": "check__[{}].filter(function(item))",
      "Parameters": Object {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "check__[{}].filter(function(item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[{}].filter(function(item))",
      "Type": "Choice",
    },
    "end__[{}].filter(function(item))": Object {
      "Next": "set__end__[{}].filter(function(item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item === {a: \\"a\\"}": Object {
      "Next": "1__return item === {a: \\"a\\"}",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "handleResult__[{}].filter(function(item))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[{}].filter(function(item))",
        },
      ],
      "Default": "tail__[{}].filter(function(item))",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap1.arr[0]",
      "Next": "return item === {a: \\"a\\"}",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[{}].filter(function(item))": Object {
      "Next": "check__[{}].filter(function(item))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [{}].filter(function(item))": Object {
      "Next": "[{}].filter(function(item))",
      "Result": Array [
        Object {},
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item === {a: \\"a\\"}": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "true__return item === {a: \\"a\\"}",
        },
      ],
      "Default": "false__return item === {a: \\"a\\"}",
      "Type": "Choice",
    },
    "set__end__[{}].filter(function(item))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [{}].filter(function(item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[{}].filter(function(item))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[{}].filter(function(item))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item === {a: \\"a\\"}": Object {
      "Next": "1__return item === {a: \\"a\\"}",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > {}) 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [{value: \\"a\\"}].filter(function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return value === a": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[{value: \\"a\\"}].filter(function(item))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [{value: \\"a\\"}].filter(function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[{value: \\"a\\"}].filter(function(item))": Object {
      "Next": "check__[{value: \\"a\\"}].filter(function(item))",
      "Parameters": Object {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "a = \\"a\\"": Object {
      "Next": "{value} = item",
      "Result": "a",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "check__[{value: \\"a\\"}].filter(function(item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[{value: \\"a\\"}].filter(function(item))",
      "Type": "Choice",
    },
    "end__[{value: \\"a\\"}].filter(function(item))": Object {
      "Next": "set__end__[{value: \\"a\\"}].filter(function(item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return value === a": Object {
      "Next": "1__return value === a",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "handleResult__[{value: \\"a\\"}].filter(function(item))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[{value: \\"a\\"}].filter(function(item))",
        },
      ],
      "Default": "tail__[{value: \\"a\\"}].filter(function(item))",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap1.arr[0]",
      "Next": "a = \\"a\\"",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[{value: \\"a\\"}].filter(function(item))": Object {
      "Next": "check__[{value: \\"a\\"}].filter(function(item))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [{value: \\"a\\"}].filter(function(item))": Object {
      "Next": "[{value: \\"a\\"}].filter(function(item))",
      "Result": Array [
        Object {
          "value": "a",
        },
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value === a": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.value",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.value",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.a",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.value",
                    },
                    Object {
                      "StringEqualsPath": "$.a",
                      "Variable": "$.value",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.value",
                    },
                    Object {
                      "BooleanEqualsPath": "$.a",
                      "Variable": "$.value",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.value",
                    },
                    Object {
                      "NumericEqualsPath": "$.a",
                      "Variable": "$.value",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return value === a",
        },
      ],
      "Default": "false__return value === a",
      "Type": "Choice",
    },
    "set__end__[{value: \\"a\\"}].filter(function(item))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [{value: \\"a\\"}].filter(function(item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[{value: \\"a\\"}].filter(function(item))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[{value: \\"a\\"}].filter(function(item))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return value === a": Object {
      "Next": "1__return value === a",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "{value} = item": Object {
      "InputPath": "$.item['value']",
      "Next": "return value === a",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > 1 + 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function(item))": Object {
      "End": true,
      "InputPath": "$.heap0[?(@>3)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function(item))": Object {
      "Next": "1__return [1, 2, 3, 4].filter(function(item))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function(item))": Object {
      "End": true,
      "InputPath": "$.heap0[?(@>2)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function(item))": Object {
      "Next": "1__return [1, 2, 3, 4].filter(function(item))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3].map(item => item) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3].map(function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function(item)) 1": Object {
      "Next": "check__1__return [1, 2, 3].map(function(item)) 1",
      "Parameters": Object {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3].map(function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__1__return [1, 2, 3].map(function(item)) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__1__return [1, 2, 3].map(function(item)) 1",
      "Type": "Choice",
    },
    "end__1__return [1, 2, 3].map(function(item)) 1": Object {
      "Next": "set__end__1__return [1, 2, 3].map(function(item)) 1",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__1__return [1, 2, 3].map(function(item)) 1": Object {
      "Next": "check__1__return [1, 2, 3].map(function(item)) 1",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap1.arr[0]",
      "Next": "return item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return [1, 2, 3].map(function(item))": Object {
      "Next": "1__return [1, 2, 3].map(function(item)) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": Object {
      "InputPath": "$.item",
      "Next": "handleResult__1__return [1, 2, 3].map(function(item)) 1",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "set__end__1__return [1, 2, 3].map(function(item)) 1": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3].map(function(item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`\`template me \${await task(input.value)}\` 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return template me \${await task(input.value)}": Object {
      "End": true,
      "InputPath": "$.heap1.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return template me \${await task(input.value)}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return template me \${await task(input.value)}": Object {
      "InputPath": "$.input.value",
      "Next": "template me \${await task(input.value)}",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "template me \${await task(input.value)}": Object {
      "Next": "1__return template me \${await task(input.value)}",
      "Parameters": Object {
        "string.$": "States.Format('template me {}',$.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`\`template me \${input.value}\` 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return template me \${input.value}": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return template me \${input.value}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return template me \${input.value}": Object {
      "Next": "1__return template me \${input.value}",
      "Parameters": Object {
        "string.$": "States.Format('template me {}',$.input.value)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`Boolean 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber": Object {
      "End": true,
      "Parameters": Object {
        "empty": false,
        "falseBoolean": false,
        "falseNumber": false,
        "falseString": false,
        "trueBoolean": true,
        "trueNumber": true,
        "trueObject": true,
        "trueString": true,
        "var.$": "$.heap0",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber: B",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNu": Object {
      "Next": "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber",
      "Result": false,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber: B": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.value",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.value",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.value",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNum",
        },
      ],
      "Default": "false__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNu",
      "Type": "Choice",
    },
    "true__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNum": Object {
      "Next": "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber",
      "Result": true,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`add iamConditions AWS.SDK.CloudWatch.describeAlarms 1`] = `
Role {
  "_allowCrossEnvironment": false,
  "_didSplit": false,
  "_physicalName": undefined,
  "assumeRoleAction": "sts:AssumeRole",
  "assumeRolePolicy": Object {
    "Statement": Array [
      Object {
        "Action": "sts:AssumeRole",
        "Effect": "Allow",
        "Principal": Object {
          "Service": "\${Token[states.amazonaws.com.3260]}",
        },
      },
    ],
    "Version": "2012-10-17",
  },
  "attachedPolicies": AttachedPolicies {
    "policies": Array [
      Policy {
        "_allowCrossEnvironment": false,
        "_physicalName": "\${Token[TOKEN.3275]}",
        "_policyName": "\${Token[TOKEN.3275]}",
        "document": Object {
          "Statement": Array [
            Object {
              "Action": "cloudwatch:DescribeAlarms",
              "Condition": Object {
                "StringEquals": Object {
                  "aws:ResourceTag/env": Array [
                    "test",
                  ],
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "env": Object {
          "account": "\${Token[AWS.AccountId.0]}",
          "region": "\${Token[AWS.Region.4]}",
        },
        "force": false,
        "groups": Array [],
        "node": Node {
          "_children": Object {
            "Resource": CfnPolicyConditional {
              "_cfnProperties": Object {
                "groups": Array [
                  "#{Token[TOKEN.3278]}",
                ],
                "policyDocument": Object {
                  "Statement": Array [
                    Object {
                      "Action": "cloudwatch:DescribeAlarms",
                      "Condition": Object {
                        "StringEquals": Object {
                          "aws:ResourceTag/env": Array [
                            "test",
                          ],
                        },
                      },
                      "Effect": "Allow",
                      "Resource": "*",
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "policyName": "\${Token[TOKEN.3275]}",
                "roles": Array [
                  "#{Token[TOKEN.3276]}",
                ],
                "users": Array [
                  "#{Token[TOKEN.3277]}",
                ],
              },
              "cfnOptions": Object {},
              "cfnResourceType": "AWS::IAM::Policy",
              "dependsOn": Set {},
              "groups": Array [
                "#{Token[TOKEN.3278]}",
              ],
              "logicalId": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3279]}",
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3279]}",
                    "trace": undefined,
                    "type": "aws:cdk:logicalId",
                  },
                ],
                "_validations": Array [],
                "host": [Circular],
                "id": "Resource",
                "scope": [Circular],
              },
              "policyDocument": Object {
                "Statement": Array [
                  Object {
                    "Action": "cloudwatch:DescribeAlarms",
                    "Condition": Object {
                      "StringEquals": Object {
                        "aws:ResourceTag/env": Array [
                          "test",
                        ],
                      },
                    },
                    "Effect": "Allow",
                    "Resource": "*",
                  },
                ],
                "Version": "2012-10-17",
              },
              "policyName": "\${Token[TOKEN.3275]}",
              "rawOverrides": Object {},
              "roles": Array [
                "#{Token[TOKEN.3276]}",
              ],
              "stack": Stack {
                "_logicalIds": LogicalIDs {
                  "renames": Object {},
                  "reverse": Object {},
                },
                "_missingContext": Array [],
                "_stackDependencies": Object {},
                "_stackName": "stack",
                "_versionReportingEnabled": undefined,
                "account": "\${Token[AWS.AccountId.0]}",
                "artifactId": "stack",
                "environment": "aws://unknown-account/unknown-region",
                "node": Node {
                  "_children": Object {
                    "F": Function {
                      "_allowCrossEnvironment": true,
                      "_architecture": undefined,
                      "_functionUrlInvocationGrants": Object {},
                      "_invocationGrants": Object {},
                      "_layers": Array [],
                      "_physicalName": "testFunction",
                      "_warnIfCurrentVersionCalled": false,
                      "architecture": Architecture {
                        "dockerPlatform": "linux/amd64",
                        "name": "x86_64",
                      },
                      "canCreatePermissions": true,
                      "currentVersionOptions": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "environment": Object {},
                      "functionArn": "\${Token[TOKEN.3250]}",
                      "functionName": "\${Token[TOKEN.3249]}",
                      "grantPrincipal": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3236]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3240]}",
                              "attrRoleId": "\${Token[TOKEN.3241]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3236]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3236]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3242]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3242]}",
                        "roleId": "\${Token[TOKEN.3241]}",
                        "roleName": "\${Token[TOKEN.3244]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3245]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3242]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3247]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3245]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3238]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3236]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3240]}",
                                        "attrRoleId": "\${Token[TOKEN.3241]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3238]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3236]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3236]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3242]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3242]}",
                                  "roleId": "\${Token[TOKEN.3241]}",
                                  "roleName": "\${Token[TOKEN.3244]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3242]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "permissionsNode": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3245]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3242]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3247]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3245]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3238]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3236]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3240]}",
                                        "attrRoleId": "\${Token[TOKEN.3241]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3238]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3236]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3236]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3242]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3242]}",
                                  "roleId": "\${Token[TOKEN.3241]}",
                                  "roleName": "\${Token[TOKEN.3244]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3242]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "physicalName": "testFunction",
                      "role": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3236]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3240]}",
                              "attrRoleId": "\${Token[TOKEN.3241]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3236]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3236]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3242]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3242]}",
                        "roleId": "\${Token[TOKEN.3241]}",
                        "roleName": "\${Token[TOKEN.3244]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "runtime": Runtime {
                        "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "family": 0,
                        "name": "nodejs14.x",
                        "supportsCodeGuruProfiling": false,
                        "supportsInlineCode": true,
                      },
                      "stack": [Circular],
                      "timeout": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Table": Table {
                      "_allowCrossEnvironment": true,
                      "_physicalName": "testTable",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": "PROVISIONED",
                      "encryptionKey": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "globalReplicaCustomResources": Array [],
                      "globalSecondaryIndexes": Array [],
                      "indexScaling": Map {},
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "localSecondaryIndexes": Array [],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnTable {
                            "_cfnProperties": Object {
                              "attributeDefinitions": Array [
                                Object {
                                  "attributeName": "id",
                                  "attributeType": "S",
                                },
                              ],
                              "billingMode": undefined,
                              "contributorInsightsSpecification": undefined,
                              "globalSecondaryIndexes": "<unresolved-lazy>",
                              "keySchema": Array [
                                Object {
                                  "attributeName": "id",
                                  "keyType": "HASH",
                                },
                              ],
                              "kinesisStreamSpecification": undefined,
                              "localSecondaryIndexes": "<unresolved-lazy>",
                              "pointInTimeRecoverySpecification": undefined,
                              "provisionedThroughput": Object {
                                "readCapacityUnits": 5,
                                "writeCapacityUnits": 5,
                              },
                              "sseSpecification": undefined,
                              "streamSpecification": undefined,
                              "tableClass": undefined,
                              "tableName": "testTable",
                              "timeToLiveSpecification": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3252]}",
                            "attrStreamArn": "\${Token[TOKEN.3253]}",
                            "attributeDefinitions": Array [
                              Object {
                                "attributeName": "id",
                                "attributeType": "S",
                              },
                            ],
                            "billingMode": undefined,
                            "cfnOptions": Object {
                              "deletionPolicy": "Retain",
                              "updateReplacePolicy": "Retain",
                            },
                            "cfnResourceType": "AWS::DynamoDB::Table",
                            "contributorInsightsSpecification": undefined,
                            "dependsOn": Set {},
                            "globalSecondaryIndexes": "<unresolved-lazy>",
                            "keySchema": Array [
                              Object {
                                "attributeName": "id",
                                "keyType": "HASH",
                              },
                            ],
                            "kinesisStreamSpecification": undefined,
                            "localSecondaryIndexes": "<unresolved-lazy>",
                            "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "pointInTimeRecoverySpecification": undefined,
                            "provisionedThroughput": Object {
                              "readCapacityUnits": 5,
                              "writeCapacityUnits": 5,
                            },
                            "rawOverrides": Object {},
                            "sseSpecification": undefined,
                            "stack": [Circular],
                            "streamSpecification": undefined,
                            "tableClass": undefined,
                            "tableName": "testTable",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::DynamoDB::Table",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeToLiveSpecification": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ScalingRole": Import {
                            "_allowCrossEnvironment": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "ScalingRole",
                              "scope": [Circular],
                            },
                            "physicalName": "\${Token[TOKEN.3257]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[TOKEN.3256]}",
                            "trace": undefined,
                            "type": "aws:cdk:hasPhysicalName",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Table",
                        "scope": [Circular],
                      },
                      "nonKeyAttributes": Set {},
                      "physicalName": "testTable",
                      "regionalArns": Array [],
                      "scalingRole": Import {
                        "_allowCrossEnvironment": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "ScalingRole",
                          "scope": [Circular],
                        },
                        "physicalName": "\${Token[TOKEN.3257]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "secondaryIndexSchemas": Map {},
                      "stack": [Circular],
                      "table": CfnTable {
                        "_cfnProperties": Object {
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "contributorInsightsSpecification": undefined,
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "sseSpecification": undefined,
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "timeToLiveSpecification": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3252]}",
                        "attrStreamArn": "\${Token[TOKEN.3253]}",
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "cfnOptions": Object {
                          "deletionPolicy": "Retain",
                          "updateReplacePolicy": "Retain",
                        },
                        "cfnResourceType": "AWS::DynamoDB::Table",
                        "contributorInsightsSpecification": undefined,
                        "dependsOn": Set {},
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "rawOverrides": Object {},
                        "sseSpecification": undefined,
                        "stack": [Circular],
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::DynamoDB::Table",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeToLiveSpecification": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "tableArn": "\${Token[TOKEN.3254]}",
                      "tableName": "\${Token[TOKEN.3256]}",
                      "tablePartitionKey": Object {
                        "name": "id",
                        "type": "S",
                      },
                      "tableScaling": Object {},
                      "tableStreamArn": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "fn": StateMachine {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnStateMachine {
                            "_cfnProperties": Object {
                              "definitionString": "\${Token[TOKEN.3268]}",
                              "loggingConfiguration": undefined,
                              "roleArn": "\${Token[TOKEN.3265]}",
                              "stateMachineName": "\${Token[TOKEN.3258]}",
                              "stateMachineType": "EXPRESS",
                              "tracingConfiguration": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3270]}",
                            "attrName": "\${Token[TOKEN.3271]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::StepFunctions::StateMachine",
                            "definition": undefined,
                            "definitionS3Location": undefined,
                            "definitionString": "\${Token[TOKEN.3280]}",
                            "definitionSubstitutions": undefined,
                            "dependsOn": Set {},
                            "loggingConfiguration": undefined,
                            "logicalId": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                [Circular],
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "rawOverrides": Object {},
                            "roleArn": "\${Token[TOKEN.3265]}",
                            "stack": [Circular],
                            "stateMachineName": "\${Token[TOKEN.3258]}",
                            "stateMachineType": "EXPRESS",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::StepFunctions::StateMachine",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "tracingConfiguration": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "Role": [Circular],
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "fn",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3258]}",
                      "role": [Circular],
                      "stack": [Circular],
                      "stateMachineArn": "\${Token[TOKEN.3274]}",
                      "stateMachineName": "\${Token[TOKEN.3272]}",
                      "stateMachineType": "EXPRESS",
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "stack",
                  "scope": App {
                    "_assemblyBuilder": CloudAssemblyBuilder {
                      "artifacts": Object {},
                      "assetOutdir": "/tmp/cdk.outwOSQs6",
                      "missing": Array [],
                      "outdir": "/tmp/cdk.outwOSQs6",
                      "parentBuilder": undefined,
                    },
                    "account": undefined,
                    "node": Node {
                      "_children": Object {
                        "Tree": TreeMetadata {
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Tree",
                            "scope": [Circular],
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "stack": [Circular],
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "",
                      "scope": undefined,
                    },
                    "parentStage": undefined,
                    "region": undefined,
                    "stageName": "",
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "region": "\${Token[AWS.Region.4]}",
                "synthesizer": DefaultStackSynthesizer {
                  "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_stack": [Circular],
                  "assetManifest": AssetManifestBuilder {
                    "dockerImages": Object {},
                    "files": Object {},
                  },
                  "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
                  "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "bucketPrefix": "",
                  "dockerTagPrefix": "",
                  "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
                  "props": Object {},
                  "qualifier": "hnb659fds",
                  "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "useLookupRoleForStackOperations": true,
                },
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "aws:cdk:stack",
                  "tagFormatter": KeyValueFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "templateFile": "stack.template.json",
                "templateOptions": Object {},
                "terminationProtection": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "users": Array [
                "#{Token[TOKEN.3277]}",
              ],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [
            Object {
              "validate": [Function],
            },
          ],
          "host": [Circular],
          "id": "DefaultPolicy",
          "scope": [Circular],
        },
        "physicalName": "\${Token[TOKEN.3275]}",
        "referenceTaken": false,
        "roles": Array [
          [Circular],
        ],
        "stack": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3250]}",
                "functionName": "\${Token[TOKEN.3249]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3236]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3240]}",
                        "attrRoleId": "\${Token[TOKEN.3241]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3236]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3236]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3242]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3242]}",
                  "roleId": "\${Token[TOKEN.3241]}",
                  "roleName": "\${Token[TOKEN.3244]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3245]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3242]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3247]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3245]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3242]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3245]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3242]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3247]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3245]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3242]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3236]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3240]}",
                        "attrRoleId": "\${Token[TOKEN.3241]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3236]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3236]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3242]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3242]}",
                  "roleId": "\${Token[TOKEN.3241]}",
                  "roleName": "\${Token[TOKEN.3244]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3252]}",
                      "attrStreamArn": "\${Token[TOKEN.3253]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3257]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3256]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3257]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3252]}",
                  "attrStreamArn": "\${Token[TOKEN.3253]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3254]}",
                "tableName": "\${Token[TOKEN.3256]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": StateMachine {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnStateMachine {
                      "_cfnProperties": Object {
                        "definitionString": "\${Token[TOKEN.3268]}",
                        "loggingConfiguration": undefined,
                        "roleArn": "\${Token[TOKEN.3265]}",
                        "stateMachineName": "\${Token[TOKEN.3258]}",
                        "stateMachineType": "EXPRESS",
                        "tracingConfiguration": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3270]}",
                      "attrName": "\${Token[TOKEN.3271]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::StepFunctions::StateMachine",
                      "definition": undefined,
                      "definitionS3Location": undefined,
                      "definitionString": "\${Token[TOKEN.3280]}",
                      "definitionSubstitutions": undefined,
                      "dependsOn": Set {},
                      "loggingConfiguration": undefined,
                      "logicalId": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          [Circular],
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "rawOverrides": Object {},
                      "roleArn": "\${Token[TOKEN.3265]}",
                      "stack": [Circular],
                      "stateMachineName": "\${Token[TOKEN.3258]}",
                      "stateMachineType": "EXPRESS",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::StepFunctions::StateMachine",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "tracingConfiguration": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Role": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "fn",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3258]}",
                "role": [Circular],
                "stack": [Circular],
                "stateMachineArn": "\${Token[TOKEN.3274]}",
                "stateMachineName": "\${Token[TOKEN.3272]}",
                "stateMachineType": "EXPRESS",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.outwOSQs6",
                "missing": Array [],
                "outdir": "/tmp/cdk.outwOSQs6",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "users": Array [],
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
    ],
  },
  "defaultPolicy": Policy {
    "_allowCrossEnvironment": false,
    "_physicalName": "\${Token[TOKEN.3275]}",
    "_policyName": "\${Token[TOKEN.3275]}",
    "document": Object {
      "Statement": Array [
        Object {
          "Action": "cloudwatch:DescribeAlarms",
          "Condition": Object {
            "StringEquals": Object {
              "aws:ResourceTag/env": Array [
                "test",
              ],
            },
          },
          "Effect": "Allow",
          "Resource": "*",
        },
      ],
      "Version": "2012-10-17",
    },
    "env": Object {
      "account": "\${Token[AWS.AccountId.0]}",
      "region": "\${Token[AWS.Region.4]}",
    },
    "force": false,
    "groups": Array [],
    "node": Node {
      "_children": Object {
        "Resource": CfnPolicyConditional {
          "_cfnProperties": Object {
            "groups": Array [
              "#{Token[TOKEN.3278]}",
            ],
            "policyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "cloudwatch:DescribeAlarms",
                  "Condition": Object {
                    "StringEquals": Object {
                      "aws:ResourceTag/env": Array [
                        "test",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "policyName": "\${Token[TOKEN.3275]}",
            "roles": Array [
              "#{Token[TOKEN.3276]}",
            ],
            "users": Array [
              "#{Token[TOKEN.3277]}",
            ],
          },
          "cfnOptions": Object {},
          "cfnResourceType": "AWS::IAM::Policy",
          "dependsOn": Set {},
          "groups": Array [
            "#{Token[TOKEN.3278]}",
          ],
          "logicalId": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3279]}",
          "node": Node {
            "_children": Object {},
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [
              Object {
                "data": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3279]}",
                "trace": undefined,
                "type": "aws:cdk:logicalId",
              },
            ],
            "_validations": Array [],
            "host": [Circular],
            "id": "Resource",
            "scope": [Circular],
          },
          "policyDocument": Object {
            "Statement": Array [
              Object {
                "Action": "cloudwatch:DescribeAlarms",
                "Condition": Object {
                  "StringEquals": Object {
                    "aws:ResourceTag/env": Array [
                      "test",
                    ],
                  },
                },
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "policyName": "\${Token[TOKEN.3275]}",
          "rawOverrides": Object {},
          "roles": Array [
            "#{Token[TOKEN.3276]}",
          ],
          "stack": Stack {
            "_logicalIds": LogicalIDs {
              "renames": Object {},
              "reverse": Object {},
            },
            "_missingContext": Array [],
            "_stackDependencies": Object {},
            "_stackName": "stack",
            "_versionReportingEnabled": undefined,
            "account": "\${Token[AWS.AccountId.0]}",
            "artifactId": "stack",
            "environment": "aws://unknown-account/unknown-region",
            "node": Node {
              "_children": Object {
                "F": Function {
                  "_allowCrossEnvironment": true,
                  "_architecture": undefined,
                  "_functionUrlInvocationGrants": Object {},
                  "_invocationGrants": Object {},
                  "_layers": Array [],
                  "_physicalName": "testFunction",
                  "_warnIfCurrentVersionCalled": false,
                  "architecture": Architecture {
                    "dockerPlatform": "linux/amd64",
                    "name": "x86_64",
                  },
                  "canCreatePermissions": true,
                  "currentVersionOptions": undefined,
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "environment": Object {},
                  "functionArn": "\${Token[TOKEN.3250]}",
                  "functionName": "\${Token[TOKEN.3249]}",
                  "grantPrincipal": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3236]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3240]}",
                          "attrRoleId": "\${Token[TOKEN.3241]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3236]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3236]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3242]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3242]}",
                    "roleId": "\${Token[TOKEN.3241]}",
                    "roleName": "\${Token[TOKEN.3244]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnFunction {
                        "_cfnProperties": Object {
                          "architectures": undefined,
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3245]}",
                          ],
                          "memorySize": undefined,
                          "packageType": undefined,
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3242]}",
                          "runtime": "nodejs14.x",
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                        },
                        "architectures": undefined,
                        "attrArn": "\${Token[TOKEN.3247]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::Lambda::Function",
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "dependsOn": Set {},
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3245]}",
                        ],
                        "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                        "memorySize": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {
                            Role {
                              "_allowCrossEnvironment": false,
                              "_didSplit": false,
                              "_physicalName": undefined,
                              "assumeRoleAction": "sts:AssumeRole",
                              "assumeRolePolicy": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attachedPolicies": AttachedPolicies {
                                "policies": Array [],
                              },
                              "dependables": Map {},
                              "env": Object {
                                "account": "\${Token[AWS.AccountId.0]}",
                                "region": "\${Token[AWS.Region.4]}",
                              },
                              "grantPrincipal": [Circular],
                              "inlinePolicies": Object {},
                              "managedPolicies": Array [
                                AwsManagedPolicy {
                                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                },
                              ],
                              "node": Node {
                                "_children": Object {
                                  "Resource": CfnRole {
                                    "_cfnProperties": Object {
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "description": undefined,
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3238]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "roleName": "\${Token[TOKEN.3236]}",
                                    },
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "attrArn": "\${Token[TOKEN.3240]}",
                                    "attrRoleId": "\${Token[TOKEN.3241]}",
                                    "cfnOptions": Object {},
                                    "cfnResourceType": "AWS::IAM::Role",
                                    "dependsOn": Set {},
                                    "description": undefined,
                                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "node": Node {
                                      "_children": Object {},
                                      "_context": Object {},
                                      "_dependencies": Set {},
                                      "_locked": false,
                                      "_metadata": Array [
                                        Object {
                                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                          "trace": undefined,
                                          "type": "aws:cdk:logicalId",
                                        },
                                      ],
                                      "_validations": Array [],
                                      "host": [Circular],
                                      "id": "Resource",
                                      "scope": [Circular],
                                    },
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "rawOverrides": Object {},
                                    "roleName": "\${Token[TOKEN.3236]}",
                                    "stack": [Circular],
                                    "tags": TagManager {
                                      "initialTagPriority": 50,
                                      "priorities": Map {},
                                      "renderedTags": "<unresolved-lazy>",
                                      "resourceTypeName": "AWS::IAM::Role",
                                      "tagFormatter": StandardFormatter {},
                                      "tagPropertyName": "tags",
                                      "tags": Map {},
                                    },
                                    Symbol(@aws-cdk/core.DependableTrait): Object {
                                      "dependencyRoots": Array [
                                        [Circular],
                                      ],
                                    },
                                  },
                                },
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [],
                                "_validations": Array [
                                  Object {
                                    "validate": [Function],
                                  },
                                ],
                                "host": [Circular],
                                "id": "ServiceRole",
                                "scope": [Circular],
                              },
                              "permissionsBoundary": undefined,
                              "physicalName": "\${Token[TOKEN.3236]}",
                              "policyFragment": PrincipalPolicyFragment {
                                "conditions": Object {},
                                "principalJson": Object {
                                  "AWS": Array [
                                    "\${Token[TOKEN.3242]}",
                                  ],
                                },
                              },
                              "principalAccount": "\${Token[AWS.AccountId.0]}",
                              "roleArn": "\${Token[TOKEN.3242]}",
                              "roleId": "\${Token[TOKEN.3241]}",
                              "roleName": "\${Token[TOKEN.3244]}",
                              "stack": [Circular],
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "packageType": undefined,
                        "rawOverrides": Object {},
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3242]}",
                        "runtime": "nodejs14.x",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::Lambda::Function",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "ServiceRole": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3236]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3240]}",
                              "attrRoleId": "\${Token[TOKEN.3241]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3236]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3236]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3242]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3242]}",
                        "roleId": "\${Token[TOKEN.3241]}",
                        "roleName": "\${Token[TOKEN.3244]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "F",
                    "scope": [Circular],
                  },
                  "permissionsNode": Node {
                    "_children": Object {
                      "Resource": CfnFunction {
                        "_cfnProperties": Object {
                          "architectures": undefined,
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3245]}",
                          ],
                          "memorySize": undefined,
                          "packageType": undefined,
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3242]}",
                          "runtime": "nodejs14.x",
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                        },
                        "architectures": undefined,
                        "attrArn": "\${Token[TOKEN.3247]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::Lambda::Function",
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "dependsOn": Set {},
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3245]}",
                        ],
                        "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                        "memorySize": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {
                            Role {
                              "_allowCrossEnvironment": false,
                              "_didSplit": false,
                              "_physicalName": undefined,
                              "assumeRoleAction": "sts:AssumeRole",
                              "assumeRolePolicy": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attachedPolicies": AttachedPolicies {
                                "policies": Array [],
                              },
                              "dependables": Map {},
                              "env": Object {
                                "account": "\${Token[AWS.AccountId.0]}",
                                "region": "\${Token[AWS.Region.4]}",
                              },
                              "grantPrincipal": [Circular],
                              "inlinePolicies": Object {},
                              "managedPolicies": Array [
                                AwsManagedPolicy {
                                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                },
                              ],
                              "node": Node {
                                "_children": Object {
                                  "Resource": CfnRole {
                                    "_cfnProperties": Object {
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "description": undefined,
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3238]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "roleName": "\${Token[TOKEN.3236]}",
                                    },
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "attrArn": "\${Token[TOKEN.3240]}",
                                    "attrRoleId": "\${Token[TOKEN.3241]}",
                                    "cfnOptions": Object {},
                                    "cfnResourceType": "AWS::IAM::Role",
                                    "dependsOn": Set {},
                                    "description": undefined,
                                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "node": Node {
                                      "_children": Object {},
                                      "_context": Object {},
                                      "_dependencies": Set {},
                                      "_locked": false,
                                      "_metadata": Array [
                                        Object {
                                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                          "trace": undefined,
                                          "type": "aws:cdk:logicalId",
                                        },
                                      ],
                                      "_validations": Array [],
                                      "host": [Circular],
                                      "id": "Resource",
                                      "scope": [Circular],
                                    },
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "rawOverrides": Object {},
                                    "roleName": "\${Token[TOKEN.3236]}",
                                    "stack": [Circular],
                                    "tags": TagManager {
                                      "initialTagPriority": 50,
                                      "priorities": Map {},
                                      "renderedTags": "<unresolved-lazy>",
                                      "resourceTypeName": "AWS::IAM::Role",
                                      "tagFormatter": StandardFormatter {},
                                      "tagPropertyName": "tags",
                                      "tags": Map {},
                                    },
                                    Symbol(@aws-cdk/core.DependableTrait): Object {
                                      "dependencyRoots": Array [
                                        [Circular],
                                      ],
                                    },
                                  },
                                },
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [],
                                "_validations": Array [
                                  Object {
                                    "validate": [Function],
                                  },
                                ],
                                "host": [Circular],
                                "id": "ServiceRole",
                                "scope": [Circular],
                              },
                              "permissionsBoundary": undefined,
                              "physicalName": "\${Token[TOKEN.3236]}",
                              "policyFragment": PrincipalPolicyFragment {
                                "conditions": Object {},
                                "principalJson": Object {
                                  "AWS": Array [
                                    "\${Token[TOKEN.3242]}",
                                  ],
                                },
                              },
                              "principalAccount": "\${Token[AWS.AccountId.0]}",
                              "roleArn": "\${Token[TOKEN.3242]}",
                              "roleId": "\${Token[TOKEN.3241]}",
                              "roleName": "\${Token[TOKEN.3244]}",
                              "stack": [Circular],
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "packageType": undefined,
                        "rawOverrides": Object {},
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3242]}",
                        "runtime": "nodejs14.x",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::Lambda::Function",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "ServiceRole": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3236]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3240]}",
                              "attrRoleId": "\${Token[TOKEN.3241]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3236]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3236]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3242]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3242]}",
                        "roleId": "\${Token[TOKEN.3241]}",
                        "roleName": "\${Token[TOKEN.3244]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "F",
                    "scope": [Circular],
                  },
                  "physicalName": "testFunction",
                  "role": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3236]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3240]}",
                          "attrRoleId": "\${Token[TOKEN.3241]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3236]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3236]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3242]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3242]}",
                    "roleId": "\${Token[TOKEN.3241]}",
                    "roleName": "\${Token[TOKEN.3244]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "runtime": Runtime {
                    "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                    "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                    "family": 0,
                    "name": "nodejs14.x",
                    "supportsCodeGuruProfiling": false,
                    "supportsInlineCode": true,
                  },
                  "stack": [Circular],
                  "timeout": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "Table": Table {
                  "_allowCrossEnvironment": true,
                  "_physicalName": "testTable",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": "PROVISIONED",
                  "encryptionKey": undefined,
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "globalReplicaCustomResources": Array [],
                  "globalSecondaryIndexes": Array [],
                  "indexScaling": Map {},
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "localSecondaryIndexes": Array [],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnTable {
                        "_cfnProperties": Object {
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "contributorInsightsSpecification": undefined,
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "sseSpecification": undefined,
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "timeToLiveSpecification": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3252]}",
                        "attrStreamArn": "\${Token[TOKEN.3253]}",
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "cfnOptions": Object {
                          "deletionPolicy": "Retain",
                          "updateReplacePolicy": "Retain",
                        },
                        "cfnResourceType": "AWS::DynamoDB::Table",
                        "contributorInsightsSpecification": undefined,
                        "dependsOn": Set {},
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "rawOverrides": Object {},
                        "sseSpecification": undefined,
                        "stack": [Circular],
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::DynamoDB::Table",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeToLiveSpecification": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "ScalingRole": Import {
                        "_allowCrossEnvironment": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "ScalingRole",
                          "scope": [Circular],
                        },
                        "physicalName": "\${Token[TOKEN.3257]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[TOKEN.3256]}",
                        "trace": undefined,
                        "type": "aws:cdk:hasPhysicalName",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Table",
                    "scope": [Circular],
                  },
                  "nonKeyAttributes": Set {},
                  "physicalName": "testTable",
                  "regionalArns": Array [],
                  "scalingRole": Import {
                    "_allowCrossEnvironment": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "ScalingRole",
                      "scope": [Circular],
                    },
                    "physicalName": "\${Token[TOKEN.3257]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "secondaryIndexSchemas": Map {},
                  "stack": [Circular],
                  "table": CfnTable {
                    "_cfnProperties": Object {
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "contributorInsightsSpecification": undefined,
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "sseSpecification": undefined,
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "timeToLiveSpecification": undefined,
                    },
                    "attrArn": "\${Token[TOKEN.3252]}",
                    "attrStreamArn": "\${Token[TOKEN.3253]}",
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "cfnOptions": Object {
                      "deletionPolicy": "Retain",
                      "updateReplacePolicy": "Retain",
                    },
                    "cfnResourceType": "AWS::DynamoDB::Table",
                    "contributorInsightsSpecification": undefined,
                    "dependsOn": Set {},
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "rawOverrides": Object {},
                    "sseSpecification": undefined,
                    "stack": [Circular],
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::DynamoDB::Table",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeToLiveSpecification": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "tableArn": "\${Token[TOKEN.3254]}",
                  "tableName": "\${Token[TOKEN.3256]}",
                  "tablePartitionKey": Object {
                    "name": "id",
                    "type": "S",
                  },
                  "tableScaling": Object {},
                  "tableStreamArn": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "fn": StateMachine {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnStateMachine {
                        "_cfnProperties": Object {
                          "definitionString": "\${Token[TOKEN.3268]}",
                          "loggingConfiguration": undefined,
                          "roleArn": "\${Token[TOKEN.3265]}",
                          "stateMachineName": "\${Token[TOKEN.3258]}",
                          "stateMachineType": "EXPRESS",
                          "tracingConfiguration": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3270]}",
                        "attrName": "\${Token[TOKEN.3271]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::StepFunctions::StateMachine",
                        "definition": undefined,
                        "definitionS3Location": undefined,
                        "definitionString": "\${Token[TOKEN.3280]}",
                        "definitionSubstitutions": undefined,
                        "dependsOn": Set {},
                        "loggingConfiguration": undefined,
                        "logicalId": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {
                            [Circular],
                          },
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "rawOverrides": Object {},
                        "roleArn": "\${Token[TOKEN.3265]}",
                        "stack": [Circular],
                        "stateMachineName": "\${Token[TOKEN.3258]}",
                        "stateMachineType": "EXPRESS",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::StepFunctions::StateMachine",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "tracingConfiguration": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "Role": [Circular],
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "fn",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3258]}",
                  "role": [Circular],
                  "stack": [Circular],
                  "stateMachineArn": "\${Token[TOKEN.3274]}",
                  "stateMachineName": "\${Token[TOKEN.3272]}",
                  "stateMachineType": "EXPRESS",
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "stack",
              "scope": App {
                "_assemblyBuilder": CloudAssemblyBuilder {
                  "artifacts": Object {},
                  "assetOutdir": "/tmp/cdk.outwOSQs6",
                  "missing": Array [],
                  "outdir": "/tmp/cdk.outwOSQs6",
                  "parentBuilder": undefined,
                },
                "account": undefined,
                "node": Node {
                  "_children": Object {
                    "Tree": TreeMetadata {
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Tree",
                        "scope": [Circular],
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "stack": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "",
                  "scope": undefined,
                },
                "parentStage": undefined,
                "region": undefined,
                "stageName": "",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "region": "\${Token[AWS.Region.4]}",
            "synthesizer": DefaultStackSynthesizer {
              "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
              "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
              "_stack": [Circular],
              "assetManifest": AssetManifestBuilder {
                "dockerImages": Object {},
                "files": Object {},
              },
              "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
              "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
              "bucketPrefix": "",
              "dockerTagPrefix": "",
              "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
              "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
              "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
              "props": Object {},
              "qualifier": "hnb659fds",
              "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
              "useLookupRoleForStackOperations": true,
            },
            "tags": TagManager {
              "initialTagPriority": 50,
              "priorities": Map {},
              "renderedTags": "<unresolved-lazy>",
              "resourceTypeName": "aws:cdk:stack",
              "tagFormatter": KeyValueFormatter {},
              "tagPropertyName": "tags",
              "tags": Map {},
            },
            "templateFile": "stack.template.json",
            "templateOptions": Object {},
            "terminationProtection": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "users": Array [
            "#{Token[TOKEN.3277]}",
          ],
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "_context": Object {},
      "_dependencies": Set {},
      "_locked": false,
      "_metadata": Array [],
      "_validations": Array [
        Object {
          "validate": [Function],
        },
      ],
      "host": [Circular],
      "id": "DefaultPolicy",
      "scope": [Circular],
    },
    "physicalName": "\${Token[TOKEN.3275]}",
    "referenceTaken": false,
    "roles": Array [
      [Circular],
    ],
    "stack": Stack {
      "_logicalIds": LogicalIDs {
        "renames": Object {},
        "reverse": Object {},
      },
      "_missingContext": Array [],
      "_stackDependencies": Object {},
      "_stackName": "stack",
      "_versionReportingEnabled": undefined,
      "account": "\${Token[AWS.AccountId.0]}",
      "artifactId": "stack",
      "environment": "aws://unknown-account/unknown-region",
      "node": Node {
        "_children": Object {
          "F": Function {
            "_allowCrossEnvironment": true,
            "_architecture": undefined,
            "_functionUrlInvocationGrants": Object {},
            "_invocationGrants": Object {},
            "_layers": Array [],
            "_physicalName": "testFunction",
            "_warnIfCurrentVersionCalled": false,
            "architecture": Architecture {
              "dockerPlatform": "linux/amd64",
              "name": "x86_64",
            },
            "canCreatePermissions": true,
            "currentVersionOptions": undefined,
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "environment": Object {},
            "functionArn": "\${Token[TOKEN.3250]}",
            "functionName": "\${Token[TOKEN.3249]}",
            "grantPrincipal": Role {
              "_allowCrossEnvironment": false,
              "_didSplit": false,
              "_physicalName": undefined,
              "assumeRoleAction": "sts:AssumeRole",
              "assumeRolePolicy": Object {
                "Statement": Array [
                  Object {
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": Object {
                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                    },
                  },
                ],
                "Version": "2012-10-17",
              },
              "attachedPolicies": AttachedPolicies {
                "policies": Array [],
              },
              "dependables": Map {},
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "grantPrincipal": [Circular],
              "inlinePolicies": Object {},
              "managedPolicies": Array [
                AwsManagedPolicy {
                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                },
              ],
              "node": Node {
                "_children": Object {
                  "Resource": CfnRole {
                    "_cfnProperties": Object {
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "description": undefined,
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3238]}",
                      ],
                      "maxSessionDuration": undefined,
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "roleName": "\${Token[TOKEN.3236]}",
                    },
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attrArn": "\${Token[TOKEN.3240]}",
                    "attrRoleId": "\${Token[TOKEN.3241]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::IAM::Role",
                    "dependsOn": Set {},
                    "description": undefined,
                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3238]}",
                    ],
                    "maxSessionDuration": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "rawOverrides": Object {},
                    "roleName": "\${Token[TOKEN.3236]}",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::IAM::Role",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "ServiceRole",
                "scope": [Circular],
              },
              "permissionsBoundary": undefined,
              "physicalName": "\${Token[TOKEN.3236]}",
              "policyFragment": PrincipalPolicyFragment {
                "conditions": Object {},
                "principalJson": Object {
                  "AWS": Array [
                    "\${Token[TOKEN.3242]}",
                  ],
                },
              },
              "principalAccount": "\${Token[AWS.AccountId.0]}",
              "roleArn": "\${Token[TOKEN.3242]}",
              "roleId": "\${Token[TOKEN.3241]}",
              "roleName": "\${Token[TOKEN.3244]}",
              "stack": [Circular],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "node": Node {
              "_children": Object {
                "Resource": CfnFunction {
                  "_cfnProperties": Object {
                    "architectures": undefined,
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3245]}",
                    ],
                    "memorySize": undefined,
                    "packageType": undefined,
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3242]}",
                    "runtime": "nodejs14.x",
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                  },
                  "architectures": undefined,
                  "attrArn": "\${Token[TOKEN.3247]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::Lambda::Function",
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "dependsOn": Set {},
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3245]}",
                  ],
                  "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                  "memorySize": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {
                      Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3236]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3240]}",
                              "attrRoleId": "\${Token[TOKEN.3241]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3236]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3236]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3242]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3242]}",
                        "roleId": "\${Token[TOKEN.3241]}",
                        "roleName": "\${Token[TOKEN.3244]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "packageType": undefined,
                  "rawOverrides": Object {},
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3242]}",
                  "runtime": "nodejs14.x",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::Lambda::Function",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "ServiceRole": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3236]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3240]}",
                        "attrRoleId": "\${Token[TOKEN.3241]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3236]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3236]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3242]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3242]}",
                  "roleId": "\${Token[TOKEN.3241]}",
                  "roleName": "\${Token[TOKEN.3244]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "F",
              "scope": [Circular],
            },
            "permissionsNode": Node {
              "_children": Object {
                "Resource": CfnFunction {
                  "_cfnProperties": Object {
                    "architectures": undefined,
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3245]}",
                    ],
                    "memorySize": undefined,
                    "packageType": undefined,
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3242]}",
                    "runtime": "nodejs14.x",
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                  },
                  "architectures": undefined,
                  "attrArn": "\${Token[TOKEN.3247]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::Lambda::Function",
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "dependsOn": Set {},
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3245]}",
                  ],
                  "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                  "memorySize": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {
                      Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3236]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3240]}",
                              "attrRoleId": "\${Token[TOKEN.3241]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3236]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3236]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3242]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3242]}",
                        "roleId": "\${Token[TOKEN.3241]}",
                        "roleName": "\${Token[TOKEN.3244]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "packageType": undefined,
                  "rawOverrides": Object {},
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3242]}",
                  "runtime": "nodejs14.x",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::Lambda::Function",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "ServiceRole": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3236]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3240]}",
                        "attrRoleId": "\${Token[TOKEN.3241]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3236]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3236]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3242]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3242]}",
                  "roleId": "\${Token[TOKEN.3241]}",
                  "roleName": "\${Token[TOKEN.3244]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "F",
              "scope": [Circular],
            },
            "physicalName": "testFunction",
            "role": Role {
              "_allowCrossEnvironment": false,
              "_didSplit": false,
              "_physicalName": undefined,
              "assumeRoleAction": "sts:AssumeRole",
              "assumeRolePolicy": Object {
                "Statement": Array [
                  Object {
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": Object {
                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                    },
                  },
                ],
                "Version": "2012-10-17",
              },
              "attachedPolicies": AttachedPolicies {
                "policies": Array [],
              },
              "dependables": Map {},
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "grantPrincipal": [Circular],
              "inlinePolicies": Object {},
              "managedPolicies": Array [
                AwsManagedPolicy {
                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                },
              ],
              "node": Node {
                "_children": Object {
                  "Resource": CfnRole {
                    "_cfnProperties": Object {
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "description": undefined,
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3238]}",
                      ],
                      "maxSessionDuration": undefined,
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "roleName": "\${Token[TOKEN.3236]}",
                    },
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attrArn": "\${Token[TOKEN.3240]}",
                    "attrRoleId": "\${Token[TOKEN.3241]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::IAM::Role",
                    "dependsOn": Set {},
                    "description": undefined,
                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3238]}",
                    ],
                    "maxSessionDuration": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "rawOverrides": Object {},
                    "roleName": "\${Token[TOKEN.3236]}",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::IAM::Role",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "ServiceRole",
                "scope": [Circular],
              },
              "permissionsBoundary": undefined,
              "physicalName": "\${Token[TOKEN.3236]}",
              "policyFragment": PrincipalPolicyFragment {
                "conditions": Object {},
                "principalJson": Object {
                  "AWS": Array [
                    "\${Token[TOKEN.3242]}",
                  ],
                },
              },
              "principalAccount": "\${Token[AWS.AccountId.0]}",
              "roleArn": "\${Token[TOKEN.3242]}",
              "roleId": "\${Token[TOKEN.3241]}",
              "roleName": "\${Token[TOKEN.3244]}",
              "stack": [Circular],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "runtime": Runtime {
              "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
              "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
              "family": 0,
              "name": "nodejs14.x",
              "supportsCodeGuruProfiling": false,
              "supportsInlineCode": true,
            },
            "stack": [Circular],
            "timeout": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "Table": Table {
            "_allowCrossEnvironment": true,
            "_physicalName": "testTable",
            "attributeDefinitions": Array [
              Object {
                "attributeName": "id",
                "attributeType": "S",
              },
            ],
            "billingMode": "PROVISIONED",
            "encryptionKey": undefined,
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "globalReplicaCustomResources": Array [],
            "globalSecondaryIndexes": Array [],
            "indexScaling": Map {},
            "keySchema": Array [
              Object {
                "attributeName": "id",
                "keyType": "HASH",
              },
            ],
            "localSecondaryIndexes": Array [],
            "node": Node {
              "_children": Object {
                "Resource": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3252]}",
                  "attrStreamArn": "\${Token[TOKEN.3253]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "ScalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3257]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [
                Object {
                  "data": "\${Token[TOKEN.3256]}",
                  "trace": undefined,
                  "type": "aws:cdk:hasPhysicalName",
                },
              ],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "Table",
              "scope": [Circular],
            },
            "nonKeyAttributes": Set {},
            "physicalName": "testTable",
            "regionalArns": Array [],
            "scalingRole": Import {
              "_allowCrossEnvironment": false,
              "_physicalName": undefined,
              "assumeRoleAction": "sts:AssumeRole",
              "attachedPolicies": AttachedPolicies {
                "policies": Array [],
              },
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "grantPrincipal": [Circular],
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "ScalingRole",
                "scope": [Circular],
              },
              "physicalName": "\${Token[TOKEN.3257]}",
              "policyFragment": PrincipalPolicyFragment {
                "conditions": Object {},
                "principalJson": Object {
                  "AWS": Array [
                    "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  ],
                },
              },
              "principalAccount": "\${Token[AWS.AccountId.0]}",
              "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
              "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
              "stack": [Circular],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "secondaryIndexSchemas": Map {},
            "stack": [Circular],
            "table": CfnTable {
              "_cfnProperties": Object {
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": undefined,
                "contributorInsightsSpecification": undefined,
                "globalSecondaryIndexes": "<unresolved-lazy>",
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "kinesisStreamSpecification": undefined,
                "localSecondaryIndexes": "<unresolved-lazy>",
                "pointInTimeRecoverySpecification": undefined,
                "provisionedThroughput": Object {
                  "readCapacityUnits": 5,
                  "writeCapacityUnits": 5,
                },
                "sseSpecification": undefined,
                "streamSpecification": undefined,
                "tableClass": undefined,
                "tableName": "testTable",
                "timeToLiveSpecification": undefined,
              },
              "attrArn": "\${Token[TOKEN.3252]}",
              "attrStreamArn": "\${Token[TOKEN.3253]}",
              "attributeDefinitions": Array [
                Object {
                  "attributeName": "id",
                  "attributeType": "S",
                },
              ],
              "billingMode": undefined,
              "cfnOptions": Object {
                "deletionPolicy": "Retain",
                "updateReplacePolicy": "Retain",
              },
              "cfnResourceType": "AWS::DynamoDB::Table",
              "contributorInsightsSpecification": undefined,
              "dependsOn": Set {},
              "globalSecondaryIndexes": "<unresolved-lazy>",
              "keySchema": Array [
                Object {
                  "attributeName": "id",
                  "keyType": "HASH",
                },
              ],
              "kinesisStreamSpecification": undefined,
              "localSecondaryIndexes": "<unresolved-lazy>",
              "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                    "trace": undefined,
                    "type": "aws:cdk:logicalId",
                  },
                ],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "Resource",
                "scope": [Circular],
              },
              "pointInTimeRecoverySpecification": undefined,
              "provisionedThroughput": Object {
                "readCapacityUnits": 5,
                "writeCapacityUnits": 5,
              },
              "rawOverrides": Object {},
              "sseSpecification": undefined,
              "stack": [Circular],
              "streamSpecification": undefined,
              "tableClass": undefined,
              "tableName": "testTable",
              "tags": TagManager {
                "initialTagPriority": 50,
                "priorities": Map {},
                "renderedTags": "<unresolved-lazy>",
                "resourceTypeName": "AWS::DynamoDB::Table",
                "tagFormatter": StandardFormatter {},
                "tagPropertyName": "tags",
                "tags": Map {},
              },
              "timeToLiveSpecification": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "tableArn": "\${Token[TOKEN.3254]}",
            "tableName": "\${Token[TOKEN.3256]}",
            "tablePartitionKey": Object {
              "name": "id",
              "type": "S",
            },
            "tableScaling": Object {},
            "tableStreamArn": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "fn": StateMachine {
            "_allowCrossEnvironment": false,
            "_physicalName": undefined,
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "node": Node {
              "_children": Object {
                "Resource": CfnStateMachine {
                  "_cfnProperties": Object {
                    "definitionString": "\${Token[TOKEN.3268]}",
                    "loggingConfiguration": undefined,
                    "roleArn": "\${Token[TOKEN.3265]}",
                    "stateMachineName": "\${Token[TOKEN.3258]}",
                    "stateMachineType": "EXPRESS",
                    "tracingConfiguration": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3270]}",
                  "attrName": "\${Token[TOKEN.3271]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::StepFunctions::StateMachine",
                  "definition": undefined,
                  "definitionS3Location": undefined,
                  "definitionString": "\${Token[TOKEN.3280]}",
                  "definitionSubstitutions": undefined,
                  "dependsOn": Set {},
                  "loggingConfiguration": undefined,
                  "logicalId": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {
                      [Circular],
                    },
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "rawOverrides": Object {},
                  "roleArn": "\${Token[TOKEN.3265]}",
                  "stack": [Circular],
                  "stateMachineName": "\${Token[TOKEN.3258]}",
                  "stateMachineType": "EXPRESS",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::StepFunctions::StateMachine",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "tracingConfiguration": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "Role": [Circular],
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "fn",
              "scope": [Circular],
            },
            "physicalName": "\${Token[TOKEN.3258]}",
            "role": [Circular],
            "stack": [Circular],
            "stateMachineArn": "\${Token[TOKEN.3274]}",
            "stateMachineName": "\${Token[TOKEN.3272]}",
            "stateMachineType": "EXPRESS",
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
        },
        "_context": Object {},
        "_dependencies": Set {},
        "_locked": false,
        "_metadata": Array [],
        "_validations": Array [],
        "host": [Circular],
        "id": "stack",
        "scope": App {
          "_assemblyBuilder": CloudAssemblyBuilder {
            "artifacts": Object {},
            "assetOutdir": "/tmp/cdk.outwOSQs6",
            "missing": Array [],
            "outdir": "/tmp/cdk.outwOSQs6",
            "parentBuilder": undefined,
          },
          "account": undefined,
          "node": Node {
            "_children": Object {
              "Tree": TreeMetadata {
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Tree",
                  "scope": [Circular],
                },
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "stack": [Circular],
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "",
            "scope": undefined,
          },
          "parentStage": undefined,
          "region": undefined,
          "stageName": "",
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "region": "\${Token[AWS.Region.4]}",
      "synthesizer": DefaultStackSynthesizer {
        "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
        "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
        "_stack": [Circular],
        "assetManifest": AssetManifestBuilder {
          "dockerImages": Object {},
          "files": Object {},
        },
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
        "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
        "bucketPrefix": "",
        "dockerTagPrefix": "",
        "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
        "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
        "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
        "props": Object {},
        "qualifier": "hnb659fds",
        "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
        "useLookupRoleForStackOperations": true,
      },
      "tags": TagManager {
        "initialTagPriority": 50,
        "priorities": Map {},
        "renderedTags": "<unresolved-lazy>",
        "resourceTypeName": "aws:cdk:stack",
        "tagFormatter": KeyValueFormatter {},
        "tagPropertyName": "tags",
        "tags": Map {},
      },
      "templateFile": "stack.template.json",
      "templateOptions": Object {},
      "terminationProtection": undefined,
      Symbol(@aws-cdk/core.DependableTrait): Object {
        "dependencyRoots": Array [
          [Circular],
        ],
      },
    },
    "users": Array [],
    Symbol(@aws-cdk/core.DependableTrait): Object {
      "dependencyRoots": Array [
        [Circular],
      ],
    },
  },
  "dependables": Map {
    Object {
      "Action": "cloudwatch:DescribeAlarms",
      "Condition": Object {
        "StringEquals": Object {
          "aws:ResourceTag/env": Array [
            "test",
          ],
        },
      },
      "Effect": "Allow",
      "Resource": "*",
    } => DependencyGroup {
      "_deps": Array [],
      Symbol(@aws-cdk/core.DependableTrait): Object {
        "dependencyRoots": Array [],
      },
    },
  },
  "env": Object {
    "account": "\${Token[AWS.AccountId.0]}",
    "region": "\${Token[AWS.Region.4]}",
  },
  "grantPrincipal": [Circular],
  "inlinePolicies": Object {},
  "managedPolicies": Array [],
  "node": Node {
    "_children": Object {
      "DefaultPolicy": Policy {
        "_allowCrossEnvironment": false,
        "_physicalName": "\${Token[TOKEN.3275]}",
        "_policyName": "\${Token[TOKEN.3275]}",
        "document": Object {
          "Statement": Array [
            Object {
              "Action": "cloudwatch:DescribeAlarms",
              "Condition": Object {
                "StringEquals": Object {
                  "aws:ResourceTag/env": Array [
                    "test",
                  ],
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "env": Object {
          "account": "\${Token[AWS.AccountId.0]}",
          "region": "\${Token[AWS.Region.4]}",
        },
        "force": false,
        "groups": Array [],
        "node": Node {
          "_children": Object {
            "Resource": CfnPolicyConditional {
              "_cfnProperties": Object {
                "groups": Array [
                  "#{Token[TOKEN.3278]}",
                ],
                "policyDocument": Object {
                  "Statement": Array [
                    Object {
                      "Action": "cloudwatch:DescribeAlarms",
                      "Condition": Object {
                        "StringEquals": Object {
                          "aws:ResourceTag/env": Array [
                            "test",
                          ],
                        },
                      },
                      "Effect": "Allow",
                      "Resource": "*",
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "policyName": "\${Token[TOKEN.3275]}",
                "roles": Array [
                  "#{Token[TOKEN.3276]}",
                ],
                "users": Array [
                  "#{Token[TOKEN.3277]}",
                ],
              },
              "cfnOptions": Object {},
              "cfnResourceType": "AWS::IAM::Policy",
              "dependsOn": Set {},
              "groups": Array [
                "#{Token[TOKEN.3278]}",
              ],
              "logicalId": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3279]}",
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3279]}",
                    "trace": undefined,
                    "type": "aws:cdk:logicalId",
                  },
                ],
                "_validations": Array [],
                "host": [Circular],
                "id": "Resource",
                "scope": [Circular],
              },
              "policyDocument": Object {
                "Statement": Array [
                  Object {
                    "Action": "cloudwatch:DescribeAlarms",
                    "Condition": Object {
                      "StringEquals": Object {
                        "aws:ResourceTag/env": Array [
                          "test",
                        ],
                      },
                    },
                    "Effect": "Allow",
                    "Resource": "*",
                  },
                ],
                "Version": "2012-10-17",
              },
              "policyName": "\${Token[TOKEN.3275]}",
              "rawOverrides": Object {},
              "roles": Array [
                "#{Token[TOKEN.3276]}",
              ],
              "stack": Stack {
                "_logicalIds": LogicalIDs {
                  "renames": Object {},
                  "reverse": Object {},
                },
                "_missingContext": Array [],
                "_stackDependencies": Object {},
                "_stackName": "stack",
                "_versionReportingEnabled": undefined,
                "account": "\${Token[AWS.AccountId.0]}",
                "artifactId": "stack",
                "environment": "aws://unknown-account/unknown-region",
                "node": Node {
                  "_children": Object {
                    "F": Function {
                      "_allowCrossEnvironment": true,
                      "_architecture": undefined,
                      "_functionUrlInvocationGrants": Object {},
                      "_invocationGrants": Object {},
                      "_layers": Array [],
                      "_physicalName": "testFunction",
                      "_warnIfCurrentVersionCalled": false,
                      "architecture": Architecture {
                        "dockerPlatform": "linux/amd64",
                        "name": "x86_64",
                      },
                      "canCreatePermissions": true,
                      "currentVersionOptions": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "environment": Object {},
                      "functionArn": "\${Token[TOKEN.3250]}",
                      "functionName": "\${Token[TOKEN.3249]}",
                      "grantPrincipal": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3236]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3240]}",
                              "attrRoleId": "\${Token[TOKEN.3241]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3236]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3236]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3242]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3242]}",
                        "roleId": "\${Token[TOKEN.3241]}",
                        "roleName": "\${Token[TOKEN.3244]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3245]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3242]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3247]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3245]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3238]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3236]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3240]}",
                                        "attrRoleId": "\${Token[TOKEN.3241]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3238]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3236]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3236]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3242]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3242]}",
                                  "roleId": "\${Token[TOKEN.3241]}",
                                  "roleName": "\${Token[TOKEN.3244]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3242]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "permissionsNode": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3245]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3242]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3247]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3245]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3238]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3236]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3240]}",
                                        "attrRoleId": "\${Token[TOKEN.3241]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3238]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3236]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3236]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3242]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3242]}",
                                  "roleId": "\${Token[TOKEN.3241]}",
                                  "roleName": "\${Token[TOKEN.3244]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3242]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "physicalName": "testFunction",
                      "role": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3236]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3240]}",
                              "attrRoleId": "\${Token[TOKEN.3241]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3236]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3236]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3242]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3242]}",
                        "roleId": "\${Token[TOKEN.3241]}",
                        "roleName": "\${Token[TOKEN.3244]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "runtime": Runtime {
                        "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "family": 0,
                        "name": "nodejs14.x",
                        "supportsCodeGuruProfiling": false,
                        "supportsInlineCode": true,
                      },
                      "stack": [Circular],
                      "timeout": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Table": Table {
                      "_allowCrossEnvironment": true,
                      "_physicalName": "testTable",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": "PROVISIONED",
                      "encryptionKey": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "globalReplicaCustomResources": Array [],
                      "globalSecondaryIndexes": Array [],
                      "indexScaling": Map {},
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "localSecondaryIndexes": Array [],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnTable {
                            "_cfnProperties": Object {
                              "attributeDefinitions": Array [
                                Object {
                                  "attributeName": "id",
                                  "attributeType": "S",
                                },
                              ],
                              "billingMode": undefined,
                              "contributorInsightsSpecification": undefined,
                              "globalSecondaryIndexes": "<unresolved-lazy>",
                              "keySchema": Array [
                                Object {
                                  "attributeName": "id",
                                  "keyType": "HASH",
                                },
                              ],
                              "kinesisStreamSpecification": undefined,
                              "localSecondaryIndexes": "<unresolved-lazy>",
                              "pointInTimeRecoverySpecification": undefined,
                              "provisionedThroughput": Object {
                                "readCapacityUnits": 5,
                                "writeCapacityUnits": 5,
                              },
                              "sseSpecification": undefined,
                              "streamSpecification": undefined,
                              "tableClass": undefined,
                              "tableName": "testTable",
                              "timeToLiveSpecification": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3252]}",
                            "attrStreamArn": "\${Token[TOKEN.3253]}",
                            "attributeDefinitions": Array [
                              Object {
                                "attributeName": "id",
                                "attributeType": "S",
                              },
                            ],
                            "billingMode": undefined,
                            "cfnOptions": Object {
                              "deletionPolicy": "Retain",
                              "updateReplacePolicy": "Retain",
                            },
                            "cfnResourceType": "AWS::DynamoDB::Table",
                            "contributorInsightsSpecification": undefined,
                            "dependsOn": Set {},
                            "globalSecondaryIndexes": "<unresolved-lazy>",
                            "keySchema": Array [
                              Object {
                                "attributeName": "id",
                                "keyType": "HASH",
                              },
                            ],
                            "kinesisStreamSpecification": undefined,
                            "localSecondaryIndexes": "<unresolved-lazy>",
                            "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "pointInTimeRecoverySpecification": undefined,
                            "provisionedThroughput": Object {
                              "readCapacityUnits": 5,
                              "writeCapacityUnits": 5,
                            },
                            "rawOverrides": Object {},
                            "sseSpecification": undefined,
                            "stack": [Circular],
                            "streamSpecification": undefined,
                            "tableClass": undefined,
                            "tableName": "testTable",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::DynamoDB::Table",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeToLiveSpecification": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ScalingRole": Import {
                            "_allowCrossEnvironment": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "ScalingRole",
                              "scope": [Circular],
                            },
                            "physicalName": "\${Token[TOKEN.3257]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[TOKEN.3256]}",
                            "trace": undefined,
                            "type": "aws:cdk:hasPhysicalName",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Table",
                        "scope": [Circular],
                      },
                      "nonKeyAttributes": Set {},
                      "physicalName": "testTable",
                      "regionalArns": Array [],
                      "scalingRole": Import {
                        "_allowCrossEnvironment": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "ScalingRole",
                          "scope": [Circular],
                        },
                        "physicalName": "\${Token[TOKEN.3257]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "secondaryIndexSchemas": Map {},
                      "stack": [Circular],
                      "table": CfnTable {
                        "_cfnProperties": Object {
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "contributorInsightsSpecification": undefined,
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "sseSpecification": undefined,
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "timeToLiveSpecification": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3252]}",
                        "attrStreamArn": "\${Token[TOKEN.3253]}",
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "cfnOptions": Object {
                          "deletionPolicy": "Retain",
                          "updateReplacePolicy": "Retain",
                        },
                        "cfnResourceType": "AWS::DynamoDB::Table",
                        "contributorInsightsSpecification": undefined,
                        "dependsOn": Set {},
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "rawOverrides": Object {},
                        "sseSpecification": undefined,
                        "stack": [Circular],
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::DynamoDB::Table",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeToLiveSpecification": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "tableArn": "\${Token[TOKEN.3254]}",
                      "tableName": "\${Token[TOKEN.3256]}",
                      "tablePartitionKey": Object {
                        "name": "id",
                        "type": "S",
                      },
                      "tableScaling": Object {},
                      "tableStreamArn": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "fn": StateMachine {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnStateMachine {
                            "_cfnProperties": Object {
                              "definitionString": "\${Token[TOKEN.3268]}",
                              "loggingConfiguration": undefined,
                              "roleArn": "\${Token[TOKEN.3265]}",
                              "stateMachineName": "\${Token[TOKEN.3258]}",
                              "stateMachineType": "EXPRESS",
                              "tracingConfiguration": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3270]}",
                            "attrName": "\${Token[TOKEN.3271]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::StepFunctions::StateMachine",
                            "definition": undefined,
                            "definitionS3Location": undefined,
                            "definitionString": "\${Token[TOKEN.3280]}",
                            "definitionSubstitutions": undefined,
                            "dependsOn": Set {},
                            "loggingConfiguration": undefined,
                            "logicalId": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                [Circular],
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "rawOverrides": Object {},
                            "roleArn": "\${Token[TOKEN.3265]}",
                            "stack": [Circular],
                            "stateMachineName": "\${Token[TOKEN.3258]}",
                            "stateMachineType": "EXPRESS",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::StepFunctions::StateMachine",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "tracingConfiguration": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "Role": [Circular],
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "fn",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3258]}",
                      "role": [Circular],
                      "stack": [Circular],
                      "stateMachineArn": "\${Token[TOKEN.3274]}",
                      "stateMachineName": "\${Token[TOKEN.3272]}",
                      "stateMachineType": "EXPRESS",
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "stack",
                  "scope": App {
                    "_assemblyBuilder": CloudAssemblyBuilder {
                      "artifacts": Object {},
                      "assetOutdir": "/tmp/cdk.outwOSQs6",
                      "missing": Array [],
                      "outdir": "/tmp/cdk.outwOSQs6",
                      "parentBuilder": undefined,
                    },
                    "account": undefined,
                    "node": Node {
                      "_children": Object {
                        "Tree": TreeMetadata {
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Tree",
                            "scope": [Circular],
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "stack": [Circular],
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "",
                      "scope": undefined,
                    },
                    "parentStage": undefined,
                    "region": undefined,
                    "stageName": "",
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "region": "\${Token[AWS.Region.4]}",
                "synthesizer": DefaultStackSynthesizer {
                  "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_stack": [Circular],
                  "assetManifest": AssetManifestBuilder {
                    "dockerImages": Object {},
                    "files": Object {},
                  },
                  "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
                  "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "bucketPrefix": "",
                  "dockerTagPrefix": "",
                  "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
                  "props": Object {},
                  "qualifier": "hnb659fds",
                  "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "useLookupRoleForStackOperations": true,
                },
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "aws:cdk:stack",
                  "tagFormatter": KeyValueFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "templateFile": "stack.template.json",
                "templateOptions": Object {},
                "terminationProtection": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "users": Array [
                "#{Token[TOKEN.3277]}",
              ],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [
            Object {
              "validate": [Function],
            },
          ],
          "host": [Circular],
          "id": "DefaultPolicy",
          "scope": [Circular],
        },
        "physicalName": "\${Token[TOKEN.3275]}",
        "referenceTaken": false,
        "roles": Array [
          [Circular],
        ],
        "stack": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3250]}",
                "functionName": "\${Token[TOKEN.3249]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3236]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3240]}",
                        "attrRoleId": "\${Token[TOKEN.3241]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3236]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3236]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3242]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3242]}",
                  "roleId": "\${Token[TOKEN.3241]}",
                  "roleName": "\${Token[TOKEN.3244]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3245]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3242]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3247]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3245]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3242]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3245]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3242]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3247]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3245]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3242]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3236]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3240]}",
                        "attrRoleId": "\${Token[TOKEN.3241]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3236]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3236]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3242]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3242]}",
                  "roleId": "\${Token[TOKEN.3241]}",
                  "roleName": "\${Token[TOKEN.3244]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3252]}",
                      "attrStreamArn": "\${Token[TOKEN.3253]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3257]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3256]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3257]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3252]}",
                  "attrStreamArn": "\${Token[TOKEN.3253]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3254]}",
                "tableName": "\${Token[TOKEN.3256]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": StateMachine {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnStateMachine {
                      "_cfnProperties": Object {
                        "definitionString": "\${Token[TOKEN.3268]}",
                        "loggingConfiguration": undefined,
                        "roleArn": "\${Token[TOKEN.3265]}",
                        "stateMachineName": "\${Token[TOKEN.3258]}",
                        "stateMachineType": "EXPRESS",
                        "tracingConfiguration": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3270]}",
                      "attrName": "\${Token[TOKEN.3271]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::StepFunctions::StateMachine",
                      "definition": undefined,
                      "definitionS3Location": undefined,
                      "definitionString": "\${Token[TOKEN.3280]}",
                      "definitionSubstitutions": undefined,
                      "dependsOn": Set {},
                      "loggingConfiguration": undefined,
                      "logicalId": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          [Circular],
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "rawOverrides": Object {},
                      "roleArn": "\${Token[TOKEN.3265]}",
                      "stack": [Circular],
                      "stateMachineName": "\${Token[TOKEN.3258]}",
                      "stateMachineType": "EXPRESS",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::StepFunctions::StateMachine",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "tracingConfiguration": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Role": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "fn",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3258]}",
                "role": [Circular],
                "stack": [Circular],
                "stateMachineArn": "\${Token[TOKEN.3274]}",
                "stateMachineName": "\${Token[TOKEN.3272]}",
                "stateMachineType": "EXPRESS",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.outwOSQs6",
                "missing": Array [],
                "outdir": "/tmp/cdk.outwOSQs6",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "users": Array [],
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
      "Resource": CfnRole {
        "_cfnProperties": Object {
          "assumeRolePolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": Object {
                  "Service": "\${Token[states.amazonaws.com.3260]}",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "description": undefined,
          "managedPolicyArns": Array [
            "#{Token[TOKEN.3261]}",
          ],
          "maxSessionDuration": undefined,
          "path": undefined,
          "permissionsBoundary": undefined,
          "policies": undefined,
          "roleName": "\${Token[TOKEN.3259]}",
        },
        "assumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "\${Token[states.amazonaws.com.3260]}",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "attrArn": "\${Token[TOKEN.3263]}",
        "attrRoleId": "\${Token[TOKEN.3264]}",
        "cfnOptions": Object {},
        "cfnResourceType": "AWS::IAM::Role",
        "dependsOn": Set {},
        "description": undefined,
        "logicalId": "\${Token[stack.fn.Role.Resource.LogicalID.3262]}",
        "managedPolicyArns": Array [
          "#{Token[TOKEN.3261]}",
        ],
        "maxSessionDuration": undefined,
        "node": Node {
          "_children": Object {},
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [
            Object {
              "data": "\${Token[stack.fn.Role.Resource.LogicalID.3262]}",
              "trace": undefined,
              "type": "aws:cdk:logicalId",
            },
          ],
          "_validations": Array [],
          "host": [Circular],
          "id": "Resource",
          "scope": [Circular],
        },
        "path": undefined,
        "permissionsBoundary": undefined,
        "policies": undefined,
        "rawOverrides": Object {},
        "roleName": "\${Token[TOKEN.3259]}",
        "stack": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3250]}",
                "functionName": "\${Token[TOKEN.3249]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3236]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3240]}",
                        "attrRoleId": "\${Token[TOKEN.3241]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3236]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3236]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3242]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3242]}",
                  "roleId": "\${Token[TOKEN.3241]}",
                  "roleName": "\${Token[TOKEN.3244]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3245]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3242]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3247]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3245]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3242]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3245]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3242]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3247]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3245]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3242]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3236]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3240]}",
                        "attrRoleId": "\${Token[TOKEN.3241]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3236]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3236]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3242]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3242]}",
                  "roleId": "\${Token[TOKEN.3241]}",
                  "roleName": "\${Token[TOKEN.3244]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3252]}",
                      "attrStreamArn": "\${Token[TOKEN.3253]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3257]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3256]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3257]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3252]}",
                  "attrStreamArn": "\${Token[TOKEN.3253]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3254]}",
                "tableName": "\${Token[TOKEN.3256]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": StateMachine {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnStateMachine {
                      "_cfnProperties": Object {
                        "definitionString": "\${Token[TOKEN.3268]}",
                        "loggingConfiguration": undefined,
                        "roleArn": "\${Token[TOKEN.3265]}",
                        "stateMachineName": "\${Token[TOKEN.3258]}",
                        "stateMachineType": "EXPRESS",
                        "tracingConfiguration": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3270]}",
                      "attrName": "\${Token[TOKEN.3271]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::StepFunctions::StateMachine",
                      "definition": undefined,
                      "definitionS3Location": undefined,
                      "definitionString": "\${Token[TOKEN.3280]}",
                      "definitionSubstitutions": undefined,
                      "dependsOn": Set {},
                      "loggingConfiguration": undefined,
                      "logicalId": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          [Circular],
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "rawOverrides": Object {},
                      "roleArn": "\${Token[TOKEN.3265]}",
                      "stack": [Circular],
                      "stateMachineName": "\${Token[TOKEN.3258]}",
                      "stateMachineType": "EXPRESS",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::StepFunctions::StateMachine",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "tracingConfiguration": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Role": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "fn",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3258]}",
                "role": [Circular],
                "stack": [Circular],
                "stateMachineArn": "\${Token[TOKEN.3274]}",
                "stateMachineName": "\${Token[TOKEN.3272]}",
                "stateMachineType": "EXPRESS",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.outwOSQs6",
                "missing": Array [],
                "outdir": "/tmp/cdk.outwOSQs6",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "tags": TagManager {
          "initialTagPriority": 50,
          "priorities": Map {},
          "renderedTags": "<unresolved-lazy>",
          "resourceTypeName": "AWS::IAM::Role",
          "tagFormatter": StandardFormatter {},
          "tagPropertyName": "tags",
          "tags": Map {},
        },
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
    },
    "_context": Object {},
    "_dependencies": Set {},
    "_locked": false,
    "_metadata": Array [],
    "_validations": Array [
      Object {
        "validate": [Function],
      },
    ],
    "host": [Circular],
    "id": "Role",
    "scope": StateMachine {
      "_allowCrossEnvironment": false,
      "_physicalName": undefined,
      "env": Object {
        "account": "\${Token[AWS.AccountId.0]}",
        "region": "\${Token[AWS.Region.4]}",
      },
      "node": Node {
        "_children": Object {
          "Resource": CfnStateMachine {
            "_cfnProperties": Object {
              "definitionString": "\${Token[TOKEN.3268]}",
              "loggingConfiguration": undefined,
              "roleArn": "\${Token[TOKEN.3265]}",
              "stateMachineName": "\${Token[TOKEN.3258]}",
              "stateMachineType": "EXPRESS",
              "tracingConfiguration": undefined,
            },
            "attrArn": "\${Token[TOKEN.3270]}",
            "attrName": "\${Token[TOKEN.3271]}",
            "cfnOptions": Object {},
            "cfnResourceType": "AWS::StepFunctions::StateMachine",
            "definition": undefined,
            "definitionS3Location": undefined,
            "definitionString": "\${Token[TOKEN.3280]}",
            "definitionSubstitutions": undefined,
            "dependsOn": Set {},
            "loggingConfiguration": undefined,
            "logicalId": "\${Token[stack.fn.Resource.LogicalID.3269]}",
            "node": Node {
              "_children": Object {},
              "_context": Object {},
              "_dependencies": Set {
                [Circular],
              },
              "_locked": false,
              "_metadata": Array [
                Object {
                  "data": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                  "trace": undefined,
                  "type": "aws:cdk:logicalId",
                },
              ],
              "_validations": Array [],
              "host": [Circular],
              "id": "Resource",
              "scope": [Circular],
            },
            "rawOverrides": Object {},
            "roleArn": "\${Token[TOKEN.3265]}",
            "stack": Stack {
              "_logicalIds": LogicalIDs {
                "renames": Object {},
                "reverse": Object {},
              },
              "_missingContext": Array [],
              "_stackDependencies": Object {},
              "_stackName": "stack",
              "_versionReportingEnabled": undefined,
              "account": "\${Token[AWS.AccountId.0]}",
              "artifactId": "stack",
              "environment": "aws://unknown-account/unknown-region",
              "node": Node {
                "_children": Object {
                  "F": Function {
                    "_allowCrossEnvironment": true,
                    "_architecture": undefined,
                    "_functionUrlInvocationGrants": Object {},
                    "_invocationGrants": Object {},
                    "_layers": Array [],
                    "_physicalName": "testFunction",
                    "_warnIfCurrentVersionCalled": false,
                    "architecture": Architecture {
                      "dockerPlatform": "linux/amd64",
                      "name": "x86_64",
                    },
                    "canCreatePermissions": true,
                    "currentVersionOptions": undefined,
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "environment": Object {},
                    "functionArn": "\${Token[TOKEN.3250]}",
                    "functionName": "\${Token[TOKEN.3249]}",
                    "grantPrincipal": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnFunction {
                          "_cfnProperties": Object {
                            "architectures": undefined,
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3245]}",
                            ],
                            "memorySize": undefined,
                            "packageType": undefined,
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3242]}",
                            "runtime": "nodejs14.x",
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                          },
                          "architectures": undefined,
                          "attrArn": "\${Token[TOKEN.3247]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::Lambda::Function",
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "dependsOn": Set {},
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3245]}",
                          ],
                          "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                          "memorySize": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {
                              Role {
                                "_allowCrossEnvironment": false,
                                "_didSplit": false,
                                "_physicalName": undefined,
                                "assumeRoleAction": "sts:AssumeRole",
                                "assumeRolePolicy": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attachedPolicies": AttachedPolicies {
                                  "policies": Array [],
                                },
                                "dependables": Map {},
                                "env": Object {
                                  "account": "\${Token[AWS.AccountId.0]}",
                                  "region": "\${Token[AWS.Region.4]}",
                                },
                                "grantPrincipal": [Circular],
                                "inlinePolicies": Object {},
                                "managedPolicies": Array [
                                  AwsManagedPolicy {
                                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                  },
                                ],
                                "node": Node {
                                  "_children": Object {
                                    "Resource": CfnRole {
                                      "_cfnProperties": Object {
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "description": undefined,
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3238]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "roleName": "\${Token[TOKEN.3236]}",
                                      },
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "attrArn": "\${Token[TOKEN.3240]}",
                                      "attrRoleId": "\${Token[TOKEN.3241]}",
                                      "cfnOptions": Object {},
                                      "cfnResourceType": "AWS::IAM::Role",
                                      "dependsOn": Set {},
                                      "description": undefined,
                                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3238]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "node": Node {
                                        "_children": Object {},
                                        "_context": Object {},
                                        "_dependencies": Set {},
                                        "_locked": false,
                                        "_metadata": Array [
                                          Object {
                                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                            "trace": undefined,
                                            "type": "aws:cdk:logicalId",
                                          },
                                        ],
                                        "_validations": Array [],
                                        "host": [Circular],
                                        "id": "Resource",
                                        "scope": [Circular],
                                      },
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "rawOverrides": Object {},
                                      "roleName": "\${Token[TOKEN.3236]}",
                                      "stack": [Circular],
                                      "tags": TagManager {
                                        "initialTagPriority": 50,
                                        "priorities": Map {},
                                        "renderedTags": "<unresolved-lazy>",
                                        "resourceTypeName": "AWS::IAM::Role",
                                        "tagFormatter": StandardFormatter {},
                                        "tagPropertyName": "tags",
                                        "tags": Map {},
                                      },
                                      Symbol(@aws-cdk/core.DependableTrait): Object {
                                        "dependencyRoots": Array [
                                          [Circular],
                                        ],
                                      },
                                    },
                                  },
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [],
                                  "_validations": Array [
                                    Object {
                                      "validate": [Function],
                                    },
                                  ],
                                  "host": [Circular],
                                  "id": "ServiceRole",
                                  "scope": [Circular],
                                },
                                "permissionsBoundary": undefined,
                                "physicalName": "\${Token[TOKEN.3236]}",
                                "policyFragment": PrincipalPolicyFragment {
                                  "conditions": Object {},
                                  "principalJson": Object {
                                    "AWS": Array [
                                      "\${Token[TOKEN.3242]}",
                                    ],
                                  },
                                },
                                "principalAccount": "\${Token[AWS.AccountId.0]}",
                                "roleArn": "\${Token[TOKEN.3242]}",
                                "roleId": "\${Token[TOKEN.3241]}",
                                "roleName": "\${Token[TOKEN.3244]}",
                                "stack": [Circular],
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "packageType": undefined,
                          "rawOverrides": Object {},
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3242]}",
                          "runtime": "nodejs14.x",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::Lambda::Function",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "ServiceRole": Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3236]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3240]}",
                                "attrRoleId": "\${Token[TOKEN.3241]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3236]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3236]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3242]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3242]}",
                          "roleId": "\${Token[TOKEN.3241]}",
                          "roleName": "\${Token[TOKEN.3244]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "F",
                      "scope": [Circular],
                    },
                    "permissionsNode": Node {
                      "_children": Object {
                        "Resource": CfnFunction {
                          "_cfnProperties": Object {
                            "architectures": undefined,
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3245]}",
                            ],
                            "memorySize": undefined,
                            "packageType": undefined,
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3242]}",
                            "runtime": "nodejs14.x",
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                          },
                          "architectures": undefined,
                          "attrArn": "\${Token[TOKEN.3247]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::Lambda::Function",
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "dependsOn": Set {},
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3245]}",
                          ],
                          "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                          "memorySize": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {
                              Role {
                                "_allowCrossEnvironment": false,
                                "_didSplit": false,
                                "_physicalName": undefined,
                                "assumeRoleAction": "sts:AssumeRole",
                                "assumeRolePolicy": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attachedPolicies": AttachedPolicies {
                                  "policies": Array [],
                                },
                                "dependables": Map {},
                                "env": Object {
                                  "account": "\${Token[AWS.AccountId.0]}",
                                  "region": "\${Token[AWS.Region.4]}",
                                },
                                "grantPrincipal": [Circular],
                                "inlinePolicies": Object {},
                                "managedPolicies": Array [
                                  AwsManagedPolicy {
                                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                  },
                                ],
                                "node": Node {
                                  "_children": Object {
                                    "Resource": CfnRole {
                                      "_cfnProperties": Object {
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "description": undefined,
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3238]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "roleName": "\${Token[TOKEN.3236]}",
                                      },
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "attrArn": "\${Token[TOKEN.3240]}",
                                      "attrRoleId": "\${Token[TOKEN.3241]}",
                                      "cfnOptions": Object {},
                                      "cfnResourceType": "AWS::IAM::Role",
                                      "dependsOn": Set {},
                                      "description": undefined,
                                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3238]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "node": Node {
                                        "_children": Object {},
                                        "_context": Object {},
                                        "_dependencies": Set {},
                                        "_locked": false,
                                        "_metadata": Array [
                                          Object {
                                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                            "trace": undefined,
                                            "type": "aws:cdk:logicalId",
                                          },
                                        ],
                                        "_validations": Array [],
                                        "host": [Circular],
                                        "id": "Resource",
                                        "scope": [Circular],
                                      },
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "rawOverrides": Object {},
                                      "roleName": "\${Token[TOKEN.3236]}",
                                      "stack": [Circular],
                                      "tags": TagManager {
                                        "initialTagPriority": 50,
                                        "priorities": Map {},
                                        "renderedTags": "<unresolved-lazy>",
                                        "resourceTypeName": "AWS::IAM::Role",
                                        "tagFormatter": StandardFormatter {},
                                        "tagPropertyName": "tags",
                                        "tags": Map {},
                                      },
                                      Symbol(@aws-cdk/core.DependableTrait): Object {
                                        "dependencyRoots": Array [
                                          [Circular],
                                        ],
                                      },
                                    },
                                  },
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [],
                                  "_validations": Array [
                                    Object {
                                      "validate": [Function],
                                    },
                                  ],
                                  "host": [Circular],
                                  "id": "ServiceRole",
                                  "scope": [Circular],
                                },
                                "permissionsBoundary": undefined,
                                "physicalName": "\${Token[TOKEN.3236]}",
                                "policyFragment": PrincipalPolicyFragment {
                                  "conditions": Object {},
                                  "principalJson": Object {
                                    "AWS": Array [
                                      "\${Token[TOKEN.3242]}",
                                    ],
                                  },
                                },
                                "principalAccount": "\${Token[AWS.AccountId.0]}",
                                "roleArn": "\${Token[TOKEN.3242]}",
                                "roleId": "\${Token[TOKEN.3241]}",
                                "roleName": "\${Token[TOKEN.3244]}",
                                "stack": [Circular],
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "packageType": undefined,
                          "rawOverrides": Object {},
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3242]}",
                          "runtime": "nodejs14.x",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::Lambda::Function",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "ServiceRole": Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3236]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3240]}",
                                "attrRoleId": "\${Token[TOKEN.3241]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3236]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3236]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3242]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3242]}",
                          "roleId": "\${Token[TOKEN.3241]}",
                          "roleName": "\${Token[TOKEN.3244]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "F",
                      "scope": [Circular],
                    },
                    "physicalName": "testFunction",
                    "role": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "runtime": Runtime {
                      "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                      "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                      "family": 0,
                      "name": "nodejs14.x",
                      "supportsCodeGuruProfiling": false,
                      "supportsInlineCode": true,
                    },
                    "stack": [Circular],
                    "timeout": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "Table": Table {
                    "_allowCrossEnvironment": true,
                    "_physicalName": "testTable",
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": "PROVISIONED",
                    "encryptionKey": undefined,
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "globalReplicaCustomResources": Array [],
                    "globalSecondaryIndexes": Array [],
                    "indexScaling": Map {},
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "localSecondaryIndexes": Array [],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnTable {
                          "_cfnProperties": Object {
                            "attributeDefinitions": Array [
                              Object {
                                "attributeName": "id",
                                "attributeType": "S",
                              },
                            ],
                            "billingMode": undefined,
                            "contributorInsightsSpecification": undefined,
                            "globalSecondaryIndexes": "<unresolved-lazy>",
                            "keySchema": Array [
                              Object {
                                "attributeName": "id",
                                "keyType": "HASH",
                              },
                            ],
                            "kinesisStreamSpecification": undefined,
                            "localSecondaryIndexes": "<unresolved-lazy>",
                            "pointInTimeRecoverySpecification": undefined,
                            "provisionedThroughput": Object {
                              "readCapacityUnits": 5,
                              "writeCapacityUnits": 5,
                            },
                            "sseSpecification": undefined,
                            "streamSpecification": undefined,
                            "tableClass": undefined,
                            "tableName": "testTable",
                            "timeToLiveSpecification": undefined,
                          },
                          "attrArn": "\${Token[TOKEN.3252]}",
                          "attrStreamArn": "\${Token[TOKEN.3253]}",
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "cfnOptions": Object {
                            "deletionPolicy": "Retain",
                            "updateReplacePolicy": "Retain",
                          },
                          "cfnResourceType": "AWS::DynamoDB::Table",
                          "contributorInsightsSpecification": undefined,
                          "dependsOn": Set {},
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "rawOverrides": Object {},
                          "sseSpecification": undefined,
                          "stack": [Circular],
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::DynamoDB::Table",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          "timeToLiveSpecification": undefined,
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "ScalingRole": Import {
                          "_allowCrossEnvironment": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "ScalingRole",
                            "scope": [Circular],
                          },
                          "physicalName": "\${Token[TOKEN.3257]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[TOKEN.3256]}",
                          "trace": undefined,
                          "type": "aws:cdk:hasPhysicalName",
                        },
                      ],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "Table",
                      "scope": [Circular],
                    },
                    "nonKeyAttributes": Set {},
                    "physicalName": "testTable",
                    "regionalArns": Array [],
                    "scalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3257]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "secondaryIndexSchemas": Map {},
                    "stack": [Circular],
                    "table": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3252]}",
                      "attrStreamArn": "\${Token[TOKEN.3253]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "tableArn": "\${Token[TOKEN.3254]}",
                    "tableName": "\${Token[TOKEN.3256]}",
                    "tablePartitionKey": Object {
                      "name": "id",
                      "type": "S",
                    },
                    "tableScaling": Object {},
                    "tableStreamArn": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "fn": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "stack",
                "scope": App {
                  "_assemblyBuilder": CloudAssemblyBuilder {
                    "artifacts": Object {},
                    "assetOutdir": "/tmp/cdk.outwOSQs6",
                    "missing": Array [],
                    "outdir": "/tmp/cdk.outwOSQs6",
                    "parentBuilder": undefined,
                  },
                  "account": undefined,
                  "node": Node {
                    "_children": Object {
                      "Tree": TreeMetadata {
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Tree",
                          "scope": [Circular],
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "stack": [Circular],
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "",
                    "scope": undefined,
                  },
                  "parentStage": undefined,
                  "region": undefined,
                  "stageName": "",
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "region": "\${Token[AWS.Region.4]}",
              "synthesizer": DefaultStackSynthesizer {
                "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
                "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
                "_stack": [Circular],
                "assetManifest": AssetManifestBuilder {
                  "dockerImages": Object {},
                  "files": Object {},
                },
                "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
                "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                "bucketPrefix": "",
                "dockerTagPrefix": "",
                "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
                "props": Object {},
                "qualifier": "hnb659fds",
                "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                "useLookupRoleForStackOperations": true,
              },
              "tags": TagManager {
                "initialTagPriority": 50,
                "priorities": Map {},
                "renderedTags": "<unresolved-lazy>",
                "resourceTypeName": "aws:cdk:stack",
                "tagFormatter": KeyValueFormatter {},
                "tagPropertyName": "tags",
                "tags": Map {},
              },
              "templateFile": "stack.template.json",
              "templateOptions": Object {},
              "terminationProtection": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "stateMachineName": "\${Token[TOKEN.3258]}",
            "stateMachineType": "EXPRESS",
            "tags": TagManager {
              "initialTagPriority": 50,
              "priorities": Map {},
              "renderedTags": "<unresolved-lazy>",
              "resourceTypeName": "AWS::StepFunctions::StateMachine",
              "tagFormatter": StandardFormatter {},
              "tagPropertyName": "tags",
              "tags": Map {},
            },
            "tracingConfiguration": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "Role": [Circular],
        },
        "_context": Object {},
        "_dependencies": Set {},
        "_locked": false,
        "_metadata": Array [],
        "_validations": Array [],
        "host": [Circular],
        "id": "fn",
        "scope": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3250]}",
                "functionName": "\${Token[TOKEN.3249]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3236]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3240]}",
                        "attrRoleId": "\${Token[TOKEN.3241]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3236]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3236]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3242]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3242]}",
                  "roleId": "\${Token[TOKEN.3241]}",
                  "roleName": "\${Token[TOKEN.3244]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3245]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3242]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3247]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3245]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3242]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3245]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3242]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3247]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3245]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3238]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3236]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3240]}",
                                  "attrRoleId": "\${Token[TOKEN.3241]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3236]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3236]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3242]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3242]}",
                            "roleId": "\${Token[TOKEN.3241]}",
                            "roleName": "\${Token[TOKEN.3244]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3242]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3236]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3240]}",
                        "attrRoleId": "\${Token[TOKEN.3241]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3236]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3236]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3242]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3242]}",
                  "roleId": "\${Token[TOKEN.3241]}",
                  "roleName": "\${Token[TOKEN.3244]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3252]}",
                      "attrStreamArn": "\${Token[TOKEN.3253]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3257]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3256]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3257]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3252]}",
                  "attrStreamArn": "\${Token[TOKEN.3253]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3254]}",
                "tableName": "\${Token[TOKEN.3256]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": [Circular],
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.outwOSQs6",
                "missing": Array [],
                "outdir": "/tmp/cdk.outwOSQs6",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "physicalName": "\${Token[TOKEN.3258]}",
      "role": [Circular],
      "stack": Stack {
        "_logicalIds": LogicalIDs {
          "renames": Object {},
          "reverse": Object {},
        },
        "_missingContext": Array [],
        "_stackDependencies": Object {},
        "_stackName": "stack",
        "_versionReportingEnabled": undefined,
        "account": "\${Token[AWS.AccountId.0]}",
        "artifactId": "stack",
        "environment": "aws://unknown-account/unknown-region",
        "node": Node {
          "_children": Object {
            "F": Function {
              "_allowCrossEnvironment": true,
              "_architecture": undefined,
              "_functionUrlInvocationGrants": Object {},
              "_invocationGrants": Object {},
              "_layers": Array [],
              "_physicalName": "testFunction",
              "_warnIfCurrentVersionCalled": false,
              "architecture": Architecture {
                "dockerPlatform": "linux/amd64",
                "name": "x86_64",
              },
              "canCreatePermissions": true,
              "currentVersionOptions": undefined,
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "environment": Object {},
              "functionArn": "\${Token[TOKEN.3250]}",
              "functionName": "\${Token[TOKEN.3249]}",
              "grantPrincipal": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3236]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3240]}",
                      "attrRoleId": "\${Token[TOKEN.3241]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3238]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3236]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3236]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3242]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3242]}",
                "roleId": "\${Token[TOKEN.3241]}",
                "roleName": "\${Token[TOKEN.3244]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "node": Node {
                "_children": Object {
                  "Resource": CfnFunction {
                    "_cfnProperties": Object {
                      "architectures": undefined,
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3245]}",
                      ],
                      "memorySize": undefined,
                      "packageType": undefined,
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3242]}",
                      "runtime": "nodejs14.x",
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                    },
                    "architectures": undefined,
                    "attrArn": "\${Token[TOKEN.3247]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::Lambda::Function",
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "dependsOn": Set {},
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3245]}",
                    ],
                    "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                    "memorySize": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {
                        Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3236]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3240]}",
                                "attrRoleId": "\${Token[TOKEN.3241]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3236]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3236]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3242]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3242]}",
                          "roleId": "\${Token[TOKEN.3241]}",
                          "roleName": "\${Token[TOKEN.3244]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "packageType": undefined,
                    "rawOverrides": Object {},
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3242]}",
                    "runtime": "nodejs14.x",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::Lambda::Function",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "ServiceRole": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3236]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3240]}",
                          "attrRoleId": "\${Token[TOKEN.3241]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3236]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3236]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3242]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3242]}",
                    "roleId": "\${Token[TOKEN.3241]}",
                    "roleName": "\${Token[TOKEN.3244]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "F",
                "scope": [Circular],
              },
              "permissionsNode": Node {
                "_children": Object {
                  "Resource": CfnFunction {
                    "_cfnProperties": Object {
                      "architectures": undefined,
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3245]}",
                      ],
                      "memorySize": undefined,
                      "packageType": undefined,
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3242]}",
                      "runtime": "nodejs14.x",
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                    },
                    "architectures": undefined,
                    "attrArn": "\${Token[TOKEN.3247]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::Lambda::Function",
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "dependsOn": Set {},
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3245]}",
                    ],
                    "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                    "memorySize": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {
                        Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3238]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3236]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3240]}",
                                "attrRoleId": "\${Token[TOKEN.3241]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3238]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3236]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3236]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3242]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3242]}",
                          "roleId": "\${Token[TOKEN.3241]}",
                          "roleName": "\${Token[TOKEN.3244]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "packageType": undefined,
                    "rawOverrides": Object {},
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3242]}",
                    "runtime": "nodejs14.x",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::Lambda::Function",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "ServiceRole": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3236]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3240]}",
                          "attrRoleId": "\${Token[TOKEN.3241]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3238]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3236]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3236]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3242]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3242]}",
                    "roleId": "\${Token[TOKEN.3241]}",
                    "roleName": "\${Token[TOKEN.3244]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "F",
                "scope": [Circular],
              },
              "physicalName": "testFunction",
              "role": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3236]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3240]}",
                      "attrRoleId": "\${Token[TOKEN.3241]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3238]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3236]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3236]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3242]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3242]}",
                "roleId": "\${Token[TOKEN.3241]}",
                "roleName": "\${Token[TOKEN.3244]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "runtime": Runtime {
                "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                "family": 0,
                "name": "nodejs14.x",
                "supportsCodeGuruProfiling": false,
                "supportsInlineCode": true,
              },
              "stack": [Circular],
              "timeout": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "Table": Table {
              "_allowCrossEnvironment": true,
              "_physicalName": "testTable",
              "attributeDefinitions": Array [
                Object {
                  "attributeName": "id",
                  "attributeType": "S",
                },
              ],
              "billingMode": "PROVISIONED",
              "encryptionKey": undefined,
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "globalReplicaCustomResources": Array [],
              "globalSecondaryIndexes": Array [],
              "indexScaling": Map {},
              "keySchema": Array [
                Object {
                  "attributeName": "id",
                  "keyType": "HASH",
                },
              ],
              "localSecondaryIndexes": Array [],
              "node": Node {
                "_children": Object {
                  "Resource": CfnTable {
                    "_cfnProperties": Object {
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "contributorInsightsSpecification": undefined,
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "sseSpecification": undefined,
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "timeToLiveSpecification": undefined,
                    },
                    "attrArn": "\${Token[TOKEN.3252]}",
                    "attrStreamArn": "\${Token[TOKEN.3253]}",
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "cfnOptions": Object {
                      "deletionPolicy": "Retain",
                      "updateReplacePolicy": "Retain",
                    },
                    "cfnResourceType": "AWS::DynamoDB::Table",
                    "contributorInsightsSpecification": undefined,
                    "dependsOn": Set {},
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "rawOverrides": Object {},
                    "sseSpecification": undefined,
                    "stack": [Circular],
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::DynamoDB::Table",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeToLiveSpecification": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "ScalingRole": Import {
                    "_allowCrossEnvironment": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "ScalingRole",
                      "scope": [Circular],
                    },
                    "physicalName": "\${Token[TOKEN.3257]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[TOKEN.3256]}",
                    "trace": undefined,
                    "type": "aws:cdk:hasPhysicalName",
                  },
                ],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "Table",
                "scope": [Circular],
              },
              "nonKeyAttributes": Set {},
              "physicalName": "testTable",
              "regionalArns": Array [],
              "scalingRole": Import {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "ScalingRole",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3257]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "secondaryIndexSchemas": Map {},
              "stack": [Circular],
              "table": CfnTable {
                "_cfnProperties": Object {
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "contributorInsightsSpecification": undefined,
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "sseSpecification": undefined,
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "timeToLiveSpecification": undefined,
                },
                "attrArn": "\${Token[TOKEN.3252]}",
                "attrStreamArn": "\${Token[TOKEN.3253]}",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": undefined,
                "cfnOptions": Object {
                  "deletionPolicy": "Retain",
                  "updateReplacePolicy": "Retain",
                },
                "cfnResourceType": "AWS::DynamoDB::Table",
                "contributorInsightsSpecification": undefined,
                "dependsOn": Set {},
                "globalSecondaryIndexes": "<unresolved-lazy>",
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "kinesisStreamSpecification": undefined,
                "localSecondaryIndexes": "<unresolved-lazy>",
                "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "pointInTimeRecoverySpecification": undefined,
                "provisionedThroughput": Object {
                  "readCapacityUnits": 5,
                  "writeCapacityUnits": 5,
                },
                "rawOverrides": Object {},
                "sseSpecification": undefined,
                "stack": [Circular],
                "streamSpecification": undefined,
                "tableClass": undefined,
                "tableName": "testTable",
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::DynamoDB::Table",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeToLiveSpecification": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "tableArn": "\${Token[TOKEN.3254]}",
              "tableName": "\${Token[TOKEN.3256]}",
              "tablePartitionKey": Object {
                "name": "id",
                "type": "S",
              },
              "tableScaling": Object {},
              "tableStreamArn": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "fn": [Circular],
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [],
          "host": [Circular],
          "id": "stack",
          "scope": App {
            "_assemblyBuilder": CloudAssemblyBuilder {
              "artifacts": Object {},
              "assetOutdir": "/tmp/cdk.outwOSQs6",
              "missing": Array [],
              "outdir": "/tmp/cdk.outwOSQs6",
              "parentBuilder": undefined,
            },
            "account": undefined,
            "node": Node {
              "_children": Object {
                "Tree": TreeMetadata {
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Tree",
                    "scope": [Circular],
                  },
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "stack": [Circular],
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "",
              "scope": undefined,
            },
            "parentStage": undefined,
            "region": undefined,
            "stageName": "",
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
        },
        "region": "\${Token[AWS.Region.4]}",
        "synthesizer": DefaultStackSynthesizer {
          "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
          "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
          "_stack": [Circular],
          "assetManifest": AssetManifestBuilder {
            "dockerImages": Object {},
            "files": Object {},
          },
          "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
          "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          "bucketPrefix": "",
          "dockerTagPrefix": "",
          "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
          "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
          "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
          "props": Object {},
          "qualifier": "hnb659fds",
          "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
          "useLookupRoleForStackOperations": true,
        },
        "tags": TagManager {
          "initialTagPriority": 50,
          "priorities": Map {},
          "renderedTags": "<unresolved-lazy>",
          "resourceTypeName": "aws:cdk:stack",
          "tagFormatter": KeyValueFormatter {},
          "tagPropertyName": "tags",
          "tags": Map {},
        },
        "templateFile": "stack.template.json",
        "templateOptions": Object {},
        "terminationProtection": undefined,
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
      "stateMachineArn": "\${Token[TOKEN.3274]}",
      "stateMachineName": "\${Token[TOKEN.3272]}",
      "stateMachineType": "EXPRESS",
      Symbol(@aws-cdk/core.DependableTrait): Object {
        "dependencyRoots": Array [
          [Circular],
        ],
      },
    },
  },
  "permissionsBoundary": undefined,
  "physicalName": "\${Token[TOKEN.3259]}",
  "policyFragment": PrincipalPolicyFragment {
    "conditions": Object {},
    "principalJson": Object {
      "AWS": Array [
        "\${Token[TOKEN.3265]}",
      ],
    },
  },
  "principalAccount": "\${Token[AWS.AccountId.0]}",
  "roleArn": "\${Token[TOKEN.3265]}",
  "roleId": "\${Token[TOKEN.3264]}",
  "roleName": "\${Token[TOKEN.3267]}",
  "stack": Stack {
    "_logicalIds": LogicalIDs {
      "renames": Object {},
      "reverse": Object {},
    },
    "_missingContext": Array [],
    "_stackDependencies": Object {},
    "_stackName": "stack",
    "_versionReportingEnabled": undefined,
    "account": "\${Token[AWS.AccountId.0]}",
    "artifactId": "stack",
    "environment": "aws://unknown-account/unknown-region",
    "node": Node {
      "_children": Object {
        "F": Function {
          "_allowCrossEnvironment": true,
          "_architecture": undefined,
          "_functionUrlInvocationGrants": Object {},
          "_invocationGrants": Object {},
          "_layers": Array [],
          "_physicalName": "testFunction",
          "_warnIfCurrentVersionCalled": false,
          "architecture": Architecture {
            "dockerPlatform": "linux/amd64",
            "name": "x86_64",
          },
          "canCreatePermissions": true,
          "currentVersionOptions": undefined,
          "env": Object {
            "account": "\${Token[AWS.AccountId.0]}",
            "region": "\${Token[AWS.Region.4]}",
          },
          "environment": Object {},
          "functionArn": "\${Token[TOKEN.3250]}",
          "functionName": "\${Token[TOKEN.3249]}",
          "grantPrincipal": Role {
            "_allowCrossEnvironment": false,
            "_didSplit": false,
            "_physicalName": undefined,
            "assumeRoleAction": "sts:AssumeRole",
            "assumeRolePolicy": Object {
              "Statement": Array [
                Object {
                  "Action": "sts:AssumeRole",
                  "Effect": "Allow",
                  "Principal": Object {
                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "attachedPolicies": AttachedPolicies {
              "policies": Array [],
            },
            "dependables": Map {},
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "grantPrincipal": [Circular],
            "inlinePolicies": Object {},
            "managedPolicies": Array [
              AwsManagedPolicy {
                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              },
            ],
            "node": Node {
              "_children": Object {
                "Resource": CfnRole {
                  "_cfnProperties": Object {
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "description": undefined,
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3238]}",
                    ],
                    "maxSessionDuration": undefined,
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "roleName": "\${Token[TOKEN.3236]}",
                  },
                  "assumeRolePolicyDocument": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attrArn": "\${Token[TOKEN.3240]}",
                  "attrRoleId": "\${Token[TOKEN.3241]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::IAM::Role",
                  "dependsOn": Set {},
                  "description": undefined,
                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                  "managedPolicyArns": Array [
                    "#{Token[TOKEN.3238]}",
                  ],
                  "maxSessionDuration": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "path": undefined,
                  "permissionsBoundary": undefined,
                  "policies": undefined,
                  "rawOverrides": Object {},
                  "roleName": "\${Token[TOKEN.3236]}",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::IAM::Role",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "ServiceRole",
              "scope": [Circular],
            },
            "permissionsBoundary": undefined,
            "physicalName": "\${Token[TOKEN.3236]}",
            "policyFragment": PrincipalPolicyFragment {
              "conditions": Object {},
              "principalJson": Object {
                "AWS": Array [
                  "\${Token[TOKEN.3242]}",
                ],
              },
            },
            "principalAccount": "\${Token[AWS.AccountId.0]}",
            "roleArn": "\${Token[TOKEN.3242]}",
            "roleId": "\${Token[TOKEN.3241]}",
            "roleName": "\${Token[TOKEN.3244]}",
            "stack": [Circular],
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "node": Node {
            "_children": Object {
              "Resource": CfnFunction {
                "_cfnProperties": Object {
                  "architectures": undefined,
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3245]}",
                  ],
                  "memorySize": undefined,
                  "packageType": undefined,
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3242]}",
                  "runtime": "nodejs14.x",
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                },
                "architectures": undefined,
                "attrArn": "\${Token[TOKEN.3247]}",
                "cfnOptions": Object {},
                "cfnResourceType": "AWS::Lambda::Function",
                "code": Object {
                  "imageUri": undefined,
                  "s3Bucket": undefined,
                  "s3Key": undefined,
                  "s3ObjectVersion": undefined,
                  "zipFile": "exports.handler = function() { return null; }",
                },
                "codeSigningConfigArn": undefined,
                "deadLetterConfig": undefined,
                "dependsOn": Set {},
                "description": undefined,
                "environment": "<unresolved-lazy>",
                "ephemeralStorage": undefined,
                "fileSystemConfigs": undefined,
                "functionName": "testFunction",
                "handler": "index.handler",
                "imageConfig": undefined,
                "kmsKeyArn": undefined,
                "layers": Array [
                  "#{Token[TOKEN.3245]}",
                ],
                "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                "memorySize": undefined,
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {
                    Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "packageType": undefined,
                "rawOverrides": Object {},
                "reservedConcurrentExecutions": undefined,
                "role": "\${Token[TOKEN.3242]}",
                "runtime": "nodejs14.x",
                "stack": [Circular],
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::Lambda::Function",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeout": undefined,
                "tracingConfig": undefined,
                "vpcConfig": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "ServiceRole": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3236]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3240]}",
                      "attrRoleId": "\${Token[TOKEN.3241]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3238]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3236]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3236]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3242]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3242]}",
                "roleId": "\${Token[TOKEN.3241]}",
                "roleName": "\${Token[TOKEN.3244]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "F",
            "scope": [Circular],
          },
          "permissionsNode": Node {
            "_children": Object {
              "Resource": CfnFunction {
                "_cfnProperties": Object {
                  "architectures": undefined,
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3245]}",
                  ],
                  "memorySize": undefined,
                  "packageType": undefined,
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3242]}",
                  "runtime": "nodejs14.x",
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                },
                "architectures": undefined,
                "attrArn": "\${Token[TOKEN.3247]}",
                "cfnOptions": Object {},
                "cfnResourceType": "AWS::Lambda::Function",
                "code": Object {
                  "imageUri": undefined,
                  "s3Bucket": undefined,
                  "s3Key": undefined,
                  "s3ObjectVersion": undefined,
                  "zipFile": "exports.handler = function() { return null; }",
                },
                "codeSigningConfigArn": undefined,
                "deadLetterConfig": undefined,
                "dependsOn": Set {},
                "description": undefined,
                "environment": "<unresolved-lazy>",
                "ephemeralStorage": undefined,
                "fileSystemConfigs": undefined,
                "functionName": "testFunction",
                "handler": "index.handler",
                "imageConfig": undefined,
                "kmsKeyArn": undefined,
                "layers": Array [
                  "#{Token[TOKEN.3245]}",
                ],
                "logicalId": "\${Token[stack.F.Resource.LogicalID.3246]}",
                "memorySize": undefined,
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {
                    Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3238]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3236]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3240]}",
                            "attrRoleId": "\${Token[TOKEN.3241]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3238]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3236]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3236]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3242]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3242]}",
                      "roleId": "\${Token[TOKEN.3241]}",
                      "roleName": "\${Token[TOKEN.3244]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.F.Resource.LogicalID.3246]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "packageType": undefined,
                "rawOverrides": Object {},
                "reservedConcurrentExecutions": undefined,
                "role": "\${Token[TOKEN.3242]}",
                "runtime": "nodejs14.x",
                "stack": [Circular],
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::Lambda::Function",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeout": undefined,
                "tracingConfig": undefined,
                "vpcConfig": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "ServiceRole": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3237]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3237]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3238]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3236]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3237]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3240]}",
                      "attrRoleId": "\${Token[TOKEN.3241]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3238]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3236]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3236]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3242]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3242]}",
                "roleId": "\${Token[TOKEN.3241]}",
                "roleName": "\${Token[TOKEN.3244]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "F",
            "scope": [Circular],
          },
          "physicalName": "testFunction",
          "role": Role {
            "_allowCrossEnvironment": false,
            "_didSplit": false,
            "_physicalName": undefined,
            "assumeRoleAction": "sts:AssumeRole",
            "assumeRolePolicy": Object {
              "Statement": Array [
                Object {
                  "Action": "sts:AssumeRole",
                  "Effect": "Allow",
                  "Principal": Object {
                    "Service": "\${Token[lambda.amazonaws.com.3237]}",
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "attachedPolicies": AttachedPolicies {
              "policies": Array [],
            },
            "dependables": Map {},
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "grantPrincipal": [Circular],
            "inlinePolicies": Object {},
            "managedPolicies": Array [
              AwsManagedPolicy {
                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              },
            ],
            "node": Node {
              "_children": Object {
                "Resource": CfnRole {
                  "_cfnProperties": Object {
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3237]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "description": undefined,
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3238]}",
                    ],
                    "maxSessionDuration": undefined,
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "roleName": "\${Token[TOKEN.3236]}",
                  },
                  "assumeRolePolicyDocument": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3237]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attrArn": "\${Token[TOKEN.3240]}",
                  "attrRoleId": "\${Token[TOKEN.3241]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::IAM::Role",
                  "dependsOn": Set {},
                  "description": undefined,
                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                  "managedPolicyArns": Array [
                    "#{Token[TOKEN.3238]}",
                  ],
                  "maxSessionDuration": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3239]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "path": undefined,
                  "permissionsBoundary": undefined,
                  "policies": undefined,
                  "rawOverrides": Object {},
                  "roleName": "\${Token[TOKEN.3236]}",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::IAM::Role",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "ServiceRole",
              "scope": [Circular],
            },
            "permissionsBoundary": undefined,
            "physicalName": "\${Token[TOKEN.3236]}",
            "policyFragment": PrincipalPolicyFragment {
              "conditions": Object {},
              "principalJson": Object {
                "AWS": Array [
                  "\${Token[TOKEN.3242]}",
                ],
              },
            },
            "principalAccount": "\${Token[AWS.AccountId.0]}",
            "roleArn": "\${Token[TOKEN.3242]}",
            "roleId": "\${Token[TOKEN.3241]}",
            "roleName": "\${Token[TOKEN.3244]}",
            "stack": [Circular],
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "runtime": Runtime {
            "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
            "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
            "family": 0,
            "name": "nodejs14.x",
            "supportsCodeGuruProfiling": false,
            "supportsInlineCode": true,
          },
          "stack": [Circular],
          "timeout": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "Table": Table {
          "_allowCrossEnvironment": true,
          "_physicalName": "testTable",
          "attributeDefinitions": Array [
            Object {
              "attributeName": "id",
              "attributeType": "S",
            },
          ],
          "billingMode": "PROVISIONED",
          "encryptionKey": undefined,
          "env": Object {
            "account": "\${Token[AWS.AccountId.0]}",
            "region": "\${Token[AWS.Region.4]}",
          },
          "globalReplicaCustomResources": Array [],
          "globalSecondaryIndexes": Array [],
          "indexScaling": Map {},
          "keySchema": Array [
            Object {
              "attributeName": "id",
              "keyType": "HASH",
            },
          ],
          "localSecondaryIndexes": Array [],
          "node": Node {
            "_children": Object {
              "Resource": CfnTable {
                "_cfnProperties": Object {
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "contributorInsightsSpecification": undefined,
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "sseSpecification": undefined,
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "timeToLiveSpecification": undefined,
                },
                "attrArn": "\${Token[TOKEN.3252]}",
                "attrStreamArn": "\${Token[TOKEN.3253]}",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": undefined,
                "cfnOptions": Object {
                  "deletionPolicy": "Retain",
                  "updateReplacePolicy": "Retain",
                },
                "cfnResourceType": "AWS::DynamoDB::Table",
                "contributorInsightsSpecification": undefined,
                "dependsOn": Set {},
                "globalSecondaryIndexes": "<unresolved-lazy>",
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "kinesisStreamSpecification": undefined,
                "localSecondaryIndexes": "<unresolved-lazy>",
                "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "pointInTimeRecoverySpecification": undefined,
                "provisionedThroughput": Object {
                  "readCapacityUnits": 5,
                  "writeCapacityUnits": 5,
                },
                "rawOverrides": Object {},
                "sseSpecification": undefined,
                "stack": [Circular],
                "streamSpecification": undefined,
                "tableClass": undefined,
                "tableName": "testTable",
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::DynamoDB::Table",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeToLiveSpecification": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "ScalingRole": Import {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "ScalingRole",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3257]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [
              Object {
                "data": "\${Token[TOKEN.3256]}",
                "trace": undefined,
                "type": "aws:cdk:hasPhysicalName",
              },
            ],
            "_validations": Array [
              Object {
                "validate": [Function],
              },
            ],
            "host": [Circular],
            "id": "Table",
            "scope": [Circular],
          },
          "nonKeyAttributes": Set {},
          "physicalName": "testTable",
          "regionalArns": Array [],
          "scalingRole": Import {
            "_allowCrossEnvironment": false,
            "_physicalName": undefined,
            "assumeRoleAction": "sts:AssumeRole",
            "attachedPolicies": AttachedPolicies {
              "policies": Array [],
            },
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "grantPrincipal": [Circular],
            "node": Node {
              "_children": Object {},
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "ScalingRole",
              "scope": [Circular],
            },
            "physicalName": "\${Token[TOKEN.3257]}",
            "policyFragment": PrincipalPolicyFragment {
              "conditions": Object {},
              "principalJson": Object {
                "AWS": Array [
                  "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                ],
              },
            },
            "principalAccount": "\${Token[AWS.AccountId.0]}",
            "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
            "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
            "stack": [Circular],
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "secondaryIndexSchemas": Map {},
          "stack": [Circular],
          "table": CfnTable {
            "_cfnProperties": Object {
              "attributeDefinitions": Array [
                Object {
                  "attributeName": "id",
                  "attributeType": "S",
                },
              ],
              "billingMode": undefined,
              "contributorInsightsSpecification": undefined,
              "globalSecondaryIndexes": "<unresolved-lazy>",
              "keySchema": Array [
                Object {
                  "attributeName": "id",
                  "keyType": "HASH",
                },
              ],
              "kinesisStreamSpecification": undefined,
              "localSecondaryIndexes": "<unresolved-lazy>",
              "pointInTimeRecoverySpecification": undefined,
              "provisionedThroughput": Object {
                "readCapacityUnits": 5,
                "writeCapacityUnits": 5,
              },
              "sseSpecification": undefined,
              "streamSpecification": undefined,
              "tableClass": undefined,
              "tableName": "testTable",
              "timeToLiveSpecification": undefined,
            },
            "attrArn": "\${Token[TOKEN.3252]}",
            "attrStreamArn": "\${Token[TOKEN.3253]}",
            "attributeDefinitions": Array [
              Object {
                "attributeName": "id",
                "attributeType": "S",
              },
            ],
            "billingMode": undefined,
            "cfnOptions": Object {
              "deletionPolicy": "Retain",
              "updateReplacePolicy": "Retain",
            },
            "cfnResourceType": "AWS::DynamoDB::Table",
            "contributorInsightsSpecification": undefined,
            "dependsOn": Set {},
            "globalSecondaryIndexes": "<unresolved-lazy>",
            "keySchema": Array [
              Object {
                "attributeName": "id",
                "keyType": "HASH",
              },
            ],
            "kinesisStreamSpecification": undefined,
            "localSecondaryIndexes": "<unresolved-lazy>",
            "logicalId": "\${Token[stack.Table.Resource.LogicalID.3251]}",
            "node": Node {
              "_children": Object {},
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [
                Object {
                  "data": "\${Token[stack.Table.Resource.LogicalID.3251]}",
                  "trace": undefined,
                  "type": "aws:cdk:logicalId",
                },
              ],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "Resource",
              "scope": [Circular],
            },
            "pointInTimeRecoverySpecification": undefined,
            "provisionedThroughput": Object {
              "readCapacityUnits": 5,
              "writeCapacityUnits": 5,
            },
            "rawOverrides": Object {},
            "sseSpecification": undefined,
            "stack": [Circular],
            "streamSpecification": undefined,
            "tableClass": undefined,
            "tableName": "testTable",
            "tags": TagManager {
              "initialTagPriority": 50,
              "priorities": Map {},
              "renderedTags": "<unresolved-lazy>",
              "resourceTypeName": "AWS::DynamoDB::Table",
              "tagFormatter": StandardFormatter {},
              "tagPropertyName": "tags",
              "tags": Map {},
            },
            "timeToLiveSpecification": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "tableArn": "\${Token[TOKEN.3254]}",
          "tableName": "\${Token[TOKEN.3256]}",
          "tablePartitionKey": Object {
            "name": "id",
            "type": "S",
          },
          "tableScaling": Object {},
          "tableStreamArn": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "fn": StateMachine {
          "_allowCrossEnvironment": false,
          "_physicalName": undefined,
          "env": Object {
            "account": "\${Token[AWS.AccountId.0]}",
            "region": "\${Token[AWS.Region.4]}",
          },
          "node": Node {
            "_children": Object {
              "Resource": CfnStateMachine {
                "_cfnProperties": Object {
                  "definitionString": "\${Token[TOKEN.3268]}",
                  "loggingConfiguration": undefined,
                  "roleArn": "\${Token[TOKEN.3265]}",
                  "stateMachineName": "\${Token[TOKEN.3258]}",
                  "stateMachineType": "EXPRESS",
                  "tracingConfiguration": undefined,
                },
                "attrArn": "\${Token[TOKEN.3270]}",
                "attrName": "\${Token[TOKEN.3271]}",
                "cfnOptions": Object {},
                "cfnResourceType": "AWS::StepFunctions::StateMachine",
                "definition": undefined,
                "definitionS3Location": undefined,
                "definitionString": "\${Token[TOKEN.3280]}",
                "definitionSubstitutions": undefined,
                "dependsOn": Set {},
                "loggingConfiguration": undefined,
                "logicalId": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {
                    [Circular],
                  },
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.fn.Resource.LogicalID.3269]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "rawOverrides": Object {},
                "roleArn": "\${Token[TOKEN.3265]}",
                "stack": [Circular],
                "stateMachineName": "\${Token[TOKEN.3258]}",
                "stateMachineType": "EXPRESS",
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::StepFunctions::StateMachine",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "tracingConfiguration": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Role": [Circular],
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "fn",
            "scope": [Circular],
          },
          "physicalName": "\${Token[TOKEN.3258]}",
          "role": [Circular],
          "stack": [Circular],
          "stateMachineArn": "\${Token[TOKEN.3274]}",
          "stateMachineName": "\${Token[TOKEN.3272]}",
          "stateMachineType": "EXPRESS",
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "_context": Object {},
      "_dependencies": Set {},
      "_locked": false,
      "_metadata": Array [],
      "_validations": Array [],
      "host": [Circular],
      "id": "stack",
      "scope": App {
        "_assemblyBuilder": CloudAssemblyBuilder {
          "artifacts": Object {},
          "assetOutdir": "/tmp/cdk.outwOSQs6",
          "missing": Array [],
          "outdir": "/tmp/cdk.outwOSQs6",
          "parentBuilder": undefined,
        },
        "account": undefined,
        "node": Node {
          "_children": Object {
            "Tree": TreeMetadata {
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "Tree",
                "scope": [Circular],
              },
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "stack": [Circular],
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [],
          "host": [Circular],
          "id": "",
          "scope": undefined,
        },
        "parentStage": undefined,
        "region": undefined,
        "stageName": "",
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
    },
    "region": "\${Token[AWS.Region.4]}",
    "synthesizer": DefaultStackSynthesizer {
      "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
      "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
      "_stack": [Circular],
      "assetManifest": AssetManifestBuilder {
        "dockerImages": Object {},
        "files": Object {},
      },
      "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
      "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
      "bucketPrefix": "",
      "dockerTagPrefix": "",
      "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
      "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
      "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
      "props": Object {},
      "qualifier": "hnb659fds",
      "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
      "useLookupRoleForStackOperations": true,
    },
    "tags": TagManager {
      "initialTagPriority": 50,
      "priorities": Map {},
      "renderedTags": "<unresolved-lazy>",
      "resourceTypeName": "aws:cdk:stack",
      "tagFormatter": KeyValueFormatter {},
      "tagPropertyName": "tags",
      "tags": Map {},
    },
    "templateFile": "stack.template.json",
    "templateOptions": Object {},
    "terminationProtection": undefined,
    Symbol(@aws-cdk/core.DependableTrait): Object {
      "dependencyRoots": Array [
        [Circular],
      ],
    },
  },
  Symbol(@aws-cdk/core.DependableTrait): Object {
    "dependencyRoots": Array [
      [Circular],
    ],
  },
}
`;

exports[`await Promise.all(input.list.map((item) => task(item)))).filter 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return await Promise.all(input.list.map(function(item))).filter(function": Object {
      "End": true,
      "InputPath": "$.heap0[?(@!=null)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return await Promise.all(input.list.map(function(item))).filt",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await Promise.all(input.list.map(function(item))).filter(function(it",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return await Promise.all(input.list.map(function(item))).filter(func": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return await Promise.all(input.list.map(function(item))).filter(functi",
      "Type": "Choice",
    },
    "end__return await Promise.all(input.list.map(function(item))).filter(functi": Object {
      "Next": "set__end__return await Promise.all(input.list.map(function(item))).filter(f",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return await Promise.all(input.list.map(function(item))).filt": Object {
      "Next": "check__return await Promise.all(input.list.map(function(item))).filter(func",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return await Promise.all(input.list.map(function(item))).filter(function(it": Object {
      "Next": "check__return await Promise.all(input.list.map(function(item))).filter(func",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return await Promise.all(input.list.map(function(item))).filter(f": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return await Promise.all(input.list.map(function(item))).filter(function",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch({message})",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch({message})": Object {
      "InputPath": "$.fnl_tmp_0['message']",
      "Next": "return message",
      "ResultPath": "$.message",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return message": Object {
      "End": true,
      "InputPath": "$.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`binding for 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return \${key}\${value}": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for({key,value} = {key: \\"x\\", value: \\"y\\"};;)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for({key,value} = {key: \\"x\\", value: \\"y\\"};;)": Object {
      "Next": "value",
      "Result": "x",
      "ResultPath": "$.key",
      "Type": "Pass",
    },
    "return \${key}\${value}": Object {
      "Next": "1__return \${key}\${value}",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.key,$.value)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "value": Object {
      "Next": "return \${key}\${value}",
      "Result": "y",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding forOf 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "for({key,value} of input.value)",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \${key}\${value}\${a}": Object {
      "Next": "a = \${key}\${value}\${a} 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}',$.key,$.value,$.a)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "a = \${key}\${value}\${a} 1": Object {
      "InputPath": "$.heap0.string",
      "Next": "tail__for({key,value} of input.value)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for({key,value} of input.value)": Object {
      "InputPath": "$.input.value",
      "Next": "hasNext__for({key,value} of input.value)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for({key,value} of input.value)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "{ key, value }",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for({key,value} of input.value)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for({key,value} of input.value)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$.heap1[0]['value']",
      "Next": "a = \${key}\${value}\${a}",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "{ key, value }": Object {
      "InputPath": "$.heap1[0]['key']",
      "Next": "value",
      "ResultPath": "$.key",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding forOf weird values 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "for(val of input.value ?? [1, 2, 3])",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \${val}\${a}": Object {
      "Next": "a = \${val}\${a} 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.val,$.a)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "a = \${val}\${a} 1": Object {
      "InputPath": "$.heap1.string",
      "Next": "tail__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \${val}\${a} 2": Object {
      "Next": "a = \${val}\${a} 3",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.val__1,$.a)",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "a = \${val}\${a} 3": Object {
      "InputPath": "$.heap4.string",
      "Next": "tail__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \${val}\${a} 4": Object {
      "Next": "a = \${val}\${a} 5",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.val__2,$.a)",
      },
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "a = \${val}\${a} 5": Object {
      "InputPath": "$.heap6.string",
      "Next": "tail__for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "false__for(val of input.value ?? [1, 2, 3])": Object {
      "Next": "for(val of input.value ?? [1, 2, 3]) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "false__for(val of input.value || [1, 2, 3])": Object {
      "Next": "for(val of input.value || [1, 2, 3]) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "for(val of a = \\"b\\" , true && [1, 2, 3])": Object {
      "Next": "for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "Result": "b",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(val of a = \\"b\\" , true && [1, 2, 3]) 1": Object {
      "Next": "hasNext__for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "for(val of input.value ?? [1, 2, 3])": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.value",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.value",
            },
          ],
          "Next": "true__for(val of input.value ?? [1, 2, 3])",
        },
      ],
      "Default": "false__for(val of input.value ?? [1, 2, 3])",
      "Type": "Choice",
    },
    "for(val of input.value ?? [1, 2, 3]) 1": Object {
      "InputPath": "$.heap0",
      "Next": "hasNext__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "for(val of input.value || [1, 2, 3]) 1": Object {
      "InputPath": "$.heap3",
      "Next": "hasNext__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__for(val of a = \\"b\\" , true && [1, 2, 3]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "val 2",
          "Variable": "$.heap7[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "hasNext__for(val of input.value ?? [1, 2, 3]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "val",
          "Variable": "$.heap2[0]",
        },
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.value",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.value",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.value",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__for(val of input.value || [1, 2, 3])",
        },
      ],
      "Default": "false__for(val of input.value || [1, 2, 3])",
      "Type": "Choice",
    },
    "hasNext__for(val of input.value || [1, 2, 3]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "val 1",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "for(val of a = \\"b\\" , true && [1, 2, 3])",
      "Type": "Choice",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(val of a = \\"b\\" , true && [1, 2, 3]) 1": Object {
      "InputPath": "$.heap7[1:]",
      "Next": "hasNext__for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "tail__for(val of input.value ?? [1, 2, 3]) 1": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "tail__for(val of input.value || [1, 2, 3]) 1": Object {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "true__for(val of input.value ?? [1, 2, 3])": Object {
      "InputPath": "$.input.value",
      "Next": "for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "true__for(val of input.value || [1, 2, 3])": Object {
      "InputPath": "$.input.value",
      "Next": "for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "val": Object {
      "InputPath": "$.heap2[0]",
      "Next": "a = \${val}\${a}",
      "ResultPath": "$.val",
      "Type": "Pass",
    },
    "val 1": Object {
      "InputPath": "$.heap5[0]",
      "Next": "a = \${val}\${a} 2",
      "ResultPath": "$.val__1",
      "Type": "Pass",
    },
    "val 2": Object {
      "InputPath": "$.heap7[0]",
      "Next": "a = \${val}\${a} 4",
      "ResultPath": "$.val__2",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions $SFN.forEach 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.forEach(input.value, function({value:b,arr:[c]}))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.value, function({value:b,arr:[c]}))": Object {
      "ItemsPath": "$.input.value",
      "Iterator": Object {
        "StartAt": "function({value:b,arr:[c]})",
        "States": Object {
          "1__return \${b}\${c}": Object {
            "End": true,
            "InputPath": "$.heap0.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "c": Object {
            "InputPath": "$$.Map.Item.Value['arr'][0]",
            "Next": "return \${b}\${c}",
            "ResultPath": "$.c",
            "Type": "Pass",
          },
          "function({value:b,arr:[c]})": Object {
            "InputPath": "$$.Map.Item.Value['value']",
            "Next": "c",
            "ResultPath": "$.b",
            "Type": "Pass",
          },
          "return \${b}\${c}": Object {
            "Next": "1__return \${b}\${c}",
            "Parameters": Object {
              "string.$": "States.Format('{}{}',$.b,$.c)",
            },
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "return \\"success\\"",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return \\"success\\"": Object {
      "End": true,
      "Result": "success",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions $SFN.map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return await $SFN.map(input.value, function({value:b,arr:[c]})).join()": Object {
      "End": true,
      "InputPath": "$.heap3.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await $SFN.map(input.value, function({value:b,arr:[c]})).join() 1": Object {
      "InputPath": "$.heap1",
      "Next": "hasNext__1__return await $SFN.map(input.value, function({value:b,arr:[c]}))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await $SFN.map(input.value, function({value:b,arr:[c]})).join()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return await $SFN.map(input.value, function({value:b,arr:[c]})).": Object {
      "Next": "tail__1__return await $SFN.map(input.value, function({value:b,arr:[c]})).jo",
      "Parameters": Object {
        "string.$": "States.Format('{},{}', $.heap3.string, $.heap2[0])",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "hasNext__1__return await $SFN.map(input.value, function({value:b,arr:[c]}))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap3",
              },
            },
          ],
          "Next": "initValue__1__return await $SFN.map(input.value, function({value:b,arr:[c]}",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap2[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap3",
              },
            },
          ],
          "Next": "returnEmpty__1__return await $SFN.map(input.value, function({value:b,arr:[c",
        },
        Object {
          "IsPresent": true,
          "Next": "append__1__return await $SFN.map(input.value, function({value:b,arr:[c]})).",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "1__return await $SFN.map(input.value, function({value:b,arr:[c]})).join()",
      "Type": "Choice",
    },
    "initValue__1__return await $SFN.map(input.value, function({value:b,arr:[c]}": Object {
      "InputPath": "$.heap2[0]",
      "Next": "tail__1__return await $SFN.map(input.value, function({value:b,arr:[c]})).jo",
      "ResultPath": "$.heap3.string",
      "Type": "Pass",
    },
    "return await $SFN.map(input.value, function({value:b,arr:[c]})).join()": Object {
      "ItemsPath": "$.input.value",
      "Iterator": Object {
        "StartAt": "function({value:b,arr:[c]})",
        "States": Object {
          "1__return \${b}\${c}": Object {
            "End": true,
            "InputPath": "$.heap0.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "c": Object {
            "InputPath": "$$.Map.Item.Value['arr'][0]",
            "Next": "return \${b}\${c}",
            "ResultPath": "$.c",
            "Type": "Pass",
          },
          "function({value:b,arr:[c]})": Object {
            "InputPath": "$$.Map.Item.Value['value']",
            "Next": "c",
            "ResultPath": "$.b",
            "Type": "Pass",
          },
          "return \${b}\${c}": Object {
            "Next": "1__return \${b}\${c}",
            "Parameters": Object {
              "string.$": "States.Format('{}{}',$.b,$.c)",
            },
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return await $SFN.map(input.value, function({value:b,arr:[c]})).join() 1",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "returnEmpty__1__return await $SFN.map(input.value, function({value:b,arr:[c": Object {
      "Next": "1__return await $SFN.map(input.value, function({value:b,arr:[c]})).join()",
      "Result": "",
      "ResultPath": "$.heap3.string",
      "Type": "Pass",
    },
    "tail__1__return await $SFN.map(input.value, function({value:b,arr:[c]})).jo": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__1__return await $SFN.map(input.value, function({value:b,arr:[c]}))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions filter 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.value.filter(function({value:b,arr:[c]}))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.value.filter(function({value:b,arr:[c]}))": Object {
      "End": true,
      "InputPath": "$.input.value[?(@['value']==@['arr'][0])]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions forEach 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return \${b}\${c}": Object {
      "InputPath": "$.heap1.string",
      "Next": "tail__input.value.forEach(function({value:b,arr:[c]}))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "input.value.forEach(function({value:b,arr:[c]}))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "c": Object {
      "InputPath": "$.heap0.arr[0]['arr'][0]",
      "Next": "return \${b}\${c}",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "check__input.value.forEach(function({value:b,arr:[c]}))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "{ value: b, arr: [ c ] }",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__input.value.forEach(function({value:b,arr:[c]}))",
      "Type": "Choice",
    },
    "end__input.value.forEach(function({value:b,arr:[c]}))": Object {
      "Next": "return \\"success\\"",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.value.forEach(function({value:b,arr:[c]}))": Object {
      "Next": "check__input.value.forEach(function({value:b,arr:[c]}))",
      "Parameters": Object {
        "arr.$": "$.input.value",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return \\"success\\"": Object {
      "End": true,
      "Result": "success",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \${b}\${c}": Object {
      "Next": "1__return \${b}\${c}",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.b,$.c)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__input.value.forEach(function({value:b,arr:[c]}))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__input.value.forEach(function({value:b,arr:[c]}))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "{ value: b, arr: [ c ] }": Object {
      "InputPath": "$.heap0.arr[0]['value']",
      "Next": "c",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return \${b}\${c}": Object {
      "InputPath": "$.heap1.string",
      "Next": "handleResult__return input.value.map(function({value:b,arr:[c]})).join()",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return input.value.map(function({value:b,arr:[c]})).join()": Object {
      "End": true,
      "InputPath": "$.heap3.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return input.value.map(function({value:b,arr:[c]})).join() 1": Object {
      "InputPath": "$.heap0",
      "Next": "hasNext__1__return input.value.map(function({value:b,arr:[c]})).join() 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.value.map(function({value:b,arr:[c]})).join()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return input.value.map(function({value:b,arr:[c]})).join() 1": Object {
      "Next": "tail__1__return input.value.map(function({value:b,arr:[c]})).join() 1",
      "Parameters": Object {
        "string.$": "States.Format('{},{}', $.heap3.string, $.heap2[0])",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "c": Object {
      "InputPath": "$.heap0.arr[0]['arr'][0]",
      "Next": "return \${b}\${c}",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "check__return input.value.map(function({value:b,arr:[c]})).join()": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "{ value: b, arr: [ c ] }",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.value.map(function({value:b,arr:[c]})).join()",
      "Type": "Choice",
    },
    "end__return input.value.map(function({value:b,arr:[c]})).join()": Object {
      "Next": "set__end__return input.value.map(function({value:b,arr:[c]})).join()",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.value.map(function({value:b,arr:[c]})).join()": Object {
      "Next": "check__return input.value.map(function({value:b,arr:[c]})).join()",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__1__return input.value.map(function({value:b,arr:[c]})).join() 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap3",
              },
            },
          ],
          "Next": "initValue__1__return input.value.map(function({value:b,arr:[c]})).join() 1",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap2[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap3",
              },
            },
          ],
          "Next": "returnEmpty__1__return input.value.map(function({value:b,arr:[c]})).join() ",
        },
        Object {
          "IsPresent": true,
          "Next": "append__1__return input.value.map(function({value:b,arr:[c]})).join() 1",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "1__return input.value.map(function({value:b,arr:[c]})).join()",
      "Type": "Choice",
    },
    "initValue__1__return input.value.map(function({value:b,arr:[c]})).join() 1": Object {
      "InputPath": "$.heap2[0]",
      "Next": "tail__1__return input.value.map(function({value:b,arr:[c]})).join() 1",
      "ResultPath": "$.heap3.string",
      "Type": "Pass",
    },
    "return \${b}\${c}": Object {
      "Next": "1__return \${b}\${c}",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.b,$.c)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return input.value.map(function({value:b,arr:[c]})).join()": Object {
      "Next": "check__return input.value.map(function({value:b,arr:[c]})).join()",
      "Parameters": Object {
        "arr.$": "$.input.value",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "returnEmpty__1__return input.value.map(function({value:b,arr:[c]})).join() ": Object {
      "Next": "1__return input.value.map(function({value:b,arr:[c]})).join()",
      "Result": "",
      "ResultPath": "$.heap3.string",
      "Type": "Pass",
    },
    "set__end__return input.value.map(function({value:b,arr:[c]})).join()": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.value.map(function({value:b,arr:[c]})).join() 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__1__return input.value.map(function({value:b,arr:[c]})).join() 1": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__1__return input.value.map(function({value:b,arr:[c]})).join() 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "{ value: b, arr: [ c ] }": Object {
      "InputPath": "$.heap0.arr[0]['value']",
      "Next": "c",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions use in map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return \${value}\${v}": Object {
      "InputPath": "$.heap2.string",
      "Next": "handleResult__1__return [1, 2, 3].map(function()).join() 2",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function()).join()": Object {
      "End": true,
      "InputPath": "$.heap4.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function()).join() 1": Object {
      "InputPath": "$.heap1",
      "Next": "hasNext__1__return [1, 2, 3].map(function()).join() 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function()).join() 2": Object {
      "Next": "check__1__return [1, 2, 3].map(function()).join() 2",
      "Parameters": Object {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "{ value, obj }",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return [1, 2, 3].map(function()).join() 1": Object {
      "Next": "tail__1__return [1, 2, 3].map(function()).join() 1",
      "Parameters": Object {
        "string.$": "States.Format('{},{}', $.heap4.string, $.heap3[0])",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "check__1__return [1, 2, 3].map(function()).join() 2": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return \${value}\${v}",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__1__return [1, 2, 3].map(function()).join() 2",
      "Type": "Choice",
    },
    "end__1__return [1, 2, 3].map(function()).join() 2": Object {
      "Next": "set__end__1__return [1, 2, 3].map(function()).join() 2",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__1__return [1, 2, 3].map(function()).join() 2": Object {
      "Next": "check__1__return [1, 2, 3].map(function()).join() 2",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__1__return [1, 2, 3].map(function()).join() 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap3[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap4",
              },
            },
          ],
          "Next": "initValue__1__return [1, 2, 3].map(function()).join() 1",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap3[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap4",
              },
            },
          ],
          "Next": "returnEmpty__1__return [1, 2, 3].map(function()).join() 1",
        },
        Object {
          "IsPresent": true,
          "Next": "append__1__return [1, 2, 3].map(function()).join() 1",
          "Variable": "$.heap3[0]",
        },
      ],
      "Default": "1__return [1, 2, 3].map(function()).join()",
      "Type": "Choice",
    },
    "initValue__1__return [1, 2, 3].map(function()).join() 1": Object {
      "InputPath": "$.heap3[0]",
      "Next": "tail__1__return [1, 2, 3].map(function()).join() 1",
      "ResultPath": "$.heap4.string",
      "Type": "Pass",
    },
    "obj": Object {
      "InputPath": "$$.Execution.Input['obj']",
      "Next": "{value:v} = obj",
      "ResultPath": "$.obj",
      "Type": "Pass",
    },
    "return \${value}\${v}": Object {
      "Next": "1__return \${value}\${v}",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.value,$.v)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return [1, 2, 3].map(function()).join()": Object {
      "Next": "1__return [1, 2, 3].map(function()).join() 2",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "returnEmpty__1__return [1, 2, 3].map(function()).join() 1": Object {
      "Next": "1__return [1, 2, 3].map(function()).join()",
      "Result": "",
      "ResultPath": "$.heap4.string",
      "Type": "Pass",
    },
    "set__end__1__return [1, 2, 3].map(function()).join() 2": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3].map(function()).join() 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__1__return [1, 2, 3].map(function()).join() 1": Object {
      "InputPath": "$.heap3[1:]",
      "Next": "hasNext__1__return [1, 2, 3].map(function()).join() 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "{ value, obj }": Object {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "obj",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "{value:v} = obj": Object {
      "InputPath": "$.obj['value']",
      "Next": "return [1, 2, 3].map(function()).join()",
      "ResultPath": "$.v",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input['arr'][0]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop array rest 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input['arr'][1:]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop binding 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "value",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop nested 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input['value']['b']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop rename 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop with default 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "value = \\"b\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__value = \\"b\\"": Object {
      "Next": "value",
      "Result": "b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$.heap0",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value = \\"b\\"": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "value__value = \\"b\\"",
          "Variable": "$$.Execution.Input['value']",
        },
      ],
      "Default": "default__value = \\"b\\"",
      "Type": "Choice",
    },
    "value__value = \\"b\\"": Object {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "value",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop with self default 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ value, value2 = value }",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__value2 = value": Object {
      "InputPath": "$.value",
      "Next": "value2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value2": Object {
      "End": true,
      "InputPath": "$.value2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value2": Object {
      "InputPath": "$.heap0",
      "Next": "return value2",
      "ResultPath": "$.value2",
      "Type": "Pass",
    },
    "value2 = value": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "value__value2 = value",
          "Variable": "$$.Execution.Input['value2']",
        },
      ],
      "Default": "default__value2 = value",
      "Type": "Choice",
    },
    "value__value2 = value": Object {
      "InputPath": "$$.Execution.Input['value2']",
      "Next": "value2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "{ value, value2 = value }": Object {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "value2 = value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{arr:[b]} = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{arr:[b]} = input": Object {
      "InputPath": "$.input['arr'][0]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable binding 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{value} = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{value} = input": Object {
      "InputPath": "$.input['value']",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable nested 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{value:{b}} = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{value:{b}} = input": Object {
      "InputPath": "$.input['value']['b']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable rename 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{value:b} = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{value:b} = input": Object {
      "InputPath": "$.input['value']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable with default 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{value} = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__{value} = input": Object {
      "Next": "value",
      "Result": "b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$.heap0",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value__{value} = input": Object {
      "InputPath": "$.input['value']",
      "Next": "value",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "{value} = input": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "value__{value} = input",
          "Variable": "$.input['value']",
        },
      ],
      "Default": "default__{value} = input",
      "Type": "Choice",
    },
  },
}
`;

exports[`boolean logic 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "!input.a && input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__!input.a && input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.heap6",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.heap6",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.heap6",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.heap6",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.heap6",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap6",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.heap6",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.heap6",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap6",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.heap6",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a && input.b",
      "Type": "Choice",
    },
    "!input.a || input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__!input.a || input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.heap8",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.heap8",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.heap8",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.heap8",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.heap8",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap8",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.heap8",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.heap8",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap8",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.heap8",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a || input.b",
      "Type": "Choice",
    },
    "!input.a || input.b && input.a": Object {
      "Choices": Array [
        Object {
          "Next": "true__!input.a || input.b && input.a",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.heap11",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.heap11",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.heap11",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.heap11",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.heap11",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap11",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.heap11",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.heap11",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap11",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.heap11",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a || input.b && input.a",
      "Type": "Choice",
    },
    "!true": Object {
      "Choices": Array [
        Object {
          "Next": "true__!true",
          "Not": Object {
            "IsNull": false,
            "Variable": "$$.Execution.Id",
          },
        },
      ],
      "Default": "false__!true",
      "Type": "Choice",
    },
    "1__input.b && input.a": Object {
      "InputPath": "$.heap10",
      "Next": "!input.a || input.b && input.a",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": Object {
      "End": true,
      "Parameters": Object {
        "and.$": "$.heap0",
        "andAllConstant": false,
        "andCondition.$": "$.heap2",
        "andFalsyConstantString": "",
        "andTruthyConstantString.$": "$.input.s",
        "andVariable.$": "$.heap13",
        "chain.$": "$.heap12",
        "not.$": "$.heap5",
        "notAnd.$": "$.heap7",
        "notOr.$": "$.heap9",
        "nullCondition.$": "$.heap4",
        "or.$": "$.heap1",
        "orAllConstant": true,
        "orCondition.$": "$.heap3",
        "orFalsyConstantString.$": "$.input.s",
        "orTruthyConstantString": "hi",
        "orVariable.$": "$.heap14",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {and: input.a && input.b, or: input.a || input.b, andCondition: inpu",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__!input.a && input.b": Object {
      "Next": "input.a || input.b 1",
      "Result": false,
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "false__!input.a || input.b": Object {
      "Next": "input.a || input.b && input.a",
      "Result": false,
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "false__!input.a || input.b && input.a": Object {
      "Next": "input.a && input.s",
      "Result": false,
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "false__!true": Object {
      "Next": "input.a && input.b",
      "Result": false,
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "false__input.a && input.b": Object {
      "InputPath": "$.input.b",
      "Next": "!input.a && input.b",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "false__input.a && input.s": Object {
      "InputPath": "$.input.s",
      "Next": "input.b || input.s",
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "false__input.a === input.b && input.s === \\"hello\\"": Object {
      "Next": "input.a === input.b || input.s === \\"hello\\"",
      "Result": false,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "false__input.a === input.b ?? input.s === \\"hello\\"": Object {
      "Next": "!true",
      "Result": false,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "false__input.a === input.b || input.s === \\"hello\\"": Object {
      "Next": "input.a === input.b ?? input.s === \\"hello\\"",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "false__input.a || input.b": Object {
      "InputPath": "$.input.b",
      "Next": "input.a === input.b && input.s === \\"hello\\"",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__input.a || input.b 1": Object {
      "InputPath": "$.input.b",
      "Next": "!input.a || input.b",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "false__input.b && input.a": Object {
      "InputPath": "$.input.a",
      "Next": "1__input.b && input.a",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "false__input.b || input.s": Object {
      "InputPath": "$.input.s",
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "false__return {and: input.a && input.b, or: input.a || input.b, andConditio": Object {
      "InputPath": "$.input.b",
      "Next": "input.a || input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.a && input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__input.a && input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.a && input.b",
      "Type": "Choice",
    },
    "input.a && input.s": Object {
      "Choices": Array [
        Object {
          "Next": "true__input.a && input.s",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.a && input.s",
      "Type": "Choice",
    },
    "input.a === input.b && input.s === \\"hello\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsNull": true,
                          "Variable": "$.input.b",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "StringEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "BooleanEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "NumericEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.s",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.s",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.s",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a === input.b && input.s === \\"hello\\"",
        },
      ],
      "Default": "false__input.a === input.b && input.s === \\"hello\\"",
      "Type": "Choice",
    },
    "input.a === input.b ?? input.s === \\"hello\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.a",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.input.b",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "StringEqualsPath": "$.input.b",
                      "Variable": "$.input.a",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEqualsPath": "$.input.b",
                      "Variable": "$.input.a",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "NumericEqualsPath": "$.input.b",
                      "Variable": "$.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a === input.b ?? input.s === \\"hello\\"",
        },
      ],
      "Default": "false__input.a === input.b ?? input.s === \\"hello\\"",
      "Type": "Choice",
    },
    "input.a === input.b || input.s === \\"hello\\"": Object {
      "Choices": Array [
        Object {
          "Next": "true__input.a === input.b || input.s === \\"hello\\"",
          "Or": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsNull": true,
                          "Variable": "$.input.b",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "StringEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "BooleanEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "NumericEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.s",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.s",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.s",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "false__input.a === input.b || input.s === \\"hello\\"",
      "Type": "Choice",
    },
    "input.a || input.b": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b",
        },
      ],
      "Default": "false__input.a || input.b",
      "Type": "Choice",
    },
    "input.a || input.b && input.a": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b && input.a",
        },
        Object {
          "Next": "true__input.b && input.a",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.b",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.b",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.b",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.b",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.b",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.b && input.a",
      "Type": "Choice",
    },
    "input.a || input.b 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b 1",
        },
      ],
      "Default": "false__input.a || input.b 1",
      "Type": "Choice",
    },
    "input.b || input.s": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.b",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.b",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.b || input.s",
        },
      ],
      "Default": "false__input.b || input.s",
      "Type": "Choice",
    },
    "return {and: input.a && input.b, or: input.a || input.b, andCondition: inpu": Object {
      "Choices": Array [
        Object {
          "Next": "true__return {and: input.a && input.b, or: input.a || input.b, andCondition",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__return {and: input.a && input.b, or: input.a || input.b, andConditio",
      "Type": "Choice",
    },
    "true__!input.a && input.b": Object {
      "Next": "input.a || input.b 1",
      "Result": true,
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "true__!input.a || input.b": Object {
      "Next": "input.a || input.b && input.a",
      "Result": true,
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "true__!input.a || input.b && input.a": Object {
      "Next": "input.a && input.s",
      "Result": true,
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "true__!true": Object {
      "Next": "input.a && input.b",
      "Result": true,
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "true__input.a && input.b": Object {
      "InputPath": "$.input.a",
      "Next": "!input.a && input.b",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "true__input.a && input.s": Object {
      "InputPath": "$.input.a",
      "Next": "input.b || input.s",
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "true__input.a === input.b && input.s === \\"hello\\"": Object {
      "Next": "input.a === input.b || input.s === \\"hello\\"",
      "Result": true,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "true__input.a === input.b ?? input.s === \\"hello\\"": Object {
      "Next": "!true",
      "Result": true,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "true__input.a === input.b || input.s === \\"hello\\"": Object {
      "Next": "input.a === input.b ?? input.s === \\"hello\\"",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "true__input.a || input.b": Object {
      "InputPath": "$.input.a",
      "Next": "input.a === input.b && input.s === \\"hello\\"",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "true__input.a || input.b && input.a": Object {
      "InputPath": "$.input.a",
      "Next": "!input.a || input.b && input.a",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "true__input.a || input.b 1": Object {
      "InputPath": "$.input.a",
      "Next": "!input.a || input.b",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "true__input.b && input.a": Object {
      "InputPath": "$.input.b",
      "Next": "1__input.b && input.a",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "true__input.b || input.s": Object {
      "InputPath": "$.input.b",
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "true__return {and: input.a && input.b, or: input.a || input.b, andCondition": Object {
      "InputPath": "$.input.a",
      "Next": "input.a || input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`boolean return 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.a && input.b": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.a && input.b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return input.a && input.b": Object {
      "InputPath": "$.input.b",
      "Next": "1__return input.a && input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return input.a && input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__return input.a && input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__return input.a && input.b",
      "Type": "Choice",
    },
    "true__return input.a && input.b": Object {
      "InputPath": "$.input.a",
      "Next": "1__return input.a && input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from do-while-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "break",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "break": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return null",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from for-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(item === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.item",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.item",
                },
              ],
            },
          ],
          "Next": "return null",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "if(item === \\"hello\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from while-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return null",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`call AWS.DynamoDB.GetItem, then Lambda and return LiteralExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.person.Item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "score = await computeScore({id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": Object {
      "InputPath": "$.heap0",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp": Object {
      "Next": "person",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S, score: score}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
        "score.$": "$.score",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "score": Object {
      "InputPath": "$.heap1",
      "Next": "return {id: person.Item.id.S, name: person.Item.name.S, score: score}",
      "ResultPath": "$.score",
      "Type": "Pass",
    },
    "score = await computeScore({id: person.Item.id.S, name: person.Item.name.S}": Object {
      "Next": "score",
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`call Lambda Function, store as variable, return variable 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "person = await getPerson({id: input.id})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "person": Object {
      "InputPath": "$.heap0",
      "Next": "return person",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await getPerson({id: input.id})": Object {
      "Next": "person",
      "Parameters": Object {
        "id.$": "$.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return person": Object {
      "End": true,
      "InputPath": "$.person",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Lambda Function, store as variable, return variable no block 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return getPerson({id: input.id})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return getPerson({id: input.id})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return getPerson({id: input.id})": Object {
      "Next": "1__return getPerson({id: input.id})",
      "Parameters": Object {
        "id.$": "$.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function describe from another Step Function 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1.describeExecution(\\"hello\\")": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1.describeExecution(\\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1.describeExecution(\\"hello\\")": Object {
      "Next": "1__return machine1.describeExecution(\\"hello\\")",
      "Parameters": Object {
        "ExecutionArn": "hello",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:describeExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function describe from another Step Function from context 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1.describeExecution(input.id)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1.describeExecution(input.id)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1.describeExecution(input.id)": Object {
      "Next": "1__return machine1.describeExecution(input.id)",
      "Parameters": Object {
        "ExecutionArn.$": "$.input.id",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:describeExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({})": Object {
      "Next": "1__return machine1({})",
      "Parameters": Object {
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with dynamic input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: input.value1}})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: {value: input.value1}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: {value: input.value1}})": Object {
      "Next": "1__return machine1({input: {value: input.value1}})",
      "Parameters": Object {
        "Input": Object {
          "value.$": "$.input.value1",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with dynamic input field input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: input})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: input})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: input})": Object {
      "Next": "1__return machine1({input: input})",
      "Parameters": Object {
        "Input.$": "$.input",
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: \\"hello\\"}})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: {value: \\"hello\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: {value: \\"hello\\"}})": Object {
      "Next": "1__return machine1({input: {value: \\"hello\\"}})",
      "Parameters": Object {
        "Input": Object {
          "value": "hello",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with name and trace 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})": Object {
      "Next": "1__return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})",
      "Parameters": Object {
        "Name": "exec1",
        "StateMachineArn": "__REPLACED_TOKEN",
        "TraceHeader": "1",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with name and trace from variables 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({name: input.name, traceHeader: input.header})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({name: input.name, traceHeader: input.header})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({name: input.name, traceHeader: input.header})": Object {
      "Next": "1__return machine1({name: input.name, traceHeader: input.header})",
      "Parameters": Object {
        "Name.$": "$.input.name",
        "StateMachineArn": "__REPLACED_TOKEN",
        "TraceHeader.$": "$.input.header",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with null coalesce 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1": Object {
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Parameters": Object {
        "Input": Object {
          "value.$": "$.heap0",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.value",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.value",
            },
          ],
          "Next": "true__return machine1({input: {value: input.value ?? \\"default\\"}})",
        },
      ],
      "Default": "false__return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Type": "Choice",
    },
    "true__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "InputPath": "$.input.value",
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`catch and throw Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})": Object {
      "Cause": "{\\"property\\":\\"custom cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`catch and throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})": Object {
      "Cause": "{\\"property\\":\\"custom cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`closure from map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return \${a}\${item}": Object {
      "InputPath": "$.heap1.string",
      "Next": "handleResult__return input.list.map(function(item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return input.list.map(function(item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"x\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"x\\"": Object {
      "Next": "return input.list.map(function(item))",
      "Result": "x",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "check__return input.list.map(function(item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.map(function(item))",
      "Type": "Choice",
    },
    "end__return input.list.map(function(item))": Object {
      "Next": "set__end__return input.list.map(function(item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.map(function(item))": Object {
      "Next": "check__return input.list.map(function(item))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return \${a}\${item}",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return \${a}\${item}": Object {
      "Next": "1__return \${a}\${item}",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.item)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return input.list.map(function(item))": Object {
      "Next": "check__return input.list.map(function(item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__return input.list.map(function(item))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.map(function(item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`condition on task output 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if(await task() === 1)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "NumericEquals": 1,
                  "Variable": "$.heap0",
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(await task() === 1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(await task() === 1)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await task() === 1)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally call DynamoDB and then void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: input.id}}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: input.id}}})",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally return void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally return void 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in do..while loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.key === \\"sam\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(input.key)": Object {
      "InputPath": "$.input.key",
      "Next": "if(input.key === \\"sam\\")",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(input.key === \\"sam\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.key",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.key",
                    },
                    Object {
                      "StringEquals": "sam",
                      "Variable": "$.input.key",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "if(input.key === \\"sam\\")",
        },
        Object {
          "IsNull": false,
          "Next": "await task(input.key)",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in for loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(item === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.item",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.item",
                },
              ],
            },
          ],
          "Next": "tail__for(item of input.items)",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "if(item === \\"hello\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in while loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(input.key)": Object {
      "InputPath": "$.input.key",
      "Next": "while (true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.key",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.key",
                    },
                    Object {
                      "StringEquals": "sam",
                      "Variable": "$.input.key",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "while (true)",
        },
        Object {
          "IsNull": false,
          "Next": "await task(input.key)",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`else if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val === \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "a",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "b",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yip\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "c",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"woop\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yip\\"": Object {
      "End": true,
      "Result": "yip",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`else if else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val === \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "a",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "b",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"woop\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`empty for 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(_ of [await task(input.items)])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input.items)]": Object {
      "Next": "for(_ of [await task(input.items)]) 1",
      "Parameters": Object {
        "arr.$": "States.Array($.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "_": Object {
      "InputPath": "$.heap2[0]",
      "Next": "tail__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$._",
      "Type": "Pass",
    },
    "for(_ of [await task(input.items)])": Object {
      "InputPath": "$.input.items",
      "Next": "[await task(input.items)]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(_ of [await task(input.items)]) 1": Object {
      "InputPath": "$.heap1.arr",
      "Next": "hasNext__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "hasNext__for(_ of [await task(input.items)]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "_",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(_ of [await task(input.items)]) 1": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`empty function 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return null",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for (const i in [task(input)]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await task(await task(i))": Object {
      "InputPath": "$.heap2",
      "Next": "tail__for(i in [await task(input)]) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "1__for(i in [await task(input)]) 1": Object {
      "ItemsPath": "$.heap4",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in [await task(input)]) 1",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in [await task(input)])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input)]": Object {
      "Next": "for(i in [await task(input)]) 1",
      "Parameters": Object {
        "arr.$": "States.Array($.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap4[0].item",
      "Next": "await task(await task(i))",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "await task(await task(i))": Object {
      "InputPath": "$.i",
      "Next": "1__await task(await task(i))",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "for(i in [await task(input)])": Object {
      "InputPath": "$.input",
      "Next": "[await task(input)]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(i in [await task(input)]) 1": Object {
      "InputPath": "$.heap1.arr",
      "Next": "1__for(i in [await task(input)]) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "hasNext__for(i in [await task(input)]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap4[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in [await task(input)]) 1": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for(i in [await task(input)]) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`for (const i of [task(input)]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await task(await task(i))": Object {
      "InputPath": "$.heap2",
      "Next": "tail__for(i of [await task(input)]) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i of [await task(input)])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input)]": Object {
      "Next": "for(i of [await task(input)]) 1",
      "Parameters": Object {
        "arr.$": "States.Array($.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "await task(await task(i))": Object {
      "InputPath": "$.i",
      "Next": "1__await task(await task(i))",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "for(i of [await task(input)])": Object {
      "InputPath": "$.input",
      "Next": "[await task(input)]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(i of [await task(input)]) 1": Object {
      "InputPath": "$.heap1.arr",
      "Next": "hasNext__for(i of [await task(input)]) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "hasNext__for(i of [await task(input)]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap4[0]",
      "Next": "await task(await task(i))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i of [await task(input)]) 1": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for(i of [await task(input)]) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`for assign 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap1",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "for(i in input.items)",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \${i}": Object {
      "Next": "a = \${i} 1",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.i)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "a = \${i} 1": Object {
      "InputPath": "$.heap0.string",
      "Next": "tail__for(i in input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \${i} 2": Object {
      "Next": "a = \${i} 3",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.i__1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "a = \${i} 3": Object {
      "InputPath": "$.heap2.string",
      "Next": "tail__for(i of input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap1[0].item",
      "Next": "a = \${i}",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap3[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap1[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": Object {
      "InputPath": "$.heap3[0]",
      "Next": "a = \${i} 2",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": Object {
      "InputPath": "$.heap3[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`for break 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === \\"1\\")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return \\"end\\"",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": Object {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === \\"1\\")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.i__1",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.i__1",
                },
              ],
            },
          ],
          "Next": "return \\"end\\"",
        },
      ],
      "Default": "return i",
      "Type": "Choice",
    },
    "if(input.items[i] === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.0__i",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.0__i",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.0__i",
                },
              ],
            },
          ],
          "Next": "for(i of input.items)",
        },
      ],
      "Default": "return input.items[i]",
      "Type": "Choice",
    },
    "return \\"end\\"": Object {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": Object {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": Object {
      "End": true,
      "InputPath": "$.0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for const i in items, items[i] 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = items[i]": Object {
      "InputPath": "$.0__i",
      "Next": "tail__for(i in input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "a = items[i]",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for continue 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === \\"1\\")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return \\"end\\"",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": Object {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === \\"1\\")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.i__1",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.i__1",
                },
              ],
            },
          ],
          "Next": "tail__for(i of input.items)",
        },
      ],
      "Default": "return i",
      "Type": "Choice",
    },
    "if(input.items[i] === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.0__i",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.0__i",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.0__i",
                },
              ],
            },
          ],
          "Next": "tail__for(i in input.items)",
        },
      ],
      "Default": "return input.items[i]",
      "Type": "Choice",
    },
    "return \\"end\\"": Object {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": Object {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": Object {
      "End": true,
      "InputPath": "$.0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for i in items, items[i] 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = items[i]": Object {
      "InputPath": "$.0__i",
      "Next": "tail__for(i in input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "a = items[i]",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for return 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === \\"1\\")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return \\"end\\"",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": Object {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === \\"1\\")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.i__1",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.i__1",
                },
              ],
            },
          ],
          "Next": "return i",
        },
      ],
      "Default": "tail__for(i of input.items)",
      "Type": "Choice",
    },
    "if(input.items[i] === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.0__i",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.0__i",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.0__i",
                },
              ],
            },
          ],
          "Next": "return input.items[i]",
        },
      ],
      "Default": "tail__for(i in input.items)",
      "Type": "Choice",
    },
    "return \\"end\\"": Object {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": Object {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": Object {
      "End": true,
      "InputPath": "$.0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) empty 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(;;)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "body__for(;;)": Object {
      "Next": "increment__for(;;)",
      "Type": "Pass",
    },
    "for(;;)": Object {
      "Next": "body__for(;;)",
      "Type": "Pass",
    },
    "increment__for(;;)": Object {
      "Next": "for(;;)",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i = 0;i < 3;i = if(i === 0))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericLessThan": 3,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "await task(i)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "1__if(i === 1)": Object {
      "InputPath": "$.heap1",
      "Next": "i = if(i === 0) 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i = 0;i < 3;i = if(i === 0))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(i)": Object {
      "InputPath": "$.i",
      "Next": "i = if(i === 0)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "false__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 3,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(i = 0;i < 3;i = if(i === 0))": Object {
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "Result": 0,
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "true__i = if(i === 0)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 1,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "true__if(i === 1)",
        },
      ],
      "Default": "false__if(i === 1)",
      "Type": "Choice",
    },
    "i = if(i === 0) 1": Object {
      "InputPath": "$.heap2",
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__i = if(i === 0)": Object {
      "Next": "i = if(i === 0) 1",
      "Result": 1,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "true__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 2,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop complex 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i[0]",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.i[0]",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.i[0]",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.i[0]",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.i[0]",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i[0]",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.i[0]",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.i[0]",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.i[0]",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.i[0]",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "await task({i: i, j: j})",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task({i: i, j: j})": Object {
      "Next": "i = i.slice(1) , j = j.slice(1)",
      "Parameters": Object {
        "i.$": "$.i",
        "j.$": "$.j",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))": Object {
      "Next": "j",
      "Result": Array [
        1,
        2,
      ],
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = i.slice(1) , j = j.slice(1)": Object {
      "InputPath": "$.i[1:]",
      "Next": "j = j.slice(1)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "j": Object {
      "Next": "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "Result": Array [
        3,
        4,
      ],
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "j = j.slice(1)": Object {
      "InputPath": "$.j[1:]",
      "Next": "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop empty body 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i = 0;i < 3;i = if(i === 0))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericLessThan": 3,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__i = if(i === 0)",
        },
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericLessThan": 3,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericEquals": 1,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__if(i === 1)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericLessThan": 3,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "false__if(i === 1)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "1__if(i === 1)": Object {
      "InputPath": "$.heap0",
      "Next": "i = if(i === 0) 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i = 0;i < 3;i = if(i === 0))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 3,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i = 0;i < 3;i = if(i === 0))": Object {
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "Result": 0,
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = if(i === 0) 1": Object {
      "InputPath": "$.heap1",
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__i = if(i === 0)": Object {
      "Next": "i = if(i === 0) 1",
      "Result": 1,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "true__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 2,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) no statement 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "return null",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-in-loop variable initializer 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(x of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(x of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(x of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(x of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "x",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return x": Object {
      "End": true,
      "InputPath": "$.x",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "x": Object {
      "InputPath": "$.heap0[0]",
      "Next": "return x",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop and do nothing 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = item": Object {
      "InputPath": "$.item",
      "Next": "tail__for(item of input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "a = item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop inline array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of [1, 2, 3])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = item": Object {
      "InputPath": "$.item",
      "Next": "tail__for(item of [1, 2, 3])",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(item of [1, 2, 3])": Object {
      "Next": "hasNext__for(item of [1, 2, 3])",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of [1, 2, 3])": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "a = item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of [1, 2, 3])": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of [1, 2, 3])",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop over a list literal 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "people = [\\"sam\\", \\"sam\\"]",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: name})": Object {
      "Next": "tail__for(name of people)",
      "Parameters": Object {
        "id.$": "$.input.id",
        "name.$": "$.name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(name of people)": Object {
      "InputPath": "$.people",
      "Next": "hasNext__for(name of people)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(name of people)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "name",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "name": Object {
      "InputPath": "$.heap1[0]",
      "Next": "await computeScore({id: input.id, name: name})",
      "ResultPath": "$.name",
      "Type": "Pass",
    },
    "people = [\\"sam\\", \\"sam\\"]": Object {
      "Next": "for(name of people)",
      "Result": Array [
        "sam",
        "sam",
      ],
      "ResultPath": "$.people",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(name of people)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(name of people)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-of { try { task() } catch (err) { if(err) throw } finally { task() } } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"you dun' goofed\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(err.message === \\"you dun' goofed\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "you dun' goofed",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap2[0]",
      "Next": "try",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "InputPath": "$.item",
      "Next": "finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`for-of-loop variable initializer 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(x in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(x in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(x in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__x": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "return x",
      "ResultPath": "$.0__x",
      "Type": "Pass",
    },
    "for(x in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(x in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(x in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "x",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return x": Object {
      "End": true,
      "InputPath": "$.x",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "x": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__x",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
  },
}
`;

exports[`iam policy for AWS.SDK.CloudWatch.describeAlarms 1`] = `
Role {
  "_allowCrossEnvironment": false,
  "_didSplit": false,
  "_physicalName": undefined,
  "assumeRoleAction": "sts:AssumeRole",
  "assumeRolePolicy": Object {
    "Statement": Array [
      Object {
        "Action": "sts:AssumeRole",
        "Effect": "Allow",
        "Principal": Object {
          "Service": "\${Token[states.amazonaws.com.3125]}",
        },
      },
    ],
    "Version": "2012-10-17",
  },
  "attachedPolicies": AttachedPolicies {
    "policies": Array [
      Policy {
        "_allowCrossEnvironment": false,
        "_physicalName": "\${Token[TOKEN.3140]}",
        "_policyName": "\${Token[TOKEN.3140]}",
        "document": Object {
          "Statement": Array [
            Object {
              "Action": "cloudwatch:DescribeAlarms",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "env": Object {
          "account": "\${Token[AWS.AccountId.0]}",
          "region": "\${Token[AWS.Region.4]}",
        },
        "force": false,
        "groups": Array [],
        "node": Node {
          "_children": Object {
            "Resource": CfnPolicyConditional {
              "_cfnProperties": Object {
                "groups": Array [
                  "#{Token[TOKEN.3143]}",
                ],
                "policyDocument": Object {
                  "Statement": Array [
                    Object {
                      "Action": "cloudwatch:DescribeAlarms",
                      "Effect": "Allow",
                      "Resource": "*",
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "policyName": "\${Token[TOKEN.3140]}",
                "roles": Array [
                  "#{Token[TOKEN.3141]}",
                ],
                "users": Array [
                  "#{Token[TOKEN.3142]}",
                ],
              },
              "cfnOptions": Object {},
              "cfnResourceType": "AWS::IAM::Policy",
              "dependsOn": Set {},
              "groups": Array [
                "#{Token[TOKEN.3143]}",
              ],
              "logicalId": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3144]}",
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3144]}",
                    "trace": undefined,
                    "type": "aws:cdk:logicalId",
                  },
                ],
                "_validations": Array [],
                "host": [Circular],
                "id": "Resource",
                "scope": [Circular],
              },
              "policyDocument": Object {
                "Statement": Array [
                  Object {
                    "Action": "cloudwatch:DescribeAlarms",
                    "Effect": "Allow",
                    "Resource": "*",
                  },
                ],
                "Version": "2012-10-17",
              },
              "policyName": "\${Token[TOKEN.3140]}",
              "rawOverrides": Object {},
              "roles": Array [
                "#{Token[TOKEN.3141]}",
              ],
              "stack": Stack {
                "_logicalIds": LogicalIDs {
                  "renames": Object {},
                  "reverse": Object {},
                },
                "_missingContext": Array [],
                "_stackDependencies": Object {},
                "_stackName": "stack",
                "_versionReportingEnabled": undefined,
                "account": "\${Token[AWS.AccountId.0]}",
                "artifactId": "stack",
                "environment": "aws://unknown-account/unknown-region",
                "node": Node {
                  "_children": Object {
                    "F": Function {
                      "_allowCrossEnvironment": true,
                      "_architecture": undefined,
                      "_functionUrlInvocationGrants": Object {},
                      "_invocationGrants": Object {},
                      "_layers": Array [],
                      "_physicalName": "testFunction",
                      "_warnIfCurrentVersionCalled": false,
                      "architecture": Architecture {
                        "dockerPlatform": "linux/amd64",
                        "name": "x86_64",
                      },
                      "canCreatePermissions": true,
                      "currentVersionOptions": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "environment": Object {},
                      "functionArn": "\${Token[TOKEN.3115]}",
                      "functionName": "\${Token[TOKEN.3114]}",
                      "grantPrincipal": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3101]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3105]}",
                              "attrRoleId": "\${Token[TOKEN.3106]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3101]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3101]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3107]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3107]}",
                        "roleId": "\${Token[TOKEN.3106]}",
                        "roleName": "\${Token[TOKEN.3109]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3110]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3107]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3112]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3110]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3103]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3101]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3105]}",
                                        "attrRoleId": "\${Token[TOKEN.3106]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3103]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3101]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3101]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3107]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3107]}",
                                  "roleId": "\${Token[TOKEN.3106]}",
                                  "roleName": "\${Token[TOKEN.3109]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3107]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "permissionsNode": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3110]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3107]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3112]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3110]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3103]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3101]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3105]}",
                                        "attrRoleId": "\${Token[TOKEN.3106]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3103]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3101]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3101]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3107]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3107]}",
                                  "roleId": "\${Token[TOKEN.3106]}",
                                  "roleName": "\${Token[TOKEN.3109]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3107]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "physicalName": "testFunction",
                      "role": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3101]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3105]}",
                              "attrRoleId": "\${Token[TOKEN.3106]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3101]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3101]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3107]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3107]}",
                        "roleId": "\${Token[TOKEN.3106]}",
                        "roleName": "\${Token[TOKEN.3109]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "runtime": Runtime {
                        "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "family": 0,
                        "name": "nodejs14.x",
                        "supportsCodeGuruProfiling": false,
                        "supportsInlineCode": true,
                      },
                      "stack": [Circular],
                      "timeout": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Table": Table {
                      "_allowCrossEnvironment": true,
                      "_physicalName": "testTable",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": "PROVISIONED",
                      "encryptionKey": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "globalReplicaCustomResources": Array [],
                      "globalSecondaryIndexes": Array [],
                      "indexScaling": Map {},
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "localSecondaryIndexes": Array [],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnTable {
                            "_cfnProperties": Object {
                              "attributeDefinitions": Array [
                                Object {
                                  "attributeName": "id",
                                  "attributeType": "S",
                                },
                              ],
                              "billingMode": undefined,
                              "contributorInsightsSpecification": undefined,
                              "globalSecondaryIndexes": "<unresolved-lazy>",
                              "keySchema": Array [
                                Object {
                                  "attributeName": "id",
                                  "keyType": "HASH",
                                },
                              ],
                              "kinesisStreamSpecification": undefined,
                              "localSecondaryIndexes": "<unresolved-lazy>",
                              "pointInTimeRecoverySpecification": undefined,
                              "provisionedThroughput": Object {
                                "readCapacityUnits": 5,
                                "writeCapacityUnits": 5,
                              },
                              "sseSpecification": undefined,
                              "streamSpecification": undefined,
                              "tableClass": undefined,
                              "tableName": "testTable",
                              "timeToLiveSpecification": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3117]}",
                            "attrStreamArn": "\${Token[TOKEN.3118]}",
                            "attributeDefinitions": Array [
                              Object {
                                "attributeName": "id",
                                "attributeType": "S",
                              },
                            ],
                            "billingMode": undefined,
                            "cfnOptions": Object {
                              "deletionPolicy": "Retain",
                              "updateReplacePolicy": "Retain",
                            },
                            "cfnResourceType": "AWS::DynamoDB::Table",
                            "contributorInsightsSpecification": undefined,
                            "dependsOn": Set {},
                            "globalSecondaryIndexes": "<unresolved-lazy>",
                            "keySchema": Array [
                              Object {
                                "attributeName": "id",
                                "keyType": "HASH",
                              },
                            ],
                            "kinesisStreamSpecification": undefined,
                            "localSecondaryIndexes": "<unresolved-lazy>",
                            "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "pointInTimeRecoverySpecification": undefined,
                            "provisionedThroughput": Object {
                              "readCapacityUnits": 5,
                              "writeCapacityUnits": 5,
                            },
                            "rawOverrides": Object {},
                            "sseSpecification": undefined,
                            "stack": [Circular],
                            "streamSpecification": undefined,
                            "tableClass": undefined,
                            "tableName": "testTable",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::DynamoDB::Table",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeToLiveSpecification": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ScalingRole": Import {
                            "_allowCrossEnvironment": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "ScalingRole",
                              "scope": [Circular],
                            },
                            "physicalName": "\${Token[TOKEN.3122]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[TOKEN.3121]}",
                            "trace": undefined,
                            "type": "aws:cdk:hasPhysicalName",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Table",
                        "scope": [Circular],
                      },
                      "nonKeyAttributes": Set {},
                      "physicalName": "testTable",
                      "regionalArns": Array [],
                      "scalingRole": Import {
                        "_allowCrossEnvironment": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "ScalingRole",
                          "scope": [Circular],
                        },
                        "physicalName": "\${Token[TOKEN.3122]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "secondaryIndexSchemas": Map {},
                      "stack": [Circular],
                      "table": CfnTable {
                        "_cfnProperties": Object {
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "contributorInsightsSpecification": undefined,
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "sseSpecification": undefined,
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "timeToLiveSpecification": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3117]}",
                        "attrStreamArn": "\${Token[TOKEN.3118]}",
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "cfnOptions": Object {
                          "deletionPolicy": "Retain",
                          "updateReplacePolicy": "Retain",
                        },
                        "cfnResourceType": "AWS::DynamoDB::Table",
                        "contributorInsightsSpecification": undefined,
                        "dependsOn": Set {},
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "rawOverrides": Object {},
                        "sseSpecification": undefined,
                        "stack": [Circular],
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::DynamoDB::Table",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeToLiveSpecification": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "tableArn": "\${Token[TOKEN.3119]}",
                      "tableName": "\${Token[TOKEN.3121]}",
                      "tablePartitionKey": Object {
                        "name": "id",
                        "type": "S",
                      },
                      "tableScaling": Object {},
                      "tableStreamArn": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "fn": StateMachine {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnStateMachine {
                            "_cfnProperties": Object {
                              "definitionString": "\${Token[TOKEN.3133]}",
                              "loggingConfiguration": undefined,
                              "roleArn": "\${Token[TOKEN.3130]}",
                              "stateMachineName": "\${Token[TOKEN.3123]}",
                              "stateMachineType": "EXPRESS",
                              "tracingConfiguration": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3135]}",
                            "attrName": "\${Token[TOKEN.3136]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::StepFunctions::StateMachine",
                            "definition": undefined,
                            "definitionS3Location": undefined,
                            "definitionString": "\${Token[TOKEN.3145]}",
                            "definitionSubstitutions": undefined,
                            "dependsOn": Set {},
                            "loggingConfiguration": undefined,
                            "logicalId": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                [Circular],
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "rawOverrides": Object {},
                            "roleArn": "\${Token[TOKEN.3130]}",
                            "stack": [Circular],
                            "stateMachineName": "\${Token[TOKEN.3123]}",
                            "stateMachineType": "EXPRESS",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::StepFunctions::StateMachine",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "tracingConfiguration": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "Role": [Circular],
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "fn",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3123]}",
                      "role": [Circular],
                      "stack": [Circular],
                      "stateMachineArn": "\${Token[TOKEN.3139]}",
                      "stateMachineName": "\${Token[TOKEN.3137]}",
                      "stateMachineType": "EXPRESS",
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "stack",
                  "scope": App {
                    "_assemblyBuilder": CloudAssemblyBuilder {
                      "artifacts": Object {},
                      "assetOutdir": "/tmp/cdk.outkVN8g5",
                      "missing": Array [],
                      "outdir": "/tmp/cdk.outkVN8g5",
                      "parentBuilder": undefined,
                    },
                    "account": undefined,
                    "node": Node {
                      "_children": Object {
                        "Tree": TreeMetadata {
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Tree",
                            "scope": [Circular],
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "stack": [Circular],
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "",
                      "scope": undefined,
                    },
                    "parentStage": undefined,
                    "region": undefined,
                    "stageName": "",
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "region": "\${Token[AWS.Region.4]}",
                "synthesizer": DefaultStackSynthesizer {
                  "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_stack": [Circular],
                  "assetManifest": AssetManifestBuilder {
                    "dockerImages": Object {},
                    "files": Object {},
                  },
                  "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
                  "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "bucketPrefix": "",
                  "dockerTagPrefix": "",
                  "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
                  "props": Object {},
                  "qualifier": "hnb659fds",
                  "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "useLookupRoleForStackOperations": true,
                },
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "aws:cdk:stack",
                  "tagFormatter": KeyValueFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "templateFile": "stack.template.json",
                "templateOptions": Object {},
                "terminationProtection": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "users": Array [
                "#{Token[TOKEN.3142]}",
              ],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [
            Object {
              "validate": [Function],
            },
          ],
          "host": [Circular],
          "id": "DefaultPolicy",
          "scope": [Circular],
        },
        "physicalName": "\${Token[TOKEN.3140]}",
        "referenceTaken": false,
        "roles": Array [
          [Circular],
        ],
        "stack": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3115]}",
                "functionName": "\${Token[TOKEN.3114]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3101]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3105]}",
                        "attrRoleId": "\${Token[TOKEN.3106]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3101]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3101]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3107]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3107]}",
                  "roleId": "\${Token[TOKEN.3106]}",
                  "roleName": "\${Token[TOKEN.3109]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3110]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3107]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3112]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3110]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3107]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3110]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3107]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3112]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3110]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3107]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3101]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3105]}",
                        "attrRoleId": "\${Token[TOKEN.3106]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3101]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3101]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3107]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3107]}",
                  "roleId": "\${Token[TOKEN.3106]}",
                  "roleName": "\${Token[TOKEN.3109]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3117]}",
                      "attrStreamArn": "\${Token[TOKEN.3118]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3122]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3121]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3122]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3117]}",
                  "attrStreamArn": "\${Token[TOKEN.3118]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3119]}",
                "tableName": "\${Token[TOKEN.3121]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": StateMachine {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnStateMachine {
                      "_cfnProperties": Object {
                        "definitionString": "\${Token[TOKEN.3133]}",
                        "loggingConfiguration": undefined,
                        "roleArn": "\${Token[TOKEN.3130]}",
                        "stateMachineName": "\${Token[TOKEN.3123]}",
                        "stateMachineType": "EXPRESS",
                        "tracingConfiguration": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3135]}",
                      "attrName": "\${Token[TOKEN.3136]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::StepFunctions::StateMachine",
                      "definition": undefined,
                      "definitionS3Location": undefined,
                      "definitionString": "\${Token[TOKEN.3145]}",
                      "definitionSubstitutions": undefined,
                      "dependsOn": Set {},
                      "loggingConfiguration": undefined,
                      "logicalId": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          [Circular],
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "rawOverrides": Object {},
                      "roleArn": "\${Token[TOKEN.3130]}",
                      "stack": [Circular],
                      "stateMachineName": "\${Token[TOKEN.3123]}",
                      "stateMachineType": "EXPRESS",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::StepFunctions::StateMachine",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "tracingConfiguration": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Role": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "fn",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3123]}",
                "role": [Circular],
                "stack": [Circular],
                "stateMachineArn": "\${Token[TOKEN.3139]}",
                "stateMachineName": "\${Token[TOKEN.3137]}",
                "stateMachineType": "EXPRESS",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.outkVN8g5",
                "missing": Array [],
                "outdir": "/tmp/cdk.outkVN8g5",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "users": Array [],
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
    ],
  },
  "defaultPolicy": Policy {
    "_allowCrossEnvironment": false,
    "_physicalName": "\${Token[TOKEN.3140]}",
    "_policyName": "\${Token[TOKEN.3140]}",
    "document": Object {
      "Statement": Array [
        Object {
          "Action": "cloudwatch:DescribeAlarms",
          "Effect": "Allow",
          "Resource": "*",
        },
      ],
      "Version": "2012-10-17",
    },
    "env": Object {
      "account": "\${Token[AWS.AccountId.0]}",
      "region": "\${Token[AWS.Region.4]}",
    },
    "force": false,
    "groups": Array [],
    "node": Node {
      "_children": Object {
        "Resource": CfnPolicyConditional {
          "_cfnProperties": Object {
            "groups": Array [
              "#{Token[TOKEN.3143]}",
            ],
            "policyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "cloudwatch:DescribeAlarms",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "policyName": "\${Token[TOKEN.3140]}",
            "roles": Array [
              "#{Token[TOKEN.3141]}",
            ],
            "users": Array [
              "#{Token[TOKEN.3142]}",
            ],
          },
          "cfnOptions": Object {},
          "cfnResourceType": "AWS::IAM::Policy",
          "dependsOn": Set {},
          "groups": Array [
            "#{Token[TOKEN.3143]}",
          ],
          "logicalId": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3144]}",
          "node": Node {
            "_children": Object {},
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [
              Object {
                "data": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3144]}",
                "trace": undefined,
                "type": "aws:cdk:logicalId",
              },
            ],
            "_validations": Array [],
            "host": [Circular],
            "id": "Resource",
            "scope": [Circular],
          },
          "policyDocument": Object {
            "Statement": Array [
              Object {
                "Action": "cloudwatch:DescribeAlarms",
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "policyName": "\${Token[TOKEN.3140]}",
          "rawOverrides": Object {},
          "roles": Array [
            "#{Token[TOKEN.3141]}",
          ],
          "stack": Stack {
            "_logicalIds": LogicalIDs {
              "renames": Object {},
              "reverse": Object {},
            },
            "_missingContext": Array [],
            "_stackDependencies": Object {},
            "_stackName": "stack",
            "_versionReportingEnabled": undefined,
            "account": "\${Token[AWS.AccountId.0]}",
            "artifactId": "stack",
            "environment": "aws://unknown-account/unknown-region",
            "node": Node {
              "_children": Object {
                "F": Function {
                  "_allowCrossEnvironment": true,
                  "_architecture": undefined,
                  "_functionUrlInvocationGrants": Object {},
                  "_invocationGrants": Object {},
                  "_layers": Array [],
                  "_physicalName": "testFunction",
                  "_warnIfCurrentVersionCalled": false,
                  "architecture": Architecture {
                    "dockerPlatform": "linux/amd64",
                    "name": "x86_64",
                  },
                  "canCreatePermissions": true,
                  "currentVersionOptions": undefined,
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "environment": Object {},
                  "functionArn": "\${Token[TOKEN.3115]}",
                  "functionName": "\${Token[TOKEN.3114]}",
                  "grantPrincipal": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3101]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3105]}",
                          "attrRoleId": "\${Token[TOKEN.3106]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3101]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3101]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3107]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3107]}",
                    "roleId": "\${Token[TOKEN.3106]}",
                    "roleName": "\${Token[TOKEN.3109]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnFunction {
                        "_cfnProperties": Object {
                          "architectures": undefined,
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3110]}",
                          ],
                          "memorySize": undefined,
                          "packageType": undefined,
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3107]}",
                          "runtime": "nodejs14.x",
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                        },
                        "architectures": undefined,
                        "attrArn": "\${Token[TOKEN.3112]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::Lambda::Function",
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "dependsOn": Set {},
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3110]}",
                        ],
                        "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                        "memorySize": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {
                            Role {
                              "_allowCrossEnvironment": false,
                              "_didSplit": false,
                              "_physicalName": undefined,
                              "assumeRoleAction": "sts:AssumeRole",
                              "assumeRolePolicy": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attachedPolicies": AttachedPolicies {
                                "policies": Array [],
                              },
                              "dependables": Map {},
                              "env": Object {
                                "account": "\${Token[AWS.AccountId.0]}",
                                "region": "\${Token[AWS.Region.4]}",
                              },
                              "grantPrincipal": [Circular],
                              "inlinePolicies": Object {},
                              "managedPolicies": Array [
                                AwsManagedPolicy {
                                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                },
                              ],
                              "node": Node {
                                "_children": Object {
                                  "Resource": CfnRole {
                                    "_cfnProperties": Object {
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "description": undefined,
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3103]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "roleName": "\${Token[TOKEN.3101]}",
                                    },
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "attrArn": "\${Token[TOKEN.3105]}",
                                    "attrRoleId": "\${Token[TOKEN.3106]}",
                                    "cfnOptions": Object {},
                                    "cfnResourceType": "AWS::IAM::Role",
                                    "dependsOn": Set {},
                                    "description": undefined,
                                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "node": Node {
                                      "_children": Object {},
                                      "_context": Object {},
                                      "_dependencies": Set {},
                                      "_locked": false,
                                      "_metadata": Array [
                                        Object {
                                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                          "trace": undefined,
                                          "type": "aws:cdk:logicalId",
                                        },
                                      ],
                                      "_validations": Array [],
                                      "host": [Circular],
                                      "id": "Resource",
                                      "scope": [Circular],
                                    },
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "rawOverrides": Object {},
                                    "roleName": "\${Token[TOKEN.3101]}",
                                    "stack": [Circular],
                                    "tags": TagManager {
                                      "initialTagPriority": 50,
                                      "priorities": Map {},
                                      "renderedTags": "<unresolved-lazy>",
                                      "resourceTypeName": "AWS::IAM::Role",
                                      "tagFormatter": StandardFormatter {},
                                      "tagPropertyName": "tags",
                                      "tags": Map {},
                                    },
                                    Symbol(@aws-cdk/core.DependableTrait): Object {
                                      "dependencyRoots": Array [
                                        [Circular],
                                      ],
                                    },
                                  },
                                },
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [],
                                "_validations": Array [
                                  Object {
                                    "validate": [Function],
                                  },
                                ],
                                "host": [Circular],
                                "id": "ServiceRole",
                                "scope": [Circular],
                              },
                              "permissionsBoundary": undefined,
                              "physicalName": "\${Token[TOKEN.3101]}",
                              "policyFragment": PrincipalPolicyFragment {
                                "conditions": Object {},
                                "principalJson": Object {
                                  "AWS": Array [
                                    "\${Token[TOKEN.3107]}",
                                  ],
                                },
                              },
                              "principalAccount": "\${Token[AWS.AccountId.0]}",
                              "roleArn": "\${Token[TOKEN.3107]}",
                              "roleId": "\${Token[TOKEN.3106]}",
                              "roleName": "\${Token[TOKEN.3109]}",
                              "stack": [Circular],
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "packageType": undefined,
                        "rawOverrides": Object {},
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3107]}",
                        "runtime": "nodejs14.x",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::Lambda::Function",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "ServiceRole": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3101]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3105]}",
                              "attrRoleId": "\${Token[TOKEN.3106]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3101]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3101]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3107]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3107]}",
                        "roleId": "\${Token[TOKEN.3106]}",
                        "roleName": "\${Token[TOKEN.3109]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "F",
                    "scope": [Circular],
                  },
                  "permissionsNode": Node {
                    "_children": Object {
                      "Resource": CfnFunction {
                        "_cfnProperties": Object {
                          "architectures": undefined,
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3110]}",
                          ],
                          "memorySize": undefined,
                          "packageType": undefined,
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3107]}",
                          "runtime": "nodejs14.x",
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                        },
                        "architectures": undefined,
                        "attrArn": "\${Token[TOKEN.3112]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::Lambda::Function",
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "dependsOn": Set {},
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3110]}",
                        ],
                        "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                        "memorySize": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {
                            Role {
                              "_allowCrossEnvironment": false,
                              "_didSplit": false,
                              "_physicalName": undefined,
                              "assumeRoleAction": "sts:AssumeRole",
                              "assumeRolePolicy": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attachedPolicies": AttachedPolicies {
                                "policies": Array [],
                              },
                              "dependables": Map {},
                              "env": Object {
                                "account": "\${Token[AWS.AccountId.0]}",
                                "region": "\${Token[AWS.Region.4]}",
                              },
                              "grantPrincipal": [Circular],
                              "inlinePolicies": Object {},
                              "managedPolicies": Array [
                                AwsManagedPolicy {
                                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                },
                              ],
                              "node": Node {
                                "_children": Object {
                                  "Resource": CfnRole {
                                    "_cfnProperties": Object {
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "description": undefined,
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3103]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "roleName": "\${Token[TOKEN.3101]}",
                                    },
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "attrArn": "\${Token[TOKEN.3105]}",
                                    "attrRoleId": "\${Token[TOKEN.3106]}",
                                    "cfnOptions": Object {},
                                    "cfnResourceType": "AWS::IAM::Role",
                                    "dependsOn": Set {},
                                    "description": undefined,
                                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "node": Node {
                                      "_children": Object {},
                                      "_context": Object {},
                                      "_dependencies": Set {},
                                      "_locked": false,
                                      "_metadata": Array [
                                        Object {
                                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                          "trace": undefined,
                                          "type": "aws:cdk:logicalId",
                                        },
                                      ],
                                      "_validations": Array [],
                                      "host": [Circular],
                                      "id": "Resource",
                                      "scope": [Circular],
                                    },
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "rawOverrides": Object {},
                                    "roleName": "\${Token[TOKEN.3101]}",
                                    "stack": [Circular],
                                    "tags": TagManager {
                                      "initialTagPriority": 50,
                                      "priorities": Map {},
                                      "renderedTags": "<unresolved-lazy>",
                                      "resourceTypeName": "AWS::IAM::Role",
                                      "tagFormatter": StandardFormatter {},
                                      "tagPropertyName": "tags",
                                      "tags": Map {},
                                    },
                                    Symbol(@aws-cdk/core.DependableTrait): Object {
                                      "dependencyRoots": Array [
                                        [Circular],
                                      ],
                                    },
                                  },
                                },
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [],
                                "_validations": Array [
                                  Object {
                                    "validate": [Function],
                                  },
                                ],
                                "host": [Circular],
                                "id": "ServiceRole",
                                "scope": [Circular],
                              },
                              "permissionsBoundary": undefined,
                              "physicalName": "\${Token[TOKEN.3101]}",
                              "policyFragment": PrincipalPolicyFragment {
                                "conditions": Object {},
                                "principalJson": Object {
                                  "AWS": Array [
                                    "\${Token[TOKEN.3107]}",
                                  ],
                                },
                              },
                              "principalAccount": "\${Token[AWS.AccountId.0]}",
                              "roleArn": "\${Token[TOKEN.3107]}",
                              "roleId": "\${Token[TOKEN.3106]}",
                              "roleName": "\${Token[TOKEN.3109]}",
                              "stack": [Circular],
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "packageType": undefined,
                        "rawOverrides": Object {},
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3107]}",
                        "runtime": "nodejs14.x",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::Lambda::Function",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "ServiceRole": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3101]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3105]}",
                              "attrRoleId": "\${Token[TOKEN.3106]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3101]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3101]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3107]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3107]}",
                        "roleId": "\${Token[TOKEN.3106]}",
                        "roleName": "\${Token[TOKEN.3109]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "F",
                    "scope": [Circular],
                  },
                  "physicalName": "testFunction",
                  "role": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3101]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3105]}",
                          "attrRoleId": "\${Token[TOKEN.3106]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3101]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3101]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3107]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3107]}",
                    "roleId": "\${Token[TOKEN.3106]}",
                    "roleName": "\${Token[TOKEN.3109]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "runtime": Runtime {
                    "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                    "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                    "family": 0,
                    "name": "nodejs14.x",
                    "supportsCodeGuruProfiling": false,
                    "supportsInlineCode": true,
                  },
                  "stack": [Circular],
                  "timeout": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "Table": Table {
                  "_allowCrossEnvironment": true,
                  "_physicalName": "testTable",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": "PROVISIONED",
                  "encryptionKey": undefined,
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "globalReplicaCustomResources": Array [],
                  "globalSecondaryIndexes": Array [],
                  "indexScaling": Map {},
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "localSecondaryIndexes": Array [],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnTable {
                        "_cfnProperties": Object {
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "contributorInsightsSpecification": undefined,
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "sseSpecification": undefined,
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "timeToLiveSpecification": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3117]}",
                        "attrStreamArn": "\${Token[TOKEN.3118]}",
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "cfnOptions": Object {
                          "deletionPolicy": "Retain",
                          "updateReplacePolicy": "Retain",
                        },
                        "cfnResourceType": "AWS::DynamoDB::Table",
                        "contributorInsightsSpecification": undefined,
                        "dependsOn": Set {},
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "rawOverrides": Object {},
                        "sseSpecification": undefined,
                        "stack": [Circular],
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::DynamoDB::Table",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeToLiveSpecification": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "ScalingRole": Import {
                        "_allowCrossEnvironment": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "ScalingRole",
                          "scope": [Circular],
                        },
                        "physicalName": "\${Token[TOKEN.3122]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[TOKEN.3121]}",
                        "trace": undefined,
                        "type": "aws:cdk:hasPhysicalName",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Table",
                    "scope": [Circular],
                  },
                  "nonKeyAttributes": Set {},
                  "physicalName": "testTable",
                  "regionalArns": Array [],
                  "scalingRole": Import {
                    "_allowCrossEnvironment": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "ScalingRole",
                      "scope": [Circular],
                    },
                    "physicalName": "\${Token[TOKEN.3122]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "secondaryIndexSchemas": Map {},
                  "stack": [Circular],
                  "table": CfnTable {
                    "_cfnProperties": Object {
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "contributorInsightsSpecification": undefined,
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "sseSpecification": undefined,
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "timeToLiveSpecification": undefined,
                    },
                    "attrArn": "\${Token[TOKEN.3117]}",
                    "attrStreamArn": "\${Token[TOKEN.3118]}",
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "cfnOptions": Object {
                      "deletionPolicy": "Retain",
                      "updateReplacePolicy": "Retain",
                    },
                    "cfnResourceType": "AWS::DynamoDB::Table",
                    "contributorInsightsSpecification": undefined,
                    "dependsOn": Set {},
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "rawOverrides": Object {},
                    "sseSpecification": undefined,
                    "stack": [Circular],
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::DynamoDB::Table",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeToLiveSpecification": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "tableArn": "\${Token[TOKEN.3119]}",
                  "tableName": "\${Token[TOKEN.3121]}",
                  "tablePartitionKey": Object {
                    "name": "id",
                    "type": "S",
                  },
                  "tableScaling": Object {},
                  "tableStreamArn": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "fn": StateMachine {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnStateMachine {
                        "_cfnProperties": Object {
                          "definitionString": "\${Token[TOKEN.3133]}",
                          "loggingConfiguration": undefined,
                          "roleArn": "\${Token[TOKEN.3130]}",
                          "stateMachineName": "\${Token[TOKEN.3123]}",
                          "stateMachineType": "EXPRESS",
                          "tracingConfiguration": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3135]}",
                        "attrName": "\${Token[TOKEN.3136]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::StepFunctions::StateMachine",
                        "definition": undefined,
                        "definitionS3Location": undefined,
                        "definitionString": "\${Token[TOKEN.3145]}",
                        "definitionSubstitutions": undefined,
                        "dependsOn": Set {},
                        "loggingConfiguration": undefined,
                        "logicalId": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {
                            [Circular],
                          },
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "rawOverrides": Object {},
                        "roleArn": "\${Token[TOKEN.3130]}",
                        "stack": [Circular],
                        "stateMachineName": "\${Token[TOKEN.3123]}",
                        "stateMachineType": "EXPRESS",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::StepFunctions::StateMachine",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "tracingConfiguration": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "Role": [Circular],
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "fn",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3123]}",
                  "role": [Circular],
                  "stack": [Circular],
                  "stateMachineArn": "\${Token[TOKEN.3139]}",
                  "stateMachineName": "\${Token[TOKEN.3137]}",
                  "stateMachineType": "EXPRESS",
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "stack",
              "scope": App {
                "_assemblyBuilder": CloudAssemblyBuilder {
                  "artifacts": Object {},
                  "assetOutdir": "/tmp/cdk.outkVN8g5",
                  "missing": Array [],
                  "outdir": "/tmp/cdk.outkVN8g5",
                  "parentBuilder": undefined,
                },
                "account": undefined,
                "node": Node {
                  "_children": Object {
                    "Tree": TreeMetadata {
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Tree",
                        "scope": [Circular],
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "stack": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "",
                  "scope": undefined,
                },
                "parentStage": undefined,
                "region": undefined,
                "stageName": "",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "region": "\${Token[AWS.Region.4]}",
            "synthesizer": DefaultStackSynthesizer {
              "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
              "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
              "_stack": [Circular],
              "assetManifest": AssetManifestBuilder {
                "dockerImages": Object {},
                "files": Object {},
              },
              "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
              "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
              "bucketPrefix": "",
              "dockerTagPrefix": "",
              "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
              "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
              "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
              "props": Object {},
              "qualifier": "hnb659fds",
              "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
              "useLookupRoleForStackOperations": true,
            },
            "tags": TagManager {
              "initialTagPriority": 50,
              "priorities": Map {},
              "renderedTags": "<unresolved-lazy>",
              "resourceTypeName": "aws:cdk:stack",
              "tagFormatter": KeyValueFormatter {},
              "tagPropertyName": "tags",
              "tags": Map {},
            },
            "templateFile": "stack.template.json",
            "templateOptions": Object {},
            "terminationProtection": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "users": Array [
            "#{Token[TOKEN.3142]}",
          ],
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "_context": Object {},
      "_dependencies": Set {},
      "_locked": false,
      "_metadata": Array [],
      "_validations": Array [
        Object {
          "validate": [Function],
        },
      ],
      "host": [Circular],
      "id": "DefaultPolicy",
      "scope": [Circular],
    },
    "physicalName": "\${Token[TOKEN.3140]}",
    "referenceTaken": false,
    "roles": Array [
      [Circular],
    ],
    "stack": Stack {
      "_logicalIds": LogicalIDs {
        "renames": Object {},
        "reverse": Object {},
      },
      "_missingContext": Array [],
      "_stackDependencies": Object {},
      "_stackName": "stack",
      "_versionReportingEnabled": undefined,
      "account": "\${Token[AWS.AccountId.0]}",
      "artifactId": "stack",
      "environment": "aws://unknown-account/unknown-region",
      "node": Node {
        "_children": Object {
          "F": Function {
            "_allowCrossEnvironment": true,
            "_architecture": undefined,
            "_functionUrlInvocationGrants": Object {},
            "_invocationGrants": Object {},
            "_layers": Array [],
            "_physicalName": "testFunction",
            "_warnIfCurrentVersionCalled": false,
            "architecture": Architecture {
              "dockerPlatform": "linux/amd64",
              "name": "x86_64",
            },
            "canCreatePermissions": true,
            "currentVersionOptions": undefined,
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "environment": Object {},
            "functionArn": "\${Token[TOKEN.3115]}",
            "functionName": "\${Token[TOKEN.3114]}",
            "grantPrincipal": Role {
              "_allowCrossEnvironment": false,
              "_didSplit": false,
              "_physicalName": undefined,
              "assumeRoleAction": "sts:AssumeRole",
              "assumeRolePolicy": Object {
                "Statement": Array [
                  Object {
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": Object {
                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                    },
                  },
                ],
                "Version": "2012-10-17",
              },
              "attachedPolicies": AttachedPolicies {
                "policies": Array [],
              },
              "dependables": Map {},
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "grantPrincipal": [Circular],
              "inlinePolicies": Object {},
              "managedPolicies": Array [
                AwsManagedPolicy {
                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                },
              ],
              "node": Node {
                "_children": Object {
                  "Resource": CfnRole {
                    "_cfnProperties": Object {
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "description": undefined,
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3103]}",
                      ],
                      "maxSessionDuration": undefined,
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "roleName": "\${Token[TOKEN.3101]}",
                    },
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attrArn": "\${Token[TOKEN.3105]}",
                    "attrRoleId": "\${Token[TOKEN.3106]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::IAM::Role",
                    "dependsOn": Set {},
                    "description": undefined,
                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3103]}",
                    ],
                    "maxSessionDuration": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "rawOverrides": Object {},
                    "roleName": "\${Token[TOKEN.3101]}",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::IAM::Role",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "ServiceRole",
                "scope": [Circular],
              },
              "permissionsBoundary": undefined,
              "physicalName": "\${Token[TOKEN.3101]}",
              "policyFragment": PrincipalPolicyFragment {
                "conditions": Object {},
                "principalJson": Object {
                  "AWS": Array [
                    "\${Token[TOKEN.3107]}",
                  ],
                },
              },
              "principalAccount": "\${Token[AWS.AccountId.0]}",
              "roleArn": "\${Token[TOKEN.3107]}",
              "roleId": "\${Token[TOKEN.3106]}",
              "roleName": "\${Token[TOKEN.3109]}",
              "stack": [Circular],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "node": Node {
              "_children": Object {
                "Resource": CfnFunction {
                  "_cfnProperties": Object {
                    "architectures": undefined,
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3110]}",
                    ],
                    "memorySize": undefined,
                    "packageType": undefined,
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3107]}",
                    "runtime": "nodejs14.x",
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                  },
                  "architectures": undefined,
                  "attrArn": "\${Token[TOKEN.3112]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::Lambda::Function",
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "dependsOn": Set {},
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3110]}",
                  ],
                  "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                  "memorySize": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {
                      Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3101]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3105]}",
                              "attrRoleId": "\${Token[TOKEN.3106]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3101]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3101]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3107]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3107]}",
                        "roleId": "\${Token[TOKEN.3106]}",
                        "roleName": "\${Token[TOKEN.3109]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "packageType": undefined,
                  "rawOverrides": Object {},
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3107]}",
                  "runtime": "nodejs14.x",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::Lambda::Function",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "ServiceRole": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3101]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3105]}",
                        "attrRoleId": "\${Token[TOKEN.3106]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3101]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3101]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3107]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3107]}",
                  "roleId": "\${Token[TOKEN.3106]}",
                  "roleName": "\${Token[TOKEN.3109]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "F",
              "scope": [Circular],
            },
            "permissionsNode": Node {
              "_children": Object {
                "Resource": CfnFunction {
                  "_cfnProperties": Object {
                    "architectures": undefined,
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3110]}",
                    ],
                    "memorySize": undefined,
                    "packageType": undefined,
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3107]}",
                    "runtime": "nodejs14.x",
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                  },
                  "architectures": undefined,
                  "attrArn": "\${Token[TOKEN.3112]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::Lambda::Function",
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "dependsOn": Set {},
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3110]}",
                  ],
                  "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                  "memorySize": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {
                      Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3101]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3105]}",
                              "attrRoleId": "\${Token[TOKEN.3106]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3101]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3101]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3107]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3107]}",
                        "roleId": "\${Token[TOKEN.3106]}",
                        "roleName": "\${Token[TOKEN.3109]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "packageType": undefined,
                  "rawOverrides": Object {},
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3107]}",
                  "runtime": "nodejs14.x",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::Lambda::Function",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "ServiceRole": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3101]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3105]}",
                        "attrRoleId": "\${Token[TOKEN.3106]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3101]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3101]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3107]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3107]}",
                  "roleId": "\${Token[TOKEN.3106]}",
                  "roleName": "\${Token[TOKEN.3109]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "F",
              "scope": [Circular],
            },
            "physicalName": "testFunction",
            "role": Role {
              "_allowCrossEnvironment": false,
              "_didSplit": false,
              "_physicalName": undefined,
              "assumeRoleAction": "sts:AssumeRole",
              "assumeRolePolicy": Object {
                "Statement": Array [
                  Object {
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": Object {
                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                    },
                  },
                ],
                "Version": "2012-10-17",
              },
              "attachedPolicies": AttachedPolicies {
                "policies": Array [],
              },
              "dependables": Map {},
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "grantPrincipal": [Circular],
              "inlinePolicies": Object {},
              "managedPolicies": Array [
                AwsManagedPolicy {
                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                },
              ],
              "node": Node {
                "_children": Object {
                  "Resource": CfnRole {
                    "_cfnProperties": Object {
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "description": undefined,
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3103]}",
                      ],
                      "maxSessionDuration": undefined,
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "roleName": "\${Token[TOKEN.3101]}",
                    },
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attrArn": "\${Token[TOKEN.3105]}",
                    "attrRoleId": "\${Token[TOKEN.3106]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::IAM::Role",
                    "dependsOn": Set {},
                    "description": undefined,
                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3103]}",
                    ],
                    "maxSessionDuration": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "rawOverrides": Object {},
                    "roleName": "\${Token[TOKEN.3101]}",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::IAM::Role",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "ServiceRole",
                "scope": [Circular],
              },
              "permissionsBoundary": undefined,
              "physicalName": "\${Token[TOKEN.3101]}",
              "policyFragment": PrincipalPolicyFragment {
                "conditions": Object {},
                "principalJson": Object {
                  "AWS": Array [
                    "\${Token[TOKEN.3107]}",
                  ],
                },
              },
              "principalAccount": "\${Token[AWS.AccountId.0]}",
              "roleArn": "\${Token[TOKEN.3107]}",
              "roleId": "\${Token[TOKEN.3106]}",
              "roleName": "\${Token[TOKEN.3109]}",
              "stack": [Circular],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "runtime": Runtime {
              "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
              "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
              "family": 0,
              "name": "nodejs14.x",
              "supportsCodeGuruProfiling": false,
              "supportsInlineCode": true,
            },
            "stack": [Circular],
            "timeout": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "Table": Table {
            "_allowCrossEnvironment": true,
            "_physicalName": "testTable",
            "attributeDefinitions": Array [
              Object {
                "attributeName": "id",
                "attributeType": "S",
              },
            ],
            "billingMode": "PROVISIONED",
            "encryptionKey": undefined,
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "globalReplicaCustomResources": Array [],
            "globalSecondaryIndexes": Array [],
            "indexScaling": Map {},
            "keySchema": Array [
              Object {
                "attributeName": "id",
                "keyType": "HASH",
              },
            ],
            "localSecondaryIndexes": Array [],
            "node": Node {
              "_children": Object {
                "Resource": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3117]}",
                  "attrStreamArn": "\${Token[TOKEN.3118]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "ScalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3122]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [
                Object {
                  "data": "\${Token[TOKEN.3121]}",
                  "trace": undefined,
                  "type": "aws:cdk:hasPhysicalName",
                },
              ],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "Table",
              "scope": [Circular],
            },
            "nonKeyAttributes": Set {},
            "physicalName": "testTable",
            "regionalArns": Array [],
            "scalingRole": Import {
              "_allowCrossEnvironment": false,
              "_physicalName": undefined,
              "assumeRoleAction": "sts:AssumeRole",
              "attachedPolicies": AttachedPolicies {
                "policies": Array [],
              },
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "grantPrincipal": [Circular],
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "ScalingRole",
                "scope": [Circular],
              },
              "physicalName": "\${Token[TOKEN.3122]}",
              "policyFragment": PrincipalPolicyFragment {
                "conditions": Object {},
                "principalJson": Object {
                  "AWS": Array [
                    "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  ],
                },
              },
              "principalAccount": "\${Token[AWS.AccountId.0]}",
              "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
              "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
              "stack": [Circular],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "secondaryIndexSchemas": Map {},
            "stack": [Circular],
            "table": CfnTable {
              "_cfnProperties": Object {
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": undefined,
                "contributorInsightsSpecification": undefined,
                "globalSecondaryIndexes": "<unresolved-lazy>",
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "kinesisStreamSpecification": undefined,
                "localSecondaryIndexes": "<unresolved-lazy>",
                "pointInTimeRecoverySpecification": undefined,
                "provisionedThroughput": Object {
                  "readCapacityUnits": 5,
                  "writeCapacityUnits": 5,
                },
                "sseSpecification": undefined,
                "streamSpecification": undefined,
                "tableClass": undefined,
                "tableName": "testTable",
                "timeToLiveSpecification": undefined,
              },
              "attrArn": "\${Token[TOKEN.3117]}",
              "attrStreamArn": "\${Token[TOKEN.3118]}",
              "attributeDefinitions": Array [
                Object {
                  "attributeName": "id",
                  "attributeType": "S",
                },
              ],
              "billingMode": undefined,
              "cfnOptions": Object {
                "deletionPolicy": "Retain",
                "updateReplacePolicy": "Retain",
              },
              "cfnResourceType": "AWS::DynamoDB::Table",
              "contributorInsightsSpecification": undefined,
              "dependsOn": Set {},
              "globalSecondaryIndexes": "<unresolved-lazy>",
              "keySchema": Array [
                Object {
                  "attributeName": "id",
                  "keyType": "HASH",
                },
              ],
              "kinesisStreamSpecification": undefined,
              "localSecondaryIndexes": "<unresolved-lazy>",
              "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                    "trace": undefined,
                    "type": "aws:cdk:logicalId",
                  },
                ],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "Resource",
                "scope": [Circular],
              },
              "pointInTimeRecoverySpecification": undefined,
              "provisionedThroughput": Object {
                "readCapacityUnits": 5,
                "writeCapacityUnits": 5,
              },
              "rawOverrides": Object {},
              "sseSpecification": undefined,
              "stack": [Circular],
              "streamSpecification": undefined,
              "tableClass": undefined,
              "tableName": "testTable",
              "tags": TagManager {
                "initialTagPriority": 50,
                "priorities": Map {},
                "renderedTags": "<unresolved-lazy>",
                "resourceTypeName": "AWS::DynamoDB::Table",
                "tagFormatter": StandardFormatter {},
                "tagPropertyName": "tags",
                "tags": Map {},
              },
              "timeToLiveSpecification": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "tableArn": "\${Token[TOKEN.3119]}",
            "tableName": "\${Token[TOKEN.3121]}",
            "tablePartitionKey": Object {
              "name": "id",
              "type": "S",
            },
            "tableScaling": Object {},
            "tableStreamArn": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "fn": StateMachine {
            "_allowCrossEnvironment": false,
            "_physicalName": undefined,
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "node": Node {
              "_children": Object {
                "Resource": CfnStateMachine {
                  "_cfnProperties": Object {
                    "definitionString": "\${Token[TOKEN.3133]}",
                    "loggingConfiguration": undefined,
                    "roleArn": "\${Token[TOKEN.3130]}",
                    "stateMachineName": "\${Token[TOKEN.3123]}",
                    "stateMachineType": "EXPRESS",
                    "tracingConfiguration": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3135]}",
                  "attrName": "\${Token[TOKEN.3136]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::StepFunctions::StateMachine",
                  "definition": undefined,
                  "definitionS3Location": undefined,
                  "definitionString": "\${Token[TOKEN.3145]}",
                  "definitionSubstitutions": undefined,
                  "dependsOn": Set {},
                  "loggingConfiguration": undefined,
                  "logicalId": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {
                      [Circular],
                    },
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "rawOverrides": Object {},
                  "roleArn": "\${Token[TOKEN.3130]}",
                  "stack": [Circular],
                  "stateMachineName": "\${Token[TOKEN.3123]}",
                  "stateMachineType": "EXPRESS",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::StepFunctions::StateMachine",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "tracingConfiguration": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "Role": [Circular],
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "fn",
              "scope": [Circular],
            },
            "physicalName": "\${Token[TOKEN.3123]}",
            "role": [Circular],
            "stack": [Circular],
            "stateMachineArn": "\${Token[TOKEN.3139]}",
            "stateMachineName": "\${Token[TOKEN.3137]}",
            "stateMachineType": "EXPRESS",
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
        },
        "_context": Object {},
        "_dependencies": Set {},
        "_locked": false,
        "_metadata": Array [],
        "_validations": Array [],
        "host": [Circular],
        "id": "stack",
        "scope": App {
          "_assemblyBuilder": CloudAssemblyBuilder {
            "artifacts": Object {},
            "assetOutdir": "/tmp/cdk.outkVN8g5",
            "missing": Array [],
            "outdir": "/tmp/cdk.outkVN8g5",
            "parentBuilder": undefined,
          },
          "account": undefined,
          "node": Node {
            "_children": Object {
              "Tree": TreeMetadata {
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Tree",
                  "scope": [Circular],
                },
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "stack": [Circular],
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "",
            "scope": undefined,
          },
          "parentStage": undefined,
          "region": undefined,
          "stageName": "",
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "region": "\${Token[AWS.Region.4]}",
      "synthesizer": DefaultStackSynthesizer {
        "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
        "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
        "_stack": [Circular],
        "assetManifest": AssetManifestBuilder {
          "dockerImages": Object {},
          "files": Object {},
        },
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
        "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
        "bucketPrefix": "",
        "dockerTagPrefix": "",
        "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
        "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
        "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
        "props": Object {},
        "qualifier": "hnb659fds",
        "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
        "useLookupRoleForStackOperations": true,
      },
      "tags": TagManager {
        "initialTagPriority": 50,
        "priorities": Map {},
        "renderedTags": "<unresolved-lazy>",
        "resourceTypeName": "aws:cdk:stack",
        "tagFormatter": KeyValueFormatter {},
        "tagPropertyName": "tags",
        "tags": Map {},
      },
      "templateFile": "stack.template.json",
      "templateOptions": Object {},
      "terminationProtection": undefined,
      Symbol(@aws-cdk/core.DependableTrait): Object {
        "dependencyRoots": Array [
          [Circular],
        ],
      },
    },
    "users": Array [],
    Symbol(@aws-cdk/core.DependableTrait): Object {
      "dependencyRoots": Array [
        [Circular],
      ],
    },
  },
  "dependables": Map {
    Object {
      "Action": "cloudwatch:DescribeAlarms",
      "Effect": "Allow",
      "Resource": "*",
    } => DependencyGroup {
      "_deps": Array [],
      Symbol(@aws-cdk/core.DependableTrait): Object {
        "dependencyRoots": Array [],
      },
    },
  },
  "env": Object {
    "account": "\${Token[AWS.AccountId.0]}",
    "region": "\${Token[AWS.Region.4]}",
  },
  "grantPrincipal": [Circular],
  "inlinePolicies": Object {},
  "managedPolicies": Array [],
  "node": Node {
    "_children": Object {
      "DefaultPolicy": Policy {
        "_allowCrossEnvironment": false,
        "_physicalName": "\${Token[TOKEN.3140]}",
        "_policyName": "\${Token[TOKEN.3140]}",
        "document": Object {
          "Statement": Array [
            Object {
              "Action": "cloudwatch:DescribeAlarms",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "env": Object {
          "account": "\${Token[AWS.AccountId.0]}",
          "region": "\${Token[AWS.Region.4]}",
        },
        "force": false,
        "groups": Array [],
        "node": Node {
          "_children": Object {
            "Resource": CfnPolicyConditional {
              "_cfnProperties": Object {
                "groups": Array [
                  "#{Token[TOKEN.3143]}",
                ],
                "policyDocument": Object {
                  "Statement": Array [
                    Object {
                      "Action": "cloudwatch:DescribeAlarms",
                      "Effect": "Allow",
                      "Resource": "*",
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "policyName": "\${Token[TOKEN.3140]}",
                "roles": Array [
                  "#{Token[TOKEN.3141]}",
                ],
                "users": Array [
                  "#{Token[TOKEN.3142]}",
                ],
              },
              "cfnOptions": Object {},
              "cfnResourceType": "AWS::IAM::Policy",
              "dependsOn": Set {},
              "groups": Array [
                "#{Token[TOKEN.3143]}",
              ],
              "logicalId": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3144]}",
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3144]}",
                    "trace": undefined,
                    "type": "aws:cdk:logicalId",
                  },
                ],
                "_validations": Array [],
                "host": [Circular],
                "id": "Resource",
                "scope": [Circular],
              },
              "policyDocument": Object {
                "Statement": Array [
                  Object {
                    "Action": "cloudwatch:DescribeAlarms",
                    "Effect": "Allow",
                    "Resource": "*",
                  },
                ],
                "Version": "2012-10-17",
              },
              "policyName": "\${Token[TOKEN.3140]}",
              "rawOverrides": Object {},
              "roles": Array [
                "#{Token[TOKEN.3141]}",
              ],
              "stack": Stack {
                "_logicalIds": LogicalIDs {
                  "renames": Object {},
                  "reverse": Object {},
                },
                "_missingContext": Array [],
                "_stackDependencies": Object {},
                "_stackName": "stack",
                "_versionReportingEnabled": undefined,
                "account": "\${Token[AWS.AccountId.0]}",
                "artifactId": "stack",
                "environment": "aws://unknown-account/unknown-region",
                "node": Node {
                  "_children": Object {
                    "F": Function {
                      "_allowCrossEnvironment": true,
                      "_architecture": undefined,
                      "_functionUrlInvocationGrants": Object {},
                      "_invocationGrants": Object {},
                      "_layers": Array [],
                      "_physicalName": "testFunction",
                      "_warnIfCurrentVersionCalled": false,
                      "architecture": Architecture {
                        "dockerPlatform": "linux/amd64",
                        "name": "x86_64",
                      },
                      "canCreatePermissions": true,
                      "currentVersionOptions": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "environment": Object {},
                      "functionArn": "\${Token[TOKEN.3115]}",
                      "functionName": "\${Token[TOKEN.3114]}",
                      "grantPrincipal": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3101]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3105]}",
                              "attrRoleId": "\${Token[TOKEN.3106]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3101]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3101]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3107]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3107]}",
                        "roleId": "\${Token[TOKEN.3106]}",
                        "roleName": "\${Token[TOKEN.3109]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3110]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3107]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3112]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3110]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3103]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3101]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3105]}",
                                        "attrRoleId": "\${Token[TOKEN.3106]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3103]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3101]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3101]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3107]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3107]}",
                                  "roleId": "\${Token[TOKEN.3106]}",
                                  "roleName": "\${Token[TOKEN.3109]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3107]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "permissionsNode": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3110]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3107]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3112]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3110]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3103]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3101]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3105]}",
                                        "attrRoleId": "\${Token[TOKEN.3106]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3103]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3101]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3101]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3107]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3107]}",
                                  "roleId": "\${Token[TOKEN.3106]}",
                                  "roleName": "\${Token[TOKEN.3109]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3107]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "physicalName": "testFunction",
                      "role": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3101]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3105]}",
                              "attrRoleId": "\${Token[TOKEN.3106]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3101]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3101]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3107]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3107]}",
                        "roleId": "\${Token[TOKEN.3106]}",
                        "roleName": "\${Token[TOKEN.3109]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "runtime": Runtime {
                        "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "family": 0,
                        "name": "nodejs14.x",
                        "supportsCodeGuruProfiling": false,
                        "supportsInlineCode": true,
                      },
                      "stack": [Circular],
                      "timeout": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Table": Table {
                      "_allowCrossEnvironment": true,
                      "_physicalName": "testTable",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": "PROVISIONED",
                      "encryptionKey": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "globalReplicaCustomResources": Array [],
                      "globalSecondaryIndexes": Array [],
                      "indexScaling": Map {},
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "localSecondaryIndexes": Array [],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnTable {
                            "_cfnProperties": Object {
                              "attributeDefinitions": Array [
                                Object {
                                  "attributeName": "id",
                                  "attributeType": "S",
                                },
                              ],
                              "billingMode": undefined,
                              "contributorInsightsSpecification": undefined,
                              "globalSecondaryIndexes": "<unresolved-lazy>",
                              "keySchema": Array [
                                Object {
                                  "attributeName": "id",
                                  "keyType": "HASH",
                                },
                              ],
                              "kinesisStreamSpecification": undefined,
                              "localSecondaryIndexes": "<unresolved-lazy>",
                              "pointInTimeRecoverySpecification": undefined,
                              "provisionedThroughput": Object {
                                "readCapacityUnits": 5,
                                "writeCapacityUnits": 5,
                              },
                              "sseSpecification": undefined,
                              "streamSpecification": undefined,
                              "tableClass": undefined,
                              "tableName": "testTable",
                              "timeToLiveSpecification": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3117]}",
                            "attrStreamArn": "\${Token[TOKEN.3118]}",
                            "attributeDefinitions": Array [
                              Object {
                                "attributeName": "id",
                                "attributeType": "S",
                              },
                            ],
                            "billingMode": undefined,
                            "cfnOptions": Object {
                              "deletionPolicy": "Retain",
                              "updateReplacePolicy": "Retain",
                            },
                            "cfnResourceType": "AWS::DynamoDB::Table",
                            "contributorInsightsSpecification": undefined,
                            "dependsOn": Set {},
                            "globalSecondaryIndexes": "<unresolved-lazy>",
                            "keySchema": Array [
                              Object {
                                "attributeName": "id",
                                "keyType": "HASH",
                              },
                            ],
                            "kinesisStreamSpecification": undefined,
                            "localSecondaryIndexes": "<unresolved-lazy>",
                            "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "pointInTimeRecoverySpecification": undefined,
                            "provisionedThroughput": Object {
                              "readCapacityUnits": 5,
                              "writeCapacityUnits": 5,
                            },
                            "rawOverrides": Object {},
                            "sseSpecification": undefined,
                            "stack": [Circular],
                            "streamSpecification": undefined,
                            "tableClass": undefined,
                            "tableName": "testTable",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::DynamoDB::Table",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeToLiveSpecification": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ScalingRole": Import {
                            "_allowCrossEnvironment": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "ScalingRole",
                              "scope": [Circular],
                            },
                            "physicalName": "\${Token[TOKEN.3122]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[TOKEN.3121]}",
                            "trace": undefined,
                            "type": "aws:cdk:hasPhysicalName",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Table",
                        "scope": [Circular],
                      },
                      "nonKeyAttributes": Set {},
                      "physicalName": "testTable",
                      "regionalArns": Array [],
                      "scalingRole": Import {
                        "_allowCrossEnvironment": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "ScalingRole",
                          "scope": [Circular],
                        },
                        "physicalName": "\${Token[TOKEN.3122]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "secondaryIndexSchemas": Map {},
                      "stack": [Circular],
                      "table": CfnTable {
                        "_cfnProperties": Object {
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "contributorInsightsSpecification": undefined,
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "sseSpecification": undefined,
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "timeToLiveSpecification": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3117]}",
                        "attrStreamArn": "\${Token[TOKEN.3118]}",
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "cfnOptions": Object {
                          "deletionPolicy": "Retain",
                          "updateReplacePolicy": "Retain",
                        },
                        "cfnResourceType": "AWS::DynamoDB::Table",
                        "contributorInsightsSpecification": undefined,
                        "dependsOn": Set {},
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "rawOverrides": Object {},
                        "sseSpecification": undefined,
                        "stack": [Circular],
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::DynamoDB::Table",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeToLiveSpecification": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "tableArn": "\${Token[TOKEN.3119]}",
                      "tableName": "\${Token[TOKEN.3121]}",
                      "tablePartitionKey": Object {
                        "name": "id",
                        "type": "S",
                      },
                      "tableScaling": Object {},
                      "tableStreamArn": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "fn": StateMachine {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnStateMachine {
                            "_cfnProperties": Object {
                              "definitionString": "\${Token[TOKEN.3133]}",
                              "loggingConfiguration": undefined,
                              "roleArn": "\${Token[TOKEN.3130]}",
                              "stateMachineName": "\${Token[TOKEN.3123]}",
                              "stateMachineType": "EXPRESS",
                              "tracingConfiguration": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3135]}",
                            "attrName": "\${Token[TOKEN.3136]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::StepFunctions::StateMachine",
                            "definition": undefined,
                            "definitionS3Location": undefined,
                            "definitionString": "\${Token[TOKEN.3145]}",
                            "definitionSubstitutions": undefined,
                            "dependsOn": Set {},
                            "loggingConfiguration": undefined,
                            "logicalId": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                [Circular],
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "rawOverrides": Object {},
                            "roleArn": "\${Token[TOKEN.3130]}",
                            "stack": [Circular],
                            "stateMachineName": "\${Token[TOKEN.3123]}",
                            "stateMachineType": "EXPRESS",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::StepFunctions::StateMachine",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "tracingConfiguration": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "Role": [Circular],
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "fn",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3123]}",
                      "role": [Circular],
                      "stack": [Circular],
                      "stateMachineArn": "\${Token[TOKEN.3139]}",
                      "stateMachineName": "\${Token[TOKEN.3137]}",
                      "stateMachineType": "EXPRESS",
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "stack",
                  "scope": App {
                    "_assemblyBuilder": CloudAssemblyBuilder {
                      "artifacts": Object {},
                      "assetOutdir": "/tmp/cdk.outkVN8g5",
                      "missing": Array [],
                      "outdir": "/tmp/cdk.outkVN8g5",
                      "parentBuilder": undefined,
                    },
                    "account": undefined,
                    "node": Node {
                      "_children": Object {
                        "Tree": TreeMetadata {
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Tree",
                            "scope": [Circular],
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "stack": [Circular],
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "",
                      "scope": undefined,
                    },
                    "parentStage": undefined,
                    "region": undefined,
                    "stageName": "",
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "region": "\${Token[AWS.Region.4]}",
                "synthesizer": DefaultStackSynthesizer {
                  "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_stack": [Circular],
                  "assetManifest": AssetManifestBuilder {
                    "dockerImages": Object {},
                    "files": Object {},
                  },
                  "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
                  "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "bucketPrefix": "",
                  "dockerTagPrefix": "",
                  "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
                  "props": Object {},
                  "qualifier": "hnb659fds",
                  "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "useLookupRoleForStackOperations": true,
                },
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "aws:cdk:stack",
                  "tagFormatter": KeyValueFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "templateFile": "stack.template.json",
                "templateOptions": Object {},
                "terminationProtection": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "users": Array [
                "#{Token[TOKEN.3142]}",
              ],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [
            Object {
              "validate": [Function],
            },
          ],
          "host": [Circular],
          "id": "DefaultPolicy",
          "scope": [Circular],
        },
        "physicalName": "\${Token[TOKEN.3140]}",
        "referenceTaken": false,
        "roles": Array [
          [Circular],
        ],
        "stack": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3115]}",
                "functionName": "\${Token[TOKEN.3114]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3101]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3105]}",
                        "attrRoleId": "\${Token[TOKEN.3106]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3101]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3101]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3107]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3107]}",
                  "roleId": "\${Token[TOKEN.3106]}",
                  "roleName": "\${Token[TOKEN.3109]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3110]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3107]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3112]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3110]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3107]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3110]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3107]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3112]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3110]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3107]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3101]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3105]}",
                        "attrRoleId": "\${Token[TOKEN.3106]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3101]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3101]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3107]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3107]}",
                  "roleId": "\${Token[TOKEN.3106]}",
                  "roleName": "\${Token[TOKEN.3109]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3117]}",
                      "attrStreamArn": "\${Token[TOKEN.3118]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3122]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3121]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3122]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3117]}",
                  "attrStreamArn": "\${Token[TOKEN.3118]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3119]}",
                "tableName": "\${Token[TOKEN.3121]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": StateMachine {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnStateMachine {
                      "_cfnProperties": Object {
                        "definitionString": "\${Token[TOKEN.3133]}",
                        "loggingConfiguration": undefined,
                        "roleArn": "\${Token[TOKEN.3130]}",
                        "stateMachineName": "\${Token[TOKEN.3123]}",
                        "stateMachineType": "EXPRESS",
                        "tracingConfiguration": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3135]}",
                      "attrName": "\${Token[TOKEN.3136]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::StepFunctions::StateMachine",
                      "definition": undefined,
                      "definitionS3Location": undefined,
                      "definitionString": "\${Token[TOKEN.3145]}",
                      "definitionSubstitutions": undefined,
                      "dependsOn": Set {},
                      "loggingConfiguration": undefined,
                      "logicalId": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          [Circular],
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "rawOverrides": Object {},
                      "roleArn": "\${Token[TOKEN.3130]}",
                      "stack": [Circular],
                      "stateMachineName": "\${Token[TOKEN.3123]}",
                      "stateMachineType": "EXPRESS",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::StepFunctions::StateMachine",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "tracingConfiguration": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Role": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "fn",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3123]}",
                "role": [Circular],
                "stack": [Circular],
                "stateMachineArn": "\${Token[TOKEN.3139]}",
                "stateMachineName": "\${Token[TOKEN.3137]}",
                "stateMachineType": "EXPRESS",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.outkVN8g5",
                "missing": Array [],
                "outdir": "/tmp/cdk.outkVN8g5",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "users": Array [],
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
      "Resource": CfnRole {
        "_cfnProperties": Object {
          "assumeRolePolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": Object {
                  "Service": "\${Token[states.amazonaws.com.3125]}",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "description": undefined,
          "managedPolicyArns": Array [
            "#{Token[TOKEN.3126]}",
          ],
          "maxSessionDuration": undefined,
          "path": undefined,
          "permissionsBoundary": undefined,
          "policies": undefined,
          "roleName": "\${Token[TOKEN.3124]}",
        },
        "assumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "\${Token[states.amazonaws.com.3125]}",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "attrArn": "\${Token[TOKEN.3128]}",
        "attrRoleId": "\${Token[TOKEN.3129]}",
        "cfnOptions": Object {},
        "cfnResourceType": "AWS::IAM::Role",
        "dependsOn": Set {},
        "description": undefined,
        "logicalId": "\${Token[stack.fn.Role.Resource.LogicalID.3127]}",
        "managedPolicyArns": Array [
          "#{Token[TOKEN.3126]}",
        ],
        "maxSessionDuration": undefined,
        "node": Node {
          "_children": Object {},
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [
            Object {
              "data": "\${Token[stack.fn.Role.Resource.LogicalID.3127]}",
              "trace": undefined,
              "type": "aws:cdk:logicalId",
            },
          ],
          "_validations": Array [],
          "host": [Circular],
          "id": "Resource",
          "scope": [Circular],
        },
        "path": undefined,
        "permissionsBoundary": undefined,
        "policies": undefined,
        "rawOverrides": Object {},
        "roleName": "\${Token[TOKEN.3124]}",
        "stack": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3115]}",
                "functionName": "\${Token[TOKEN.3114]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3101]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3105]}",
                        "attrRoleId": "\${Token[TOKEN.3106]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3101]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3101]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3107]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3107]}",
                  "roleId": "\${Token[TOKEN.3106]}",
                  "roleName": "\${Token[TOKEN.3109]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3110]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3107]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3112]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3110]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3107]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3110]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3107]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3112]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3110]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3107]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3101]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3105]}",
                        "attrRoleId": "\${Token[TOKEN.3106]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3101]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3101]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3107]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3107]}",
                  "roleId": "\${Token[TOKEN.3106]}",
                  "roleName": "\${Token[TOKEN.3109]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3117]}",
                      "attrStreamArn": "\${Token[TOKEN.3118]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3122]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3121]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3122]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3117]}",
                  "attrStreamArn": "\${Token[TOKEN.3118]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3119]}",
                "tableName": "\${Token[TOKEN.3121]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": StateMachine {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnStateMachine {
                      "_cfnProperties": Object {
                        "definitionString": "\${Token[TOKEN.3133]}",
                        "loggingConfiguration": undefined,
                        "roleArn": "\${Token[TOKEN.3130]}",
                        "stateMachineName": "\${Token[TOKEN.3123]}",
                        "stateMachineType": "EXPRESS",
                        "tracingConfiguration": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3135]}",
                      "attrName": "\${Token[TOKEN.3136]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::StepFunctions::StateMachine",
                      "definition": undefined,
                      "definitionS3Location": undefined,
                      "definitionString": "\${Token[TOKEN.3145]}",
                      "definitionSubstitutions": undefined,
                      "dependsOn": Set {},
                      "loggingConfiguration": undefined,
                      "logicalId": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          [Circular],
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "rawOverrides": Object {},
                      "roleArn": "\${Token[TOKEN.3130]}",
                      "stack": [Circular],
                      "stateMachineName": "\${Token[TOKEN.3123]}",
                      "stateMachineType": "EXPRESS",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::StepFunctions::StateMachine",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "tracingConfiguration": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Role": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "fn",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3123]}",
                "role": [Circular],
                "stack": [Circular],
                "stateMachineArn": "\${Token[TOKEN.3139]}",
                "stateMachineName": "\${Token[TOKEN.3137]}",
                "stateMachineType": "EXPRESS",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.outkVN8g5",
                "missing": Array [],
                "outdir": "/tmp/cdk.outkVN8g5",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "tags": TagManager {
          "initialTagPriority": 50,
          "priorities": Map {},
          "renderedTags": "<unresolved-lazy>",
          "resourceTypeName": "AWS::IAM::Role",
          "tagFormatter": StandardFormatter {},
          "tagPropertyName": "tags",
          "tags": Map {},
        },
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
    },
    "_context": Object {},
    "_dependencies": Set {},
    "_locked": false,
    "_metadata": Array [],
    "_validations": Array [
      Object {
        "validate": [Function],
      },
    ],
    "host": [Circular],
    "id": "Role",
    "scope": StateMachine {
      "_allowCrossEnvironment": false,
      "_physicalName": undefined,
      "env": Object {
        "account": "\${Token[AWS.AccountId.0]}",
        "region": "\${Token[AWS.Region.4]}",
      },
      "node": Node {
        "_children": Object {
          "Resource": CfnStateMachine {
            "_cfnProperties": Object {
              "definitionString": "\${Token[TOKEN.3133]}",
              "loggingConfiguration": undefined,
              "roleArn": "\${Token[TOKEN.3130]}",
              "stateMachineName": "\${Token[TOKEN.3123]}",
              "stateMachineType": "EXPRESS",
              "tracingConfiguration": undefined,
            },
            "attrArn": "\${Token[TOKEN.3135]}",
            "attrName": "\${Token[TOKEN.3136]}",
            "cfnOptions": Object {},
            "cfnResourceType": "AWS::StepFunctions::StateMachine",
            "definition": undefined,
            "definitionS3Location": undefined,
            "definitionString": "\${Token[TOKEN.3145]}",
            "definitionSubstitutions": undefined,
            "dependsOn": Set {},
            "loggingConfiguration": undefined,
            "logicalId": "\${Token[stack.fn.Resource.LogicalID.3134]}",
            "node": Node {
              "_children": Object {},
              "_context": Object {},
              "_dependencies": Set {
                [Circular],
              },
              "_locked": false,
              "_metadata": Array [
                Object {
                  "data": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                  "trace": undefined,
                  "type": "aws:cdk:logicalId",
                },
              ],
              "_validations": Array [],
              "host": [Circular],
              "id": "Resource",
              "scope": [Circular],
            },
            "rawOverrides": Object {},
            "roleArn": "\${Token[TOKEN.3130]}",
            "stack": Stack {
              "_logicalIds": LogicalIDs {
                "renames": Object {},
                "reverse": Object {},
              },
              "_missingContext": Array [],
              "_stackDependencies": Object {},
              "_stackName": "stack",
              "_versionReportingEnabled": undefined,
              "account": "\${Token[AWS.AccountId.0]}",
              "artifactId": "stack",
              "environment": "aws://unknown-account/unknown-region",
              "node": Node {
                "_children": Object {
                  "F": Function {
                    "_allowCrossEnvironment": true,
                    "_architecture": undefined,
                    "_functionUrlInvocationGrants": Object {},
                    "_invocationGrants": Object {},
                    "_layers": Array [],
                    "_physicalName": "testFunction",
                    "_warnIfCurrentVersionCalled": false,
                    "architecture": Architecture {
                      "dockerPlatform": "linux/amd64",
                      "name": "x86_64",
                    },
                    "canCreatePermissions": true,
                    "currentVersionOptions": undefined,
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "environment": Object {},
                    "functionArn": "\${Token[TOKEN.3115]}",
                    "functionName": "\${Token[TOKEN.3114]}",
                    "grantPrincipal": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnFunction {
                          "_cfnProperties": Object {
                            "architectures": undefined,
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3110]}",
                            ],
                            "memorySize": undefined,
                            "packageType": undefined,
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3107]}",
                            "runtime": "nodejs14.x",
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                          },
                          "architectures": undefined,
                          "attrArn": "\${Token[TOKEN.3112]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::Lambda::Function",
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "dependsOn": Set {},
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3110]}",
                          ],
                          "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                          "memorySize": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {
                              Role {
                                "_allowCrossEnvironment": false,
                                "_didSplit": false,
                                "_physicalName": undefined,
                                "assumeRoleAction": "sts:AssumeRole",
                                "assumeRolePolicy": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attachedPolicies": AttachedPolicies {
                                  "policies": Array [],
                                },
                                "dependables": Map {},
                                "env": Object {
                                  "account": "\${Token[AWS.AccountId.0]}",
                                  "region": "\${Token[AWS.Region.4]}",
                                },
                                "grantPrincipal": [Circular],
                                "inlinePolicies": Object {},
                                "managedPolicies": Array [
                                  AwsManagedPolicy {
                                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                  },
                                ],
                                "node": Node {
                                  "_children": Object {
                                    "Resource": CfnRole {
                                      "_cfnProperties": Object {
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "description": undefined,
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3103]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "roleName": "\${Token[TOKEN.3101]}",
                                      },
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "attrArn": "\${Token[TOKEN.3105]}",
                                      "attrRoleId": "\${Token[TOKEN.3106]}",
                                      "cfnOptions": Object {},
                                      "cfnResourceType": "AWS::IAM::Role",
                                      "dependsOn": Set {},
                                      "description": undefined,
                                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3103]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "node": Node {
                                        "_children": Object {},
                                        "_context": Object {},
                                        "_dependencies": Set {},
                                        "_locked": false,
                                        "_metadata": Array [
                                          Object {
                                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                            "trace": undefined,
                                            "type": "aws:cdk:logicalId",
                                          },
                                        ],
                                        "_validations": Array [],
                                        "host": [Circular],
                                        "id": "Resource",
                                        "scope": [Circular],
                                      },
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "rawOverrides": Object {},
                                      "roleName": "\${Token[TOKEN.3101]}",
                                      "stack": [Circular],
                                      "tags": TagManager {
                                        "initialTagPriority": 50,
                                        "priorities": Map {},
                                        "renderedTags": "<unresolved-lazy>",
                                        "resourceTypeName": "AWS::IAM::Role",
                                        "tagFormatter": StandardFormatter {},
                                        "tagPropertyName": "tags",
                                        "tags": Map {},
                                      },
                                      Symbol(@aws-cdk/core.DependableTrait): Object {
                                        "dependencyRoots": Array [
                                          [Circular],
                                        ],
                                      },
                                    },
                                  },
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [],
                                  "_validations": Array [
                                    Object {
                                      "validate": [Function],
                                    },
                                  ],
                                  "host": [Circular],
                                  "id": "ServiceRole",
                                  "scope": [Circular],
                                },
                                "permissionsBoundary": undefined,
                                "physicalName": "\${Token[TOKEN.3101]}",
                                "policyFragment": PrincipalPolicyFragment {
                                  "conditions": Object {},
                                  "principalJson": Object {
                                    "AWS": Array [
                                      "\${Token[TOKEN.3107]}",
                                    ],
                                  },
                                },
                                "principalAccount": "\${Token[AWS.AccountId.0]}",
                                "roleArn": "\${Token[TOKEN.3107]}",
                                "roleId": "\${Token[TOKEN.3106]}",
                                "roleName": "\${Token[TOKEN.3109]}",
                                "stack": [Circular],
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "packageType": undefined,
                          "rawOverrides": Object {},
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3107]}",
                          "runtime": "nodejs14.x",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::Lambda::Function",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "ServiceRole": Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3101]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3105]}",
                                "attrRoleId": "\${Token[TOKEN.3106]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3101]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3101]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3107]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3107]}",
                          "roleId": "\${Token[TOKEN.3106]}",
                          "roleName": "\${Token[TOKEN.3109]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "F",
                      "scope": [Circular],
                    },
                    "permissionsNode": Node {
                      "_children": Object {
                        "Resource": CfnFunction {
                          "_cfnProperties": Object {
                            "architectures": undefined,
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3110]}",
                            ],
                            "memorySize": undefined,
                            "packageType": undefined,
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3107]}",
                            "runtime": "nodejs14.x",
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                          },
                          "architectures": undefined,
                          "attrArn": "\${Token[TOKEN.3112]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::Lambda::Function",
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "dependsOn": Set {},
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3110]}",
                          ],
                          "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                          "memorySize": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {
                              Role {
                                "_allowCrossEnvironment": false,
                                "_didSplit": false,
                                "_physicalName": undefined,
                                "assumeRoleAction": "sts:AssumeRole",
                                "assumeRolePolicy": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attachedPolicies": AttachedPolicies {
                                  "policies": Array [],
                                },
                                "dependables": Map {},
                                "env": Object {
                                  "account": "\${Token[AWS.AccountId.0]}",
                                  "region": "\${Token[AWS.Region.4]}",
                                },
                                "grantPrincipal": [Circular],
                                "inlinePolicies": Object {},
                                "managedPolicies": Array [
                                  AwsManagedPolicy {
                                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                  },
                                ],
                                "node": Node {
                                  "_children": Object {
                                    "Resource": CfnRole {
                                      "_cfnProperties": Object {
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "description": undefined,
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3103]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "roleName": "\${Token[TOKEN.3101]}",
                                      },
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "attrArn": "\${Token[TOKEN.3105]}",
                                      "attrRoleId": "\${Token[TOKEN.3106]}",
                                      "cfnOptions": Object {},
                                      "cfnResourceType": "AWS::IAM::Role",
                                      "dependsOn": Set {},
                                      "description": undefined,
                                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3103]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "node": Node {
                                        "_children": Object {},
                                        "_context": Object {},
                                        "_dependencies": Set {},
                                        "_locked": false,
                                        "_metadata": Array [
                                          Object {
                                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                            "trace": undefined,
                                            "type": "aws:cdk:logicalId",
                                          },
                                        ],
                                        "_validations": Array [],
                                        "host": [Circular],
                                        "id": "Resource",
                                        "scope": [Circular],
                                      },
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "rawOverrides": Object {},
                                      "roleName": "\${Token[TOKEN.3101]}",
                                      "stack": [Circular],
                                      "tags": TagManager {
                                        "initialTagPriority": 50,
                                        "priorities": Map {},
                                        "renderedTags": "<unresolved-lazy>",
                                        "resourceTypeName": "AWS::IAM::Role",
                                        "tagFormatter": StandardFormatter {},
                                        "tagPropertyName": "tags",
                                        "tags": Map {},
                                      },
                                      Symbol(@aws-cdk/core.DependableTrait): Object {
                                        "dependencyRoots": Array [
                                          [Circular],
                                        ],
                                      },
                                    },
                                  },
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [],
                                  "_validations": Array [
                                    Object {
                                      "validate": [Function],
                                    },
                                  ],
                                  "host": [Circular],
                                  "id": "ServiceRole",
                                  "scope": [Circular],
                                },
                                "permissionsBoundary": undefined,
                                "physicalName": "\${Token[TOKEN.3101]}",
                                "policyFragment": PrincipalPolicyFragment {
                                  "conditions": Object {},
                                  "principalJson": Object {
                                    "AWS": Array [
                                      "\${Token[TOKEN.3107]}",
                                    ],
                                  },
                                },
                                "principalAccount": "\${Token[AWS.AccountId.0]}",
                                "roleArn": "\${Token[TOKEN.3107]}",
                                "roleId": "\${Token[TOKEN.3106]}",
                                "roleName": "\${Token[TOKEN.3109]}",
                                "stack": [Circular],
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "packageType": undefined,
                          "rawOverrides": Object {},
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3107]}",
                          "runtime": "nodejs14.x",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::Lambda::Function",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "ServiceRole": Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3101]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3105]}",
                                "attrRoleId": "\${Token[TOKEN.3106]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3101]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3101]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3107]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3107]}",
                          "roleId": "\${Token[TOKEN.3106]}",
                          "roleName": "\${Token[TOKEN.3109]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "F",
                      "scope": [Circular],
                    },
                    "physicalName": "testFunction",
                    "role": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "runtime": Runtime {
                      "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                      "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                      "family": 0,
                      "name": "nodejs14.x",
                      "supportsCodeGuruProfiling": false,
                      "supportsInlineCode": true,
                    },
                    "stack": [Circular],
                    "timeout": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "Table": Table {
                    "_allowCrossEnvironment": true,
                    "_physicalName": "testTable",
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": "PROVISIONED",
                    "encryptionKey": undefined,
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "globalReplicaCustomResources": Array [],
                    "globalSecondaryIndexes": Array [],
                    "indexScaling": Map {},
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "localSecondaryIndexes": Array [],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnTable {
                          "_cfnProperties": Object {
                            "attributeDefinitions": Array [
                              Object {
                                "attributeName": "id",
                                "attributeType": "S",
                              },
                            ],
                            "billingMode": undefined,
                            "contributorInsightsSpecification": undefined,
                            "globalSecondaryIndexes": "<unresolved-lazy>",
                            "keySchema": Array [
                              Object {
                                "attributeName": "id",
                                "keyType": "HASH",
                              },
                            ],
                            "kinesisStreamSpecification": undefined,
                            "localSecondaryIndexes": "<unresolved-lazy>",
                            "pointInTimeRecoverySpecification": undefined,
                            "provisionedThroughput": Object {
                              "readCapacityUnits": 5,
                              "writeCapacityUnits": 5,
                            },
                            "sseSpecification": undefined,
                            "streamSpecification": undefined,
                            "tableClass": undefined,
                            "tableName": "testTable",
                            "timeToLiveSpecification": undefined,
                          },
                          "attrArn": "\${Token[TOKEN.3117]}",
                          "attrStreamArn": "\${Token[TOKEN.3118]}",
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "cfnOptions": Object {
                            "deletionPolicy": "Retain",
                            "updateReplacePolicy": "Retain",
                          },
                          "cfnResourceType": "AWS::DynamoDB::Table",
                          "contributorInsightsSpecification": undefined,
                          "dependsOn": Set {},
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "rawOverrides": Object {},
                          "sseSpecification": undefined,
                          "stack": [Circular],
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::DynamoDB::Table",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          "timeToLiveSpecification": undefined,
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "ScalingRole": Import {
                          "_allowCrossEnvironment": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "ScalingRole",
                            "scope": [Circular],
                          },
                          "physicalName": "\${Token[TOKEN.3122]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[TOKEN.3121]}",
                          "trace": undefined,
                          "type": "aws:cdk:hasPhysicalName",
                        },
                      ],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "Table",
                      "scope": [Circular],
                    },
                    "nonKeyAttributes": Set {},
                    "physicalName": "testTable",
                    "regionalArns": Array [],
                    "scalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3122]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "secondaryIndexSchemas": Map {},
                    "stack": [Circular],
                    "table": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3117]}",
                      "attrStreamArn": "\${Token[TOKEN.3118]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "tableArn": "\${Token[TOKEN.3119]}",
                    "tableName": "\${Token[TOKEN.3121]}",
                    "tablePartitionKey": Object {
                      "name": "id",
                      "type": "S",
                    },
                    "tableScaling": Object {},
                    "tableStreamArn": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "fn": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "stack",
                "scope": App {
                  "_assemblyBuilder": CloudAssemblyBuilder {
                    "artifacts": Object {},
                    "assetOutdir": "/tmp/cdk.outkVN8g5",
                    "missing": Array [],
                    "outdir": "/tmp/cdk.outkVN8g5",
                    "parentBuilder": undefined,
                  },
                  "account": undefined,
                  "node": Node {
                    "_children": Object {
                      "Tree": TreeMetadata {
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Tree",
                          "scope": [Circular],
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "stack": [Circular],
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "",
                    "scope": undefined,
                  },
                  "parentStage": undefined,
                  "region": undefined,
                  "stageName": "",
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "region": "\${Token[AWS.Region.4]}",
              "synthesizer": DefaultStackSynthesizer {
                "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
                "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
                "_stack": [Circular],
                "assetManifest": AssetManifestBuilder {
                  "dockerImages": Object {},
                  "files": Object {},
                },
                "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
                "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                "bucketPrefix": "",
                "dockerTagPrefix": "",
                "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
                "props": Object {},
                "qualifier": "hnb659fds",
                "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                "useLookupRoleForStackOperations": true,
              },
              "tags": TagManager {
                "initialTagPriority": 50,
                "priorities": Map {},
                "renderedTags": "<unresolved-lazy>",
                "resourceTypeName": "aws:cdk:stack",
                "tagFormatter": KeyValueFormatter {},
                "tagPropertyName": "tags",
                "tags": Map {},
              },
              "templateFile": "stack.template.json",
              "templateOptions": Object {},
              "terminationProtection": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "stateMachineName": "\${Token[TOKEN.3123]}",
            "stateMachineType": "EXPRESS",
            "tags": TagManager {
              "initialTagPriority": 50,
              "priorities": Map {},
              "renderedTags": "<unresolved-lazy>",
              "resourceTypeName": "AWS::StepFunctions::StateMachine",
              "tagFormatter": StandardFormatter {},
              "tagPropertyName": "tags",
              "tags": Map {},
            },
            "tracingConfiguration": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "Role": [Circular],
        },
        "_context": Object {},
        "_dependencies": Set {},
        "_locked": false,
        "_metadata": Array [],
        "_validations": Array [],
        "host": [Circular],
        "id": "fn",
        "scope": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3115]}",
                "functionName": "\${Token[TOKEN.3114]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3101]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3105]}",
                        "attrRoleId": "\${Token[TOKEN.3106]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3101]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3101]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3107]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3107]}",
                  "roleId": "\${Token[TOKEN.3106]}",
                  "roleName": "\${Token[TOKEN.3109]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3110]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3107]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3112]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3110]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3107]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3110]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3107]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3112]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3110]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3103]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3101]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3105]}",
                                  "attrRoleId": "\${Token[TOKEN.3106]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3101]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3101]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3107]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3107]}",
                            "roleId": "\${Token[TOKEN.3106]}",
                            "roleName": "\${Token[TOKEN.3109]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3107]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3101]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3105]}",
                        "attrRoleId": "\${Token[TOKEN.3106]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3101]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3101]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3107]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3107]}",
                  "roleId": "\${Token[TOKEN.3106]}",
                  "roleName": "\${Token[TOKEN.3109]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3117]}",
                      "attrStreamArn": "\${Token[TOKEN.3118]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3122]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3121]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3122]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3117]}",
                  "attrStreamArn": "\${Token[TOKEN.3118]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3119]}",
                "tableName": "\${Token[TOKEN.3121]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": [Circular],
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.outkVN8g5",
                "missing": Array [],
                "outdir": "/tmp/cdk.outkVN8g5",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "physicalName": "\${Token[TOKEN.3123]}",
      "role": [Circular],
      "stack": Stack {
        "_logicalIds": LogicalIDs {
          "renames": Object {},
          "reverse": Object {},
        },
        "_missingContext": Array [],
        "_stackDependencies": Object {},
        "_stackName": "stack",
        "_versionReportingEnabled": undefined,
        "account": "\${Token[AWS.AccountId.0]}",
        "artifactId": "stack",
        "environment": "aws://unknown-account/unknown-region",
        "node": Node {
          "_children": Object {
            "F": Function {
              "_allowCrossEnvironment": true,
              "_architecture": undefined,
              "_functionUrlInvocationGrants": Object {},
              "_invocationGrants": Object {},
              "_layers": Array [],
              "_physicalName": "testFunction",
              "_warnIfCurrentVersionCalled": false,
              "architecture": Architecture {
                "dockerPlatform": "linux/amd64",
                "name": "x86_64",
              },
              "canCreatePermissions": true,
              "currentVersionOptions": undefined,
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "environment": Object {},
              "functionArn": "\${Token[TOKEN.3115]}",
              "functionName": "\${Token[TOKEN.3114]}",
              "grantPrincipal": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3101]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3105]}",
                      "attrRoleId": "\${Token[TOKEN.3106]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3103]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3101]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3101]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3107]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3107]}",
                "roleId": "\${Token[TOKEN.3106]}",
                "roleName": "\${Token[TOKEN.3109]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "node": Node {
                "_children": Object {
                  "Resource": CfnFunction {
                    "_cfnProperties": Object {
                      "architectures": undefined,
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3110]}",
                      ],
                      "memorySize": undefined,
                      "packageType": undefined,
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3107]}",
                      "runtime": "nodejs14.x",
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                    },
                    "architectures": undefined,
                    "attrArn": "\${Token[TOKEN.3112]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::Lambda::Function",
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "dependsOn": Set {},
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3110]}",
                    ],
                    "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                    "memorySize": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {
                        Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3101]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3105]}",
                                "attrRoleId": "\${Token[TOKEN.3106]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3101]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3101]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3107]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3107]}",
                          "roleId": "\${Token[TOKEN.3106]}",
                          "roleName": "\${Token[TOKEN.3109]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "packageType": undefined,
                    "rawOverrides": Object {},
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3107]}",
                    "runtime": "nodejs14.x",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::Lambda::Function",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "ServiceRole": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3101]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3105]}",
                          "attrRoleId": "\${Token[TOKEN.3106]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3101]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3101]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3107]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3107]}",
                    "roleId": "\${Token[TOKEN.3106]}",
                    "roleName": "\${Token[TOKEN.3109]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "F",
                "scope": [Circular],
              },
              "permissionsNode": Node {
                "_children": Object {
                  "Resource": CfnFunction {
                    "_cfnProperties": Object {
                      "architectures": undefined,
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3110]}",
                      ],
                      "memorySize": undefined,
                      "packageType": undefined,
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3107]}",
                      "runtime": "nodejs14.x",
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                    },
                    "architectures": undefined,
                    "attrArn": "\${Token[TOKEN.3112]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::Lambda::Function",
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "dependsOn": Set {},
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3110]}",
                    ],
                    "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                    "memorySize": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {
                        Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3103]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3101]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3105]}",
                                "attrRoleId": "\${Token[TOKEN.3106]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3103]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3101]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3101]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3107]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3107]}",
                          "roleId": "\${Token[TOKEN.3106]}",
                          "roleName": "\${Token[TOKEN.3109]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "packageType": undefined,
                    "rawOverrides": Object {},
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3107]}",
                    "runtime": "nodejs14.x",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::Lambda::Function",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "ServiceRole": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3101]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3105]}",
                          "attrRoleId": "\${Token[TOKEN.3106]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3103]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3101]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3101]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3107]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3107]}",
                    "roleId": "\${Token[TOKEN.3106]}",
                    "roleName": "\${Token[TOKEN.3109]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "F",
                "scope": [Circular],
              },
              "physicalName": "testFunction",
              "role": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3101]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3105]}",
                      "attrRoleId": "\${Token[TOKEN.3106]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3103]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3101]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3101]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3107]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3107]}",
                "roleId": "\${Token[TOKEN.3106]}",
                "roleName": "\${Token[TOKEN.3109]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "runtime": Runtime {
                "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                "family": 0,
                "name": "nodejs14.x",
                "supportsCodeGuruProfiling": false,
                "supportsInlineCode": true,
              },
              "stack": [Circular],
              "timeout": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "Table": Table {
              "_allowCrossEnvironment": true,
              "_physicalName": "testTable",
              "attributeDefinitions": Array [
                Object {
                  "attributeName": "id",
                  "attributeType": "S",
                },
              ],
              "billingMode": "PROVISIONED",
              "encryptionKey": undefined,
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "globalReplicaCustomResources": Array [],
              "globalSecondaryIndexes": Array [],
              "indexScaling": Map {},
              "keySchema": Array [
                Object {
                  "attributeName": "id",
                  "keyType": "HASH",
                },
              ],
              "localSecondaryIndexes": Array [],
              "node": Node {
                "_children": Object {
                  "Resource": CfnTable {
                    "_cfnProperties": Object {
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "contributorInsightsSpecification": undefined,
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "sseSpecification": undefined,
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "timeToLiveSpecification": undefined,
                    },
                    "attrArn": "\${Token[TOKEN.3117]}",
                    "attrStreamArn": "\${Token[TOKEN.3118]}",
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "cfnOptions": Object {
                      "deletionPolicy": "Retain",
                      "updateReplacePolicy": "Retain",
                    },
                    "cfnResourceType": "AWS::DynamoDB::Table",
                    "contributorInsightsSpecification": undefined,
                    "dependsOn": Set {},
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "rawOverrides": Object {},
                    "sseSpecification": undefined,
                    "stack": [Circular],
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::DynamoDB::Table",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeToLiveSpecification": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "ScalingRole": Import {
                    "_allowCrossEnvironment": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "ScalingRole",
                      "scope": [Circular],
                    },
                    "physicalName": "\${Token[TOKEN.3122]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[TOKEN.3121]}",
                    "trace": undefined,
                    "type": "aws:cdk:hasPhysicalName",
                  },
                ],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "Table",
                "scope": [Circular],
              },
              "nonKeyAttributes": Set {},
              "physicalName": "testTable",
              "regionalArns": Array [],
              "scalingRole": Import {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "ScalingRole",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3122]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "secondaryIndexSchemas": Map {},
              "stack": [Circular],
              "table": CfnTable {
                "_cfnProperties": Object {
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "contributorInsightsSpecification": undefined,
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "sseSpecification": undefined,
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "timeToLiveSpecification": undefined,
                },
                "attrArn": "\${Token[TOKEN.3117]}",
                "attrStreamArn": "\${Token[TOKEN.3118]}",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": undefined,
                "cfnOptions": Object {
                  "deletionPolicy": "Retain",
                  "updateReplacePolicy": "Retain",
                },
                "cfnResourceType": "AWS::DynamoDB::Table",
                "contributorInsightsSpecification": undefined,
                "dependsOn": Set {},
                "globalSecondaryIndexes": "<unresolved-lazy>",
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "kinesisStreamSpecification": undefined,
                "localSecondaryIndexes": "<unresolved-lazy>",
                "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "pointInTimeRecoverySpecification": undefined,
                "provisionedThroughput": Object {
                  "readCapacityUnits": 5,
                  "writeCapacityUnits": 5,
                },
                "rawOverrides": Object {},
                "sseSpecification": undefined,
                "stack": [Circular],
                "streamSpecification": undefined,
                "tableClass": undefined,
                "tableName": "testTable",
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::DynamoDB::Table",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeToLiveSpecification": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "tableArn": "\${Token[TOKEN.3119]}",
              "tableName": "\${Token[TOKEN.3121]}",
              "tablePartitionKey": Object {
                "name": "id",
                "type": "S",
              },
              "tableScaling": Object {},
              "tableStreamArn": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "fn": [Circular],
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [],
          "host": [Circular],
          "id": "stack",
          "scope": App {
            "_assemblyBuilder": CloudAssemblyBuilder {
              "artifacts": Object {},
              "assetOutdir": "/tmp/cdk.outkVN8g5",
              "missing": Array [],
              "outdir": "/tmp/cdk.outkVN8g5",
              "parentBuilder": undefined,
            },
            "account": undefined,
            "node": Node {
              "_children": Object {
                "Tree": TreeMetadata {
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Tree",
                    "scope": [Circular],
                  },
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "stack": [Circular],
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "",
              "scope": undefined,
            },
            "parentStage": undefined,
            "region": undefined,
            "stageName": "",
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
        },
        "region": "\${Token[AWS.Region.4]}",
        "synthesizer": DefaultStackSynthesizer {
          "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
          "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
          "_stack": [Circular],
          "assetManifest": AssetManifestBuilder {
            "dockerImages": Object {},
            "files": Object {},
          },
          "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
          "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          "bucketPrefix": "",
          "dockerTagPrefix": "",
          "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
          "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
          "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
          "props": Object {},
          "qualifier": "hnb659fds",
          "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
          "useLookupRoleForStackOperations": true,
        },
        "tags": TagManager {
          "initialTagPriority": 50,
          "priorities": Map {},
          "renderedTags": "<unresolved-lazy>",
          "resourceTypeName": "aws:cdk:stack",
          "tagFormatter": KeyValueFormatter {},
          "tagPropertyName": "tags",
          "tags": Map {},
        },
        "templateFile": "stack.template.json",
        "templateOptions": Object {},
        "terminationProtection": undefined,
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
      "stateMachineArn": "\${Token[TOKEN.3139]}",
      "stateMachineName": "\${Token[TOKEN.3137]}",
      "stateMachineType": "EXPRESS",
      Symbol(@aws-cdk/core.DependableTrait): Object {
        "dependencyRoots": Array [
          [Circular],
        ],
      },
    },
  },
  "permissionsBoundary": undefined,
  "physicalName": "\${Token[TOKEN.3124]}",
  "policyFragment": PrincipalPolicyFragment {
    "conditions": Object {},
    "principalJson": Object {
      "AWS": Array [
        "\${Token[TOKEN.3130]}",
      ],
    },
  },
  "principalAccount": "\${Token[AWS.AccountId.0]}",
  "roleArn": "\${Token[TOKEN.3130]}",
  "roleId": "\${Token[TOKEN.3129]}",
  "roleName": "\${Token[TOKEN.3132]}",
  "stack": Stack {
    "_logicalIds": LogicalIDs {
      "renames": Object {},
      "reverse": Object {},
    },
    "_missingContext": Array [],
    "_stackDependencies": Object {},
    "_stackName": "stack",
    "_versionReportingEnabled": undefined,
    "account": "\${Token[AWS.AccountId.0]}",
    "artifactId": "stack",
    "environment": "aws://unknown-account/unknown-region",
    "node": Node {
      "_children": Object {
        "F": Function {
          "_allowCrossEnvironment": true,
          "_architecture": undefined,
          "_functionUrlInvocationGrants": Object {},
          "_invocationGrants": Object {},
          "_layers": Array [],
          "_physicalName": "testFunction",
          "_warnIfCurrentVersionCalled": false,
          "architecture": Architecture {
            "dockerPlatform": "linux/amd64",
            "name": "x86_64",
          },
          "canCreatePermissions": true,
          "currentVersionOptions": undefined,
          "env": Object {
            "account": "\${Token[AWS.AccountId.0]}",
            "region": "\${Token[AWS.Region.4]}",
          },
          "environment": Object {},
          "functionArn": "\${Token[TOKEN.3115]}",
          "functionName": "\${Token[TOKEN.3114]}",
          "grantPrincipal": Role {
            "_allowCrossEnvironment": false,
            "_didSplit": false,
            "_physicalName": undefined,
            "assumeRoleAction": "sts:AssumeRole",
            "assumeRolePolicy": Object {
              "Statement": Array [
                Object {
                  "Action": "sts:AssumeRole",
                  "Effect": "Allow",
                  "Principal": Object {
                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "attachedPolicies": AttachedPolicies {
              "policies": Array [],
            },
            "dependables": Map {},
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "grantPrincipal": [Circular],
            "inlinePolicies": Object {},
            "managedPolicies": Array [
              AwsManagedPolicy {
                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              },
            ],
            "node": Node {
              "_children": Object {
                "Resource": CfnRole {
                  "_cfnProperties": Object {
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "description": undefined,
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3103]}",
                    ],
                    "maxSessionDuration": undefined,
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "roleName": "\${Token[TOKEN.3101]}",
                  },
                  "assumeRolePolicyDocument": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attrArn": "\${Token[TOKEN.3105]}",
                  "attrRoleId": "\${Token[TOKEN.3106]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::IAM::Role",
                  "dependsOn": Set {},
                  "description": undefined,
                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                  "managedPolicyArns": Array [
                    "#{Token[TOKEN.3103]}",
                  ],
                  "maxSessionDuration": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "path": undefined,
                  "permissionsBoundary": undefined,
                  "policies": undefined,
                  "rawOverrides": Object {},
                  "roleName": "\${Token[TOKEN.3101]}",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::IAM::Role",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "ServiceRole",
              "scope": [Circular],
            },
            "permissionsBoundary": undefined,
            "physicalName": "\${Token[TOKEN.3101]}",
            "policyFragment": PrincipalPolicyFragment {
              "conditions": Object {},
              "principalJson": Object {
                "AWS": Array [
                  "\${Token[TOKEN.3107]}",
                ],
              },
            },
            "principalAccount": "\${Token[AWS.AccountId.0]}",
            "roleArn": "\${Token[TOKEN.3107]}",
            "roleId": "\${Token[TOKEN.3106]}",
            "roleName": "\${Token[TOKEN.3109]}",
            "stack": [Circular],
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "node": Node {
            "_children": Object {
              "Resource": CfnFunction {
                "_cfnProperties": Object {
                  "architectures": undefined,
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3110]}",
                  ],
                  "memorySize": undefined,
                  "packageType": undefined,
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3107]}",
                  "runtime": "nodejs14.x",
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                },
                "architectures": undefined,
                "attrArn": "\${Token[TOKEN.3112]}",
                "cfnOptions": Object {},
                "cfnResourceType": "AWS::Lambda::Function",
                "code": Object {
                  "imageUri": undefined,
                  "s3Bucket": undefined,
                  "s3Key": undefined,
                  "s3ObjectVersion": undefined,
                  "zipFile": "exports.handler = function() { return null; }",
                },
                "codeSigningConfigArn": undefined,
                "deadLetterConfig": undefined,
                "dependsOn": Set {},
                "description": undefined,
                "environment": "<unresolved-lazy>",
                "ephemeralStorage": undefined,
                "fileSystemConfigs": undefined,
                "functionName": "testFunction",
                "handler": "index.handler",
                "imageConfig": undefined,
                "kmsKeyArn": undefined,
                "layers": Array [
                  "#{Token[TOKEN.3110]}",
                ],
                "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                "memorySize": undefined,
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {
                    Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "packageType": undefined,
                "rawOverrides": Object {},
                "reservedConcurrentExecutions": undefined,
                "role": "\${Token[TOKEN.3107]}",
                "runtime": "nodejs14.x",
                "stack": [Circular],
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::Lambda::Function",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeout": undefined,
                "tracingConfig": undefined,
                "vpcConfig": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "ServiceRole": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3101]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3105]}",
                      "attrRoleId": "\${Token[TOKEN.3106]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3103]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3101]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3101]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3107]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3107]}",
                "roleId": "\${Token[TOKEN.3106]}",
                "roleName": "\${Token[TOKEN.3109]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "F",
            "scope": [Circular],
          },
          "permissionsNode": Node {
            "_children": Object {
              "Resource": CfnFunction {
                "_cfnProperties": Object {
                  "architectures": undefined,
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3110]}",
                  ],
                  "memorySize": undefined,
                  "packageType": undefined,
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3107]}",
                  "runtime": "nodejs14.x",
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                },
                "architectures": undefined,
                "attrArn": "\${Token[TOKEN.3112]}",
                "cfnOptions": Object {},
                "cfnResourceType": "AWS::Lambda::Function",
                "code": Object {
                  "imageUri": undefined,
                  "s3Bucket": undefined,
                  "s3Key": undefined,
                  "s3ObjectVersion": undefined,
                  "zipFile": "exports.handler = function() { return null; }",
                },
                "codeSigningConfigArn": undefined,
                "deadLetterConfig": undefined,
                "dependsOn": Set {},
                "description": undefined,
                "environment": "<unresolved-lazy>",
                "ephemeralStorage": undefined,
                "fileSystemConfigs": undefined,
                "functionName": "testFunction",
                "handler": "index.handler",
                "imageConfig": undefined,
                "kmsKeyArn": undefined,
                "layers": Array [
                  "#{Token[TOKEN.3110]}",
                ],
                "logicalId": "\${Token[stack.F.Resource.LogicalID.3111]}",
                "memorySize": undefined,
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {
                    Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3103]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3101]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3105]}",
                            "attrRoleId": "\${Token[TOKEN.3106]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3103]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3101]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3101]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3107]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3107]}",
                      "roleId": "\${Token[TOKEN.3106]}",
                      "roleName": "\${Token[TOKEN.3109]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.F.Resource.LogicalID.3111]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "packageType": undefined,
                "rawOverrides": Object {},
                "reservedConcurrentExecutions": undefined,
                "role": "\${Token[TOKEN.3107]}",
                "runtime": "nodejs14.x",
                "stack": [Circular],
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::Lambda::Function",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeout": undefined,
                "tracingConfig": undefined,
                "vpcConfig": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "ServiceRole": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3102]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3102]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3103]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3101]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3102]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3105]}",
                      "attrRoleId": "\${Token[TOKEN.3106]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3103]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3101]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3101]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3107]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3107]}",
                "roleId": "\${Token[TOKEN.3106]}",
                "roleName": "\${Token[TOKEN.3109]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "F",
            "scope": [Circular],
          },
          "physicalName": "testFunction",
          "role": Role {
            "_allowCrossEnvironment": false,
            "_didSplit": false,
            "_physicalName": undefined,
            "assumeRoleAction": "sts:AssumeRole",
            "assumeRolePolicy": Object {
              "Statement": Array [
                Object {
                  "Action": "sts:AssumeRole",
                  "Effect": "Allow",
                  "Principal": Object {
                    "Service": "\${Token[lambda.amazonaws.com.3102]}",
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "attachedPolicies": AttachedPolicies {
              "policies": Array [],
            },
            "dependables": Map {},
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "grantPrincipal": [Circular],
            "inlinePolicies": Object {},
            "managedPolicies": Array [
              AwsManagedPolicy {
                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              },
            ],
            "node": Node {
              "_children": Object {
                "Resource": CfnRole {
                  "_cfnProperties": Object {
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3102]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "description": undefined,
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3103]}",
                    ],
                    "maxSessionDuration": undefined,
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "roleName": "\${Token[TOKEN.3101]}",
                  },
                  "assumeRolePolicyDocument": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3102]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attrArn": "\${Token[TOKEN.3105]}",
                  "attrRoleId": "\${Token[TOKEN.3106]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::IAM::Role",
                  "dependsOn": Set {},
                  "description": undefined,
                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                  "managedPolicyArns": Array [
                    "#{Token[TOKEN.3103]}",
                  ],
                  "maxSessionDuration": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3104]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "path": undefined,
                  "permissionsBoundary": undefined,
                  "policies": undefined,
                  "rawOverrides": Object {},
                  "roleName": "\${Token[TOKEN.3101]}",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::IAM::Role",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "ServiceRole",
              "scope": [Circular],
            },
            "permissionsBoundary": undefined,
            "physicalName": "\${Token[TOKEN.3101]}",
            "policyFragment": PrincipalPolicyFragment {
              "conditions": Object {},
              "principalJson": Object {
                "AWS": Array [
                  "\${Token[TOKEN.3107]}",
                ],
              },
            },
            "principalAccount": "\${Token[AWS.AccountId.0]}",
            "roleArn": "\${Token[TOKEN.3107]}",
            "roleId": "\${Token[TOKEN.3106]}",
            "roleName": "\${Token[TOKEN.3109]}",
            "stack": [Circular],
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "runtime": Runtime {
            "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
            "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
            "family": 0,
            "name": "nodejs14.x",
            "supportsCodeGuruProfiling": false,
            "supportsInlineCode": true,
          },
          "stack": [Circular],
          "timeout": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "Table": Table {
          "_allowCrossEnvironment": true,
          "_physicalName": "testTable",
          "attributeDefinitions": Array [
            Object {
              "attributeName": "id",
              "attributeType": "S",
            },
          ],
          "billingMode": "PROVISIONED",
          "encryptionKey": undefined,
          "env": Object {
            "account": "\${Token[AWS.AccountId.0]}",
            "region": "\${Token[AWS.Region.4]}",
          },
          "globalReplicaCustomResources": Array [],
          "globalSecondaryIndexes": Array [],
          "indexScaling": Map {},
          "keySchema": Array [
            Object {
              "attributeName": "id",
              "keyType": "HASH",
            },
          ],
          "localSecondaryIndexes": Array [],
          "node": Node {
            "_children": Object {
              "Resource": CfnTable {
                "_cfnProperties": Object {
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "contributorInsightsSpecification": undefined,
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "sseSpecification": undefined,
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "timeToLiveSpecification": undefined,
                },
                "attrArn": "\${Token[TOKEN.3117]}",
                "attrStreamArn": "\${Token[TOKEN.3118]}",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": undefined,
                "cfnOptions": Object {
                  "deletionPolicy": "Retain",
                  "updateReplacePolicy": "Retain",
                },
                "cfnResourceType": "AWS::DynamoDB::Table",
                "contributorInsightsSpecification": undefined,
                "dependsOn": Set {},
                "globalSecondaryIndexes": "<unresolved-lazy>",
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "kinesisStreamSpecification": undefined,
                "localSecondaryIndexes": "<unresolved-lazy>",
                "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "pointInTimeRecoverySpecification": undefined,
                "provisionedThroughput": Object {
                  "readCapacityUnits": 5,
                  "writeCapacityUnits": 5,
                },
                "rawOverrides": Object {},
                "sseSpecification": undefined,
                "stack": [Circular],
                "streamSpecification": undefined,
                "tableClass": undefined,
                "tableName": "testTable",
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::DynamoDB::Table",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeToLiveSpecification": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "ScalingRole": Import {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "ScalingRole",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3122]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [
              Object {
                "data": "\${Token[TOKEN.3121]}",
                "trace": undefined,
                "type": "aws:cdk:hasPhysicalName",
              },
            ],
            "_validations": Array [
              Object {
                "validate": [Function],
              },
            ],
            "host": [Circular],
            "id": "Table",
            "scope": [Circular],
          },
          "nonKeyAttributes": Set {},
          "physicalName": "testTable",
          "regionalArns": Array [],
          "scalingRole": Import {
            "_allowCrossEnvironment": false,
            "_physicalName": undefined,
            "assumeRoleAction": "sts:AssumeRole",
            "attachedPolicies": AttachedPolicies {
              "policies": Array [],
            },
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "grantPrincipal": [Circular],
            "node": Node {
              "_children": Object {},
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "ScalingRole",
              "scope": [Circular],
            },
            "physicalName": "\${Token[TOKEN.3122]}",
            "policyFragment": PrincipalPolicyFragment {
              "conditions": Object {},
              "principalJson": Object {
                "AWS": Array [
                  "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                ],
              },
            },
            "principalAccount": "\${Token[AWS.AccountId.0]}",
            "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
            "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
            "stack": [Circular],
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "secondaryIndexSchemas": Map {},
          "stack": [Circular],
          "table": CfnTable {
            "_cfnProperties": Object {
              "attributeDefinitions": Array [
                Object {
                  "attributeName": "id",
                  "attributeType": "S",
                },
              ],
              "billingMode": undefined,
              "contributorInsightsSpecification": undefined,
              "globalSecondaryIndexes": "<unresolved-lazy>",
              "keySchema": Array [
                Object {
                  "attributeName": "id",
                  "keyType": "HASH",
                },
              ],
              "kinesisStreamSpecification": undefined,
              "localSecondaryIndexes": "<unresolved-lazy>",
              "pointInTimeRecoverySpecification": undefined,
              "provisionedThroughput": Object {
                "readCapacityUnits": 5,
                "writeCapacityUnits": 5,
              },
              "sseSpecification": undefined,
              "streamSpecification": undefined,
              "tableClass": undefined,
              "tableName": "testTable",
              "timeToLiveSpecification": undefined,
            },
            "attrArn": "\${Token[TOKEN.3117]}",
            "attrStreamArn": "\${Token[TOKEN.3118]}",
            "attributeDefinitions": Array [
              Object {
                "attributeName": "id",
                "attributeType": "S",
              },
            ],
            "billingMode": undefined,
            "cfnOptions": Object {
              "deletionPolicy": "Retain",
              "updateReplacePolicy": "Retain",
            },
            "cfnResourceType": "AWS::DynamoDB::Table",
            "contributorInsightsSpecification": undefined,
            "dependsOn": Set {},
            "globalSecondaryIndexes": "<unresolved-lazy>",
            "keySchema": Array [
              Object {
                "attributeName": "id",
                "keyType": "HASH",
              },
            ],
            "kinesisStreamSpecification": undefined,
            "localSecondaryIndexes": "<unresolved-lazy>",
            "logicalId": "\${Token[stack.Table.Resource.LogicalID.3116]}",
            "node": Node {
              "_children": Object {},
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [
                Object {
                  "data": "\${Token[stack.Table.Resource.LogicalID.3116]}",
                  "trace": undefined,
                  "type": "aws:cdk:logicalId",
                },
              ],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "Resource",
              "scope": [Circular],
            },
            "pointInTimeRecoverySpecification": undefined,
            "provisionedThroughput": Object {
              "readCapacityUnits": 5,
              "writeCapacityUnits": 5,
            },
            "rawOverrides": Object {},
            "sseSpecification": undefined,
            "stack": [Circular],
            "streamSpecification": undefined,
            "tableClass": undefined,
            "tableName": "testTable",
            "tags": TagManager {
              "initialTagPriority": 50,
              "priorities": Map {},
              "renderedTags": "<unresolved-lazy>",
              "resourceTypeName": "AWS::DynamoDB::Table",
              "tagFormatter": StandardFormatter {},
              "tagPropertyName": "tags",
              "tags": Map {},
            },
            "timeToLiveSpecification": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "tableArn": "\${Token[TOKEN.3119]}",
          "tableName": "\${Token[TOKEN.3121]}",
          "tablePartitionKey": Object {
            "name": "id",
            "type": "S",
          },
          "tableScaling": Object {},
          "tableStreamArn": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "fn": StateMachine {
          "_allowCrossEnvironment": false,
          "_physicalName": undefined,
          "env": Object {
            "account": "\${Token[AWS.AccountId.0]}",
            "region": "\${Token[AWS.Region.4]}",
          },
          "node": Node {
            "_children": Object {
              "Resource": CfnStateMachine {
                "_cfnProperties": Object {
                  "definitionString": "\${Token[TOKEN.3133]}",
                  "loggingConfiguration": undefined,
                  "roleArn": "\${Token[TOKEN.3130]}",
                  "stateMachineName": "\${Token[TOKEN.3123]}",
                  "stateMachineType": "EXPRESS",
                  "tracingConfiguration": undefined,
                },
                "attrArn": "\${Token[TOKEN.3135]}",
                "attrName": "\${Token[TOKEN.3136]}",
                "cfnOptions": Object {},
                "cfnResourceType": "AWS::StepFunctions::StateMachine",
                "definition": undefined,
                "definitionS3Location": undefined,
                "definitionString": "\${Token[TOKEN.3145]}",
                "definitionSubstitutions": undefined,
                "dependsOn": Set {},
                "loggingConfiguration": undefined,
                "logicalId": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {
                    [Circular],
                  },
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.fn.Resource.LogicalID.3134]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "rawOverrides": Object {},
                "roleArn": "\${Token[TOKEN.3130]}",
                "stack": [Circular],
                "stateMachineName": "\${Token[TOKEN.3123]}",
                "stateMachineType": "EXPRESS",
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::StepFunctions::StateMachine",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "tracingConfiguration": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Role": [Circular],
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "fn",
            "scope": [Circular],
          },
          "physicalName": "\${Token[TOKEN.3123]}",
          "role": [Circular],
          "stack": [Circular],
          "stateMachineArn": "\${Token[TOKEN.3139]}",
          "stateMachineName": "\${Token[TOKEN.3137]}",
          "stateMachineType": "EXPRESS",
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "_context": Object {},
      "_dependencies": Set {},
      "_locked": false,
      "_metadata": Array [],
      "_validations": Array [],
      "host": [Circular],
      "id": "stack",
      "scope": App {
        "_assemblyBuilder": CloudAssemblyBuilder {
          "artifacts": Object {},
          "assetOutdir": "/tmp/cdk.outkVN8g5",
          "missing": Array [],
          "outdir": "/tmp/cdk.outkVN8g5",
          "parentBuilder": undefined,
        },
        "account": undefined,
        "node": Node {
          "_children": Object {
            "Tree": TreeMetadata {
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "Tree",
                "scope": [Circular],
              },
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "stack": [Circular],
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [],
          "host": [Circular],
          "id": "",
          "scope": undefined,
        },
        "parentStage": undefined,
        "region": undefined,
        "stageName": "",
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
    },
    "region": "\${Token[AWS.Region.4]}",
    "synthesizer": DefaultStackSynthesizer {
      "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
      "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
      "_stack": [Circular],
      "assetManifest": AssetManifestBuilder {
        "dockerImages": Object {},
        "files": Object {},
      },
      "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
      "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
      "bucketPrefix": "",
      "dockerTagPrefix": "",
      "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
      "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
      "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
      "props": Object {},
      "qualifier": "hnb659fds",
      "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
      "useLookupRoleForStackOperations": true,
    },
    "tags": TagManager {
      "initialTagPriority": 50,
      "priorities": Map {},
      "renderedTags": "<unresolved-lazy>",
      "resourceTypeName": "aws:cdk:stack",
      "tagFormatter": KeyValueFormatter {},
      "tagPropertyName": "tags",
      "tags": Map {},
    },
    "templateFile": "stack.template.json",
    "templateOptions": Object {},
    "terminationProtection": undefined,
    Symbol(@aws-cdk/core.DependableTrait): Object {
      "dependencyRoots": Array [
        [Circular],
      ],
    },
  },
  Symbol(@aws-cdk/core.DependableTrait): Object {
    "dependencyRoots": Array [
      [Circular],
    ],
  },
}
`;

exports[`if (?? === typeof x) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if_1__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "StringEquals": "undefined",
                  "Variable": "$.heap0",
                },
              ],
            },
          ],
          "Next": "return \\"undefined\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_2__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_2__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_2__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_2__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap1",
                },
                Object {
                  "StringEquals": "string",
                  "Variable": "$.heap1",
                },
              ],
            },
          ],
          "Next": "return \\"string\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_3__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_3__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_3__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_3__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "StringEquals": "boolean",
                  "Variable": "$.heap2",
                },
              ],
            },
          ],
          "Next": "return \\"boolean\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_4__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_4__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_4__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_4__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap3",
                },
                Object {
                  "StringEquals": "number",
                  "Variable": "$.heap3",
                },
              ],
            },
          ],
          "Next": "return \\"number\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_5__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_5__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_5__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_5__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap4",
                },
                Object {
                  "StringEquals": "bigint",
                  "Variable": "$.heap4",
                },
              ],
            },
          ],
          "Next": "return \\"bigint\\"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "boolean__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return \\"null\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_1__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_1__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_1__if(input.id === undefined)",
      "Type": "Choice",
    },
    "number__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "number__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "object__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "object__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return \\"bigint\\"": Object {
      "End": true,
      "Result": "bigint",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"boolean\\"": Object {
      "End": true,
      "Result": "boolean",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"null\\"": Object {
      "End": true,
      "Result": "null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"number\\"": Object {
      "End": true,
      "Result": "number",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"string\\"": Object {
      "End": true,
      "Result": "string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"undefined\\"": Object {
      "End": true,
      "Result": "undefined",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "string__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "string__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "undefined__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "undefined__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`if (typeof x === ??) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if_1__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "StringEquals": "undefined",
                  "Variable": "$.heap0",
                },
              ],
            },
          ],
          "Next": "return \\"undefined\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_2__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_2__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_2__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_2__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap1",
                },
                Object {
                  "StringEquals": "string",
                  "Variable": "$.heap1",
                },
              ],
            },
          ],
          "Next": "return \\"string\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_3__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_3__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_3__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_3__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "StringEquals": "boolean",
                  "Variable": "$.heap2",
                },
              ],
            },
          ],
          "Next": "return \\"boolean\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_4__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_4__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_4__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_4__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap3",
                },
                Object {
                  "StringEquals": "number",
                  "Variable": "$.heap3",
                },
              ],
            },
          ],
          "Next": "return \\"number\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_5__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_5__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_5__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_5__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap4",
                },
                Object {
                  "StringEquals": "bigint",
                  "Variable": "$.heap4",
                },
              ],
            },
          ],
          "Next": "return \\"bigint\\"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "boolean__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return \\"null\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_1__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_1__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_1__if(input.id === undefined)",
      "Type": "Choice",
    },
    "number__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "number__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "object__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "object__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return \\"bigint\\"": Object {
      "End": true,
      "Result": "bigint",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"boolean\\"": Object {
      "End": true,
      "Result": "boolean",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"null\\"": Object {
      "End": true,
      "Result": "null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"number\\"": Object {
      "End": true,
      "Result": "number",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"string\\"": Object {
      "End": true,
      "Result": "string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"undefined\\"": Object {
      "End": true,
      "Result": "undefined",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "string__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "string__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "undefined__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "undefined__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return \\"yup\\"",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val === \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "a",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val !== \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val !== \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.val",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.val",
                      },
                      Object {
                        "StringEquals": "a",
                        "Variable": "$.input.val",
                      },
                    ],
                  },
                ],
              },
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    Object {
                      "StringEquals": "b",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hullo\\"",
        },
        Object {
          "Next": "return \\"woop\\"",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.input.val",
              },
              Object {
                "And": Array [
                  Object {
                    "IsString": true,
                    "Variable": "$.input.val",
                  },
                  Object {
                    "StringEquals": "a",
                    "Variable": "$.input.val",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "return \\"woop\\"",
      "Type": "Choice",
    },
    "return \\"hullo\\"": Object {
      "End": true,
      "Result": "hullo",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if invoke 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if(await task())": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hi\\"",
        },
      ],
      "Default": "return \\"woop\\"",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(await task())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(await task())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return \\"hi\\"": Object {
      "End": true,
      "Result": "hi",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if-else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if-else-if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "world",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return \\"world\\"",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`import from express state machine into machine 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await machine({input: {id: \\"hi\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await machine({input: {id: \\"hi\\"}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "Input": Object {
          "id": "hi",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`import from state machine into state machine 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await machine({input: {id: \\"hi\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await machine({input: {id: \\"hi\\"}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "Input": Object {
          "id": "hi",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`input.b ? task() : task(input) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__false__return if(input.b)": Object {
      "InputPath": "$.heap1",
      "Next": "1__return if(input.b)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return if(input.b)": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__true__return if(input.b)": Object {
      "InputPath": "$.heap0",
      "Next": "1__return if(input.b)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return if(input.b)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return if(input.b)": Object {
      "InputPath": "$.input",
      "Next": "1__false__return if(input.b)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return if(input.b)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.b",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.b",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return if(input.b)",
        },
      ],
      "Default": "false__return if(input.b)",
      "Type": "Choice",
    },
    "true__return if(input.b)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__true__return if(input.b)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`input.list.map((item) => item).filter((item) => item.length > 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.map(function(item)).filter(function(item))": Object {
      "End": true,
      "InputPath": "$.heap0[?(@.length>2)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.map(function(item)).filter(function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.map(function(item)).filter(function(item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.map(function(item)).filter(function(item))",
      "Type": "Choice",
    },
    "end__return input.list.map(function(item)).filter(function(item))": Object {
      "Next": "set__end__return input.list.map(function(item)).filter(function(item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.map(function(item)).filter(function(item))": Object {
      "Next": "check__return input.list.map(function(item)).filter(function(item))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.map(function(item)).filter(function(item))": Object {
      "Next": "check__return input.list.map(function(item)).filter(function(item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": Object {
      "InputPath": "$.item",
      "Next": "handleResult__return input.list.map(function(item)).filter(function(item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "set__end__return input.list.map(function(item)).filter(function(item))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.map(function(item)).filter(function(item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`let and set 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = null",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + \\" world\\"",
      "Result": "hello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + \\" world\\"": Object {
      "Next": "a = \\"hello\\" + 1",
      "Result": "hello world",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + 1": Object {
      "Next": "a = 1 + \\"hello\\"",
      "Result": "hello1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + [\\"world\\"]": Object {
      "Next": "return a",
      "Result": "helloworld",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + null": Object {
      "Next": "a = [null]",
      "Result": "hellonull",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + true": Object {
      "Next": "a = false + \\"hello\\"",
      "Result": "hellotrue",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + {place: \\"world\\"}": Object {
      "Next": "a = \\"hello\\" + [\\"world\\"]",
      "Result": "hello[object Object]",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = -1": Object {
      "Next": "a = -100",
      "Result": -1,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = -100": Object {
      "Next": "a = 1 + 2",
      "Result": -100,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 0": Object {
      "Next": "a = -1",
      "Result": 0,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1 + \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + true",
      "Result": "1hello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1 + 2": Object {
      "Next": "a = \\"hello\\"",
      "Result": 3,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [-1]": Object {
      "Next": "a = [true]",
      "Result": Array [
        -1,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [1]": Object {
      "Next": "a = [-1]",
      "Result": Array [
        1,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [null]": Object {
      "Next": "a = [1]",
      "Result": Array [
        null,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [true]": Object {
      "Next": "a = [{key: \\"value\\"}]",
      "Result": Array [
        true,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [{key: \\"value\\"}]": Object {
      "Next": "a = {key: \\"value\\"}",
      "Result": Array [
        Object {
          "key": "value",
        },
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = a": Object {
      "InputPath": "$.a",
      "Next": "a = \\"hello\\" + {place: \\"world\\"}",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = false": Object {
      "Next": "a = 0",
      "Result": false,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = false + \\"hello\\"": Object {
      "Next": "a = null + \\"hello\\"",
      "Result": "falsehello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "a = true",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null + \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + null",
      "Result": "nullhello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = true": Object {
      "Next": "a = false",
      "Result": true,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {1: \\"value\\"}": Object {
      "Next": "a = a",
      "Result": Object {
        "1": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {key: \\"value\\"}": Object {
      "Next": "a = {1: \\"value\\"}",
      "Result": Object {
        "key": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`let cond; do { cond = task() } while (cond) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "cond = await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.cond",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "cond = await task() 1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "cond = await task() 1": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 2": Object {
      "InputPath": "$.heap0",
      "Next": "cond = await task()",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`let empty 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"b\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"b\\"": Object {
      "Next": "return a",
      "Result": "b",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.filter(item => item.length > 2).map(item => item) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.filter(function(item)).map(function(item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.filter(function(item)).map(function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.filter(function(item)).map(function(item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.filter(function(item)).map(function(item))",
      "Type": "Choice",
    },
    "end__return input.list.filter(function(item)).map(function(item))": Object {
      "Next": "set__end__return input.list.filter(function(item)).map(function(item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.filter(function(item)).map(function(item))": Object {
      "Next": "check__return input.list.filter(function(item)).map(function(item))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.filter(function(item)).map(function(item))": Object {
      "Next": "check__return input.list.filter(function(item)).map(function(item))",
      "Parameters": Object {
        "arr.$": "$.input.list[?(@.length>2)]",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": Object {
      "InputPath": "$.item",
      "Next": "handleResult__return input.list.filter(function(item)).map(function(item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "set__end__return input.list.filter(function(item)).map(function(item))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.filter(function(item)).map(function(item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.filter(item => item.length > 2).map(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.filter(function(item)).map(function(item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.filter(function(item)).map(func",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.filter(function(item)).map(function(item)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.filter(function(item)).map(function(it": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.filter(function(item)).map(function(item",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.filter(function(item)).map(function(item": Object {
      "Next": "set__end__return Promise.all(input.list.filter(function(item)).map(function",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.filter(function(item)).map(func": Object {
      "Next": "check__return Promise.all(input.list.filter(function(item)).map(function(it",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return Promise.all(input.list.filter(function(item)).map(function(item)))": Object {
      "Next": "check__return Promise.all(input.list.filter(function(item)).map(function(it",
      "Parameters": Object {
        "arr.$": "$.input.list[?(@.length>2)]",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.filter(function(item)).map(function": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.filter(function(item)).map(function(item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach((item, i) => if (i == 0) task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function(item, i))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function(item, i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function(item, i))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function(item, i))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function(item, i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function(item, i))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function(item, i))": Object {
      "Next": "1__return input.list.forEach(function(item, i))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function(item, i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return input.list.forEach(function(item, i))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return input.list.forEach(function(item, i))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
      },
      "Type": "Map",
    },
    "return null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__return input.list.forEach(function(item, i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function(item, i))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function(item, i))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach((item, i, list) => if (i == 0) task(item) else task(list[0])) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function(item, i))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(input.list[0])": Object {
      "InputPath": "$.heap2",
      "Next": "tail__return input.list.forEach(function(item, i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function(item, i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function(item, i))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function(item, i))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function(item, i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function(item, i))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function(item, i))": Object {
      "Next": "1__return input.list.forEach(function(item, i))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function(item, i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return task(input.list[0])",
      "Type": "Choice",
    },
    "return input.list.forEach(function(item, i))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return input.list.forEach(function(item, i))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
      },
      "Type": "Map",
    },
    "return task(input.list[0])": Object {
      "InputPath": "$.input.list[0]",
      "Next": "1__return task(input.list[0])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function(item, i))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function(item, i))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach(item => ) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "input.list.forEach(function(item))",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \${a}\${item}": Object {
      "Next": "a = \${a}\${item} 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.item)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "a = \${a}\${item} 1": Object {
      "InputPath": "$.heap1.string",
      "Next": "return null 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "check__input.list.forEach(function(item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__input.list.forEach(function(item))",
      "Type": "Choice",
    },
    "end__input.list.forEach(function(item))": Object {
      "Next": "return null",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.list.forEach(function(item))": Object {
      "Next": "check__input.list.forEach(function(item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "a = \${a}\${item}",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null 1": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__input.list.forEach(function(item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "tail__input.list.forEach(function(item))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__input.list.forEach(function(item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function(item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function(item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function(item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function(item))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function(item))": Object {
      "Next": "1__return input.list.forEach(function(item))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.forEach(function(item))": Object {
      "Next": "check__return input.list.forEach(function(item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function(item))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function(item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map((item, i) => if (i == 0) task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function(item, i)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function(item, i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function(item, i)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function(item, i)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function(item, i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function(item, i)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function(item, i)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function(item, i)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function(item, i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function(item, i)))": Object {
      "Next": "check__return Promise.all(input.list.map(function(item, i)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return Promise.all(input.list.map(function(item, i)))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return Promise.all(input.list.map(function(item, i)))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "return null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "handleResult__return Promise.all(input.list.map(function(item, i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function(item, i)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function(item, i)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map((item, i, list) => if (i == 0) task(item) else task(list[0])) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function(item, i)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(input.list[0])": Object {
      "InputPath": "$.heap2",
      "Next": "handleResult__return Promise.all(input.list.map(function(item, i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function(item, i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function(item, i)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function(item, i)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function(item, i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function(item, i)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function(item, i)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function(item, i)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function(item, i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function(item, i)))": Object {
      "Next": "check__return Promise.all(input.list.map(function(item, i)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return task(input.list[0])",
      "Type": "Choice",
    },
    "return Promise.all(input.list.map(function(item, i)))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return Promise.all(input.list.map(function(item, i)))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "return task(input.list[0])": Object {
      "InputPath": "$.input.list[0]",
      "Next": "1__return task(input.list[0])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function(item, i)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function(item, i)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function(item)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function(item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function(item)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function(item)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function(item)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function(item)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function(item)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function(item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function(item)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function(item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function(item)))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function(item)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function(item)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`nested try-catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Cause": "{\\"message\\":\\"error3\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
    "catch__try 1": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "error2",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try 1",
      "Result": Object {
        "message": "error1",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`non-literal params AWS.SDK.CloudWatch.describeAlarms 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], params: {Al": Object {
      "Next": "return null",
      "Parameters": Object {
        "AlarmNames.$": "$.heap1",
      },
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:deleteAlarms",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "{MetricAlarms} = await $AWS.SDK.CloudWatch.describeAlarms({iamResources: [\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "MetricAlarms": Object {
      "InputPath": "$.heap0['MetricAlarms']",
      "Next": "if(MetricAlarms === undefined)",
      "ResultPath": "$.MetricAlarms",
      "Type": "Pass",
    },
    "a": Object {
      "InputPath": "$.heap1.arr[0]",
      "Next": "return a.AlarmName",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], params: {Alarm": Object {
      "Next": "check__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], params:",
      "Parameters": Object {
        "arr.$": "$.MetricAlarms",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "check__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], params:": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "a",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], params: {",
      "Type": "Choice",
    },
    "end__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], params: {": Object {
      "Next": "set__end__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], para",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], ": Object {
      "Next": "check__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], params:",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "if(MetricAlarms === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.MetricAlarms",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], params: {Alarm",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return a.AlarmName": Object {
      "InputPath": "$.a.AlarmName",
      "Next": "handleResult__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], ",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "set__end__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], para": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__await $AWS.SDK.CloudWatch.deleteAlarms({iamResources: [\\"*\\"], params: {Al",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "{MetricAlarms} = await $AWS.SDK.CloudWatch.describeAlarms({iamResources: [\\"": Object {
      "Next": "MetricAlarms",
      "Parameters": Object {},
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`null coalesce logic 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {null: input.a ?? input.b}": Object {
      "End": true,
      "Parameters": Object {
        "null.$": "$.heap0",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {null: input.a ?? input.b}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return {null: input.a ?? input.b}": Object {
      "InputPath": "$.input.b",
      "Next": "1__return {null: input.a ?? input.b}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return {null: input.a ?? input.b}": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.a",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.a",
            },
          ],
          "Next": "true__return {null: input.a ?? input.b}",
        },
      ],
      "Default": "false__return {null: input.a ?? input.b}",
      "Type": "Choice",
    },
    "true__return {null: input.a ?? input.b}": Object {
      "InputPath": "$.input.a",
      "Next": "1__return {null: input.a ?? input.b}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`overwrite aslServiceName AWS.SDK.CloudWatch.describeAlarms 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{MetricAlarms} = await $AWS.SDK.CloudWatch.describeAlarms({iamResources: [\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "MetricAlarms": Object {
      "InputPath": "$.heap0['MetricAlarms']",
      "Next": "return MetricAlarms",
      "ResultPath": "$.MetricAlarms",
      "Type": "Pass",
    },
    "return MetricAlarms": Object {
      "End": true,
      "InputPath": "$.MetricAlarms",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{MetricAlarms} = await $AWS.SDK.CloudWatch.describeAlarms({iamResources: [\\"": Object {
      "Next": "MetricAlarms",
      "Parameters": Object {},
      "Resource": "arn:aws:states:::aws-sdk:cw:describeAlarms",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`overwrite iamActions AWS.SDK.CloudWatch.describeAlarms 1`] = `
Role {
  "_allowCrossEnvironment": false,
  "_didSplit": false,
  "_physicalName": undefined,
  "assumeRoleAction": "sts:AssumeRole",
  "assumeRolePolicy": Object {
    "Statement": Array [
      Object {
        "Action": "sts:AssumeRole",
        "Effect": "Allow",
        "Principal": Object {
          "Service": "\${Token[states.amazonaws.com.3215]}",
        },
      },
    ],
    "Version": "2012-10-17",
  },
  "attachedPolicies": AttachedPolicies {
    "policies": Array [
      Policy {
        "_allowCrossEnvironment": false,
        "_physicalName": "\${Token[TOKEN.3230]}",
        "_policyName": "\${Token[TOKEN.3230]}",
        "document": Object {
          "Statement": Array [
            Object {
              "Action": "cloudwatch:Describe*",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "env": Object {
          "account": "\${Token[AWS.AccountId.0]}",
          "region": "\${Token[AWS.Region.4]}",
        },
        "force": false,
        "groups": Array [],
        "node": Node {
          "_children": Object {
            "Resource": CfnPolicyConditional {
              "_cfnProperties": Object {
                "groups": Array [
                  "#{Token[TOKEN.3233]}",
                ],
                "policyDocument": Object {
                  "Statement": Array [
                    Object {
                      "Action": "cloudwatch:Describe*",
                      "Effect": "Allow",
                      "Resource": "*",
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "policyName": "\${Token[TOKEN.3230]}",
                "roles": Array [
                  "#{Token[TOKEN.3231]}",
                ],
                "users": Array [
                  "#{Token[TOKEN.3232]}",
                ],
              },
              "cfnOptions": Object {},
              "cfnResourceType": "AWS::IAM::Policy",
              "dependsOn": Set {},
              "groups": Array [
                "#{Token[TOKEN.3233]}",
              ],
              "logicalId": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3234]}",
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3234]}",
                    "trace": undefined,
                    "type": "aws:cdk:logicalId",
                  },
                ],
                "_validations": Array [],
                "host": [Circular],
                "id": "Resource",
                "scope": [Circular],
              },
              "policyDocument": Object {
                "Statement": Array [
                  Object {
                    "Action": "cloudwatch:Describe*",
                    "Effect": "Allow",
                    "Resource": "*",
                  },
                ],
                "Version": "2012-10-17",
              },
              "policyName": "\${Token[TOKEN.3230]}",
              "rawOverrides": Object {},
              "roles": Array [
                "#{Token[TOKEN.3231]}",
              ],
              "stack": Stack {
                "_logicalIds": LogicalIDs {
                  "renames": Object {},
                  "reverse": Object {},
                },
                "_missingContext": Array [],
                "_stackDependencies": Object {},
                "_stackName": "stack",
                "_versionReportingEnabled": undefined,
                "account": "\${Token[AWS.AccountId.0]}",
                "artifactId": "stack",
                "environment": "aws://unknown-account/unknown-region",
                "node": Node {
                  "_children": Object {
                    "F": Function {
                      "_allowCrossEnvironment": true,
                      "_architecture": undefined,
                      "_functionUrlInvocationGrants": Object {},
                      "_invocationGrants": Object {},
                      "_layers": Array [],
                      "_physicalName": "testFunction",
                      "_warnIfCurrentVersionCalled": false,
                      "architecture": Architecture {
                        "dockerPlatform": "linux/amd64",
                        "name": "x86_64",
                      },
                      "canCreatePermissions": true,
                      "currentVersionOptions": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "environment": Object {},
                      "functionArn": "\${Token[TOKEN.3205]}",
                      "functionName": "\${Token[TOKEN.3204]}",
                      "grantPrincipal": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3191]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3195]}",
                              "attrRoleId": "\${Token[TOKEN.3196]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3191]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3191]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3197]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3197]}",
                        "roleId": "\${Token[TOKEN.3196]}",
                        "roleName": "\${Token[TOKEN.3199]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3200]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3197]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3202]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3200]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3193]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3191]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3195]}",
                                        "attrRoleId": "\${Token[TOKEN.3196]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3193]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3191]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3191]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3197]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3197]}",
                                  "roleId": "\${Token[TOKEN.3196]}",
                                  "roleName": "\${Token[TOKEN.3199]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3197]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "permissionsNode": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3200]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3197]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3202]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3200]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3193]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3191]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3195]}",
                                        "attrRoleId": "\${Token[TOKEN.3196]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3193]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3191]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3191]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3197]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3197]}",
                                  "roleId": "\${Token[TOKEN.3196]}",
                                  "roleName": "\${Token[TOKEN.3199]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3197]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "physicalName": "testFunction",
                      "role": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3191]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3195]}",
                              "attrRoleId": "\${Token[TOKEN.3196]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3191]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3191]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3197]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3197]}",
                        "roleId": "\${Token[TOKEN.3196]}",
                        "roleName": "\${Token[TOKEN.3199]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "runtime": Runtime {
                        "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "family": 0,
                        "name": "nodejs14.x",
                        "supportsCodeGuruProfiling": false,
                        "supportsInlineCode": true,
                      },
                      "stack": [Circular],
                      "timeout": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Table": Table {
                      "_allowCrossEnvironment": true,
                      "_physicalName": "testTable",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": "PROVISIONED",
                      "encryptionKey": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "globalReplicaCustomResources": Array [],
                      "globalSecondaryIndexes": Array [],
                      "indexScaling": Map {},
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "localSecondaryIndexes": Array [],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnTable {
                            "_cfnProperties": Object {
                              "attributeDefinitions": Array [
                                Object {
                                  "attributeName": "id",
                                  "attributeType": "S",
                                },
                              ],
                              "billingMode": undefined,
                              "contributorInsightsSpecification": undefined,
                              "globalSecondaryIndexes": "<unresolved-lazy>",
                              "keySchema": Array [
                                Object {
                                  "attributeName": "id",
                                  "keyType": "HASH",
                                },
                              ],
                              "kinesisStreamSpecification": undefined,
                              "localSecondaryIndexes": "<unresolved-lazy>",
                              "pointInTimeRecoverySpecification": undefined,
                              "provisionedThroughput": Object {
                                "readCapacityUnits": 5,
                                "writeCapacityUnits": 5,
                              },
                              "sseSpecification": undefined,
                              "streamSpecification": undefined,
                              "tableClass": undefined,
                              "tableName": "testTable",
                              "timeToLiveSpecification": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3207]}",
                            "attrStreamArn": "\${Token[TOKEN.3208]}",
                            "attributeDefinitions": Array [
                              Object {
                                "attributeName": "id",
                                "attributeType": "S",
                              },
                            ],
                            "billingMode": undefined,
                            "cfnOptions": Object {
                              "deletionPolicy": "Retain",
                              "updateReplacePolicy": "Retain",
                            },
                            "cfnResourceType": "AWS::DynamoDB::Table",
                            "contributorInsightsSpecification": undefined,
                            "dependsOn": Set {},
                            "globalSecondaryIndexes": "<unresolved-lazy>",
                            "keySchema": Array [
                              Object {
                                "attributeName": "id",
                                "keyType": "HASH",
                              },
                            ],
                            "kinesisStreamSpecification": undefined,
                            "localSecondaryIndexes": "<unresolved-lazy>",
                            "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "pointInTimeRecoverySpecification": undefined,
                            "provisionedThroughput": Object {
                              "readCapacityUnits": 5,
                              "writeCapacityUnits": 5,
                            },
                            "rawOverrides": Object {},
                            "sseSpecification": undefined,
                            "stack": [Circular],
                            "streamSpecification": undefined,
                            "tableClass": undefined,
                            "tableName": "testTable",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::DynamoDB::Table",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeToLiveSpecification": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ScalingRole": Import {
                            "_allowCrossEnvironment": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "ScalingRole",
                              "scope": [Circular],
                            },
                            "physicalName": "\${Token[TOKEN.3212]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[TOKEN.3211]}",
                            "trace": undefined,
                            "type": "aws:cdk:hasPhysicalName",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Table",
                        "scope": [Circular],
                      },
                      "nonKeyAttributes": Set {},
                      "physicalName": "testTable",
                      "regionalArns": Array [],
                      "scalingRole": Import {
                        "_allowCrossEnvironment": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "ScalingRole",
                          "scope": [Circular],
                        },
                        "physicalName": "\${Token[TOKEN.3212]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "secondaryIndexSchemas": Map {},
                      "stack": [Circular],
                      "table": CfnTable {
                        "_cfnProperties": Object {
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "contributorInsightsSpecification": undefined,
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "sseSpecification": undefined,
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "timeToLiveSpecification": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3207]}",
                        "attrStreamArn": "\${Token[TOKEN.3208]}",
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "cfnOptions": Object {
                          "deletionPolicy": "Retain",
                          "updateReplacePolicy": "Retain",
                        },
                        "cfnResourceType": "AWS::DynamoDB::Table",
                        "contributorInsightsSpecification": undefined,
                        "dependsOn": Set {},
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "rawOverrides": Object {},
                        "sseSpecification": undefined,
                        "stack": [Circular],
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::DynamoDB::Table",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeToLiveSpecification": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "tableArn": "\${Token[TOKEN.3209]}",
                      "tableName": "\${Token[TOKEN.3211]}",
                      "tablePartitionKey": Object {
                        "name": "id",
                        "type": "S",
                      },
                      "tableScaling": Object {},
                      "tableStreamArn": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "fn": StateMachine {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnStateMachine {
                            "_cfnProperties": Object {
                              "definitionString": "\${Token[TOKEN.3223]}",
                              "loggingConfiguration": undefined,
                              "roleArn": "\${Token[TOKEN.3220]}",
                              "stateMachineName": "\${Token[TOKEN.3213]}",
                              "stateMachineType": "EXPRESS",
                              "tracingConfiguration": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3225]}",
                            "attrName": "\${Token[TOKEN.3226]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::StepFunctions::StateMachine",
                            "definition": undefined,
                            "definitionS3Location": undefined,
                            "definitionString": "\${Token[TOKEN.3235]}",
                            "definitionSubstitutions": undefined,
                            "dependsOn": Set {},
                            "loggingConfiguration": undefined,
                            "logicalId": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                [Circular],
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "rawOverrides": Object {},
                            "roleArn": "\${Token[TOKEN.3220]}",
                            "stack": [Circular],
                            "stateMachineName": "\${Token[TOKEN.3213]}",
                            "stateMachineType": "EXPRESS",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::StepFunctions::StateMachine",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "tracingConfiguration": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "Role": [Circular],
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "fn",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3213]}",
                      "role": [Circular],
                      "stack": [Circular],
                      "stateMachineArn": "\${Token[TOKEN.3229]}",
                      "stateMachineName": "\${Token[TOKEN.3227]}",
                      "stateMachineType": "EXPRESS",
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "stack",
                  "scope": App {
                    "_assemblyBuilder": CloudAssemblyBuilder {
                      "artifacts": Object {},
                      "assetOutdir": "/tmp/cdk.out15GLN6",
                      "missing": Array [],
                      "outdir": "/tmp/cdk.out15GLN6",
                      "parentBuilder": undefined,
                    },
                    "account": undefined,
                    "node": Node {
                      "_children": Object {
                        "Tree": TreeMetadata {
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Tree",
                            "scope": [Circular],
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "stack": [Circular],
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "",
                      "scope": undefined,
                    },
                    "parentStage": undefined,
                    "region": undefined,
                    "stageName": "",
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "region": "\${Token[AWS.Region.4]}",
                "synthesizer": DefaultStackSynthesizer {
                  "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_stack": [Circular],
                  "assetManifest": AssetManifestBuilder {
                    "dockerImages": Object {},
                    "files": Object {},
                  },
                  "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
                  "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "bucketPrefix": "",
                  "dockerTagPrefix": "",
                  "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
                  "props": Object {},
                  "qualifier": "hnb659fds",
                  "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "useLookupRoleForStackOperations": true,
                },
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "aws:cdk:stack",
                  "tagFormatter": KeyValueFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "templateFile": "stack.template.json",
                "templateOptions": Object {},
                "terminationProtection": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "users": Array [
                "#{Token[TOKEN.3232]}",
              ],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [
            Object {
              "validate": [Function],
            },
          ],
          "host": [Circular],
          "id": "DefaultPolicy",
          "scope": [Circular],
        },
        "physicalName": "\${Token[TOKEN.3230]}",
        "referenceTaken": false,
        "roles": Array [
          [Circular],
        ],
        "stack": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3205]}",
                "functionName": "\${Token[TOKEN.3204]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3191]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3195]}",
                        "attrRoleId": "\${Token[TOKEN.3196]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3191]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3191]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3197]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3197]}",
                  "roleId": "\${Token[TOKEN.3196]}",
                  "roleName": "\${Token[TOKEN.3199]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3200]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3197]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3202]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3200]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3197]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3200]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3197]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3202]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3200]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3197]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3191]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3195]}",
                        "attrRoleId": "\${Token[TOKEN.3196]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3191]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3191]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3197]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3197]}",
                  "roleId": "\${Token[TOKEN.3196]}",
                  "roleName": "\${Token[TOKEN.3199]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3207]}",
                      "attrStreamArn": "\${Token[TOKEN.3208]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3212]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3211]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3212]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3207]}",
                  "attrStreamArn": "\${Token[TOKEN.3208]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3209]}",
                "tableName": "\${Token[TOKEN.3211]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": StateMachine {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnStateMachine {
                      "_cfnProperties": Object {
                        "definitionString": "\${Token[TOKEN.3223]}",
                        "loggingConfiguration": undefined,
                        "roleArn": "\${Token[TOKEN.3220]}",
                        "stateMachineName": "\${Token[TOKEN.3213]}",
                        "stateMachineType": "EXPRESS",
                        "tracingConfiguration": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3225]}",
                      "attrName": "\${Token[TOKEN.3226]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::StepFunctions::StateMachine",
                      "definition": undefined,
                      "definitionS3Location": undefined,
                      "definitionString": "\${Token[TOKEN.3235]}",
                      "definitionSubstitutions": undefined,
                      "dependsOn": Set {},
                      "loggingConfiguration": undefined,
                      "logicalId": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          [Circular],
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "rawOverrides": Object {},
                      "roleArn": "\${Token[TOKEN.3220]}",
                      "stack": [Circular],
                      "stateMachineName": "\${Token[TOKEN.3213]}",
                      "stateMachineType": "EXPRESS",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::StepFunctions::StateMachine",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "tracingConfiguration": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Role": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "fn",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3213]}",
                "role": [Circular],
                "stack": [Circular],
                "stateMachineArn": "\${Token[TOKEN.3229]}",
                "stateMachineName": "\${Token[TOKEN.3227]}",
                "stateMachineType": "EXPRESS",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.out15GLN6",
                "missing": Array [],
                "outdir": "/tmp/cdk.out15GLN6",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "users": Array [],
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
    ],
  },
  "defaultPolicy": Policy {
    "_allowCrossEnvironment": false,
    "_physicalName": "\${Token[TOKEN.3230]}",
    "_policyName": "\${Token[TOKEN.3230]}",
    "document": Object {
      "Statement": Array [
        Object {
          "Action": "cloudwatch:Describe*",
          "Effect": "Allow",
          "Resource": "*",
        },
      ],
      "Version": "2012-10-17",
    },
    "env": Object {
      "account": "\${Token[AWS.AccountId.0]}",
      "region": "\${Token[AWS.Region.4]}",
    },
    "force": false,
    "groups": Array [],
    "node": Node {
      "_children": Object {
        "Resource": CfnPolicyConditional {
          "_cfnProperties": Object {
            "groups": Array [
              "#{Token[TOKEN.3233]}",
            ],
            "policyDocument": Object {
              "Statement": Array [
                Object {
                  "Action": "cloudwatch:Describe*",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "policyName": "\${Token[TOKEN.3230]}",
            "roles": Array [
              "#{Token[TOKEN.3231]}",
            ],
            "users": Array [
              "#{Token[TOKEN.3232]}",
            ],
          },
          "cfnOptions": Object {},
          "cfnResourceType": "AWS::IAM::Policy",
          "dependsOn": Set {},
          "groups": Array [
            "#{Token[TOKEN.3233]}",
          ],
          "logicalId": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3234]}",
          "node": Node {
            "_children": Object {},
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [
              Object {
                "data": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3234]}",
                "trace": undefined,
                "type": "aws:cdk:logicalId",
              },
            ],
            "_validations": Array [],
            "host": [Circular],
            "id": "Resource",
            "scope": [Circular],
          },
          "policyDocument": Object {
            "Statement": Array [
              Object {
                "Action": "cloudwatch:Describe*",
                "Effect": "Allow",
                "Resource": "*",
              },
            ],
            "Version": "2012-10-17",
          },
          "policyName": "\${Token[TOKEN.3230]}",
          "rawOverrides": Object {},
          "roles": Array [
            "#{Token[TOKEN.3231]}",
          ],
          "stack": Stack {
            "_logicalIds": LogicalIDs {
              "renames": Object {},
              "reverse": Object {},
            },
            "_missingContext": Array [],
            "_stackDependencies": Object {},
            "_stackName": "stack",
            "_versionReportingEnabled": undefined,
            "account": "\${Token[AWS.AccountId.0]}",
            "artifactId": "stack",
            "environment": "aws://unknown-account/unknown-region",
            "node": Node {
              "_children": Object {
                "F": Function {
                  "_allowCrossEnvironment": true,
                  "_architecture": undefined,
                  "_functionUrlInvocationGrants": Object {},
                  "_invocationGrants": Object {},
                  "_layers": Array [],
                  "_physicalName": "testFunction",
                  "_warnIfCurrentVersionCalled": false,
                  "architecture": Architecture {
                    "dockerPlatform": "linux/amd64",
                    "name": "x86_64",
                  },
                  "canCreatePermissions": true,
                  "currentVersionOptions": undefined,
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "environment": Object {},
                  "functionArn": "\${Token[TOKEN.3205]}",
                  "functionName": "\${Token[TOKEN.3204]}",
                  "grantPrincipal": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3191]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3195]}",
                          "attrRoleId": "\${Token[TOKEN.3196]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3191]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3191]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3197]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3197]}",
                    "roleId": "\${Token[TOKEN.3196]}",
                    "roleName": "\${Token[TOKEN.3199]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnFunction {
                        "_cfnProperties": Object {
                          "architectures": undefined,
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3200]}",
                          ],
                          "memorySize": undefined,
                          "packageType": undefined,
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3197]}",
                          "runtime": "nodejs14.x",
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                        },
                        "architectures": undefined,
                        "attrArn": "\${Token[TOKEN.3202]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::Lambda::Function",
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "dependsOn": Set {},
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3200]}",
                        ],
                        "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                        "memorySize": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {
                            Role {
                              "_allowCrossEnvironment": false,
                              "_didSplit": false,
                              "_physicalName": undefined,
                              "assumeRoleAction": "sts:AssumeRole",
                              "assumeRolePolicy": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attachedPolicies": AttachedPolicies {
                                "policies": Array [],
                              },
                              "dependables": Map {},
                              "env": Object {
                                "account": "\${Token[AWS.AccountId.0]}",
                                "region": "\${Token[AWS.Region.4]}",
                              },
                              "grantPrincipal": [Circular],
                              "inlinePolicies": Object {},
                              "managedPolicies": Array [
                                AwsManagedPolicy {
                                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                },
                              ],
                              "node": Node {
                                "_children": Object {
                                  "Resource": CfnRole {
                                    "_cfnProperties": Object {
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "description": undefined,
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3193]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "roleName": "\${Token[TOKEN.3191]}",
                                    },
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "attrArn": "\${Token[TOKEN.3195]}",
                                    "attrRoleId": "\${Token[TOKEN.3196]}",
                                    "cfnOptions": Object {},
                                    "cfnResourceType": "AWS::IAM::Role",
                                    "dependsOn": Set {},
                                    "description": undefined,
                                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "node": Node {
                                      "_children": Object {},
                                      "_context": Object {},
                                      "_dependencies": Set {},
                                      "_locked": false,
                                      "_metadata": Array [
                                        Object {
                                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                          "trace": undefined,
                                          "type": "aws:cdk:logicalId",
                                        },
                                      ],
                                      "_validations": Array [],
                                      "host": [Circular],
                                      "id": "Resource",
                                      "scope": [Circular],
                                    },
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "rawOverrides": Object {},
                                    "roleName": "\${Token[TOKEN.3191]}",
                                    "stack": [Circular],
                                    "tags": TagManager {
                                      "initialTagPriority": 50,
                                      "priorities": Map {},
                                      "renderedTags": "<unresolved-lazy>",
                                      "resourceTypeName": "AWS::IAM::Role",
                                      "tagFormatter": StandardFormatter {},
                                      "tagPropertyName": "tags",
                                      "tags": Map {},
                                    },
                                    Symbol(@aws-cdk/core.DependableTrait): Object {
                                      "dependencyRoots": Array [
                                        [Circular],
                                      ],
                                    },
                                  },
                                },
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [],
                                "_validations": Array [
                                  Object {
                                    "validate": [Function],
                                  },
                                ],
                                "host": [Circular],
                                "id": "ServiceRole",
                                "scope": [Circular],
                              },
                              "permissionsBoundary": undefined,
                              "physicalName": "\${Token[TOKEN.3191]}",
                              "policyFragment": PrincipalPolicyFragment {
                                "conditions": Object {},
                                "principalJson": Object {
                                  "AWS": Array [
                                    "\${Token[TOKEN.3197]}",
                                  ],
                                },
                              },
                              "principalAccount": "\${Token[AWS.AccountId.0]}",
                              "roleArn": "\${Token[TOKEN.3197]}",
                              "roleId": "\${Token[TOKEN.3196]}",
                              "roleName": "\${Token[TOKEN.3199]}",
                              "stack": [Circular],
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "packageType": undefined,
                        "rawOverrides": Object {},
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3197]}",
                        "runtime": "nodejs14.x",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::Lambda::Function",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "ServiceRole": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3191]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3195]}",
                              "attrRoleId": "\${Token[TOKEN.3196]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3191]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3191]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3197]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3197]}",
                        "roleId": "\${Token[TOKEN.3196]}",
                        "roleName": "\${Token[TOKEN.3199]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "F",
                    "scope": [Circular],
                  },
                  "permissionsNode": Node {
                    "_children": Object {
                      "Resource": CfnFunction {
                        "_cfnProperties": Object {
                          "architectures": undefined,
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3200]}",
                          ],
                          "memorySize": undefined,
                          "packageType": undefined,
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3197]}",
                          "runtime": "nodejs14.x",
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                        },
                        "architectures": undefined,
                        "attrArn": "\${Token[TOKEN.3202]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::Lambda::Function",
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "dependsOn": Set {},
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3200]}",
                        ],
                        "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                        "memorySize": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {
                            Role {
                              "_allowCrossEnvironment": false,
                              "_didSplit": false,
                              "_physicalName": undefined,
                              "assumeRoleAction": "sts:AssumeRole",
                              "assumeRolePolicy": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attachedPolicies": AttachedPolicies {
                                "policies": Array [],
                              },
                              "dependables": Map {},
                              "env": Object {
                                "account": "\${Token[AWS.AccountId.0]}",
                                "region": "\${Token[AWS.Region.4]}",
                              },
                              "grantPrincipal": [Circular],
                              "inlinePolicies": Object {},
                              "managedPolicies": Array [
                                AwsManagedPolicy {
                                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                },
                              ],
                              "node": Node {
                                "_children": Object {
                                  "Resource": CfnRole {
                                    "_cfnProperties": Object {
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "description": undefined,
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3193]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "roleName": "\${Token[TOKEN.3191]}",
                                    },
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "attrArn": "\${Token[TOKEN.3195]}",
                                    "attrRoleId": "\${Token[TOKEN.3196]}",
                                    "cfnOptions": Object {},
                                    "cfnResourceType": "AWS::IAM::Role",
                                    "dependsOn": Set {},
                                    "description": undefined,
                                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "node": Node {
                                      "_children": Object {},
                                      "_context": Object {},
                                      "_dependencies": Set {},
                                      "_locked": false,
                                      "_metadata": Array [
                                        Object {
                                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                          "trace": undefined,
                                          "type": "aws:cdk:logicalId",
                                        },
                                      ],
                                      "_validations": Array [],
                                      "host": [Circular],
                                      "id": "Resource",
                                      "scope": [Circular],
                                    },
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "rawOverrides": Object {},
                                    "roleName": "\${Token[TOKEN.3191]}",
                                    "stack": [Circular],
                                    "tags": TagManager {
                                      "initialTagPriority": 50,
                                      "priorities": Map {},
                                      "renderedTags": "<unresolved-lazy>",
                                      "resourceTypeName": "AWS::IAM::Role",
                                      "tagFormatter": StandardFormatter {},
                                      "tagPropertyName": "tags",
                                      "tags": Map {},
                                    },
                                    Symbol(@aws-cdk/core.DependableTrait): Object {
                                      "dependencyRoots": Array [
                                        [Circular],
                                      ],
                                    },
                                  },
                                },
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [],
                                "_validations": Array [
                                  Object {
                                    "validate": [Function],
                                  },
                                ],
                                "host": [Circular],
                                "id": "ServiceRole",
                                "scope": [Circular],
                              },
                              "permissionsBoundary": undefined,
                              "physicalName": "\${Token[TOKEN.3191]}",
                              "policyFragment": PrincipalPolicyFragment {
                                "conditions": Object {},
                                "principalJson": Object {
                                  "AWS": Array [
                                    "\${Token[TOKEN.3197]}",
                                  ],
                                },
                              },
                              "principalAccount": "\${Token[AWS.AccountId.0]}",
                              "roleArn": "\${Token[TOKEN.3197]}",
                              "roleId": "\${Token[TOKEN.3196]}",
                              "roleName": "\${Token[TOKEN.3199]}",
                              "stack": [Circular],
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "packageType": undefined,
                        "rawOverrides": Object {},
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3197]}",
                        "runtime": "nodejs14.x",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::Lambda::Function",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "ServiceRole": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3191]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3195]}",
                              "attrRoleId": "\${Token[TOKEN.3196]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3191]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3191]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3197]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3197]}",
                        "roleId": "\${Token[TOKEN.3196]}",
                        "roleName": "\${Token[TOKEN.3199]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "F",
                    "scope": [Circular],
                  },
                  "physicalName": "testFunction",
                  "role": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3191]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3195]}",
                          "attrRoleId": "\${Token[TOKEN.3196]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3191]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3191]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3197]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3197]}",
                    "roleId": "\${Token[TOKEN.3196]}",
                    "roleName": "\${Token[TOKEN.3199]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "runtime": Runtime {
                    "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                    "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                    "family": 0,
                    "name": "nodejs14.x",
                    "supportsCodeGuruProfiling": false,
                    "supportsInlineCode": true,
                  },
                  "stack": [Circular],
                  "timeout": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "Table": Table {
                  "_allowCrossEnvironment": true,
                  "_physicalName": "testTable",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": "PROVISIONED",
                  "encryptionKey": undefined,
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "globalReplicaCustomResources": Array [],
                  "globalSecondaryIndexes": Array [],
                  "indexScaling": Map {},
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "localSecondaryIndexes": Array [],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnTable {
                        "_cfnProperties": Object {
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "contributorInsightsSpecification": undefined,
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "sseSpecification": undefined,
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "timeToLiveSpecification": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3207]}",
                        "attrStreamArn": "\${Token[TOKEN.3208]}",
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "cfnOptions": Object {
                          "deletionPolicy": "Retain",
                          "updateReplacePolicy": "Retain",
                        },
                        "cfnResourceType": "AWS::DynamoDB::Table",
                        "contributorInsightsSpecification": undefined,
                        "dependsOn": Set {},
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "rawOverrides": Object {},
                        "sseSpecification": undefined,
                        "stack": [Circular],
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::DynamoDB::Table",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeToLiveSpecification": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "ScalingRole": Import {
                        "_allowCrossEnvironment": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "ScalingRole",
                          "scope": [Circular],
                        },
                        "physicalName": "\${Token[TOKEN.3212]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[TOKEN.3211]}",
                        "trace": undefined,
                        "type": "aws:cdk:hasPhysicalName",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Table",
                    "scope": [Circular],
                  },
                  "nonKeyAttributes": Set {},
                  "physicalName": "testTable",
                  "regionalArns": Array [],
                  "scalingRole": Import {
                    "_allowCrossEnvironment": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "ScalingRole",
                      "scope": [Circular],
                    },
                    "physicalName": "\${Token[TOKEN.3212]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "secondaryIndexSchemas": Map {},
                  "stack": [Circular],
                  "table": CfnTable {
                    "_cfnProperties": Object {
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "contributorInsightsSpecification": undefined,
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "sseSpecification": undefined,
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "timeToLiveSpecification": undefined,
                    },
                    "attrArn": "\${Token[TOKEN.3207]}",
                    "attrStreamArn": "\${Token[TOKEN.3208]}",
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "cfnOptions": Object {
                      "deletionPolicy": "Retain",
                      "updateReplacePolicy": "Retain",
                    },
                    "cfnResourceType": "AWS::DynamoDB::Table",
                    "contributorInsightsSpecification": undefined,
                    "dependsOn": Set {},
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "rawOverrides": Object {},
                    "sseSpecification": undefined,
                    "stack": [Circular],
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::DynamoDB::Table",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeToLiveSpecification": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "tableArn": "\${Token[TOKEN.3209]}",
                  "tableName": "\${Token[TOKEN.3211]}",
                  "tablePartitionKey": Object {
                    "name": "id",
                    "type": "S",
                  },
                  "tableScaling": Object {},
                  "tableStreamArn": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "fn": StateMachine {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnStateMachine {
                        "_cfnProperties": Object {
                          "definitionString": "\${Token[TOKEN.3223]}",
                          "loggingConfiguration": undefined,
                          "roleArn": "\${Token[TOKEN.3220]}",
                          "stateMachineName": "\${Token[TOKEN.3213]}",
                          "stateMachineType": "EXPRESS",
                          "tracingConfiguration": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3225]}",
                        "attrName": "\${Token[TOKEN.3226]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::StepFunctions::StateMachine",
                        "definition": undefined,
                        "definitionS3Location": undefined,
                        "definitionString": "\${Token[TOKEN.3235]}",
                        "definitionSubstitutions": undefined,
                        "dependsOn": Set {},
                        "loggingConfiguration": undefined,
                        "logicalId": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {
                            [Circular],
                          },
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "rawOverrides": Object {},
                        "roleArn": "\${Token[TOKEN.3220]}",
                        "stack": [Circular],
                        "stateMachineName": "\${Token[TOKEN.3213]}",
                        "stateMachineType": "EXPRESS",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::StepFunctions::StateMachine",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "tracingConfiguration": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "Role": [Circular],
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "fn",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3213]}",
                  "role": [Circular],
                  "stack": [Circular],
                  "stateMachineArn": "\${Token[TOKEN.3229]}",
                  "stateMachineName": "\${Token[TOKEN.3227]}",
                  "stateMachineType": "EXPRESS",
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "stack",
              "scope": App {
                "_assemblyBuilder": CloudAssemblyBuilder {
                  "artifacts": Object {},
                  "assetOutdir": "/tmp/cdk.out15GLN6",
                  "missing": Array [],
                  "outdir": "/tmp/cdk.out15GLN6",
                  "parentBuilder": undefined,
                },
                "account": undefined,
                "node": Node {
                  "_children": Object {
                    "Tree": TreeMetadata {
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Tree",
                        "scope": [Circular],
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "stack": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "",
                  "scope": undefined,
                },
                "parentStage": undefined,
                "region": undefined,
                "stageName": "",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "region": "\${Token[AWS.Region.4]}",
            "synthesizer": DefaultStackSynthesizer {
              "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
              "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
              "_stack": [Circular],
              "assetManifest": AssetManifestBuilder {
                "dockerImages": Object {},
                "files": Object {},
              },
              "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
              "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
              "bucketPrefix": "",
              "dockerTagPrefix": "",
              "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
              "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
              "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
              "props": Object {},
              "qualifier": "hnb659fds",
              "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
              "useLookupRoleForStackOperations": true,
            },
            "tags": TagManager {
              "initialTagPriority": 50,
              "priorities": Map {},
              "renderedTags": "<unresolved-lazy>",
              "resourceTypeName": "aws:cdk:stack",
              "tagFormatter": KeyValueFormatter {},
              "tagPropertyName": "tags",
              "tags": Map {},
            },
            "templateFile": "stack.template.json",
            "templateOptions": Object {},
            "terminationProtection": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "users": Array [
            "#{Token[TOKEN.3232]}",
          ],
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "_context": Object {},
      "_dependencies": Set {},
      "_locked": false,
      "_metadata": Array [],
      "_validations": Array [
        Object {
          "validate": [Function],
        },
      ],
      "host": [Circular],
      "id": "DefaultPolicy",
      "scope": [Circular],
    },
    "physicalName": "\${Token[TOKEN.3230]}",
    "referenceTaken": false,
    "roles": Array [
      [Circular],
    ],
    "stack": Stack {
      "_logicalIds": LogicalIDs {
        "renames": Object {},
        "reverse": Object {},
      },
      "_missingContext": Array [],
      "_stackDependencies": Object {},
      "_stackName": "stack",
      "_versionReportingEnabled": undefined,
      "account": "\${Token[AWS.AccountId.0]}",
      "artifactId": "stack",
      "environment": "aws://unknown-account/unknown-region",
      "node": Node {
        "_children": Object {
          "F": Function {
            "_allowCrossEnvironment": true,
            "_architecture": undefined,
            "_functionUrlInvocationGrants": Object {},
            "_invocationGrants": Object {},
            "_layers": Array [],
            "_physicalName": "testFunction",
            "_warnIfCurrentVersionCalled": false,
            "architecture": Architecture {
              "dockerPlatform": "linux/amd64",
              "name": "x86_64",
            },
            "canCreatePermissions": true,
            "currentVersionOptions": undefined,
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "environment": Object {},
            "functionArn": "\${Token[TOKEN.3205]}",
            "functionName": "\${Token[TOKEN.3204]}",
            "grantPrincipal": Role {
              "_allowCrossEnvironment": false,
              "_didSplit": false,
              "_physicalName": undefined,
              "assumeRoleAction": "sts:AssumeRole",
              "assumeRolePolicy": Object {
                "Statement": Array [
                  Object {
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": Object {
                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                    },
                  },
                ],
                "Version": "2012-10-17",
              },
              "attachedPolicies": AttachedPolicies {
                "policies": Array [],
              },
              "dependables": Map {},
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "grantPrincipal": [Circular],
              "inlinePolicies": Object {},
              "managedPolicies": Array [
                AwsManagedPolicy {
                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                },
              ],
              "node": Node {
                "_children": Object {
                  "Resource": CfnRole {
                    "_cfnProperties": Object {
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "description": undefined,
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3193]}",
                      ],
                      "maxSessionDuration": undefined,
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "roleName": "\${Token[TOKEN.3191]}",
                    },
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attrArn": "\${Token[TOKEN.3195]}",
                    "attrRoleId": "\${Token[TOKEN.3196]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::IAM::Role",
                    "dependsOn": Set {},
                    "description": undefined,
                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3193]}",
                    ],
                    "maxSessionDuration": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "rawOverrides": Object {},
                    "roleName": "\${Token[TOKEN.3191]}",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::IAM::Role",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "ServiceRole",
                "scope": [Circular],
              },
              "permissionsBoundary": undefined,
              "physicalName": "\${Token[TOKEN.3191]}",
              "policyFragment": PrincipalPolicyFragment {
                "conditions": Object {},
                "principalJson": Object {
                  "AWS": Array [
                    "\${Token[TOKEN.3197]}",
                  ],
                },
              },
              "principalAccount": "\${Token[AWS.AccountId.0]}",
              "roleArn": "\${Token[TOKEN.3197]}",
              "roleId": "\${Token[TOKEN.3196]}",
              "roleName": "\${Token[TOKEN.3199]}",
              "stack": [Circular],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "node": Node {
              "_children": Object {
                "Resource": CfnFunction {
                  "_cfnProperties": Object {
                    "architectures": undefined,
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3200]}",
                    ],
                    "memorySize": undefined,
                    "packageType": undefined,
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3197]}",
                    "runtime": "nodejs14.x",
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                  },
                  "architectures": undefined,
                  "attrArn": "\${Token[TOKEN.3202]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::Lambda::Function",
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "dependsOn": Set {},
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3200]}",
                  ],
                  "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                  "memorySize": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {
                      Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3191]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3195]}",
                              "attrRoleId": "\${Token[TOKEN.3196]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3191]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3191]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3197]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3197]}",
                        "roleId": "\${Token[TOKEN.3196]}",
                        "roleName": "\${Token[TOKEN.3199]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "packageType": undefined,
                  "rawOverrides": Object {},
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3197]}",
                  "runtime": "nodejs14.x",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::Lambda::Function",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "ServiceRole": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3191]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3195]}",
                        "attrRoleId": "\${Token[TOKEN.3196]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3191]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3191]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3197]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3197]}",
                  "roleId": "\${Token[TOKEN.3196]}",
                  "roleName": "\${Token[TOKEN.3199]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "F",
              "scope": [Circular],
            },
            "permissionsNode": Node {
              "_children": Object {
                "Resource": CfnFunction {
                  "_cfnProperties": Object {
                    "architectures": undefined,
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3200]}",
                    ],
                    "memorySize": undefined,
                    "packageType": undefined,
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3197]}",
                    "runtime": "nodejs14.x",
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                  },
                  "architectures": undefined,
                  "attrArn": "\${Token[TOKEN.3202]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::Lambda::Function",
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "dependsOn": Set {},
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3200]}",
                  ],
                  "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                  "memorySize": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {
                      Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3191]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3195]}",
                              "attrRoleId": "\${Token[TOKEN.3196]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3191]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3191]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3197]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3197]}",
                        "roleId": "\${Token[TOKEN.3196]}",
                        "roleName": "\${Token[TOKEN.3199]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "packageType": undefined,
                  "rawOverrides": Object {},
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3197]}",
                  "runtime": "nodejs14.x",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::Lambda::Function",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "ServiceRole": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3191]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3195]}",
                        "attrRoleId": "\${Token[TOKEN.3196]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3191]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3191]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3197]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3197]}",
                  "roleId": "\${Token[TOKEN.3196]}",
                  "roleName": "\${Token[TOKEN.3199]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "F",
              "scope": [Circular],
            },
            "physicalName": "testFunction",
            "role": Role {
              "_allowCrossEnvironment": false,
              "_didSplit": false,
              "_physicalName": undefined,
              "assumeRoleAction": "sts:AssumeRole",
              "assumeRolePolicy": Object {
                "Statement": Array [
                  Object {
                    "Action": "sts:AssumeRole",
                    "Effect": "Allow",
                    "Principal": Object {
                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                    },
                  },
                ],
                "Version": "2012-10-17",
              },
              "attachedPolicies": AttachedPolicies {
                "policies": Array [],
              },
              "dependables": Map {},
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "grantPrincipal": [Circular],
              "inlinePolicies": Object {},
              "managedPolicies": Array [
                AwsManagedPolicy {
                  "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                },
              ],
              "node": Node {
                "_children": Object {
                  "Resource": CfnRole {
                    "_cfnProperties": Object {
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "description": undefined,
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3193]}",
                      ],
                      "maxSessionDuration": undefined,
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "roleName": "\${Token[TOKEN.3191]}",
                    },
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attrArn": "\${Token[TOKEN.3195]}",
                    "attrRoleId": "\${Token[TOKEN.3196]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::IAM::Role",
                    "dependsOn": Set {},
                    "description": undefined,
                    "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3193]}",
                    ],
                    "maxSessionDuration": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "rawOverrides": Object {},
                    "roleName": "\${Token[TOKEN.3191]}",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::IAM::Role",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "ServiceRole",
                "scope": [Circular],
              },
              "permissionsBoundary": undefined,
              "physicalName": "\${Token[TOKEN.3191]}",
              "policyFragment": PrincipalPolicyFragment {
                "conditions": Object {},
                "principalJson": Object {
                  "AWS": Array [
                    "\${Token[TOKEN.3197]}",
                  ],
                },
              },
              "principalAccount": "\${Token[AWS.AccountId.0]}",
              "roleArn": "\${Token[TOKEN.3197]}",
              "roleId": "\${Token[TOKEN.3196]}",
              "roleName": "\${Token[TOKEN.3199]}",
              "stack": [Circular],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "runtime": Runtime {
              "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
              "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
              "family": 0,
              "name": "nodejs14.x",
              "supportsCodeGuruProfiling": false,
              "supportsInlineCode": true,
            },
            "stack": [Circular],
            "timeout": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "Table": Table {
            "_allowCrossEnvironment": true,
            "_physicalName": "testTable",
            "attributeDefinitions": Array [
              Object {
                "attributeName": "id",
                "attributeType": "S",
              },
            ],
            "billingMode": "PROVISIONED",
            "encryptionKey": undefined,
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "globalReplicaCustomResources": Array [],
            "globalSecondaryIndexes": Array [],
            "indexScaling": Map {},
            "keySchema": Array [
              Object {
                "attributeName": "id",
                "keyType": "HASH",
              },
            ],
            "localSecondaryIndexes": Array [],
            "node": Node {
              "_children": Object {
                "Resource": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3207]}",
                  "attrStreamArn": "\${Token[TOKEN.3208]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "ScalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3212]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [
                Object {
                  "data": "\${Token[TOKEN.3211]}",
                  "trace": undefined,
                  "type": "aws:cdk:hasPhysicalName",
                },
              ],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "Table",
              "scope": [Circular],
            },
            "nonKeyAttributes": Set {},
            "physicalName": "testTable",
            "regionalArns": Array [],
            "scalingRole": Import {
              "_allowCrossEnvironment": false,
              "_physicalName": undefined,
              "assumeRoleAction": "sts:AssumeRole",
              "attachedPolicies": AttachedPolicies {
                "policies": Array [],
              },
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "grantPrincipal": [Circular],
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "ScalingRole",
                "scope": [Circular],
              },
              "physicalName": "\${Token[TOKEN.3212]}",
              "policyFragment": PrincipalPolicyFragment {
                "conditions": Object {},
                "principalJson": Object {
                  "AWS": Array [
                    "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  ],
                },
              },
              "principalAccount": "\${Token[AWS.AccountId.0]}",
              "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
              "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
              "stack": [Circular],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "secondaryIndexSchemas": Map {},
            "stack": [Circular],
            "table": CfnTable {
              "_cfnProperties": Object {
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": undefined,
                "contributorInsightsSpecification": undefined,
                "globalSecondaryIndexes": "<unresolved-lazy>",
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "kinesisStreamSpecification": undefined,
                "localSecondaryIndexes": "<unresolved-lazy>",
                "pointInTimeRecoverySpecification": undefined,
                "provisionedThroughput": Object {
                  "readCapacityUnits": 5,
                  "writeCapacityUnits": 5,
                },
                "sseSpecification": undefined,
                "streamSpecification": undefined,
                "tableClass": undefined,
                "tableName": "testTable",
                "timeToLiveSpecification": undefined,
              },
              "attrArn": "\${Token[TOKEN.3207]}",
              "attrStreamArn": "\${Token[TOKEN.3208]}",
              "attributeDefinitions": Array [
                Object {
                  "attributeName": "id",
                  "attributeType": "S",
                },
              ],
              "billingMode": undefined,
              "cfnOptions": Object {
                "deletionPolicy": "Retain",
                "updateReplacePolicy": "Retain",
              },
              "cfnResourceType": "AWS::DynamoDB::Table",
              "contributorInsightsSpecification": undefined,
              "dependsOn": Set {},
              "globalSecondaryIndexes": "<unresolved-lazy>",
              "keySchema": Array [
                Object {
                  "attributeName": "id",
                  "keyType": "HASH",
                },
              ],
              "kinesisStreamSpecification": undefined,
              "localSecondaryIndexes": "<unresolved-lazy>",
              "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                    "trace": undefined,
                    "type": "aws:cdk:logicalId",
                  },
                ],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "Resource",
                "scope": [Circular],
              },
              "pointInTimeRecoverySpecification": undefined,
              "provisionedThroughput": Object {
                "readCapacityUnits": 5,
                "writeCapacityUnits": 5,
              },
              "rawOverrides": Object {},
              "sseSpecification": undefined,
              "stack": [Circular],
              "streamSpecification": undefined,
              "tableClass": undefined,
              "tableName": "testTable",
              "tags": TagManager {
                "initialTagPriority": 50,
                "priorities": Map {},
                "renderedTags": "<unresolved-lazy>",
                "resourceTypeName": "AWS::DynamoDB::Table",
                "tagFormatter": StandardFormatter {},
                "tagPropertyName": "tags",
                "tags": Map {},
              },
              "timeToLiveSpecification": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "tableArn": "\${Token[TOKEN.3209]}",
            "tableName": "\${Token[TOKEN.3211]}",
            "tablePartitionKey": Object {
              "name": "id",
              "type": "S",
            },
            "tableScaling": Object {},
            "tableStreamArn": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "fn": StateMachine {
            "_allowCrossEnvironment": false,
            "_physicalName": undefined,
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "node": Node {
              "_children": Object {
                "Resource": CfnStateMachine {
                  "_cfnProperties": Object {
                    "definitionString": "\${Token[TOKEN.3223]}",
                    "loggingConfiguration": undefined,
                    "roleArn": "\${Token[TOKEN.3220]}",
                    "stateMachineName": "\${Token[TOKEN.3213]}",
                    "stateMachineType": "EXPRESS",
                    "tracingConfiguration": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3225]}",
                  "attrName": "\${Token[TOKEN.3226]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::StepFunctions::StateMachine",
                  "definition": undefined,
                  "definitionS3Location": undefined,
                  "definitionString": "\${Token[TOKEN.3235]}",
                  "definitionSubstitutions": undefined,
                  "dependsOn": Set {},
                  "loggingConfiguration": undefined,
                  "logicalId": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {
                      [Circular],
                    },
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "rawOverrides": Object {},
                  "roleArn": "\${Token[TOKEN.3220]}",
                  "stack": [Circular],
                  "stateMachineName": "\${Token[TOKEN.3213]}",
                  "stateMachineType": "EXPRESS",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::StepFunctions::StateMachine",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "tracingConfiguration": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "Role": [Circular],
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "fn",
              "scope": [Circular],
            },
            "physicalName": "\${Token[TOKEN.3213]}",
            "role": [Circular],
            "stack": [Circular],
            "stateMachineArn": "\${Token[TOKEN.3229]}",
            "stateMachineName": "\${Token[TOKEN.3227]}",
            "stateMachineType": "EXPRESS",
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
        },
        "_context": Object {},
        "_dependencies": Set {},
        "_locked": false,
        "_metadata": Array [],
        "_validations": Array [],
        "host": [Circular],
        "id": "stack",
        "scope": App {
          "_assemblyBuilder": CloudAssemblyBuilder {
            "artifacts": Object {},
            "assetOutdir": "/tmp/cdk.out15GLN6",
            "missing": Array [],
            "outdir": "/tmp/cdk.out15GLN6",
            "parentBuilder": undefined,
          },
          "account": undefined,
          "node": Node {
            "_children": Object {
              "Tree": TreeMetadata {
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Tree",
                  "scope": [Circular],
                },
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "stack": [Circular],
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "",
            "scope": undefined,
          },
          "parentStage": undefined,
          "region": undefined,
          "stageName": "",
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "region": "\${Token[AWS.Region.4]}",
      "synthesizer": DefaultStackSynthesizer {
        "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
        "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
        "_stack": [Circular],
        "assetManifest": AssetManifestBuilder {
          "dockerImages": Object {},
          "files": Object {},
        },
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
        "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
        "bucketPrefix": "",
        "dockerTagPrefix": "",
        "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
        "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
        "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
        "props": Object {},
        "qualifier": "hnb659fds",
        "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
        "useLookupRoleForStackOperations": true,
      },
      "tags": TagManager {
        "initialTagPriority": 50,
        "priorities": Map {},
        "renderedTags": "<unresolved-lazy>",
        "resourceTypeName": "aws:cdk:stack",
        "tagFormatter": KeyValueFormatter {},
        "tagPropertyName": "tags",
        "tags": Map {},
      },
      "templateFile": "stack.template.json",
      "templateOptions": Object {},
      "terminationProtection": undefined,
      Symbol(@aws-cdk/core.DependableTrait): Object {
        "dependencyRoots": Array [
          [Circular],
        ],
      },
    },
    "users": Array [],
    Symbol(@aws-cdk/core.DependableTrait): Object {
      "dependencyRoots": Array [
        [Circular],
      ],
    },
  },
  "dependables": Map {
    Object {
      "Action": "cloudwatch:Describe*",
      "Effect": "Allow",
      "Resource": "*",
    } => DependencyGroup {
      "_deps": Array [],
      Symbol(@aws-cdk/core.DependableTrait): Object {
        "dependencyRoots": Array [],
      },
    },
  },
  "env": Object {
    "account": "\${Token[AWS.AccountId.0]}",
    "region": "\${Token[AWS.Region.4]}",
  },
  "grantPrincipal": [Circular],
  "inlinePolicies": Object {},
  "managedPolicies": Array [],
  "node": Node {
    "_children": Object {
      "DefaultPolicy": Policy {
        "_allowCrossEnvironment": false,
        "_physicalName": "\${Token[TOKEN.3230]}",
        "_policyName": "\${Token[TOKEN.3230]}",
        "document": Object {
          "Statement": Array [
            Object {
              "Action": "cloudwatch:Describe*",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "env": Object {
          "account": "\${Token[AWS.AccountId.0]}",
          "region": "\${Token[AWS.Region.4]}",
        },
        "force": false,
        "groups": Array [],
        "node": Node {
          "_children": Object {
            "Resource": CfnPolicyConditional {
              "_cfnProperties": Object {
                "groups": Array [
                  "#{Token[TOKEN.3233]}",
                ],
                "policyDocument": Object {
                  "Statement": Array [
                    Object {
                      "Action": "cloudwatch:Describe*",
                      "Effect": "Allow",
                      "Resource": "*",
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "policyName": "\${Token[TOKEN.3230]}",
                "roles": Array [
                  "#{Token[TOKEN.3231]}",
                ],
                "users": Array [
                  "#{Token[TOKEN.3232]}",
                ],
              },
              "cfnOptions": Object {},
              "cfnResourceType": "AWS::IAM::Policy",
              "dependsOn": Set {},
              "groups": Array [
                "#{Token[TOKEN.3233]}",
              ],
              "logicalId": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3234]}",
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[stack.fn.Role.DefaultPolicy.Resource.LogicalID.3234]}",
                    "trace": undefined,
                    "type": "aws:cdk:logicalId",
                  },
                ],
                "_validations": Array [],
                "host": [Circular],
                "id": "Resource",
                "scope": [Circular],
              },
              "policyDocument": Object {
                "Statement": Array [
                  Object {
                    "Action": "cloudwatch:Describe*",
                    "Effect": "Allow",
                    "Resource": "*",
                  },
                ],
                "Version": "2012-10-17",
              },
              "policyName": "\${Token[TOKEN.3230]}",
              "rawOverrides": Object {},
              "roles": Array [
                "#{Token[TOKEN.3231]}",
              ],
              "stack": Stack {
                "_logicalIds": LogicalIDs {
                  "renames": Object {},
                  "reverse": Object {},
                },
                "_missingContext": Array [],
                "_stackDependencies": Object {},
                "_stackName": "stack",
                "_versionReportingEnabled": undefined,
                "account": "\${Token[AWS.AccountId.0]}",
                "artifactId": "stack",
                "environment": "aws://unknown-account/unknown-region",
                "node": Node {
                  "_children": Object {
                    "F": Function {
                      "_allowCrossEnvironment": true,
                      "_architecture": undefined,
                      "_functionUrlInvocationGrants": Object {},
                      "_invocationGrants": Object {},
                      "_layers": Array [],
                      "_physicalName": "testFunction",
                      "_warnIfCurrentVersionCalled": false,
                      "architecture": Architecture {
                        "dockerPlatform": "linux/amd64",
                        "name": "x86_64",
                      },
                      "canCreatePermissions": true,
                      "currentVersionOptions": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "environment": Object {},
                      "functionArn": "\${Token[TOKEN.3205]}",
                      "functionName": "\${Token[TOKEN.3204]}",
                      "grantPrincipal": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3191]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3195]}",
                              "attrRoleId": "\${Token[TOKEN.3196]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3191]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3191]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3197]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3197]}",
                        "roleId": "\${Token[TOKEN.3196]}",
                        "roleName": "\${Token[TOKEN.3199]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3200]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3197]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3202]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3200]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3193]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3191]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3195]}",
                                        "attrRoleId": "\${Token[TOKEN.3196]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3193]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3191]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3191]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3197]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3197]}",
                                  "roleId": "\${Token[TOKEN.3196]}",
                                  "roleName": "\${Token[TOKEN.3199]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3197]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "permissionsNode": Node {
                        "_children": Object {
                          "Resource": CfnFunction {
                            "_cfnProperties": Object {
                              "architectures": undefined,
                              "code": Object {
                                "imageUri": undefined,
                                "s3Bucket": undefined,
                                "s3Key": undefined,
                                "s3ObjectVersion": undefined,
                                "zipFile": "exports.handler = function() { return null; }",
                              },
                              "codeSigningConfigArn": undefined,
                              "deadLetterConfig": undefined,
                              "description": undefined,
                              "environment": "<unresolved-lazy>",
                              "ephemeralStorage": undefined,
                              "fileSystemConfigs": undefined,
                              "functionName": "testFunction",
                              "handler": "index.handler",
                              "imageConfig": undefined,
                              "kmsKeyArn": undefined,
                              "layers": Array [
                                "#{Token[TOKEN.3200]}",
                              ],
                              "memorySize": undefined,
                              "packageType": undefined,
                              "reservedConcurrentExecutions": undefined,
                              "role": "\${Token[TOKEN.3197]}",
                              "runtime": "nodejs14.x",
                              "timeout": undefined,
                              "tracingConfig": undefined,
                              "vpcConfig": undefined,
                            },
                            "architectures": undefined,
                            "attrArn": "\${Token[TOKEN.3202]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::Lambda::Function",
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "dependsOn": Set {},
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3200]}",
                            ],
                            "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "memorySize": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                Role {
                                  "_allowCrossEnvironment": false,
                                  "_didSplit": false,
                                  "_physicalName": undefined,
                                  "assumeRoleAction": "sts:AssumeRole",
                                  "assumeRolePolicy": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attachedPolicies": AttachedPolicies {
                                    "policies": Array [],
                                  },
                                  "dependables": Map {},
                                  "env": Object {
                                    "account": "\${Token[AWS.AccountId.0]}",
                                    "region": "\${Token[AWS.Region.4]}",
                                  },
                                  "grantPrincipal": [Circular],
                                  "inlinePolicies": Object {},
                                  "managedPolicies": Array [
                                    AwsManagedPolicy {
                                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                    },
                                  ],
                                  "node": Node {
                                    "_children": Object {
                                      "Resource": CfnRole {
                                        "_cfnProperties": Object {
                                          "assumeRolePolicyDocument": Object {
                                            "Statement": Array [
                                              Object {
                                                "Action": "sts:AssumeRole",
                                                "Effect": "Allow",
                                                "Principal": Object {
                                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                                },
                                              },
                                            ],
                                            "Version": "2012-10-17",
                                          },
                                          "description": undefined,
                                          "managedPolicyArns": Array [
                                            "#{Token[TOKEN.3193]}",
                                          ],
                                          "maxSessionDuration": undefined,
                                          "path": undefined,
                                          "permissionsBoundary": undefined,
                                          "policies": undefined,
                                          "roleName": "\${Token[TOKEN.3191]}",
                                        },
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "attrArn": "\${Token[TOKEN.3195]}",
                                        "attrRoleId": "\${Token[TOKEN.3196]}",
                                        "cfnOptions": Object {},
                                        "cfnResourceType": "AWS::IAM::Role",
                                        "dependsOn": Set {},
                                        "description": undefined,
                                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3193]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "node": Node {
                                          "_children": Object {},
                                          "_context": Object {},
                                          "_dependencies": Set {},
                                          "_locked": false,
                                          "_metadata": Array [
                                            Object {
                                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                              "trace": undefined,
                                              "type": "aws:cdk:logicalId",
                                            },
                                          ],
                                          "_validations": Array [],
                                          "host": [Circular],
                                          "id": "Resource",
                                          "scope": [Circular],
                                        },
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "rawOverrides": Object {},
                                        "roleName": "\${Token[TOKEN.3191]}",
                                        "stack": [Circular],
                                        "tags": TagManager {
                                          "initialTagPriority": 50,
                                          "priorities": Map {},
                                          "renderedTags": "<unresolved-lazy>",
                                          "resourceTypeName": "AWS::IAM::Role",
                                          "tagFormatter": StandardFormatter {},
                                          "tagPropertyName": "tags",
                                          "tags": Map {},
                                        },
                                        Symbol(@aws-cdk/core.DependableTrait): Object {
                                          "dependencyRoots": Array [
                                            [Circular],
                                          ],
                                        },
                                      },
                                    },
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [],
                                    "_validations": Array [
                                      Object {
                                        "validate": [Function],
                                      },
                                    ],
                                    "host": [Circular],
                                    "id": "ServiceRole",
                                    "scope": [Circular],
                                  },
                                  "permissionsBoundary": undefined,
                                  "physicalName": "\${Token[TOKEN.3191]}",
                                  "policyFragment": PrincipalPolicyFragment {
                                    "conditions": Object {},
                                    "principalJson": Object {
                                      "AWS": Array [
                                        "\${Token[TOKEN.3197]}",
                                      ],
                                    },
                                  },
                                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                                  "roleArn": "\${Token[TOKEN.3197]}",
                                  "roleId": "\${Token[TOKEN.3196]}",
                                  "roleName": "\${Token[TOKEN.3199]}",
                                  "stack": [Circular],
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "packageType": undefined,
                            "rawOverrides": Object {},
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3197]}",
                            "runtime": "nodejs14.x",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::Lambda::Function",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ServiceRole": Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "F",
                        "scope": [Circular],
                      },
                      "physicalName": "testFunction",
                      "role": Role {
                        "_allowCrossEnvironment": false,
                        "_didSplit": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "assumeRolePolicy": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "dependables": Map {},
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "inlinePolicies": Object {},
                        "managedPolicies": Array [
                          AwsManagedPolicy {
                            "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                          },
                        ],
                        "node": Node {
                          "_children": Object {
                            "Resource": CfnRole {
                              "_cfnProperties": Object {
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "description": undefined,
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "roleName": "\${Token[TOKEN.3191]}",
                              },
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "attrArn": "\${Token[TOKEN.3195]}",
                              "attrRoleId": "\${Token[TOKEN.3196]}",
                              "cfnOptions": Object {},
                              "cfnResourceType": "AWS::IAM::Role",
                              "dependsOn": Set {},
                              "description": undefined,
                              "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "node": Node {
                                "_children": Object {},
                                "_context": Object {},
                                "_dependencies": Set {},
                                "_locked": false,
                                "_metadata": Array [
                                  Object {
                                    "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                    "trace": undefined,
                                    "type": "aws:cdk:logicalId",
                                  },
                                ],
                                "_validations": Array [],
                                "host": [Circular],
                                "id": "Resource",
                                "scope": [Circular],
                              },
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "rawOverrides": Object {},
                              "roleName": "\${Token[TOKEN.3191]}",
                              "stack": [Circular],
                              "tags": TagManager {
                                "initialTagPriority": 50,
                                "priorities": Map {},
                                "renderedTags": "<unresolved-lazy>",
                                "resourceTypeName": "AWS::IAM::Role",
                                "tagFormatter": StandardFormatter {},
                                "tagPropertyName": "tags",
                                "tags": Map {},
                              },
                              Symbol(@aws-cdk/core.DependableTrait): Object {
                                "dependencyRoots": Array [
                                  [Circular],
                                ],
                              },
                            },
                          },
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "ServiceRole",
                          "scope": [Circular],
                        },
                        "permissionsBoundary": undefined,
                        "physicalName": "\${Token[TOKEN.3191]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "\${Token[TOKEN.3197]}",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "\${Token[TOKEN.3197]}",
                        "roleId": "\${Token[TOKEN.3196]}",
                        "roleName": "\${Token[TOKEN.3199]}",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "runtime": Runtime {
                        "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                        "family": 0,
                        "name": "nodejs14.x",
                        "supportsCodeGuruProfiling": false,
                        "supportsInlineCode": true,
                      },
                      "stack": [Circular],
                      "timeout": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Table": Table {
                      "_allowCrossEnvironment": true,
                      "_physicalName": "testTable",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": "PROVISIONED",
                      "encryptionKey": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "globalReplicaCustomResources": Array [],
                      "globalSecondaryIndexes": Array [],
                      "indexScaling": Map {},
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "localSecondaryIndexes": Array [],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnTable {
                            "_cfnProperties": Object {
                              "attributeDefinitions": Array [
                                Object {
                                  "attributeName": "id",
                                  "attributeType": "S",
                                },
                              ],
                              "billingMode": undefined,
                              "contributorInsightsSpecification": undefined,
                              "globalSecondaryIndexes": "<unresolved-lazy>",
                              "keySchema": Array [
                                Object {
                                  "attributeName": "id",
                                  "keyType": "HASH",
                                },
                              ],
                              "kinesisStreamSpecification": undefined,
                              "localSecondaryIndexes": "<unresolved-lazy>",
                              "pointInTimeRecoverySpecification": undefined,
                              "provisionedThroughput": Object {
                                "readCapacityUnits": 5,
                                "writeCapacityUnits": 5,
                              },
                              "sseSpecification": undefined,
                              "streamSpecification": undefined,
                              "tableClass": undefined,
                              "tableName": "testTable",
                              "timeToLiveSpecification": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3207]}",
                            "attrStreamArn": "\${Token[TOKEN.3208]}",
                            "attributeDefinitions": Array [
                              Object {
                                "attributeName": "id",
                                "attributeType": "S",
                              },
                            ],
                            "billingMode": undefined,
                            "cfnOptions": Object {
                              "deletionPolicy": "Retain",
                              "updateReplacePolicy": "Retain",
                            },
                            "cfnResourceType": "AWS::DynamoDB::Table",
                            "contributorInsightsSpecification": undefined,
                            "dependsOn": Set {},
                            "globalSecondaryIndexes": "<unresolved-lazy>",
                            "keySchema": Array [
                              Object {
                                "attributeName": "id",
                                "keyType": "HASH",
                              },
                            ],
                            "kinesisStreamSpecification": undefined,
                            "localSecondaryIndexes": "<unresolved-lazy>",
                            "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "pointInTimeRecoverySpecification": undefined,
                            "provisionedThroughput": Object {
                              "readCapacityUnits": 5,
                              "writeCapacityUnits": 5,
                            },
                            "rawOverrides": Object {},
                            "sseSpecification": undefined,
                            "stack": [Circular],
                            "streamSpecification": undefined,
                            "tableClass": undefined,
                            "tableName": "testTable",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::DynamoDB::Table",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "timeToLiveSpecification": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "ScalingRole": Import {
                            "_allowCrossEnvironment": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "ScalingRole",
                              "scope": [Circular],
                            },
                            "physicalName": "\${Token[TOKEN.3212]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[TOKEN.3211]}",
                            "trace": undefined,
                            "type": "aws:cdk:hasPhysicalName",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Table",
                        "scope": [Circular],
                      },
                      "nonKeyAttributes": Set {},
                      "physicalName": "testTable",
                      "regionalArns": Array [],
                      "scalingRole": Import {
                        "_allowCrossEnvironment": false,
                        "_physicalName": undefined,
                        "assumeRoleAction": "sts:AssumeRole",
                        "attachedPolicies": AttachedPolicies {
                          "policies": Array [],
                        },
                        "env": Object {
                          "account": "\${Token[AWS.AccountId.0]}",
                          "region": "\${Token[AWS.Region.4]}",
                        },
                        "grantPrincipal": [Circular],
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "ScalingRole",
                          "scope": [Circular],
                        },
                        "physicalName": "\${Token[TOKEN.3212]}",
                        "policyFragment": PrincipalPolicyFragment {
                          "conditions": Object {},
                          "principalJson": Object {
                            "AWS": Array [
                              "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                            ],
                          },
                        },
                        "principalAccount": "\${Token[AWS.AccountId.0]}",
                        "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        "stack": [Circular],
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "secondaryIndexSchemas": Map {},
                      "stack": [Circular],
                      "table": CfnTable {
                        "_cfnProperties": Object {
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "contributorInsightsSpecification": undefined,
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "sseSpecification": undefined,
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "timeToLiveSpecification": undefined,
                        },
                        "attrArn": "\${Token[TOKEN.3207]}",
                        "attrStreamArn": "\${Token[TOKEN.3208]}",
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "cfnOptions": Object {
                          "deletionPolicy": "Retain",
                          "updateReplacePolicy": "Retain",
                        },
                        "cfnResourceType": "AWS::DynamoDB::Table",
                        "contributorInsightsSpecification": undefined,
                        "dependsOn": Set {},
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [
                            Object {
                              "validate": [Function],
                            },
                          ],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "rawOverrides": Object {},
                        "sseSpecification": undefined,
                        "stack": [Circular],
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::DynamoDB::Table",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        "timeToLiveSpecification": undefined,
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "tableArn": "\${Token[TOKEN.3209]}",
                      "tableName": "\${Token[TOKEN.3211]}",
                      "tablePartitionKey": Object {
                        "name": "id",
                        "type": "S",
                      },
                      "tableScaling": Object {},
                      "tableStreamArn": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "fn": StateMachine {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnStateMachine {
                            "_cfnProperties": Object {
                              "definitionString": "\${Token[TOKEN.3223]}",
                              "loggingConfiguration": undefined,
                              "roleArn": "\${Token[TOKEN.3220]}",
                              "stateMachineName": "\${Token[TOKEN.3213]}",
                              "stateMachineType": "EXPRESS",
                              "tracingConfiguration": undefined,
                            },
                            "attrArn": "\${Token[TOKEN.3225]}",
                            "attrName": "\${Token[TOKEN.3226]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::StepFunctions::StateMachine",
                            "definition": undefined,
                            "definitionS3Location": undefined,
                            "definitionString": "\${Token[TOKEN.3235]}",
                            "definitionSubstitutions": undefined,
                            "dependsOn": Set {},
                            "loggingConfiguration": undefined,
                            "logicalId": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {
                                [Circular],
                              },
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "rawOverrides": Object {},
                            "roleArn": "\${Token[TOKEN.3220]}",
                            "stack": [Circular],
                            "stateMachineName": "\${Token[TOKEN.3213]}",
                            "stateMachineType": "EXPRESS",
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::StepFunctions::StateMachine",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            "tracingConfiguration": undefined,
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                          "Role": [Circular],
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "fn",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3213]}",
                      "role": [Circular],
                      "stack": [Circular],
                      "stateMachineArn": "\${Token[TOKEN.3229]}",
                      "stateMachineName": "\${Token[TOKEN.3227]}",
                      "stateMachineType": "EXPRESS",
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "stack",
                  "scope": App {
                    "_assemblyBuilder": CloudAssemblyBuilder {
                      "artifacts": Object {},
                      "assetOutdir": "/tmp/cdk.out15GLN6",
                      "missing": Array [],
                      "outdir": "/tmp/cdk.out15GLN6",
                      "parentBuilder": undefined,
                    },
                    "account": undefined,
                    "node": Node {
                      "_children": Object {
                        "Tree": TreeMetadata {
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Tree",
                            "scope": [Circular],
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "stack": [Circular],
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "",
                      "scope": undefined,
                    },
                    "parentStage": undefined,
                    "region": undefined,
                    "stageName": "",
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "region": "\${Token[AWS.Region.4]}",
                "synthesizer": DefaultStackSynthesizer {
                  "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
                  "_stack": [Circular],
                  "assetManifest": AssetManifestBuilder {
                    "dockerImages": Object {},
                    "files": Object {},
                  },
                  "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
                  "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "bucketPrefix": "",
                  "dockerTagPrefix": "",
                  "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                  "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
                  "props": Object {},
                  "qualifier": "hnb659fds",
                  "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                  "useLookupRoleForStackOperations": true,
                },
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "aws:cdk:stack",
                  "tagFormatter": KeyValueFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "templateFile": "stack.template.json",
                "templateOptions": Object {},
                "terminationProtection": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "users": Array [
                "#{Token[TOKEN.3232]}",
              ],
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [
            Object {
              "validate": [Function],
            },
          ],
          "host": [Circular],
          "id": "DefaultPolicy",
          "scope": [Circular],
        },
        "physicalName": "\${Token[TOKEN.3230]}",
        "referenceTaken": false,
        "roles": Array [
          [Circular],
        ],
        "stack": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3205]}",
                "functionName": "\${Token[TOKEN.3204]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3191]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3195]}",
                        "attrRoleId": "\${Token[TOKEN.3196]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3191]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3191]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3197]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3197]}",
                  "roleId": "\${Token[TOKEN.3196]}",
                  "roleName": "\${Token[TOKEN.3199]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3200]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3197]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3202]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3200]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3197]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3200]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3197]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3202]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3200]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3197]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3191]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3195]}",
                        "attrRoleId": "\${Token[TOKEN.3196]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3191]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3191]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3197]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3197]}",
                  "roleId": "\${Token[TOKEN.3196]}",
                  "roleName": "\${Token[TOKEN.3199]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3207]}",
                      "attrStreamArn": "\${Token[TOKEN.3208]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3212]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3211]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3212]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3207]}",
                  "attrStreamArn": "\${Token[TOKEN.3208]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3209]}",
                "tableName": "\${Token[TOKEN.3211]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": StateMachine {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnStateMachine {
                      "_cfnProperties": Object {
                        "definitionString": "\${Token[TOKEN.3223]}",
                        "loggingConfiguration": undefined,
                        "roleArn": "\${Token[TOKEN.3220]}",
                        "stateMachineName": "\${Token[TOKEN.3213]}",
                        "stateMachineType": "EXPRESS",
                        "tracingConfiguration": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3225]}",
                      "attrName": "\${Token[TOKEN.3226]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::StepFunctions::StateMachine",
                      "definition": undefined,
                      "definitionS3Location": undefined,
                      "definitionString": "\${Token[TOKEN.3235]}",
                      "definitionSubstitutions": undefined,
                      "dependsOn": Set {},
                      "loggingConfiguration": undefined,
                      "logicalId": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          [Circular],
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "rawOverrides": Object {},
                      "roleArn": "\${Token[TOKEN.3220]}",
                      "stack": [Circular],
                      "stateMachineName": "\${Token[TOKEN.3213]}",
                      "stateMachineType": "EXPRESS",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::StepFunctions::StateMachine",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "tracingConfiguration": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Role": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "fn",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3213]}",
                "role": [Circular],
                "stack": [Circular],
                "stateMachineArn": "\${Token[TOKEN.3229]}",
                "stateMachineName": "\${Token[TOKEN.3227]}",
                "stateMachineType": "EXPRESS",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.out15GLN6",
                "missing": Array [],
                "outdir": "/tmp/cdk.out15GLN6",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "users": Array [],
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
      "Resource": CfnRole {
        "_cfnProperties": Object {
          "assumeRolePolicyDocument": Object {
            "Statement": Array [
              Object {
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": Object {
                  "Service": "\${Token[states.amazonaws.com.3215]}",
                },
              },
            ],
            "Version": "2012-10-17",
          },
          "description": undefined,
          "managedPolicyArns": Array [
            "#{Token[TOKEN.3216]}",
          ],
          "maxSessionDuration": undefined,
          "path": undefined,
          "permissionsBoundary": undefined,
          "policies": undefined,
          "roleName": "\${Token[TOKEN.3214]}",
        },
        "assumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "\${Token[states.amazonaws.com.3215]}",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "attrArn": "\${Token[TOKEN.3218]}",
        "attrRoleId": "\${Token[TOKEN.3219]}",
        "cfnOptions": Object {},
        "cfnResourceType": "AWS::IAM::Role",
        "dependsOn": Set {},
        "description": undefined,
        "logicalId": "\${Token[stack.fn.Role.Resource.LogicalID.3217]}",
        "managedPolicyArns": Array [
          "#{Token[TOKEN.3216]}",
        ],
        "maxSessionDuration": undefined,
        "node": Node {
          "_children": Object {},
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [
            Object {
              "data": "\${Token[stack.fn.Role.Resource.LogicalID.3217]}",
              "trace": undefined,
              "type": "aws:cdk:logicalId",
            },
          ],
          "_validations": Array [],
          "host": [Circular],
          "id": "Resource",
          "scope": [Circular],
        },
        "path": undefined,
        "permissionsBoundary": undefined,
        "policies": undefined,
        "rawOverrides": Object {},
        "roleName": "\${Token[TOKEN.3214]}",
        "stack": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3205]}",
                "functionName": "\${Token[TOKEN.3204]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3191]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3195]}",
                        "attrRoleId": "\${Token[TOKEN.3196]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3191]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3191]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3197]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3197]}",
                  "roleId": "\${Token[TOKEN.3196]}",
                  "roleName": "\${Token[TOKEN.3199]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3200]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3197]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3202]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3200]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3197]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3200]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3197]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3202]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3200]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3197]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3191]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3195]}",
                        "attrRoleId": "\${Token[TOKEN.3196]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3191]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3191]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3197]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3197]}",
                  "roleId": "\${Token[TOKEN.3196]}",
                  "roleName": "\${Token[TOKEN.3199]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3207]}",
                      "attrStreamArn": "\${Token[TOKEN.3208]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3212]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3211]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3212]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3207]}",
                  "attrStreamArn": "\${Token[TOKEN.3208]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3209]}",
                "tableName": "\${Token[TOKEN.3211]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": StateMachine {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnStateMachine {
                      "_cfnProperties": Object {
                        "definitionString": "\${Token[TOKEN.3223]}",
                        "loggingConfiguration": undefined,
                        "roleArn": "\${Token[TOKEN.3220]}",
                        "stateMachineName": "\${Token[TOKEN.3213]}",
                        "stateMachineType": "EXPRESS",
                        "tracingConfiguration": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3225]}",
                      "attrName": "\${Token[TOKEN.3226]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::StepFunctions::StateMachine",
                      "definition": undefined,
                      "definitionS3Location": undefined,
                      "definitionString": "\${Token[TOKEN.3235]}",
                      "definitionSubstitutions": undefined,
                      "dependsOn": Set {},
                      "loggingConfiguration": undefined,
                      "logicalId": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          [Circular],
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "rawOverrides": Object {},
                      "roleArn": "\${Token[TOKEN.3220]}",
                      "stack": [Circular],
                      "stateMachineName": "\${Token[TOKEN.3213]}",
                      "stateMachineType": "EXPRESS",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::StepFunctions::StateMachine",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "tracingConfiguration": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "Role": [Circular],
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "fn",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3213]}",
                "role": [Circular],
                "stack": [Circular],
                "stateMachineArn": "\${Token[TOKEN.3229]}",
                "stateMachineName": "\${Token[TOKEN.3227]}",
                "stateMachineType": "EXPRESS",
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.out15GLN6",
                "missing": Array [],
                "outdir": "/tmp/cdk.out15GLN6",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "tags": TagManager {
          "initialTagPriority": 50,
          "priorities": Map {},
          "renderedTags": "<unresolved-lazy>",
          "resourceTypeName": "AWS::IAM::Role",
          "tagFormatter": StandardFormatter {},
          "tagPropertyName": "tags",
          "tags": Map {},
        },
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
    },
    "_context": Object {},
    "_dependencies": Set {},
    "_locked": false,
    "_metadata": Array [],
    "_validations": Array [
      Object {
        "validate": [Function],
      },
    ],
    "host": [Circular],
    "id": "Role",
    "scope": StateMachine {
      "_allowCrossEnvironment": false,
      "_physicalName": undefined,
      "env": Object {
        "account": "\${Token[AWS.AccountId.0]}",
        "region": "\${Token[AWS.Region.4]}",
      },
      "node": Node {
        "_children": Object {
          "Resource": CfnStateMachine {
            "_cfnProperties": Object {
              "definitionString": "\${Token[TOKEN.3223]}",
              "loggingConfiguration": undefined,
              "roleArn": "\${Token[TOKEN.3220]}",
              "stateMachineName": "\${Token[TOKEN.3213]}",
              "stateMachineType": "EXPRESS",
              "tracingConfiguration": undefined,
            },
            "attrArn": "\${Token[TOKEN.3225]}",
            "attrName": "\${Token[TOKEN.3226]}",
            "cfnOptions": Object {},
            "cfnResourceType": "AWS::StepFunctions::StateMachine",
            "definition": undefined,
            "definitionS3Location": undefined,
            "definitionString": "\${Token[TOKEN.3235]}",
            "definitionSubstitutions": undefined,
            "dependsOn": Set {},
            "loggingConfiguration": undefined,
            "logicalId": "\${Token[stack.fn.Resource.LogicalID.3224]}",
            "node": Node {
              "_children": Object {},
              "_context": Object {},
              "_dependencies": Set {
                [Circular],
              },
              "_locked": false,
              "_metadata": Array [
                Object {
                  "data": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                  "trace": undefined,
                  "type": "aws:cdk:logicalId",
                },
              ],
              "_validations": Array [],
              "host": [Circular],
              "id": "Resource",
              "scope": [Circular],
            },
            "rawOverrides": Object {},
            "roleArn": "\${Token[TOKEN.3220]}",
            "stack": Stack {
              "_logicalIds": LogicalIDs {
                "renames": Object {},
                "reverse": Object {},
              },
              "_missingContext": Array [],
              "_stackDependencies": Object {},
              "_stackName": "stack",
              "_versionReportingEnabled": undefined,
              "account": "\${Token[AWS.AccountId.0]}",
              "artifactId": "stack",
              "environment": "aws://unknown-account/unknown-region",
              "node": Node {
                "_children": Object {
                  "F": Function {
                    "_allowCrossEnvironment": true,
                    "_architecture": undefined,
                    "_functionUrlInvocationGrants": Object {},
                    "_invocationGrants": Object {},
                    "_layers": Array [],
                    "_physicalName": "testFunction",
                    "_warnIfCurrentVersionCalled": false,
                    "architecture": Architecture {
                      "dockerPlatform": "linux/amd64",
                      "name": "x86_64",
                    },
                    "canCreatePermissions": true,
                    "currentVersionOptions": undefined,
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "environment": Object {},
                    "functionArn": "\${Token[TOKEN.3205]}",
                    "functionName": "\${Token[TOKEN.3204]}",
                    "grantPrincipal": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnFunction {
                          "_cfnProperties": Object {
                            "architectures": undefined,
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3200]}",
                            ],
                            "memorySize": undefined,
                            "packageType": undefined,
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3197]}",
                            "runtime": "nodejs14.x",
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                          },
                          "architectures": undefined,
                          "attrArn": "\${Token[TOKEN.3202]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::Lambda::Function",
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "dependsOn": Set {},
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3200]}",
                          ],
                          "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                          "memorySize": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {
                              Role {
                                "_allowCrossEnvironment": false,
                                "_didSplit": false,
                                "_physicalName": undefined,
                                "assumeRoleAction": "sts:AssumeRole",
                                "assumeRolePolicy": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attachedPolicies": AttachedPolicies {
                                  "policies": Array [],
                                },
                                "dependables": Map {},
                                "env": Object {
                                  "account": "\${Token[AWS.AccountId.0]}",
                                  "region": "\${Token[AWS.Region.4]}",
                                },
                                "grantPrincipal": [Circular],
                                "inlinePolicies": Object {},
                                "managedPolicies": Array [
                                  AwsManagedPolicy {
                                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                  },
                                ],
                                "node": Node {
                                  "_children": Object {
                                    "Resource": CfnRole {
                                      "_cfnProperties": Object {
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "description": undefined,
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3193]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "roleName": "\${Token[TOKEN.3191]}",
                                      },
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "attrArn": "\${Token[TOKEN.3195]}",
                                      "attrRoleId": "\${Token[TOKEN.3196]}",
                                      "cfnOptions": Object {},
                                      "cfnResourceType": "AWS::IAM::Role",
                                      "dependsOn": Set {},
                                      "description": undefined,
                                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3193]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "node": Node {
                                        "_children": Object {},
                                        "_context": Object {},
                                        "_dependencies": Set {},
                                        "_locked": false,
                                        "_metadata": Array [
                                          Object {
                                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                            "trace": undefined,
                                            "type": "aws:cdk:logicalId",
                                          },
                                        ],
                                        "_validations": Array [],
                                        "host": [Circular],
                                        "id": "Resource",
                                        "scope": [Circular],
                                      },
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "rawOverrides": Object {},
                                      "roleName": "\${Token[TOKEN.3191]}",
                                      "stack": [Circular],
                                      "tags": TagManager {
                                        "initialTagPriority": 50,
                                        "priorities": Map {},
                                        "renderedTags": "<unresolved-lazy>",
                                        "resourceTypeName": "AWS::IAM::Role",
                                        "tagFormatter": StandardFormatter {},
                                        "tagPropertyName": "tags",
                                        "tags": Map {},
                                      },
                                      Symbol(@aws-cdk/core.DependableTrait): Object {
                                        "dependencyRoots": Array [
                                          [Circular],
                                        ],
                                      },
                                    },
                                  },
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [],
                                  "_validations": Array [
                                    Object {
                                      "validate": [Function],
                                    },
                                  ],
                                  "host": [Circular],
                                  "id": "ServiceRole",
                                  "scope": [Circular],
                                },
                                "permissionsBoundary": undefined,
                                "physicalName": "\${Token[TOKEN.3191]}",
                                "policyFragment": PrincipalPolicyFragment {
                                  "conditions": Object {},
                                  "principalJson": Object {
                                    "AWS": Array [
                                      "\${Token[TOKEN.3197]}",
                                    ],
                                  },
                                },
                                "principalAccount": "\${Token[AWS.AccountId.0]}",
                                "roleArn": "\${Token[TOKEN.3197]}",
                                "roleId": "\${Token[TOKEN.3196]}",
                                "roleName": "\${Token[TOKEN.3199]}",
                                "stack": [Circular],
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "packageType": undefined,
                          "rawOverrides": Object {},
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3197]}",
                          "runtime": "nodejs14.x",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::Lambda::Function",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "ServiceRole": Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3191]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3195]}",
                                "attrRoleId": "\${Token[TOKEN.3196]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3191]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3191]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3197]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3197]}",
                          "roleId": "\${Token[TOKEN.3196]}",
                          "roleName": "\${Token[TOKEN.3199]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "F",
                      "scope": [Circular],
                    },
                    "permissionsNode": Node {
                      "_children": Object {
                        "Resource": CfnFunction {
                          "_cfnProperties": Object {
                            "architectures": undefined,
                            "code": Object {
                              "imageUri": undefined,
                              "s3Bucket": undefined,
                              "s3Key": undefined,
                              "s3ObjectVersion": undefined,
                              "zipFile": "exports.handler = function() { return null; }",
                            },
                            "codeSigningConfigArn": undefined,
                            "deadLetterConfig": undefined,
                            "description": undefined,
                            "environment": "<unresolved-lazy>",
                            "ephemeralStorage": undefined,
                            "fileSystemConfigs": undefined,
                            "functionName": "testFunction",
                            "handler": "index.handler",
                            "imageConfig": undefined,
                            "kmsKeyArn": undefined,
                            "layers": Array [
                              "#{Token[TOKEN.3200]}",
                            ],
                            "memorySize": undefined,
                            "packageType": undefined,
                            "reservedConcurrentExecutions": undefined,
                            "role": "\${Token[TOKEN.3197]}",
                            "runtime": "nodejs14.x",
                            "timeout": undefined,
                            "tracingConfig": undefined,
                            "vpcConfig": undefined,
                          },
                          "architectures": undefined,
                          "attrArn": "\${Token[TOKEN.3202]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::Lambda::Function",
                          "code": Object {
                            "imageUri": undefined,
                            "s3Bucket": undefined,
                            "s3Key": undefined,
                            "s3ObjectVersion": undefined,
                            "zipFile": "exports.handler = function() { return null; }",
                          },
                          "codeSigningConfigArn": undefined,
                          "deadLetterConfig": undefined,
                          "dependsOn": Set {},
                          "description": undefined,
                          "environment": "<unresolved-lazy>",
                          "ephemeralStorage": undefined,
                          "fileSystemConfigs": undefined,
                          "functionName": "testFunction",
                          "handler": "index.handler",
                          "imageConfig": undefined,
                          "kmsKeyArn": undefined,
                          "layers": Array [
                            "#{Token[TOKEN.3200]}",
                          ],
                          "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                          "memorySize": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {
                              Role {
                                "_allowCrossEnvironment": false,
                                "_didSplit": false,
                                "_physicalName": undefined,
                                "assumeRoleAction": "sts:AssumeRole",
                                "assumeRolePolicy": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attachedPolicies": AttachedPolicies {
                                  "policies": Array [],
                                },
                                "dependables": Map {},
                                "env": Object {
                                  "account": "\${Token[AWS.AccountId.0]}",
                                  "region": "\${Token[AWS.Region.4]}",
                                },
                                "grantPrincipal": [Circular],
                                "inlinePolicies": Object {},
                                "managedPolicies": Array [
                                  AwsManagedPolicy {
                                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                                  },
                                ],
                                "node": Node {
                                  "_children": Object {
                                    "Resource": CfnRole {
                                      "_cfnProperties": Object {
                                        "assumeRolePolicyDocument": Object {
                                          "Statement": Array [
                                            Object {
                                              "Action": "sts:AssumeRole",
                                              "Effect": "Allow",
                                              "Principal": Object {
                                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                              },
                                            },
                                          ],
                                          "Version": "2012-10-17",
                                        },
                                        "description": undefined,
                                        "managedPolicyArns": Array [
                                          "#{Token[TOKEN.3193]}",
                                        ],
                                        "maxSessionDuration": undefined,
                                        "path": undefined,
                                        "permissionsBoundary": undefined,
                                        "policies": undefined,
                                        "roleName": "\${Token[TOKEN.3191]}",
                                      },
                                      "assumeRolePolicyDocument": Object {
                                        "Statement": Array [
                                          Object {
                                            "Action": "sts:AssumeRole",
                                            "Effect": "Allow",
                                            "Principal": Object {
                                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                            },
                                          },
                                        ],
                                        "Version": "2012-10-17",
                                      },
                                      "attrArn": "\${Token[TOKEN.3195]}",
                                      "attrRoleId": "\${Token[TOKEN.3196]}",
                                      "cfnOptions": Object {},
                                      "cfnResourceType": "AWS::IAM::Role",
                                      "dependsOn": Set {},
                                      "description": undefined,
                                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                      "managedPolicyArns": Array [
                                        "#{Token[TOKEN.3193]}",
                                      ],
                                      "maxSessionDuration": undefined,
                                      "node": Node {
                                        "_children": Object {},
                                        "_context": Object {},
                                        "_dependencies": Set {},
                                        "_locked": false,
                                        "_metadata": Array [
                                          Object {
                                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                            "trace": undefined,
                                            "type": "aws:cdk:logicalId",
                                          },
                                        ],
                                        "_validations": Array [],
                                        "host": [Circular],
                                        "id": "Resource",
                                        "scope": [Circular],
                                      },
                                      "path": undefined,
                                      "permissionsBoundary": undefined,
                                      "policies": undefined,
                                      "rawOverrides": Object {},
                                      "roleName": "\${Token[TOKEN.3191]}",
                                      "stack": [Circular],
                                      "tags": TagManager {
                                        "initialTagPriority": 50,
                                        "priorities": Map {},
                                        "renderedTags": "<unresolved-lazy>",
                                        "resourceTypeName": "AWS::IAM::Role",
                                        "tagFormatter": StandardFormatter {},
                                        "tagPropertyName": "tags",
                                        "tags": Map {},
                                      },
                                      Symbol(@aws-cdk/core.DependableTrait): Object {
                                        "dependencyRoots": Array [
                                          [Circular],
                                        ],
                                      },
                                    },
                                  },
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [],
                                  "_validations": Array [
                                    Object {
                                      "validate": [Function],
                                    },
                                  ],
                                  "host": [Circular],
                                  "id": "ServiceRole",
                                  "scope": [Circular],
                                },
                                "permissionsBoundary": undefined,
                                "physicalName": "\${Token[TOKEN.3191]}",
                                "policyFragment": PrincipalPolicyFragment {
                                  "conditions": Object {},
                                  "principalJson": Object {
                                    "AWS": Array [
                                      "\${Token[TOKEN.3197]}",
                                    ],
                                  },
                                },
                                "principalAccount": "\${Token[AWS.AccountId.0]}",
                                "roleArn": "\${Token[TOKEN.3197]}",
                                "roleId": "\${Token[TOKEN.3196]}",
                                "roleName": "\${Token[TOKEN.3199]}",
                                "stack": [Circular],
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "packageType": undefined,
                          "rawOverrides": Object {},
                          "reservedConcurrentExecutions": undefined,
                          "role": "\${Token[TOKEN.3197]}",
                          "runtime": "nodejs14.x",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::Lambda::Function",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          "timeout": undefined,
                          "tracingConfig": undefined,
                          "vpcConfig": undefined,
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "ServiceRole": Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3191]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3195]}",
                                "attrRoleId": "\${Token[TOKEN.3196]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3191]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3191]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3197]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3197]}",
                          "roleId": "\${Token[TOKEN.3196]}",
                          "roleName": "\${Token[TOKEN.3199]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "F",
                      "scope": [Circular],
                    },
                    "physicalName": "testFunction",
                    "role": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "runtime": Runtime {
                      "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                      "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                      "family": 0,
                      "name": "nodejs14.x",
                      "supportsCodeGuruProfiling": false,
                      "supportsInlineCode": true,
                    },
                    "stack": [Circular],
                    "timeout": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "Table": Table {
                    "_allowCrossEnvironment": true,
                    "_physicalName": "testTable",
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": "PROVISIONED",
                    "encryptionKey": undefined,
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "globalReplicaCustomResources": Array [],
                    "globalSecondaryIndexes": Array [],
                    "indexScaling": Map {},
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "localSecondaryIndexes": Array [],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnTable {
                          "_cfnProperties": Object {
                            "attributeDefinitions": Array [
                              Object {
                                "attributeName": "id",
                                "attributeType": "S",
                              },
                            ],
                            "billingMode": undefined,
                            "contributorInsightsSpecification": undefined,
                            "globalSecondaryIndexes": "<unresolved-lazy>",
                            "keySchema": Array [
                              Object {
                                "attributeName": "id",
                                "keyType": "HASH",
                              },
                            ],
                            "kinesisStreamSpecification": undefined,
                            "localSecondaryIndexes": "<unresolved-lazy>",
                            "pointInTimeRecoverySpecification": undefined,
                            "provisionedThroughput": Object {
                              "readCapacityUnits": 5,
                              "writeCapacityUnits": 5,
                            },
                            "sseSpecification": undefined,
                            "streamSpecification": undefined,
                            "tableClass": undefined,
                            "tableName": "testTable",
                            "timeToLiveSpecification": undefined,
                          },
                          "attrArn": "\${Token[TOKEN.3207]}",
                          "attrStreamArn": "\${Token[TOKEN.3208]}",
                          "attributeDefinitions": Array [
                            Object {
                              "attributeName": "id",
                              "attributeType": "S",
                            },
                          ],
                          "billingMode": undefined,
                          "cfnOptions": Object {
                            "deletionPolicy": "Retain",
                            "updateReplacePolicy": "Retain",
                          },
                          "cfnResourceType": "AWS::DynamoDB::Table",
                          "contributorInsightsSpecification": undefined,
                          "dependsOn": Set {},
                          "globalSecondaryIndexes": "<unresolved-lazy>",
                          "keySchema": Array [
                            Object {
                              "attributeName": "id",
                              "keyType": "HASH",
                            },
                          ],
                          "kinesisStreamSpecification": undefined,
                          "localSecondaryIndexes": "<unresolved-lazy>",
                          "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "pointInTimeRecoverySpecification": undefined,
                          "provisionedThroughput": Object {
                            "readCapacityUnits": 5,
                            "writeCapacityUnits": 5,
                          },
                          "rawOverrides": Object {},
                          "sseSpecification": undefined,
                          "stack": [Circular],
                          "streamSpecification": undefined,
                          "tableClass": undefined,
                          "tableName": "testTable",
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::DynamoDB::Table",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          "timeToLiveSpecification": undefined,
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                        "ScalingRole": Import {
                          "_allowCrossEnvironment": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "ScalingRole",
                            "scope": [Circular],
                          },
                          "physicalName": "\${Token[TOKEN.3212]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[TOKEN.3211]}",
                          "trace": undefined,
                          "type": "aws:cdk:hasPhysicalName",
                        },
                      ],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "Table",
                      "scope": [Circular],
                    },
                    "nonKeyAttributes": Set {},
                    "physicalName": "testTable",
                    "regionalArns": Array [],
                    "scalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3212]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "secondaryIndexSchemas": Map {},
                    "stack": [Circular],
                    "table": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3207]}",
                      "attrStreamArn": "\${Token[TOKEN.3208]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "tableArn": "\${Token[TOKEN.3209]}",
                    "tableName": "\${Token[TOKEN.3211]}",
                    "tablePartitionKey": Object {
                      "name": "id",
                      "type": "S",
                    },
                    "tableScaling": Object {},
                    "tableStreamArn": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "fn": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "stack",
                "scope": App {
                  "_assemblyBuilder": CloudAssemblyBuilder {
                    "artifacts": Object {},
                    "assetOutdir": "/tmp/cdk.out15GLN6",
                    "missing": Array [],
                    "outdir": "/tmp/cdk.out15GLN6",
                    "parentBuilder": undefined,
                  },
                  "account": undefined,
                  "node": Node {
                    "_children": Object {
                      "Tree": TreeMetadata {
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Tree",
                          "scope": [Circular],
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                      "stack": [Circular],
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "",
                    "scope": undefined,
                  },
                  "parentStage": undefined,
                  "region": undefined,
                  "stageName": "",
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "region": "\${Token[AWS.Region.4]}",
              "synthesizer": DefaultStackSynthesizer {
                "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
                "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
                "_stack": [Circular],
                "assetManifest": AssetManifestBuilder {
                  "dockerImages": Object {},
                  "files": Object {},
                },
                "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
                "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                "bucketPrefix": "",
                "dockerTagPrefix": "",
                "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
                "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
                "props": Object {},
                "qualifier": "hnb659fds",
                "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
                "useLookupRoleForStackOperations": true,
              },
              "tags": TagManager {
                "initialTagPriority": 50,
                "priorities": Map {},
                "renderedTags": "<unresolved-lazy>",
                "resourceTypeName": "aws:cdk:stack",
                "tagFormatter": KeyValueFormatter {},
                "tagPropertyName": "tags",
                "tags": Map {},
              },
              "templateFile": "stack.template.json",
              "templateOptions": Object {},
              "terminationProtection": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "stateMachineName": "\${Token[TOKEN.3213]}",
            "stateMachineType": "EXPRESS",
            "tags": TagManager {
              "initialTagPriority": 50,
              "priorities": Map {},
              "renderedTags": "<unresolved-lazy>",
              "resourceTypeName": "AWS::StepFunctions::StateMachine",
              "tagFormatter": StandardFormatter {},
              "tagPropertyName": "tags",
              "tags": Map {},
            },
            "tracingConfiguration": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "Role": [Circular],
        },
        "_context": Object {},
        "_dependencies": Set {},
        "_locked": false,
        "_metadata": Array [],
        "_validations": Array [],
        "host": [Circular],
        "id": "fn",
        "scope": Stack {
          "_logicalIds": LogicalIDs {
            "renames": Object {},
            "reverse": Object {},
          },
          "_missingContext": Array [],
          "_stackDependencies": Object {},
          "_stackName": "stack",
          "_versionReportingEnabled": undefined,
          "account": "\${Token[AWS.AccountId.0]}",
          "artifactId": "stack",
          "environment": "aws://unknown-account/unknown-region",
          "node": Node {
            "_children": Object {
              "F": Function {
                "_allowCrossEnvironment": true,
                "_architecture": undefined,
                "_functionUrlInvocationGrants": Object {},
                "_invocationGrants": Object {},
                "_layers": Array [],
                "_physicalName": "testFunction",
                "_warnIfCurrentVersionCalled": false,
                "architecture": Architecture {
                  "dockerPlatform": "linux/amd64",
                  "name": "x86_64",
                },
                "canCreatePermissions": true,
                "currentVersionOptions": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "environment": Object {},
                "functionArn": "\${Token[TOKEN.3205]}",
                "functionName": "\${Token[TOKEN.3204]}",
                "grantPrincipal": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3191]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3195]}",
                        "attrRoleId": "\${Token[TOKEN.3196]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3191]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3191]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3197]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3197]}",
                  "roleId": "\${Token[TOKEN.3196]}",
                  "roleName": "\${Token[TOKEN.3199]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "node": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3200]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3197]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3202]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3200]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3197]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "permissionsNode": Node {
                  "_children": Object {
                    "Resource": CfnFunction {
                      "_cfnProperties": Object {
                        "architectures": undefined,
                        "code": Object {
                          "imageUri": undefined,
                          "s3Bucket": undefined,
                          "s3Key": undefined,
                          "s3ObjectVersion": undefined,
                          "zipFile": "exports.handler = function() { return null; }",
                        },
                        "codeSigningConfigArn": undefined,
                        "deadLetterConfig": undefined,
                        "description": undefined,
                        "environment": "<unresolved-lazy>",
                        "ephemeralStorage": undefined,
                        "fileSystemConfigs": undefined,
                        "functionName": "testFunction",
                        "handler": "index.handler",
                        "imageConfig": undefined,
                        "kmsKeyArn": undefined,
                        "layers": Array [
                          "#{Token[TOKEN.3200]}",
                        ],
                        "memorySize": undefined,
                        "packageType": undefined,
                        "reservedConcurrentExecutions": undefined,
                        "role": "\${Token[TOKEN.3197]}",
                        "runtime": "nodejs14.x",
                        "timeout": undefined,
                        "tracingConfig": undefined,
                        "vpcConfig": undefined,
                      },
                      "architectures": undefined,
                      "attrArn": "\${Token[TOKEN.3202]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::Lambda::Function",
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "dependsOn": Set {},
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3200]}",
                      ],
                      "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                      "memorySize": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {
                          Role {
                            "_allowCrossEnvironment": false,
                            "_didSplit": false,
                            "_physicalName": undefined,
                            "assumeRoleAction": "sts:AssumeRole",
                            "assumeRolePolicy": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attachedPolicies": AttachedPolicies {
                              "policies": Array [],
                            },
                            "dependables": Map {},
                            "env": Object {
                              "account": "\${Token[AWS.AccountId.0]}",
                              "region": "\${Token[AWS.Region.4]}",
                            },
                            "grantPrincipal": [Circular],
                            "inlinePolicies": Object {},
                            "managedPolicies": Array [
                              AwsManagedPolicy {
                                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                              },
                            ],
                            "node": Node {
                              "_children": Object {
                                "Resource": CfnRole {
                                  "_cfnProperties": Object {
                                    "assumeRolePolicyDocument": Object {
                                      "Statement": Array [
                                        Object {
                                          "Action": "sts:AssumeRole",
                                          "Effect": "Allow",
                                          "Principal": Object {
                                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                          },
                                        },
                                      ],
                                      "Version": "2012-10-17",
                                    },
                                    "description": undefined,
                                    "managedPolicyArns": Array [
                                      "#{Token[TOKEN.3193]}",
                                    ],
                                    "maxSessionDuration": undefined,
                                    "path": undefined,
                                    "permissionsBoundary": undefined,
                                    "policies": undefined,
                                    "roleName": "\${Token[TOKEN.3191]}",
                                  },
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "attrArn": "\${Token[TOKEN.3195]}",
                                  "attrRoleId": "\${Token[TOKEN.3196]}",
                                  "cfnOptions": Object {},
                                  "cfnResourceType": "AWS::IAM::Role",
                                  "dependsOn": Set {},
                                  "description": undefined,
                                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "node": Node {
                                    "_children": Object {},
                                    "_context": Object {},
                                    "_dependencies": Set {},
                                    "_locked": false,
                                    "_metadata": Array [
                                      Object {
                                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                        "trace": undefined,
                                        "type": "aws:cdk:logicalId",
                                      },
                                    ],
                                    "_validations": Array [],
                                    "host": [Circular],
                                    "id": "Resource",
                                    "scope": [Circular],
                                  },
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "rawOverrides": Object {},
                                  "roleName": "\${Token[TOKEN.3191]}",
                                  "stack": [Circular],
                                  "tags": TagManager {
                                    "initialTagPriority": 50,
                                    "priorities": Map {},
                                    "renderedTags": "<unresolved-lazy>",
                                    "resourceTypeName": "AWS::IAM::Role",
                                    "tagFormatter": StandardFormatter {},
                                    "tagPropertyName": "tags",
                                    "tags": Map {},
                                  },
                                  Symbol(@aws-cdk/core.DependableTrait): Object {
                                    "dependencyRoots": Array [
                                      [Circular],
                                    ],
                                  },
                                },
                              },
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [],
                              "_validations": Array [
                                Object {
                                  "validate": [Function],
                                },
                              ],
                              "host": [Circular],
                              "id": "ServiceRole",
                              "scope": [Circular],
                            },
                            "permissionsBoundary": undefined,
                            "physicalName": "\${Token[TOKEN.3191]}",
                            "policyFragment": PrincipalPolicyFragment {
                              "conditions": Object {},
                              "principalJson": Object {
                                "AWS": Array [
                                  "\${Token[TOKEN.3197]}",
                                ],
                              },
                            },
                            "principalAccount": "\${Token[AWS.AccountId.0]}",
                            "roleArn": "\${Token[TOKEN.3197]}",
                            "roleId": "\${Token[TOKEN.3196]}",
                            "roleName": "\${Token[TOKEN.3199]}",
                            "stack": [Circular],
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "packageType": undefined,
                      "rawOverrides": Object {},
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3197]}",
                      "runtime": "nodejs14.x",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::Lambda::Function",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ServiceRole": Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "F",
                  "scope": [Circular],
                },
                "physicalName": "testFunction",
                "role": Role {
                  "_allowCrossEnvironment": false,
                  "_didSplit": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "assumeRolePolicy": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "dependables": Map {},
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "inlinePolicies": Object {},
                  "managedPolicies": Array [
                    AwsManagedPolicy {
                      "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    },
                  ],
                  "node": Node {
                    "_children": Object {
                      "Resource": CfnRole {
                        "_cfnProperties": Object {
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "description": undefined,
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "roleName": "\${Token[TOKEN.3191]}",
                        },
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "attrArn": "\${Token[TOKEN.3195]}",
                        "attrRoleId": "\${Token[TOKEN.3196]}",
                        "cfnOptions": Object {},
                        "cfnResourceType": "AWS::IAM::Role",
                        "dependsOn": Set {},
                        "description": undefined,
                        "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "node": Node {
                          "_children": Object {},
                          "_context": Object {},
                          "_dependencies": Set {},
                          "_locked": false,
                          "_metadata": Array [
                            Object {
                              "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                              "trace": undefined,
                              "type": "aws:cdk:logicalId",
                            },
                          ],
                          "_validations": Array [],
                          "host": [Circular],
                          "id": "Resource",
                          "scope": [Circular],
                        },
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "rawOverrides": Object {},
                        "roleName": "\${Token[TOKEN.3191]}",
                        "stack": [Circular],
                        "tags": TagManager {
                          "initialTagPriority": 50,
                          "priorities": Map {},
                          "renderedTags": "<unresolved-lazy>",
                          "resourceTypeName": "AWS::IAM::Role",
                          "tagFormatter": StandardFormatter {},
                          "tagPropertyName": "tags",
                          "tags": Map {},
                        },
                        Symbol(@aws-cdk/core.DependableTrait): Object {
                          "dependencyRoots": Array [
                            [Circular],
                          ],
                        },
                      },
                    },
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "ServiceRole",
                    "scope": [Circular],
                  },
                  "permissionsBoundary": undefined,
                  "physicalName": "\${Token[TOKEN.3191]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "\${Token[TOKEN.3197]}",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "\${Token[TOKEN.3197]}",
                  "roleId": "\${Token[TOKEN.3196]}",
                  "roleName": "\${Token[TOKEN.3199]}",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "runtime": Runtime {
                  "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                  "family": 0,
                  "name": "nodejs14.x",
                  "supportsCodeGuruProfiling": false,
                  "supportsInlineCode": true,
                },
                "stack": [Circular],
                "timeout": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Table": Table {
                "_allowCrossEnvironment": true,
                "_physicalName": "testTable",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": "PROVISIONED",
                "encryptionKey": undefined,
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "globalReplicaCustomResources": Array [],
                "globalSecondaryIndexes": Array [],
                "indexScaling": Map {},
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "localSecondaryIndexes": Array [],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnTable {
                      "_cfnProperties": Object {
                        "attributeDefinitions": Array [
                          Object {
                            "attributeName": "id",
                            "attributeType": "S",
                          },
                        ],
                        "billingMode": undefined,
                        "contributorInsightsSpecification": undefined,
                        "globalSecondaryIndexes": "<unresolved-lazy>",
                        "keySchema": Array [
                          Object {
                            "attributeName": "id",
                            "keyType": "HASH",
                          },
                        ],
                        "kinesisStreamSpecification": undefined,
                        "localSecondaryIndexes": "<unresolved-lazy>",
                        "pointInTimeRecoverySpecification": undefined,
                        "provisionedThroughput": Object {
                          "readCapacityUnits": 5,
                          "writeCapacityUnits": 5,
                        },
                        "sseSpecification": undefined,
                        "streamSpecification": undefined,
                        "tableClass": undefined,
                        "tableName": "testTable",
                        "timeToLiveSpecification": undefined,
                      },
                      "attrArn": "\${Token[TOKEN.3207]}",
                      "attrStreamArn": "\${Token[TOKEN.3208]}",
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "cfnOptions": Object {
                        "deletionPolicy": "Retain",
                        "updateReplacePolicy": "Retain",
                      },
                      "cfnResourceType": "AWS::DynamoDB::Table",
                      "contributorInsightsSpecification": undefined,
                      "dependsOn": Set {},
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "rawOverrides": Object {},
                      "sseSpecification": undefined,
                      "stack": [Circular],
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::DynamoDB::Table",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      "timeToLiveSpecification": undefined,
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                    "ScalingRole": Import {
                      "_allowCrossEnvironment": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "ScalingRole",
                        "scope": [Circular],
                      },
                      "physicalName": "\${Token[TOKEN.3212]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[TOKEN.3211]}",
                      "trace": undefined,
                      "type": "aws:cdk:hasPhysicalName",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Table",
                  "scope": [Circular],
                },
                "nonKeyAttributes": Set {},
                "physicalName": "testTable",
                "regionalArns": Array [],
                "scalingRole": Import {
                  "_allowCrossEnvironment": false,
                  "_physicalName": undefined,
                  "assumeRoleAction": "sts:AssumeRole",
                  "attachedPolicies": AttachedPolicies {
                    "policies": Array [],
                  },
                  "env": Object {
                    "account": "\${Token[AWS.AccountId.0]}",
                    "region": "\${Token[AWS.Region.4]}",
                  },
                  "grantPrincipal": [Circular],
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "ScalingRole",
                    "scope": [Circular],
                  },
                  "physicalName": "\${Token[TOKEN.3212]}",
                  "policyFragment": PrincipalPolicyFragment {
                    "conditions": Object {},
                    "principalJson": Object {
                      "AWS": Array [
                        "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                      ],
                    },
                  },
                  "principalAccount": "\${Token[AWS.AccountId.0]}",
                  "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                  "stack": [Circular],
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "secondaryIndexSchemas": Map {},
                "stack": [Circular],
                "table": CfnTable {
                  "_cfnProperties": Object {
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "contributorInsightsSpecification": undefined,
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "sseSpecification": undefined,
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "timeToLiveSpecification": undefined,
                  },
                  "attrArn": "\${Token[TOKEN.3207]}",
                  "attrStreamArn": "\${Token[TOKEN.3208]}",
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "cfnOptions": Object {
                    "deletionPolicy": "Retain",
                    "updateReplacePolicy": "Retain",
                  },
                  "cfnResourceType": "AWS::DynamoDB::Table",
                  "contributorInsightsSpecification": undefined,
                  "dependsOn": Set {},
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [
                      Object {
                        "validate": [Function],
                      },
                    ],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "rawOverrides": Object {},
                  "sseSpecification": undefined,
                  "stack": [Circular],
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::DynamoDB::Table",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  "timeToLiveSpecification": undefined,
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "tableArn": "\${Token[TOKEN.3209]}",
                "tableName": "\${Token[TOKEN.3211]}",
                "tablePartitionKey": Object {
                  "name": "id",
                  "type": "S",
                },
                "tableScaling": Object {},
                "tableStreamArn": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "fn": [Circular],
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "stack",
            "scope": App {
              "_assemblyBuilder": CloudAssemblyBuilder {
                "artifacts": Object {},
                "assetOutdir": "/tmp/cdk.out15GLN6",
                "missing": Array [],
                "outdir": "/tmp/cdk.out15GLN6",
                "parentBuilder": undefined,
              },
              "account": undefined,
              "node": Node {
                "_children": Object {
                  "Tree": TreeMetadata {
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Tree",
                      "scope": [Circular],
                    },
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "stack": [Circular],
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "",
                "scope": undefined,
              },
              "parentStage": undefined,
              "region": undefined,
              "stageName": "",
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
          },
          "region": "\${Token[AWS.Region.4]}",
          "synthesizer": DefaultStackSynthesizer {
            "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
            "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
            "_stack": [Circular],
            "assetManifest": AssetManifestBuilder {
              "dockerImages": Object {},
              "files": Object {},
            },
            "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
            "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
            "bucketPrefix": "",
            "dockerTagPrefix": "",
            "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
            "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
            "props": Object {},
            "qualifier": "hnb659fds",
            "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
            "useLookupRoleForStackOperations": true,
          },
          "tags": TagManager {
            "initialTagPriority": 50,
            "priorities": Map {},
            "renderedTags": "<unresolved-lazy>",
            "resourceTypeName": "aws:cdk:stack",
            "tagFormatter": KeyValueFormatter {},
            "tagPropertyName": "tags",
            "tags": Map {},
          },
          "templateFile": "stack.template.json",
          "templateOptions": Object {},
          "terminationProtection": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "physicalName": "\${Token[TOKEN.3213]}",
      "role": [Circular],
      "stack": Stack {
        "_logicalIds": LogicalIDs {
          "renames": Object {},
          "reverse": Object {},
        },
        "_missingContext": Array [],
        "_stackDependencies": Object {},
        "_stackName": "stack",
        "_versionReportingEnabled": undefined,
        "account": "\${Token[AWS.AccountId.0]}",
        "artifactId": "stack",
        "environment": "aws://unknown-account/unknown-region",
        "node": Node {
          "_children": Object {
            "F": Function {
              "_allowCrossEnvironment": true,
              "_architecture": undefined,
              "_functionUrlInvocationGrants": Object {},
              "_invocationGrants": Object {},
              "_layers": Array [],
              "_physicalName": "testFunction",
              "_warnIfCurrentVersionCalled": false,
              "architecture": Architecture {
                "dockerPlatform": "linux/amd64",
                "name": "x86_64",
              },
              "canCreatePermissions": true,
              "currentVersionOptions": undefined,
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "environment": Object {},
              "functionArn": "\${Token[TOKEN.3205]}",
              "functionName": "\${Token[TOKEN.3204]}",
              "grantPrincipal": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3191]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3195]}",
                      "attrRoleId": "\${Token[TOKEN.3196]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3193]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3191]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3191]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3197]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3197]}",
                "roleId": "\${Token[TOKEN.3196]}",
                "roleName": "\${Token[TOKEN.3199]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "node": Node {
                "_children": Object {
                  "Resource": CfnFunction {
                    "_cfnProperties": Object {
                      "architectures": undefined,
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3200]}",
                      ],
                      "memorySize": undefined,
                      "packageType": undefined,
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3197]}",
                      "runtime": "nodejs14.x",
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                    },
                    "architectures": undefined,
                    "attrArn": "\${Token[TOKEN.3202]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::Lambda::Function",
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "dependsOn": Set {},
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3200]}",
                    ],
                    "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                    "memorySize": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {
                        Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3191]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3195]}",
                                "attrRoleId": "\${Token[TOKEN.3196]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3191]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3191]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3197]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3197]}",
                          "roleId": "\${Token[TOKEN.3196]}",
                          "roleName": "\${Token[TOKEN.3199]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "packageType": undefined,
                    "rawOverrides": Object {},
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3197]}",
                    "runtime": "nodejs14.x",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::Lambda::Function",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "ServiceRole": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3191]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3195]}",
                          "attrRoleId": "\${Token[TOKEN.3196]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3191]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3191]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3197]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3197]}",
                    "roleId": "\${Token[TOKEN.3196]}",
                    "roleName": "\${Token[TOKEN.3199]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "F",
                "scope": [Circular],
              },
              "permissionsNode": Node {
                "_children": Object {
                  "Resource": CfnFunction {
                    "_cfnProperties": Object {
                      "architectures": undefined,
                      "code": Object {
                        "imageUri": undefined,
                        "s3Bucket": undefined,
                        "s3Key": undefined,
                        "s3ObjectVersion": undefined,
                        "zipFile": "exports.handler = function() { return null; }",
                      },
                      "codeSigningConfigArn": undefined,
                      "deadLetterConfig": undefined,
                      "description": undefined,
                      "environment": "<unresolved-lazy>",
                      "ephemeralStorage": undefined,
                      "fileSystemConfigs": undefined,
                      "functionName": "testFunction",
                      "handler": "index.handler",
                      "imageConfig": undefined,
                      "kmsKeyArn": undefined,
                      "layers": Array [
                        "#{Token[TOKEN.3200]}",
                      ],
                      "memorySize": undefined,
                      "packageType": undefined,
                      "reservedConcurrentExecutions": undefined,
                      "role": "\${Token[TOKEN.3197]}",
                      "runtime": "nodejs14.x",
                      "timeout": undefined,
                      "tracingConfig": undefined,
                      "vpcConfig": undefined,
                    },
                    "architectures": undefined,
                    "attrArn": "\${Token[TOKEN.3202]}",
                    "cfnOptions": Object {},
                    "cfnResourceType": "AWS::Lambda::Function",
                    "code": Object {
                      "imageUri": undefined,
                      "s3Bucket": undefined,
                      "s3Key": undefined,
                      "s3ObjectVersion": undefined,
                      "zipFile": "exports.handler = function() { return null; }",
                    },
                    "codeSigningConfigArn": undefined,
                    "deadLetterConfig": undefined,
                    "dependsOn": Set {},
                    "description": undefined,
                    "environment": "<unresolved-lazy>",
                    "ephemeralStorage": undefined,
                    "fileSystemConfigs": undefined,
                    "functionName": "testFunction",
                    "handler": "index.handler",
                    "imageConfig": undefined,
                    "kmsKeyArn": undefined,
                    "layers": Array [
                      "#{Token[TOKEN.3200]}",
                    ],
                    "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                    "memorySize": undefined,
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {
                        Role {
                          "_allowCrossEnvironment": false,
                          "_didSplit": false,
                          "_physicalName": undefined,
                          "assumeRoleAction": "sts:AssumeRole",
                          "assumeRolePolicy": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attachedPolicies": AttachedPolicies {
                            "policies": Array [],
                          },
                          "dependables": Map {},
                          "env": Object {
                            "account": "\${Token[AWS.AccountId.0]}",
                            "region": "\${Token[AWS.Region.4]}",
                          },
                          "grantPrincipal": [Circular],
                          "inlinePolicies": Object {},
                          "managedPolicies": Array [
                            AwsManagedPolicy {
                              "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                            },
                          ],
                          "node": Node {
                            "_children": Object {
                              "Resource": CfnRole {
                                "_cfnProperties": Object {
                                  "assumeRolePolicyDocument": Object {
                                    "Statement": Array [
                                      Object {
                                        "Action": "sts:AssumeRole",
                                        "Effect": "Allow",
                                        "Principal": Object {
                                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                        },
                                      },
                                    ],
                                    "Version": "2012-10-17",
                                  },
                                  "description": undefined,
                                  "managedPolicyArns": Array [
                                    "#{Token[TOKEN.3193]}",
                                  ],
                                  "maxSessionDuration": undefined,
                                  "path": undefined,
                                  "permissionsBoundary": undefined,
                                  "policies": undefined,
                                  "roleName": "\${Token[TOKEN.3191]}",
                                },
                                "assumeRolePolicyDocument": Object {
                                  "Statement": Array [
                                    Object {
                                      "Action": "sts:AssumeRole",
                                      "Effect": "Allow",
                                      "Principal": Object {
                                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                      },
                                    },
                                  ],
                                  "Version": "2012-10-17",
                                },
                                "attrArn": "\${Token[TOKEN.3195]}",
                                "attrRoleId": "\${Token[TOKEN.3196]}",
                                "cfnOptions": Object {},
                                "cfnResourceType": "AWS::IAM::Role",
                                "dependsOn": Set {},
                                "description": undefined,
                                "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                "managedPolicyArns": Array [
                                  "#{Token[TOKEN.3193]}",
                                ],
                                "maxSessionDuration": undefined,
                                "node": Node {
                                  "_children": Object {},
                                  "_context": Object {},
                                  "_dependencies": Set {},
                                  "_locked": false,
                                  "_metadata": Array [
                                    Object {
                                      "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                      "trace": undefined,
                                      "type": "aws:cdk:logicalId",
                                    },
                                  ],
                                  "_validations": Array [],
                                  "host": [Circular],
                                  "id": "Resource",
                                  "scope": [Circular],
                                },
                                "path": undefined,
                                "permissionsBoundary": undefined,
                                "policies": undefined,
                                "rawOverrides": Object {},
                                "roleName": "\${Token[TOKEN.3191]}",
                                "stack": [Circular],
                                "tags": TagManager {
                                  "initialTagPriority": 50,
                                  "priorities": Map {},
                                  "renderedTags": "<unresolved-lazy>",
                                  "resourceTypeName": "AWS::IAM::Role",
                                  "tagFormatter": StandardFormatter {},
                                  "tagPropertyName": "tags",
                                  "tags": Map {},
                                },
                                Symbol(@aws-cdk/core.DependableTrait): Object {
                                  "dependencyRoots": Array [
                                    [Circular],
                                  ],
                                },
                              },
                            },
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [],
                            "_validations": Array [
                              Object {
                                "validate": [Function],
                              },
                            ],
                            "host": [Circular],
                            "id": "ServiceRole",
                            "scope": [Circular],
                          },
                          "permissionsBoundary": undefined,
                          "physicalName": "\${Token[TOKEN.3191]}",
                          "policyFragment": PrincipalPolicyFragment {
                            "conditions": Object {},
                            "principalJson": Object {
                              "AWS": Array [
                                "\${Token[TOKEN.3197]}",
                              ],
                            },
                          },
                          "principalAccount": "\${Token[AWS.AccountId.0]}",
                          "roleArn": "\${Token[TOKEN.3197]}",
                          "roleId": "\${Token[TOKEN.3196]}",
                          "roleName": "\${Token[TOKEN.3199]}",
                          "stack": [Circular],
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "packageType": undefined,
                    "rawOverrides": Object {},
                    "reservedConcurrentExecutions": undefined,
                    "role": "\${Token[TOKEN.3197]}",
                    "runtime": "nodejs14.x",
                    "stack": [Circular],
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::Lambda::Function",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeout": undefined,
                    "tracingConfig": undefined,
                    "vpcConfig": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "ServiceRole": Role {
                    "_allowCrossEnvironment": false,
                    "_didSplit": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "assumeRolePolicy": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "dependables": Map {},
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "inlinePolicies": Object {},
                    "managedPolicies": Array [
                      AwsManagedPolicy {
                        "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                      },
                    ],
                    "node": Node {
                      "_children": Object {
                        "Resource": CfnRole {
                          "_cfnProperties": Object {
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "description": undefined,
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "roleName": "\${Token[TOKEN.3191]}",
                          },
                          "assumeRolePolicyDocument": Object {
                            "Statement": Array [
                              Object {
                                "Action": "sts:AssumeRole",
                                "Effect": "Allow",
                                "Principal": Object {
                                  "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                },
                              },
                            ],
                            "Version": "2012-10-17",
                          },
                          "attrArn": "\${Token[TOKEN.3195]}",
                          "attrRoleId": "\${Token[TOKEN.3196]}",
                          "cfnOptions": Object {},
                          "cfnResourceType": "AWS::IAM::Role",
                          "dependsOn": Set {},
                          "description": undefined,
                          "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                          "managedPolicyArns": Array [
                            "#{Token[TOKEN.3193]}",
                          ],
                          "maxSessionDuration": undefined,
                          "node": Node {
                            "_children": Object {},
                            "_context": Object {},
                            "_dependencies": Set {},
                            "_locked": false,
                            "_metadata": Array [
                              Object {
                                "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                "trace": undefined,
                                "type": "aws:cdk:logicalId",
                              },
                            ],
                            "_validations": Array [],
                            "host": [Circular],
                            "id": "Resource",
                            "scope": [Circular],
                          },
                          "path": undefined,
                          "permissionsBoundary": undefined,
                          "policies": undefined,
                          "rawOverrides": Object {},
                          "roleName": "\${Token[TOKEN.3191]}",
                          "stack": [Circular],
                          "tags": TagManager {
                            "initialTagPriority": 50,
                            "priorities": Map {},
                            "renderedTags": "<unresolved-lazy>",
                            "resourceTypeName": "AWS::IAM::Role",
                            "tagFormatter": StandardFormatter {},
                            "tagPropertyName": "tags",
                            "tags": Map {},
                          },
                          Symbol(@aws-cdk/core.DependableTrait): Object {
                            "dependencyRoots": Array [
                              [Circular],
                            ],
                          },
                        },
                      },
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "ServiceRole",
                      "scope": [Circular],
                    },
                    "permissionsBoundary": undefined,
                    "physicalName": "\${Token[TOKEN.3191]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "\${Token[TOKEN.3197]}",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "\${Token[TOKEN.3197]}",
                    "roleId": "\${Token[TOKEN.3196]}",
                    "roleName": "\${Token[TOKEN.3199]}",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "F",
                "scope": [Circular],
              },
              "physicalName": "testFunction",
              "role": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3191]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3195]}",
                      "attrRoleId": "\${Token[TOKEN.3196]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3193]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3191]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3191]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3197]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3197]}",
                "roleId": "\${Token[TOKEN.3196]}",
                "roleName": "\${Token[TOKEN.3199]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "runtime": Runtime {
                "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
                "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
                "family": 0,
                "name": "nodejs14.x",
                "supportsCodeGuruProfiling": false,
                "supportsInlineCode": true,
              },
              "stack": [Circular],
              "timeout": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "Table": Table {
              "_allowCrossEnvironment": true,
              "_physicalName": "testTable",
              "attributeDefinitions": Array [
                Object {
                  "attributeName": "id",
                  "attributeType": "S",
                },
              ],
              "billingMode": "PROVISIONED",
              "encryptionKey": undefined,
              "env": Object {
                "account": "\${Token[AWS.AccountId.0]}",
                "region": "\${Token[AWS.Region.4]}",
              },
              "globalReplicaCustomResources": Array [],
              "globalSecondaryIndexes": Array [],
              "indexScaling": Map {},
              "keySchema": Array [
                Object {
                  "attributeName": "id",
                  "keyType": "HASH",
                },
              ],
              "localSecondaryIndexes": Array [],
              "node": Node {
                "_children": Object {
                  "Resource": CfnTable {
                    "_cfnProperties": Object {
                      "attributeDefinitions": Array [
                        Object {
                          "attributeName": "id",
                          "attributeType": "S",
                        },
                      ],
                      "billingMode": undefined,
                      "contributorInsightsSpecification": undefined,
                      "globalSecondaryIndexes": "<unresolved-lazy>",
                      "keySchema": Array [
                        Object {
                          "attributeName": "id",
                          "keyType": "HASH",
                        },
                      ],
                      "kinesisStreamSpecification": undefined,
                      "localSecondaryIndexes": "<unresolved-lazy>",
                      "pointInTimeRecoverySpecification": undefined,
                      "provisionedThroughput": Object {
                        "readCapacityUnits": 5,
                        "writeCapacityUnits": 5,
                      },
                      "sseSpecification": undefined,
                      "streamSpecification": undefined,
                      "tableClass": undefined,
                      "tableName": "testTable",
                      "timeToLiveSpecification": undefined,
                    },
                    "attrArn": "\${Token[TOKEN.3207]}",
                    "attrStreamArn": "\${Token[TOKEN.3208]}",
                    "attributeDefinitions": Array [
                      Object {
                        "attributeName": "id",
                        "attributeType": "S",
                      },
                    ],
                    "billingMode": undefined,
                    "cfnOptions": Object {
                      "deletionPolicy": "Retain",
                      "updateReplacePolicy": "Retain",
                    },
                    "cfnResourceType": "AWS::DynamoDB::Table",
                    "contributorInsightsSpecification": undefined,
                    "dependsOn": Set {},
                    "globalSecondaryIndexes": "<unresolved-lazy>",
                    "keySchema": Array [
                      Object {
                        "attributeName": "id",
                        "keyType": "HASH",
                      },
                    ],
                    "kinesisStreamSpecification": undefined,
                    "localSecondaryIndexes": "<unresolved-lazy>",
                    "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [
                        Object {
                          "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                          "trace": undefined,
                          "type": "aws:cdk:logicalId",
                        },
                      ],
                      "_validations": Array [
                        Object {
                          "validate": [Function],
                        },
                      ],
                      "host": [Circular],
                      "id": "Resource",
                      "scope": [Circular],
                    },
                    "pointInTimeRecoverySpecification": undefined,
                    "provisionedThroughput": Object {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5,
                    },
                    "rawOverrides": Object {},
                    "sseSpecification": undefined,
                    "stack": [Circular],
                    "streamSpecification": undefined,
                    "tableClass": undefined,
                    "tableName": "testTable",
                    "tags": TagManager {
                      "initialTagPriority": 50,
                      "priorities": Map {},
                      "renderedTags": "<unresolved-lazy>",
                      "resourceTypeName": "AWS::DynamoDB::Table",
                      "tagFormatter": StandardFormatter {},
                      "tagPropertyName": "tags",
                      "tags": Map {},
                    },
                    "timeToLiveSpecification": undefined,
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                  "ScalingRole": Import {
                    "_allowCrossEnvironment": false,
                    "_physicalName": undefined,
                    "assumeRoleAction": "sts:AssumeRole",
                    "attachedPolicies": AttachedPolicies {
                      "policies": Array [],
                    },
                    "env": Object {
                      "account": "\${Token[AWS.AccountId.0]}",
                      "region": "\${Token[AWS.Region.4]}",
                    },
                    "grantPrincipal": [Circular],
                    "node": Node {
                      "_children": Object {},
                      "_context": Object {},
                      "_dependencies": Set {},
                      "_locked": false,
                      "_metadata": Array [],
                      "_validations": Array [],
                      "host": [Circular],
                      "id": "ScalingRole",
                      "scope": [Circular],
                    },
                    "physicalName": "\${Token[TOKEN.3212]}",
                    "policyFragment": PrincipalPolicyFragment {
                      "conditions": Object {},
                      "principalJson": Object {
                        "AWS": Array [
                          "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                        ],
                      },
                    },
                    "principalAccount": "\${Token[AWS.AccountId.0]}",
                    "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    "stack": [Circular],
                    Symbol(@aws-cdk/core.DependableTrait): Object {
                      "dependencyRoots": Array [
                        [Circular],
                      ],
                    },
                  },
                },
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [
                  Object {
                    "data": "\${Token[TOKEN.3211]}",
                    "trace": undefined,
                    "type": "aws:cdk:hasPhysicalName",
                  },
                ],
                "_validations": Array [
                  Object {
                    "validate": [Function],
                  },
                ],
                "host": [Circular],
                "id": "Table",
                "scope": [Circular],
              },
              "nonKeyAttributes": Set {},
              "physicalName": "testTable",
              "regionalArns": Array [],
              "scalingRole": Import {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "ScalingRole",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3212]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "secondaryIndexSchemas": Map {},
              "stack": [Circular],
              "table": CfnTable {
                "_cfnProperties": Object {
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "contributorInsightsSpecification": undefined,
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "sseSpecification": undefined,
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "timeToLiveSpecification": undefined,
                },
                "attrArn": "\${Token[TOKEN.3207]}",
                "attrStreamArn": "\${Token[TOKEN.3208]}",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": undefined,
                "cfnOptions": Object {
                  "deletionPolicy": "Retain",
                  "updateReplacePolicy": "Retain",
                },
                "cfnResourceType": "AWS::DynamoDB::Table",
                "contributorInsightsSpecification": undefined,
                "dependsOn": Set {},
                "globalSecondaryIndexes": "<unresolved-lazy>",
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "kinesisStreamSpecification": undefined,
                "localSecondaryIndexes": "<unresolved-lazy>",
                "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "pointInTimeRecoverySpecification": undefined,
                "provisionedThroughput": Object {
                  "readCapacityUnits": 5,
                  "writeCapacityUnits": 5,
                },
                "rawOverrides": Object {},
                "sseSpecification": undefined,
                "stack": [Circular],
                "streamSpecification": undefined,
                "tableClass": undefined,
                "tableName": "testTable",
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::DynamoDB::Table",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeToLiveSpecification": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "tableArn": "\${Token[TOKEN.3209]}",
              "tableName": "\${Token[TOKEN.3211]}",
              "tablePartitionKey": Object {
                "name": "id",
                "type": "S",
              },
              "tableScaling": Object {},
              "tableStreamArn": undefined,
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "fn": [Circular],
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [],
          "host": [Circular],
          "id": "stack",
          "scope": App {
            "_assemblyBuilder": CloudAssemblyBuilder {
              "artifacts": Object {},
              "assetOutdir": "/tmp/cdk.out15GLN6",
              "missing": Array [],
              "outdir": "/tmp/cdk.out15GLN6",
              "parentBuilder": undefined,
            },
            "account": undefined,
            "node": Node {
              "_children": Object {
                "Tree": TreeMetadata {
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Tree",
                    "scope": [Circular],
                  },
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
                "stack": [Circular],
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "",
              "scope": undefined,
            },
            "parentStage": undefined,
            "region": undefined,
            "stageName": "",
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
        },
        "region": "\${Token[AWS.Region.4]}",
        "synthesizer": DefaultStackSynthesizer {
          "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
          "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
          "_stack": [Circular],
          "assetManifest": AssetManifestBuilder {
            "dockerImages": Object {},
            "files": Object {},
          },
          "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
          "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          "bucketPrefix": "",
          "dockerTagPrefix": "",
          "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
          "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
          "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
          "props": Object {},
          "qualifier": "hnb659fds",
          "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
          "useLookupRoleForStackOperations": true,
        },
        "tags": TagManager {
          "initialTagPriority": 50,
          "priorities": Map {},
          "renderedTags": "<unresolved-lazy>",
          "resourceTypeName": "aws:cdk:stack",
          "tagFormatter": KeyValueFormatter {},
          "tagPropertyName": "tags",
          "tags": Map {},
        },
        "templateFile": "stack.template.json",
        "templateOptions": Object {},
        "terminationProtection": undefined,
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
      "stateMachineArn": "\${Token[TOKEN.3229]}",
      "stateMachineName": "\${Token[TOKEN.3227]}",
      "stateMachineType": "EXPRESS",
      Symbol(@aws-cdk/core.DependableTrait): Object {
        "dependencyRoots": Array [
          [Circular],
        ],
      },
    },
  },
  "permissionsBoundary": undefined,
  "physicalName": "\${Token[TOKEN.3214]}",
  "policyFragment": PrincipalPolicyFragment {
    "conditions": Object {},
    "principalJson": Object {
      "AWS": Array [
        "\${Token[TOKEN.3220]}",
      ],
    },
  },
  "principalAccount": "\${Token[AWS.AccountId.0]}",
  "roleArn": "\${Token[TOKEN.3220]}",
  "roleId": "\${Token[TOKEN.3219]}",
  "roleName": "\${Token[TOKEN.3222]}",
  "stack": Stack {
    "_logicalIds": LogicalIDs {
      "renames": Object {},
      "reverse": Object {},
    },
    "_missingContext": Array [],
    "_stackDependencies": Object {},
    "_stackName": "stack",
    "_versionReportingEnabled": undefined,
    "account": "\${Token[AWS.AccountId.0]}",
    "artifactId": "stack",
    "environment": "aws://unknown-account/unknown-region",
    "node": Node {
      "_children": Object {
        "F": Function {
          "_allowCrossEnvironment": true,
          "_architecture": undefined,
          "_functionUrlInvocationGrants": Object {},
          "_invocationGrants": Object {},
          "_layers": Array [],
          "_physicalName": "testFunction",
          "_warnIfCurrentVersionCalled": false,
          "architecture": Architecture {
            "dockerPlatform": "linux/amd64",
            "name": "x86_64",
          },
          "canCreatePermissions": true,
          "currentVersionOptions": undefined,
          "env": Object {
            "account": "\${Token[AWS.AccountId.0]}",
            "region": "\${Token[AWS.Region.4]}",
          },
          "environment": Object {},
          "functionArn": "\${Token[TOKEN.3205]}",
          "functionName": "\${Token[TOKEN.3204]}",
          "grantPrincipal": Role {
            "_allowCrossEnvironment": false,
            "_didSplit": false,
            "_physicalName": undefined,
            "assumeRoleAction": "sts:AssumeRole",
            "assumeRolePolicy": Object {
              "Statement": Array [
                Object {
                  "Action": "sts:AssumeRole",
                  "Effect": "Allow",
                  "Principal": Object {
                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "attachedPolicies": AttachedPolicies {
              "policies": Array [],
            },
            "dependables": Map {},
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "grantPrincipal": [Circular],
            "inlinePolicies": Object {},
            "managedPolicies": Array [
              AwsManagedPolicy {
                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              },
            ],
            "node": Node {
              "_children": Object {
                "Resource": CfnRole {
                  "_cfnProperties": Object {
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "description": undefined,
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3193]}",
                    ],
                    "maxSessionDuration": undefined,
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "roleName": "\${Token[TOKEN.3191]}",
                  },
                  "assumeRolePolicyDocument": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attrArn": "\${Token[TOKEN.3195]}",
                  "attrRoleId": "\${Token[TOKEN.3196]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::IAM::Role",
                  "dependsOn": Set {},
                  "description": undefined,
                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                  "managedPolicyArns": Array [
                    "#{Token[TOKEN.3193]}",
                  ],
                  "maxSessionDuration": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "path": undefined,
                  "permissionsBoundary": undefined,
                  "policies": undefined,
                  "rawOverrides": Object {},
                  "roleName": "\${Token[TOKEN.3191]}",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::IAM::Role",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "ServiceRole",
              "scope": [Circular],
            },
            "permissionsBoundary": undefined,
            "physicalName": "\${Token[TOKEN.3191]}",
            "policyFragment": PrincipalPolicyFragment {
              "conditions": Object {},
              "principalJson": Object {
                "AWS": Array [
                  "\${Token[TOKEN.3197]}",
                ],
              },
            },
            "principalAccount": "\${Token[AWS.AccountId.0]}",
            "roleArn": "\${Token[TOKEN.3197]}",
            "roleId": "\${Token[TOKEN.3196]}",
            "roleName": "\${Token[TOKEN.3199]}",
            "stack": [Circular],
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "node": Node {
            "_children": Object {
              "Resource": CfnFunction {
                "_cfnProperties": Object {
                  "architectures": undefined,
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3200]}",
                  ],
                  "memorySize": undefined,
                  "packageType": undefined,
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3197]}",
                  "runtime": "nodejs14.x",
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                },
                "architectures": undefined,
                "attrArn": "\${Token[TOKEN.3202]}",
                "cfnOptions": Object {},
                "cfnResourceType": "AWS::Lambda::Function",
                "code": Object {
                  "imageUri": undefined,
                  "s3Bucket": undefined,
                  "s3Key": undefined,
                  "s3ObjectVersion": undefined,
                  "zipFile": "exports.handler = function() { return null; }",
                },
                "codeSigningConfigArn": undefined,
                "deadLetterConfig": undefined,
                "dependsOn": Set {},
                "description": undefined,
                "environment": "<unresolved-lazy>",
                "ephemeralStorage": undefined,
                "fileSystemConfigs": undefined,
                "functionName": "testFunction",
                "handler": "index.handler",
                "imageConfig": undefined,
                "kmsKeyArn": undefined,
                "layers": Array [
                  "#{Token[TOKEN.3200]}",
                ],
                "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                "memorySize": undefined,
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {
                    Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "packageType": undefined,
                "rawOverrides": Object {},
                "reservedConcurrentExecutions": undefined,
                "role": "\${Token[TOKEN.3197]}",
                "runtime": "nodejs14.x",
                "stack": [Circular],
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::Lambda::Function",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeout": undefined,
                "tracingConfig": undefined,
                "vpcConfig": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "ServiceRole": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3191]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3195]}",
                      "attrRoleId": "\${Token[TOKEN.3196]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3193]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3191]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3191]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3197]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3197]}",
                "roleId": "\${Token[TOKEN.3196]}",
                "roleName": "\${Token[TOKEN.3199]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "F",
            "scope": [Circular],
          },
          "permissionsNode": Node {
            "_children": Object {
              "Resource": CfnFunction {
                "_cfnProperties": Object {
                  "architectures": undefined,
                  "code": Object {
                    "imageUri": undefined,
                    "s3Bucket": undefined,
                    "s3Key": undefined,
                    "s3ObjectVersion": undefined,
                    "zipFile": "exports.handler = function() { return null; }",
                  },
                  "codeSigningConfigArn": undefined,
                  "deadLetterConfig": undefined,
                  "description": undefined,
                  "environment": "<unresolved-lazy>",
                  "ephemeralStorage": undefined,
                  "fileSystemConfigs": undefined,
                  "functionName": "testFunction",
                  "handler": "index.handler",
                  "imageConfig": undefined,
                  "kmsKeyArn": undefined,
                  "layers": Array [
                    "#{Token[TOKEN.3200]}",
                  ],
                  "memorySize": undefined,
                  "packageType": undefined,
                  "reservedConcurrentExecutions": undefined,
                  "role": "\${Token[TOKEN.3197]}",
                  "runtime": "nodejs14.x",
                  "timeout": undefined,
                  "tracingConfig": undefined,
                  "vpcConfig": undefined,
                },
                "architectures": undefined,
                "attrArn": "\${Token[TOKEN.3202]}",
                "cfnOptions": Object {},
                "cfnResourceType": "AWS::Lambda::Function",
                "code": Object {
                  "imageUri": undefined,
                  "s3Bucket": undefined,
                  "s3Key": undefined,
                  "s3ObjectVersion": undefined,
                  "zipFile": "exports.handler = function() { return null; }",
                },
                "codeSigningConfigArn": undefined,
                "deadLetterConfig": undefined,
                "dependsOn": Set {},
                "description": undefined,
                "environment": "<unresolved-lazy>",
                "ephemeralStorage": undefined,
                "fileSystemConfigs": undefined,
                "functionName": "testFunction",
                "handler": "index.handler",
                "imageConfig": undefined,
                "kmsKeyArn": undefined,
                "layers": Array [
                  "#{Token[TOKEN.3200]}",
                ],
                "logicalId": "\${Token[stack.F.Resource.LogicalID.3201]}",
                "memorySize": undefined,
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {
                    Role {
                      "_allowCrossEnvironment": false,
                      "_didSplit": false,
                      "_physicalName": undefined,
                      "assumeRoleAction": "sts:AssumeRole",
                      "assumeRolePolicy": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attachedPolicies": AttachedPolicies {
                        "policies": Array [],
                      },
                      "dependables": Map {},
                      "env": Object {
                        "account": "\${Token[AWS.AccountId.0]}",
                        "region": "\${Token[AWS.Region.4]}",
                      },
                      "grantPrincipal": [Circular],
                      "inlinePolicies": Object {},
                      "managedPolicies": Array [
                        AwsManagedPolicy {
                          "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                        },
                      ],
                      "node": Node {
                        "_children": Object {
                          "Resource": CfnRole {
                            "_cfnProperties": Object {
                              "assumeRolePolicyDocument": Object {
                                "Statement": Array [
                                  Object {
                                    "Action": "sts:AssumeRole",
                                    "Effect": "Allow",
                                    "Principal": Object {
                                      "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                    },
                                  },
                                ],
                                "Version": "2012-10-17",
                              },
                              "description": undefined,
                              "managedPolicyArns": Array [
                                "#{Token[TOKEN.3193]}",
                              ],
                              "maxSessionDuration": undefined,
                              "path": undefined,
                              "permissionsBoundary": undefined,
                              "policies": undefined,
                              "roleName": "\${Token[TOKEN.3191]}",
                            },
                            "assumeRolePolicyDocument": Object {
                              "Statement": Array [
                                Object {
                                  "Action": "sts:AssumeRole",
                                  "Effect": "Allow",
                                  "Principal": Object {
                                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                                  },
                                },
                              ],
                              "Version": "2012-10-17",
                            },
                            "attrArn": "\${Token[TOKEN.3195]}",
                            "attrRoleId": "\${Token[TOKEN.3196]}",
                            "cfnOptions": Object {},
                            "cfnResourceType": "AWS::IAM::Role",
                            "dependsOn": Set {},
                            "description": undefined,
                            "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "managedPolicyArns": Array [
                              "#{Token[TOKEN.3193]}",
                            ],
                            "maxSessionDuration": undefined,
                            "node": Node {
                              "_children": Object {},
                              "_context": Object {},
                              "_dependencies": Set {},
                              "_locked": false,
                              "_metadata": Array [
                                Object {
                                  "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                                  "trace": undefined,
                                  "type": "aws:cdk:logicalId",
                                },
                              ],
                              "_validations": Array [],
                              "host": [Circular],
                              "id": "Resource",
                              "scope": [Circular],
                            },
                            "path": undefined,
                            "permissionsBoundary": undefined,
                            "policies": undefined,
                            "rawOverrides": Object {},
                            "roleName": "\${Token[TOKEN.3191]}",
                            "stack": [Circular],
                            "tags": TagManager {
                              "initialTagPriority": 50,
                              "priorities": Map {},
                              "renderedTags": "<unresolved-lazy>",
                              "resourceTypeName": "AWS::IAM::Role",
                              "tagFormatter": StandardFormatter {},
                              "tagPropertyName": "tags",
                              "tags": Map {},
                            },
                            Symbol(@aws-cdk/core.DependableTrait): Object {
                              "dependencyRoots": Array [
                                [Circular],
                              ],
                            },
                          },
                        },
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [],
                        "_validations": Array [
                          Object {
                            "validate": [Function],
                          },
                        ],
                        "host": [Circular],
                        "id": "ServiceRole",
                        "scope": [Circular],
                      },
                      "permissionsBoundary": undefined,
                      "physicalName": "\${Token[TOKEN.3191]}",
                      "policyFragment": PrincipalPolicyFragment {
                        "conditions": Object {},
                        "principalJson": Object {
                          "AWS": Array [
                            "\${Token[TOKEN.3197]}",
                          ],
                        },
                      },
                      "principalAccount": "\${Token[AWS.AccountId.0]}",
                      "roleArn": "\${Token[TOKEN.3197]}",
                      "roleId": "\${Token[TOKEN.3196]}",
                      "roleName": "\${Token[TOKEN.3199]}",
                      "stack": [Circular],
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.F.Resource.LogicalID.3201]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "packageType": undefined,
                "rawOverrides": Object {},
                "reservedConcurrentExecutions": undefined,
                "role": "\${Token[TOKEN.3197]}",
                "runtime": "nodejs14.x",
                "stack": [Circular],
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::Lambda::Function",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeout": undefined,
                "tracingConfig": undefined,
                "vpcConfig": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "ServiceRole": Role {
                "_allowCrossEnvironment": false,
                "_didSplit": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "assumeRolePolicy": Object {
                  "Statement": Array [
                    Object {
                      "Action": "sts:AssumeRole",
                      "Effect": "Allow",
                      "Principal": Object {
                        "Service": "\${Token[lambda.amazonaws.com.3192]}",
                      },
                    },
                  ],
                  "Version": "2012-10-17",
                },
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "dependables": Map {},
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "inlinePolicies": Object {},
                "managedPolicies": Array [
                  AwsManagedPolicy {
                    "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                  },
                ],
                "node": Node {
                  "_children": Object {
                    "Resource": CfnRole {
                      "_cfnProperties": Object {
                        "assumeRolePolicyDocument": Object {
                          "Statement": Array [
                            Object {
                              "Action": "sts:AssumeRole",
                              "Effect": "Allow",
                              "Principal": Object {
                                "Service": "\${Token[lambda.amazonaws.com.3192]}",
                              },
                            },
                          ],
                          "Version": "2012-10-17",
                        },
                        "description": undefined,
                        "managedPolicyArns": Array [
                          "#{Token[TOKEN.3193]}",
                        ],
                        "maxSessionDuration": undefined,
                        "path": undefined,
                        "permissionsBoundary": undefined,
                        "policies": undefined,
                        "roleName": "\${Token[TOKEN.3191]}",
                      },
                      "assumeRolePolicyDocument": Object {
                        "Statement": Array [
                          Object {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": Object {
                              "Service": "\${Token[lambda.amazonaws.com.3192]}",
                            },
                          },
                        ],
                        "Version": "2012-10-17",
                      },
                      "attrArn": "\${Token[TOKEN.3195]}",
                      "attrRoleId": "\${Token[TOKEN.3196]}",
                      "cfnOptions": Object {},
                      "cfnResourceType": "AWS::IAM::Role",
                      "dependsOn": Set {},
                      "description": undefined,
                      "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                      "managedPolicyArns": Array [
                        "#{Token[TOKEN.3193]}",
                      ],
                      "maxSessionDuration": undefined,
                      "node": Node {
                        "_children": Object {},
                        "_context": Object {},
                        "_dependencies": Set {},
                        "_locked": false,
                        "_metadata": Array [
                          Object {
                            "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                            "trace": undefined,
                            "type": "aws:cdk:logicalId",
                          },
                        ],
                        "_validations": Array [],
                        "host": [Circular],
                        "id": "Resource",
                        "scope": [Circular],
                      },
                      "path": undefined,
                      "permissionsBoundary": undefined,
                      "policies": undefined,
                      "rawOverrides": Object {},
                      "roleName": "\${Token[TOKEN.3191]}",
                      "stack": [Circular],
                      "tags": TagManager {
                        "initialTagPriority": 50,
                        "priorities": Map {},
                        "renderedTags": "<unresolved-lazy>",
                        "resourceTypeName": "AWS::IAM::Role",
                        "tagFormatter": StandardFormatter {},
                        "tagPropertyName": "tags",
                        "tags": Map {},
                      },
                      Symbol(@aws-cdk/core.DependableTrait): Object {
                        "dependencyRoots": Array [
                          [Circular],
                        ],
                      },
                    },
                  },
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "ServiceRole",
                  "scope": [Circular],
                },
                "permissionsBoundary": undefined,
                "physicalName": "\${Token[TOKEN.3191]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "\${Token[TOKEN.3197]}",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "\${Token[TOKEN.3197]}",
                "roleId": "\${Token[TOKEN.3196]}",
                "roleName": "\${Token[TOKEN.3199]}",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "F",
            "scope": [Circular],
          },
          "physicalName": "testFunction",
          "role": Role {
            "_allowCrossEnvironment": false,
            "_didSplit": false,
            "_physicalName": undefined,
            "assumeRoleAction": "sts:AssumeRole",
            "assumeRolePolicy": Object {
              "Statement": Array [
                Object {
                  "Action": "sts:AssumeRole",
                  "Effect": "Allow",
                  "Principal": Object {
                    "Service": "\${Token[lambda.amazonaws.com.3192]}",
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "attachedPolicies": AttachedPolicies {
              "policies": Array [],
            },
            "dependables": Map {},
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "grantPrincipal": [Circular],
            "inlinePolicies": Object {},
            "managedPolicies": Array [
              AwsManagedPolicy {
                "managedPolicyArn": "arn:\${Token[AWS.Partition.3]}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              },
            ],
            "node": Node {
              "_children": Object {
                "Resource": CfnRole {
                  "_cfnProperties": Object {
                    "assumeRolePolicyDocument": Object {
                      "Statement": Array [
                        Object {
                          "Action": "sts:AssumeRole",
                          "Effect": "Allow",
                          "Principal": Object {
                            "Service": "\${Token[lambda.amazonaws.com.3192]}",
                          },
                        },
                      ],
                      "Version": "2012-10-17",
                    },
                    "description": undefined,
                    "managedPolicyArns": Array [
                      "#{Token[TOKEN.3193]}",
                    ],
                    "maxSessionDuration": undefined,
                    "path": undefined,
                    "permissionsBoundary": undefined,
                    "policies": undefined,
                    "roleName": "\${Token[TOKEN.3191]}",
                  },
                  "assumeRolePolicyDocument": Object {
                    "Statement": Array [
                      Object {
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": Object {
                          "Service": "\${Token[lambda.amazonaws.com.3192]}",
                        },
                      },
                    ],
                    "Version": "2012-10-17",
                  },
                  "attrArn": "\${Token[TOKEN.3195]}",
                  "attrRoleId": "\${Token[TOKEN.3196]}",
                  "cfnOptions": Object {},
                  "cfnResourceType": "AWS::IAM::Role",
                  "dependsOn": Set {},
                  "description": undefined,
                  "logicalId": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                  "managedPolicyArns": Array [
                    "#{Token[TOKEN.3193]}",
                  ],
                  "maxSessionDuration": undefined,
                  "node": Node {
                    "_children": Object {},
                    "_context": Object {},
                    "_dependencies": Set {},
                    "_locked": false,
                    "_metadata": Array [
                      Object {
                        "data": "\${Token[stack.F.ServiceRole.Resource.LogicalID.3194]}",
                        "trace": undefined,
                        "type": "aws:cdk:logicalId",
                      },
                    ],
                    "_validations": Array [],
                    "host": [Circular],
                    "id": "Resource",
                    "scope": [Circular],
                  },
                  "path": undefined,
                  "permissionsBoundary": undefined,
                  "policies": undefined,
                  "rawOverrides": Object {},
                  "roleName": "\${Token[TOKEN.3191]}",
                  "stack": [Circular],
                  "tags": TagManager {
                    "initialTagPriority": 50,
                    "priorities": Map {},
                    "renderedTags": "<unresolved-lazy>",
                    "resourceTypeName": "AWS::IAM::Role",
                    "tagFormatter": StandardFormatter {},
                    "tagPropertyName": "tags",
                    "tags": Map {},
                  },
                  Symbol(@aws-cdk/core.DependableTrait): Object {
                    "dependencyRoots": Array [
                      [Circular],
                    ],
                  },
                },
              },
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "ServiceRole",
              "scope": [Circular],
            },
            "permissionsBoundary": undefined,
            "physicalName": "\${Token[TOKEN.3191]}",
            "policyFragment": PrincipalPolicyFragment {
              "conditions": Object {},
              "principalJson": Object {
                "AWS": Array [
                  "\${Token[TOKEN.3197]}",
                ],
              },
            },
            "principalAccount": "\${Token[AWS.AccountId.0]}",
            "roleArn": "\${Token[TOKEN.3197]}",
            "roleId": "\${Token[TOKEN.3196]}",
            "roleName": "\${Token[TOKEN.3199]}",
            "stack": [Circular],
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "runtime": Runtime {
            "bundlingDockerImage": "public.ecr.aws/sam/build-nodejs14.x",
            "bundlingImage": "public.ecr.aws/sam/build-nodejs14.x",
            "family": 0,
            "name": "nodejs14.x",
            "supportsCodeGuruProfiling": false,
            "supportsInlineCode": true,
          },
          "stack": [Circular],
          "timeout": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "Table": Table {
          "_allowCrossEnvironment": true,
          "_physicalName": "testTable",
          "attributeDefinitions": Array [
            Object {
              "attributeName": "id",
              "attributeType": "S",
            },
          ],
          "billingMode": "PROVISIONED",
          "encryptionKey": undefined,
          "env": Object {
            "account": "\${Token[AWS.AccountId.0]}",
            "region": "\${Token[AWS.Region.4]}",
          },
          "globalReplicaCustomResources": Array [],
          "globalSecondaryIndexes": Array [],
          "indexScaling": Map {},
          "keySchema": Array [
            Object {
              "attributeName": "id",
              "keyType": "HASH",
            },
          ],
          "localSecondaryIndexes": Array [],
          "node": Node {
            "_children": Object {
              "Resource": CfnTable {
                "_cfnProperties": Object {
                  "attributeDefinitions": Array [
                    Object {
                      "attributeName": "id",
                      "attributeType": "S",
                    },
                  ],
                  "billingMode": undefined,
                  "contributorInsightsSpecification": undefined,
                  "globalSecondaryIndexes": "<unresolved-lazy>",
                  "keySchema": Array [
                    Object {
                      "attributeName": "id",
                      "keyType": "HASH",
                    },
                  ],
                  "kinesisStreamSpecification": undefined,
                  "localSecondaryIndexes": "<unresolved-lazy>",
                  "pointInTimeRecoverySpecification": undefined,
                  "provisionedThroughput": Object {
                    "readCapacityUnits": 5,
                    "writeCapacityUnits": 5,
                  },
                  "sseSpecification": undefined,
                  "streamSpecification": undefined,
                  "tableClass": undefined,
                  "tableName": "testTable",
                  "timeToLiveSpecification": undefined,
                },
                "attrArn": "\${Token[TOKEN.3207]}",
                "attrStreamArn": "\${Token[TOKEN.3208]}",
                "attributeDefinitions": Array [
                  Object {
                    "attributeName": "id",
                    "attributeType": "S",
                  },
                ],
                "billingMode": undefined,
                "cfnOptions": Object {
                  "deletionPolicy": "Retain",
                  "updateReplacePolicy": "Retain",
                },
                "cfnResourceType": "AWS::DynamoDB::Table",
                "contributorInsightsSpecification": undefined,
                "dependsOn": Set {},
                "globalSecondaryIndexes": "<unresolved-lazy>",
                "keySchema": Array [
                  Object {
                    "attributeName": "id",
                    "keyType": "HASH",
                  },
                ],
                "kinesisStreamSpecification": undefined,
                "localSecondaryIndexes": "<unresolved-lazy>",
                "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [
                    Object {
                      "validate": [Function],
                    },
                  ],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "pointInTimeRecoverySpecification": undefined,
                "provisionedThroughput": Object {
                  "readCapacityUnits": 5,
                  "writeCapacityUnits": 5,
                },
                "rawOverrides": Object {},
                "sseSpecification": undefined,
                "stack": [Circular],
                "streamSpecification": undefined,
                "tableClass": undefined,
                "tableName": "testTable",
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::DynamoDB::Table",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "timeToLiveSpecification": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "ScalingRole": Import {
                "_allowCrossEnvironment": false,
                "_physicalName": undefined,
                "assumeRoleAction": "sts:AssumeRole",
                "attachedPolicies": AttachedPolicies {
                  "policies": Array [],
                },
                "env": Object {
                  "account": "\${Token[AWS.AccountId.0]}",
                  "region": "\${Token[AWS.Region.4]}",
                },
                "grantPrincipal": [Circular],
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {},
                  "_locked": false,
                  "_metadata": Array [],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "ScalingRole",
                  "scope": [Circular],
                },
                "physicalName": "\${Token[TOKEN.3212]}",
                "policyFragment": PrincipalPolicyFragment {
                  "conditions": Object {},
                  "principalJson": Object {
                    "AWS": Array [
                      "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                    ],
                  },
                },
                "principalAccount": "\${Token[AWS.AccountId.0]}",
                "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                "stack": [Circular],
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [
              Object {
                "data": "\${Token[TOKEN.3211]}",
                "trace": undefined,
                "type": "aws:cdk:hasPhysicalName",
              },
            ],
            "_validations": Array [
              Object {
                "validate": [Function],
              },
            ],
            "host": [Circular],
            "id": "Table",
            "scope": [Circular],
          },
          "nonKeyAttributes": Set {},
          "physicalName": "testTable",
          "regionalArns": Array [],
          "scalingRole": Import {
            "_allowCrossEnvironment": false,
            "_physicalName": undefined,
            "assumeRoleAction": "sts:AssumeRole",
            "attachedPolicies": AttachedPolicies {
              "policies": Array [],
            },
            "env": Object {
              "account": "\${Token[AWS.AccountId.0]}",
              "region": "\${Token[AWS.Region.4]}",
            },
            "grantPrincipal": [Circular],
            "node": Node {
              "_children": Object {},
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [],
              "_validations": Array [],
              "host": [Circular],
              "id": "ScalingRole",
              "scope": [Circular],
            },
            "physicalName": "\${Token[TOKEN.3212]}",
            "policyFragment": PrincipalPolicyFragment {
              "conditions": Object {},
              "principalJson": Object {
                "AWS": Array [
                  "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
                ],
              },
            },
            "principalAccount": "\${Token[AWS.AccountId.0]}",
            "roleArn": "arn:\${Token[AWS.Partition.3]}:iam::\${Token[AWS.AccountId.0]}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
            "roleName": "AWSServiceRoleForApplicationAutoScaling_DynamoDBTable",
            "stack": [Circular],
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "secondaryIndexSchemas": Map {},
          "stack": [Circular],
          "table": CfnTable {
            "_cfnProperties": Object {
              "attributeDefinitions": Array [
                Object {
                  "attributeName": "id",
                  "attributeType": "S",
                },
              ],
              "billingMode": undefined,
              "contributorInsightsSpecification": undefined,
              "globalSecondaryIndexes": "<unresolved-lazy>",
              "keySchema": Array [
                Object {
                  "attributeName": "id",
                  "keyType": "HASH",
                },
              ],
              "kinesisStreamSpecification": undefined,
              "localSecondaryIndexes": "<unresolved-lazy>",
              "pointInTimeRecoverySpecification": undefined,
              "provisionedThroughput": Object {
                "readCapacityUnits": 5,
                "writeCapacityUnits": 5,
              },
              "sseSpecification": undefined,
              "streamSpecification": undefined,
              "tableClass": undefined,
              "tableName": "testTable",
              "timeToLiveSpecification": undefined,
            },
            "attrArn": "\${Token[TOKEN.3207]}",
            "attrStreamArn": "\${Token[TOKEN.3208]}",
            "attributeDefinitions": Array [
              Object {
                "attributeName": "id",
                "attributeType": "S",
              },
            ],
            "billingMode": undefined,
            "cfnOptions": Object {
              "deletionPolicy": "Retain",
              "updateReplacePolicy": "Retain",
            },
            "cfnResourceType": "AWS::DynamoDB::Table",
            "contributorInsightsSpecification": undefined,
            "dependsOn": Set {},
            "globalSecondaryIndexes": "<unresolved-lazy>",
            "keySchema": Array [
              Object {
                "attributeName": "id",
                "keyType": "HASH",
              },
            ],
            "kinesisStreamSpecification": undefined,
            "localSecondaryIndexes": "<unresolved-lazy>",
            "logicalId": "\${Token[stack.Table.Resource.LogicalID.3206]}",
            "node": Node {
              "_children": Object {},
              "_context": Object {},
              "_dependencies": Set {},
              "_locked": false,
              "_metadata": Array [
                Object {
                  "data": "\${Token[stack.Table.Resource.LogicalID.3206]}",
                  "trace": undefined,
                  "type": "aws:cdk:logicalId",
                },
              ],
              "_validations": Array [
                Object {
                  "validate": [Function],
                },
              ],
              "host": [Circular],
              "id": "Resource",
              "scope": [Circular],
            },
            "pointInTimeRecoverySpecification": undefined,
            "provisionedThroughput": Object {
              "readCapacityUnits": 5,
              "writeCapacityUnits": 5,
            },
            "rawOverrides": Object {},
            "sseSpecification": undefined,
            "stack": [Circular],
            "streamSpecification": undefined,
            "tableClass": undefined,
            "tableName": "testTable",
            "tags": TagManager {
              "initialTagPriority": 50,
              "priorities": Map {},
              "renderedTags": "<unresolved-lazy>",
              "resourceTypeName": "AWS::DynamoDB::Table",
              "tagFormatter": StandardFormatter {},
              "tagPropertyName": "tags",
              "tags": Map {},
            },
            "timeToLiveSpecification": undefined,
            Symbol(@aws-cdk/core.DependableTrait): Object {
              "dependencyRoots": Array [
                [Circular],
              ],
            },
          },
          "tableArn": "\${Token[TOKEN.3209]}",
          "tableName": "\${Token[TOKEN.3211]}",
          "tablePartitionKey": Object {
            "name": "id",
            "type": "S",
          },
          "tableScaling": Object {},
          "tableStreamArn": undefined,
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
        "fn": StateMachine {
          "_allowCrossEnvironment": false,
          "_physicalName": undefined,
          "env": Object {
            "account": "\${Token[AWS.AccountId.0]}",
            "region": "\${Token[AWS.Region.4]}",
          },
          "node": Node {
            "_children": Object {
              "Resource": CfnStateMachine {
                "_cfnProperties": Object {
                  "definitionString": "\${Token[TOKEN.3223]}",
                  "loggingConfiguration": undefined,
                  "roleArn": "\${Token[TOKEN.3220]}",
                  "stateMachineName": "\${Token[TOKEN.3213]}",
                  "stateMachineType": "EXPRESS",
                  "tracingConfiguration": undefined,
                },
                "attrArn": "\${Token[TOKEN.3225]}",
                "attrName": "\${Token[TOKEN.3226]}",
                "cfnOptions": Object {},
                "cfnResourceType": "AWS::StepFunctions::StateMachine",
                "definition": undefined,
                "definitionS3Location": undefined,
                "definitionString": "\${Token[TOKEN.3235]}",
                "definitionSubstitutions": undefined,
                "dependsOn": Set {},
                "loggingConfiguration": undefined,
                "logicalId": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                "node": Node {
                  "_children": Object {},
                  "_context": Object {},
                  "_dependencies": Set {
                    [Circular],
                  },
                  "_locked": false,
                  "_metadata": Array [
                    Object {
                      "data": "\${Token[stack.fn.Resource.LogicalID.3224]}",
                      "trace": undefined,
                      "type": "aws:cdk:logicalId",
                    },
                  ],
                  "_validations": Array [],
                  "host": [Circular],
                  "id": "Resource",
                  "scope": [Circular],
                },
                "rawOverrides": Object {},
                "roleArn": "\${Token[TOKEN.3220]}",
                "stack": [Circular],
                "stateMachineName": "\${Token[TOKEN.3213]}",
                "stateMachineType": "EXPRESS",
                "tags": TagManager {
                  "initialTagPriority": 50,
                  "priorities": Map {},
                  "renderedTags": "<unresolved-lazy>",
                  "resourceTypeName": "AWS::StepFunctions::StateMachine",
                  "tagFormatter": StandardFormatter {},
                  "tagPropertyName": "tags",
                  "tags": Map {},
                },
                "tracingConfiguration": undefined,
                Symbol(@aws-cdk/core.DependableTrait): Object {
                  "dependencyRoots": Array [
                    [Circular],
                  ],
                },
              },
              "Role": [Circular],
            },
            "_context": Object {},
            "_dependencies": Set {},
            "_locked": false,
            "_metadata": Array [],
            "_validations": Array [],
            "host": [Circular],
            "id": "fn",
            "scope": [Circular],
          },
          "physicalName": "\${Token[TOKEN.3213]}",
          "role": [Circular],
          "stack": [Circular],
          "stateMachineArn": "\${Token[TOKEN.3229]}",
          "stateMachineName": "\${Token[TOKEN.3227]}",
          "stateMachineType": "EXPRESS",
          Symbol(@aws-cdk/core.DependableTrait): Object {
            "dependencyRoots": Array [
              [Circular],
            ],
          },
        },
      },
      "_context": Object {},
      "_dependencies": Set {},
      "_locked": false,
      "_metadata": Array [],
      "_validations": Array [],
      "host": [Circular],
      "id": "stack",
      "scope": App {
        "_assemblyBuilder": CloudAssemblyBuilder {
          "artifacts": Object {},
          "assetOutdir": "/tmp/cdk.out15GLN6",
          "missing": Array [],
          "outdir": "/tmp/cdk.out15GLN6",
          "parentBuilder": undefined,
        },
        "account": undefined,
        "node": Node {
          "_children": Object {
            "Tree": TreeMetadata {
              "node": Node {
                "_children": Object {},
                "_context": Object {},
                "_dependencies": Set {},
                "_locked": false,
                "_metadata": Array [],
                "_validations": Array [],
                "host": [Circular],
                "id": "Tree",
                "scope": [Circular],
              },
              Symbol(@aws-cdk/core.DependableTrait): Object {
                "dependencyRoots": Array [
                  [Circular],
                ],
              },
            },
            "stack": [Circular],
          },
          "_context": Object {},
          "_dependencies": Set {},
          "_locked": false,
          "_metadata": Array [],
          "_validations": Array [],
          "host": [Circular],
          "id": "",
          "scope": undefined,
        },
        "parentStage": undefined,
        "region": undefined,
        "stageName": "",
        Symbol(@aws-cdk/core.DependableTrait): Object {
          "dependencyRoots": Array [
            [Circular],
          ],
        },
      },
    },
    "region": "\${Token[AWS.Region.4]}",
    "synthesizer": DefaultStackSynthesizer {
      "_cloudFormationExecutionRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-cfn-exec-role-\${AWS::AccountId}-\${AWS::Region}",
      "_deployRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-deploy-role-\${AWS::AccountId}-\${AWS::Region}",
      "_stack": [Circular],
      "assetManifest": AssetManifestBuilder {
        "dockerImages": Object {},
        "files": Object {},
      },
      "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
      "bucketName": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
      "bucketPrefix": "",
      "dockerTagPrefix": "",
      "fileAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-file-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
      "imageAssetPublishingRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-image-publishing-role-\${AWS::AccountId}-\${AWS::Region}",
      "lookupRoleArn": "arn:\${AWS::Partition}:iam::\${AWS::AccountId}:role/cdk-hnb659fds-lookup-role-\${AWS::AccountId}-\${AWS::Region}",
      "props": Object {},
      "qualifier": "hnb659fds",
      "repositoryName": "cdk-hnb659fds-container-assets-\${AWS::AccountId}-\${AWS::Region}",
      "useLookupRoleForStackOperations": true,
    },
    "tags": TagManager {
      "initialTagPriority": 50,
      "priorities": Map {},
      "renderedTags": "<unresolved-lazy>",
      "resourceTypeName": "aws:cdk:stack",
      "tagFormatter": KeyValueFormatter {},
      "tagPropertyName": "tags",
      "tags": Map {},
    },
    "templateFile": "stack.template.json",
    "templateOptions": Object {},
    "terminationProtection": undefined,
    Symbol(@aws-cdk/core.DependableTrait): Object {
      "dependencyRoots": Array [
        [Circular],
      ],
    },
  },
  Symbol(@aws-cdk/core.DependableTrait): Object {
    "dependencyRoots": Array [
      [Circular],
    ],
  },
}
`;

exports[`parse json 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\")": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\") 1": Object {
      "Next": "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\")",
      "Parameters": Object {
        "string.$": "States.StringToJson($.heap1)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\")": Object {
      "Next": "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\") 1",
      "Result": "{ a: 'a', b: { c: 'c' } }",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`put an event bus event 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {": Object {
      "Next": "return null",
      "Parameters": Object {
        "Entries": Array [
          Object {
            "Account": "123456789012",
            "Detail": Object {
              "value.$": "$.input.id",
            },
            "DetailType": "someEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Id": "bbbbbbbb-eeee-eeee-eeee-ffffffffffff",
            "Region": "us-east-1",
            "Resources": Array [
              "__REPLACED_ARN",
            ],
            "Source": "sfnTest",
            "Time": "2022-08-05T16:19:03Z",
            "Version": "1",
          },
        ],
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`put multiple event bus events 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {": Object {
      "Next": "return null",
      "Parameters": Object {
        "Entries": Array [
          Object {
            "Detail": Object {
              "value.$": "$.input.id",
            },
            "DetailType": "someEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
          Object {
            "Detail": Object {
              "constant": "hi",
              "value.$": "$.input.id",
            },
            "DetailType": "someOtherEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
        ],
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`result = $SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function(item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`result = $SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "result = await $SFN.map(input.list, function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "result": Object {
      "InputPath": "$.heap1",
      "Next": "return result",
      "ResultPath": "$.result",
      "Type": "Pass",
    },
    "result = await $SFN.map(input.list, function(item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "result",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return result": Object {
      "End": true,
      "InputPath": "$.result",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return $SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function(item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.forEach(list, (item) => try { task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function(item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__await task(item)",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "catch__await task(item)": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.forEach(list, {maxConcurrency: 2} (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, {maxConcurrency: 2}, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, {maxConcurrency: 2}, function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, {maxConcurrency: 2}, function(item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 2,
      "Next": "1__return $SFN.forEach(input.list, {maxConcurrency: 2}, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, function(item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.map(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, (item) => try { task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, function(item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "try",
        "States": Object {
          "1__try": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "catch__try": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "try": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__try",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "1__try",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.map(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, {maxConcurrency: 2} (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, {maxConcurrency: 2}, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, {maxConcurrency: 2}, function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, {maxConcurrency: 2}, function(item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 2,
      "Next": "1__return $SFN.map(input.list, {maxConcurrency: 2}, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.parallel(() => "hello", () => "world")) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.parallel(function(), function())": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.parallel(function(), function())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel(function(), function())": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "return \\"world\\"",
          "States": Object {
            "return \\"world\\"": Object {
              "End": true,
              "Result": "world",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel(function(), function())",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return $SFN.parallel(() => {})) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.parallel(function())": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.parallel(function())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel(function())": Object {
      "Branches": Array [
        Object {
          "StartAt": "return null",
          "States": Object {
            "return null": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel(function())",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return $SFN.parallel(() => try { task() } catch { return null })) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try 1": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try 1",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try 1": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try 1": Object {
      "Branches": Array [
        Object {
          "StartAt": "try",
          "States": Object {
            "1__try": Object {
              "End": true,
              "InputPath": "$.heap0",
              "ResultPath": "$",
              "Type": "Pass",
            },
            "catch__try": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
            "try": Object {
              "Catch": Array [
                Object {
                  "ErrorEquals": Array [
                    "States.ALL",
                  ],
                  "Next": "catch__try",
                  "ResultPath": null,
                },
              ],
              "InputPath": "$.fnl_context.null",
              "Next": "1__try",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap0",
              "Type": "Task",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 1",
          "ResultPath": null,
        },
      ],
      "Next": "1__try 1",
      "ResultPath": "$.heap1",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return AWS.DynamoDB.GetItem 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.person.Item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return {id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": Object {
      "InputPath": "$.heap0",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp": Object {
      "Next": "person",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.DynamoDB.GetItem dynamic parameters 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ": Object {
      "Next": "person",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.heap0",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: ": Object {
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.person.Item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return {id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": Object {
      "InputPath": "$.heap1",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.id",
            },
          ],
          "Next": "true__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {",
        },
      ],
      "Default": "false__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: ",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {": Object {
      "InputPath": "$.input.id",
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.Lambda.Invoke dynamic parameters 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ": Object {
      "End": true,
      "InputPath": "$.heap1.Payload",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1": Object {
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ",
      "Parameters": Object {
        "FunctionName": "__REPLACED_TOKEN",
        "Payload": Object {
          "id.$": "$.heap0",
        },
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ?? ",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input": Object {
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ?? ": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.id",
            },
          ],
          "Next": "true__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.",
        },
      ],
      "Default": "false__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input",
      "Type": "Choice",
    },
    "true__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.": Object {
      "InputPath": "$.input.id",
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.SDK.CloudWatch.describeAlarms 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "alarms = await $AWS.SDK.CloudWatch.describeAlarms({iamResources: [\\"*\\"], par",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "alarms": Object {
      "InputPath": "$.heap0",
      "Next": "if(alarms.MetricAlarms === undefined)",
      "ResultPath": "$.alarms",
      "Type": "Pass",
    },
    "alarms = await $AWS.SDK.CloudWatch.describeAlarms({iamResources: [\\"*\\"], par": Object {
      "Next": "alarms",
      "Parameters": Object {},
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(alarms.MetricAlarms === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.alarms.MetricAlarms",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return alarms.MetricAlarms",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return alarms.MetricAlarms": Object {
      "End": true,
      "InputPath": "$.alarms.MetricAlarms",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.SDK.CloudWatch.describeAlarms dynamic parameters 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({params: {AlarmNamePre": Object {
      "Next": "alarms",
      "Parameters": Object {
        "AlarmNamePrefix.$": "$.heap0",
      },
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "alarms = await $AWS.SDK.CloudWatch.describeAlarms({params: {AlarmNamePrefix",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "alarms": Object {
      "InputPath": "$.heap1",
      "Next": "if(alarms.MetricAlarms === undefined)",
      "ResultPath": "$.alarms",
      "Type": "Pass",
    },
    "alarms = await $AWS.SDK.CloudWatch.describeAlarms({params: {AlarmNamePrefix": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.prefix",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.prefix",
            },
          ],
          "Next": "true__alarms = await $AWS.SDK.CloudWatch.describeAlarms({params: {AlarmName",
        },
      ],
      "Default": "false__alarms = await $AWS.SDK.CloudWatch.describeAlarms({params: {AlarmNam",
      "Type": "Choice",
    },
    "false__alarms = await $AWS.SDK.CloudWatch.describeAlarms({params: {AlarmNam": Object {
      "Next": "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({params: {AlarmNamePre",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(alarms.MetricAlarms === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.alarms.MetricAlarms",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return alarms.MetricAlarms",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return alarms.MetricAlarms": Object {
      "End": true,
      "InputPath": "$.alarms.MetricAlarms",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__alarms = await $AWS.SDK.CloudWatch.describeAlarms({params: {AlarmName": Object {
      "InputPath": "$.input.prefix",
      "Next": "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({params: {AlarmNamePre",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input[\\"id special\\"]",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input[\\"id special\\"]": Object {
      "End": true,
      "InputPath": "$.input.input['id special']",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr number 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.arr[0]",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.arr[0]": Object {
      "End": true,
      "InputPath": "$.input.input.arr[0]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return PropAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.id": Object {
      "End": true,
      "InputPath": "$.input.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return a single Lambda Function call 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return getPerson({id: input.id})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return getPerson({id: input.id})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return getPerson({id: input.id})": Object {
      "Next": "1__return getPerson({id: input.id})",
      "Parameters": Object {
        "id.$": "$.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return await task(await task()) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(await task())": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(await task()) 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__return task(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(await task())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(await task())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return task(await task()) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return cond ? task(1) : task(2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__false__return if(input.cond)": Object {
      "InputPath": "$.heap1",
      "Next": "1__return if(input.cond)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return if(input.cond)": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__true__return if(input.cond)": Object {
      "InputPath": "$.heap0",
      "Next": "1__return if(input.cond)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return if(input.cond)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return if(input.cond)": Object {
      "Next": "1__false__return if(input.cond)",
      "Parameters": 2,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return if(input.cond)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.cond",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.cond",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.cond",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.cond",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.cond",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.cond",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.cond",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.cond",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.cond",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.cond",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return if(input.cond)",
        },
      ],
      "Default": "false__return if(input.cond)",
      "Type": "Choice",
    },
    "true__return if(input.cond)": Object {
      "Next": "1__true__return if(input.cond)",
      "Parameters": 1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return identifier 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.id": Object {
      "End": true,
      "InputPath": "$.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(-1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(-1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(-1)": Object {
      "End": true,
      "InputPath": "$.input.items[-1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(0, -1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(0, -1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(0, -1)": Object {
      "End": true,
      "InputPath": "$.input.items[0:-1]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1)": Object {
      "End": true,
      "InputPath": "$.input.items[1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1, 3) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1, 3)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1, 3)": Object {
      "End": true,
      "InputPath": "$.input.items[1:3]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1, undefined) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1, undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1, undefined)": Object {
      "End": true,
      "InputPath": "$.input.items[1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return optional PropAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.id": Object {
      "End": true,
      "InputPath": "$.input.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task({ key: items.filter(*) }) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({equals: input.items.filter(function(item)), and: input.item": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({equals: input.items.filter(function(item)), and: input.items.f",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({equals: input.items.filter(function(item)), and: input.items.f": Object {
      "Next": "1__return task({equals: input.items.filter(function(item)), and: input.item",
      "Parameters": Object {
        "and.$": "$.input.items[?(@.str=='hello'&&@.items[0]=='hello')]",
        "equals.$": "$.input.items[?(@.str=='hello')]",
        "or.$": "$.input.items[?(@.str=='hello'||@.items[0]=='hello')]",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return task({key: items.slice(1, 3)}) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({key: input.items.slice(1, 3)})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({key: input.items.slice(1, 3)})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({key: input.items.slice(1, 3)})": Object {
      "Next": "1__return task({key: input.items.slice(1, 3)})",
      "Parameters": Object {
        "key.$": "$.input.items[1:3]",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return task(1) ?? task(2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__false__await task(1) ?? await task(2)": Object {
      "InputPath": "$.heap1",
      "Next": "1__return await task(1) ?? await task(2)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return await task(1) ?? await task(2)": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await task(1) ?? await task(2)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(1) ?? await task(2)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "IsNull": false,
              "Variable": "$.heap0",
            },
          ],
          "Next": "true__await task(1) ?? await task(2)",
        },
      ],
      "Default": "false__await task(1) ?? await task(2)",
      "Type": "Choice",
    },
    "false__await task(1) ?? await task(2)": Object {
      "Next": "1__false__await task(1) ?? await task(2)",
      "Parameters": 2,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return await task(1) ?? await task(2)": Object {
      "Next": "await task(1) ?? await task(2)",
      "Parameters": 1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "true__await task(1) ?? await task(2)": Object {
      "InputPath": "$.heap0",
      "Next": "1__return await task(1) ?? await task(2)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task(await task()) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(await task())": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(await task()) 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__return task(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(await task())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(await task())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return task(await task()) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return typeof x 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return typeof input.id": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return typeof input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return typeof input.id": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__return typeof input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__return typeof input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__return typeof input.id",
        },
        Object {
          "IsPresent": true,
          "Next": "object__return typeof input.id",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__return typeof input.id",
      "Type": "Choice",
    },
    "string__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`set obj 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = {1: \\"value\\"}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = {1: \\"value\\"}": Object {
      "Next": "b = a[1]",
      "Result": Object {
        "1": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "b = a[1]": Object {
      "InputPath": "$.a[1]",
      "Next": "c = a[\\"1\\"]",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "c = a[\\"1\\"]": Object {
      "InputPath": "$.a['1']",
      "Next": "return {a: a, b: b, c: c}",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "return {a: a, b: b, c: c}": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.a",
        "b.$": "$.b",
        "c.$": "$.c",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`shadow 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(b in [1, 2, 3])": Object {
      "ItemsPath": "$.heap1",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(b in [1, 2, 3])",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "1__return \${a}\${a__2}": Object {
      "End": true,
      "InputPath": "$.heap2.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return \${a}\${b}\${a__1}": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "a__2 = \\"\\"",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"\\" 1": Object {
      "Next": "a__1 = \\"\\"",
      "Result": "",
      "ResultPath": "$.a__1",
      "Type": "Pass",
    },
    "a = \\"\\" 2": Object {
      "Next": "return \${a}\${b}\${a__1}",
      "Result": "",
      "ResultPath": "$.a__3",
      "Type": "Pass",
    },
    "a__1 = \\"\\"": Object {
      "Next": "if(a === \\"\\")",
      "Result": "",
      "ResultPath": "$.a__1__1",
      "Type": "Pass",
    },
    "a__2 = \\"\\"": Object {
      "Next": "for(b in [1, 2, 3])",
      "Result": "",
      "ResultPath": "$.a__2",
      "Type": "Pass",
    },
    "assignValue__b": Object {
      "InputPath": "$.heap1[0].item",
      "Next": "a = \\"\\" 1",
      "ResultPath": "$.0__b",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$.heap1[0].index",
      "Next": "assignValue__b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "for(b in [1, 2, 3])": Object {
      "Next": "1__for(b in [1, 2, 3])",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(b in [1, 2, 3])": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "b",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return \${a}\${a__2}",
      "Type": "Choice",
    },
    "if(a === \\"\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.a__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.a__1",
                },
                Object {
                  "StringEquals": "",
                  "Variable": "$.a__1",
                },
              ],
            },
          ],
          "Next": "a = \\"\\" 2",
        },
      ],
      "Default": "tail__for(b in [1, 2, 3])",
      "Type": "Choice",
    },
    "return \${a}\${a__2}": Object {
      "Next": "1__return \${a}\${a__2}",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.a__2)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return \${a}\${b}\${a__1}": Object {
      "Next": "1__return \${a}\${b}\${a__1}",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}',$.a__3,$.b,$.a__1__1)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(b in [1, 2, 3])": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(b in [1, 2, 3])",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`single quotes in StringLiteralExpr should be escaped in a JSON Path filter expression 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({escape: input.items.filter(function(item))})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({escape: input.items.filter(function(item))})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({escape: input.items.filter(function(item))})": Object {
      "Next": "1__return task({escape: input.items.filter(function(item))})",
      "Parameters": Object {
        "escape.$": "$.input.items[?(@.str=='hello\\\\'world')]",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`spread constant array and object 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return {array: [0, ...array, 3], object: {key: \\"value\\", ...object}}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {array: [0, ...array, 3], object: {key: \\"value\\", ...object}}": Object {
      "End": true,
      "Result": Object {
        "array": Array [
          0,
          1,
          2,
          3,
        ],
        "object": Object {
          "hello": "world",
          "key": "value",
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify json 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return JSON.stringify(input)": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return JSON.stringify(input)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify(input)": Object {
      "Next": "1__return JSON.stringify(input)",
      "Parameters": Object {
        "string.$": "States.JsonToString($.input)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify object literal 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}})": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}}) 1": Object {
      "Next": "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}})",
      "Parameters": Object {
        "string.$": "States.JsonToString($.heap1)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}})": Object {
      "Next": "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}}) 1",
      "Result": Object {
        "a": "a",
        "b": Object {
          "c": "c",
        },
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify undefined 2 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return JSON.stringify(undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify(undefined)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`task(-1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(-1)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(-1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(-1)": Object {
      "Next": "1__return task(-1)",
      "Parameters": -1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`task(any) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"hello\\" + \\" world\\")": Object {
      "Next": "await task(\\"hello\\" + 1)",
      "Parameters": "hello world",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap9",
      "Type": "Task",
    },
    "await task(\\"hello\\" + 1)": Object {
      "Next": "await task(1 + \\"hello\\")",
      "Parameters": "hello1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap10",
      "Type": "Task",
    },
    "await task(\\"hello\\" + [\\"world\\"])": Object {
      "Next": "return null",
      "Parameters": "helloworld",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap23",
      "Type": "Task",
    },
    "await task(\\"hello\\" + null)": Object {
      "Next": "await task([null])",
      "Parameters": "hellonull",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap15",
      "Type": "Task",
    },
    "await task(\\"hello\\" + true)": Object {
      "Next": "await task(false + \\"hello\\")",
      "Parameters": "hellotrue",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap12",
      "Type": "Task",
    },
    "await task(\\"hello\\" + {place: \\"world\\"})": Object {
      "Next": "await task(\\"hello\\" + [\\"world\\"])",
      "Parameters": "hello[object Object]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap22",
      "Type": "Task",
    },
    "await task(\\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + \\" world\\")",
      "Parameters": "hello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap8",
      "Type": "Task",
    },
    "await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "await task(null)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "await task(-1)": Object {
      "Next": "await task(-100)",
      "Parameters": -1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap5",
      "Type": "Task",
    },
    "await task(-100)": Object {
      "Next": "await task(1 + 2)",
      "Parameters": -100,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap6",
      "Type": "Task",
    },
    "await task(0)": Object {
      "Next": "await task(-1)",
      "Parameters": 0,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "await task(1 + \\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + true)",
      "Parameters": "1hello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap11",
      "Type": "Task",
    },
    "await task(1 + 2)": Object {
      "Next": "await task(\\"hello\\")",
      "Parameters": 3,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap7",
      "Type": "Task",
    },
    "await task([-1])": Object {
      "Next": "await task([true])",
      "Parameters": Array [
        -1,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap18",
      "Type": "Task",
    },
    "await task([1])": Object {
      "Next": "await task([-1])",
      "Parameters": Array [
        1,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap17",
      "Type": "Task",
    },
    "await task([null])": Object {
      "Next": "await task([1])",
      "Parameters": Array [
        null,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap16",
      "Type": "Task",
    },
    "await task([true])": Object {
      "Next": "await task([{key: \\"value\\"}])",
      "Parameters": Array [
        true,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap19",
      "Type": "Task",
    },
    "await task([{key: \\"value\\"}])": Object {
      "Next": "await task({key: \\"value\\"})",
      "Parameters": Array [
        Object {
          "key": "value",
        },
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap20",
      "Type": "Task",
    },
    "await task(false + \\"hello\\")": Object {
      "Next": "await task(null + \\"hello\\")",
      "Parameters": "falsehello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap13",
      "Type": "Task",
    },
    "await task(false)": Object {
      "Next": "await task(0)",
      "Parameters": false,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "await task(null + \\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + null)",
      "Parameters": "nullhello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap14",
      "Type": "Task",
    },
    "await task(null)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "await task(true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "await task(true)": Object {
      "Next": "await task(false)",
      "Parameters": true,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "await task({key: \\"value\\"})": Object {
      "Next": "await task(\\"hello\\" + {place: \\"world\\"})",
      "Parameters": Object {
        "key": "value",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap21",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`task(input.list[-1]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(input.list[-1])": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(input.list[-1])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(input.list[-1])": Object {
      "InputPath": "$.input.list[-1]",
      "Next": "1__return task(input.list[-1])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`template literal strings 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({key: \${input.obj.str} \${\\"hello\\"} \${input.obj.items[0]}})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key: \${input.obj.str} \${\\"hello\\"} \${input.obj.items[0]}}) 1": Object {
      "Next": "1__return task({key: \${input.obj.str} \${\\"hello\\"} \${input.obj.items[0]}})",
      "Parameters": Object {
        "key.$": "$.heap0.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({key: \${input.obj.str} \${\\"hello\\"} \${input.obj.items[0]}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({key: \${input.obj.str} \${\\"hello\\"} \${input.obj.items[0]}})": Object {
      "Next": "1__return task({key: \${input.obj.str} \${\\"hello\\"} \${input.obj.items[0]}}) 1",
      "Parameters": Object {
        "string.$": "States.Format('{} hello {}',$.input.obj.str,$.input.obj.items[0])",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`template literal strings complex 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "\${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${input.obj.items[0] ?? awai": Object {
      "Next": "1__return task({key: \${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${input 1",
      "Parameters": Object {
        "string.$": "States.Format('{} hello hello {}',$.heap0,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "1__false__input.obj.items[0] ?? await task()": Object {
      "InputPath": "$.heap1",
      "Next": "\${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${input.obj.items[0] ?? awai",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return task({key: \${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${input": Object {
      "End": true,
      "InputPath": "$.heap4",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key: \${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${input 1": Object {
      "Next": "1__return task({key: \${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${input",
      "Parameters": Object {
        "key.$": "$.heap3.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({key: \${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${input.ob",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__input.obj.items[0] ?? await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__false__input.obj.items[0] ?? await task()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "false__return task({key: \${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${i": Object {
      "Next": "input.obj.items[0] ?? await task()",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.obj.items[0] ?? await task()": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.obj.items[0]",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.obj.items[0]",
            },
          ],
          "Next": "true__input.obj.items[0] ?? await task()",
        },
      ],
      "Default": "false__input.obj.items[0] ?? await task()",
      "Type": "Choice",
    },
    "return task({key: \${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${input.ob": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.obj.str",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.obj.str",
            },
          ],
          "Next": "true__return task({key: \${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${in",
        },
      ],
      "Default": "false__return task({key: \${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${i",
      "Type": "Choice",
    },
    "true__input.obj.items[0] ?? await task()": Object {
      "InputPath": "$.input.obj.items[0]",
      "Next": "\${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${input.obj.items[0] ?? awai",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "true__return task({key: \${input.obj.str ?? \\"default\\"} hello \${\\"hello\\"} \${in": Object {
      "InputPath": "$.input.obj.str",
      "Next": "input.obj.items[0] ?? await task()",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`throw Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw Error(\\"cause\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error(\\"cause\\")": Object {
      "Cause": "{\\"message\\":\\"cause\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw in for-of 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "throw new Error(\\"err\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"err\\")": Object {
      "Cause": "{\\"message\\":\\"err\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new Error(\\"cause\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Cause": "{\\"message\\":\\"cause\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new StepFunctionError 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})": Object {
      "Cause": "{\\"property\\":\\"cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new functionless.StepFunctionError 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new functionless.StepFunctionError(\\"CustomError\\", {property: \\"cause\\"}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new functionless.StepFunctionError(\\"CustomError\\", {property: \\"cause\\"}": Object {
      "Cause": "{\\"property\\":\\"cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { $SFN.forEach(list, (item) => task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { $SFN.map(list, (item) => task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { for-of } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__for(item of input.items)": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(item)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__for(item of input.items)",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "InputPath": "$.item",
      "Next": "tail__for(item of input.items)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"you dun' goofed\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "Next": "1__catch__for(item of input.items)",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "if(err.message === \\"you dun' goofed\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "you dun' goofed",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap1[0]",
      "Next": "await task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { list.forEach(item => task(item)) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__try",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__try": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__try",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.forEach(item => task(item)) } 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function(item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__try": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function(item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function(item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__return input.list.forEach(function(item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function(item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function(item))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function(item))": Object {
      "Next": "1__return input.list.forEach(function(item))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "try",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.forEach(function(item))": Object {
      "Next": "check__return input.list.forEach(function(item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__return input.list.forEach(function(item))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function(item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__try",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`try { list.forEach(item => throw) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.forEach(item => throw) } catch (err) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return 0",
        },
      ],
      "Default": "return 1",
      "Type": "Choice",
    },
    "return 0": Object {
      "End": true,
      "Result": 0,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return 1": Object {
      "End": true,
      "Result": 1,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => task(item)) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__try",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "set__end__try",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__try": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => task(item)) } 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function(item)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__try": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function(item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function(item)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "handleResult__return Promise.all(input.list.map(function(item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function(item)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function(item)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function(item)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function(item)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function(item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function(item)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "try",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function(item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function(item)))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__return Promise.all(input.list.map(function(item)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function(item)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__try",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`try { list.map(item => throw) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "set__end__try",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__try": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => throw) } catch (err) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "set__end__try",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return 0",
        },
      ],
      "Default": "return 1",
      "Type": "Choice",
    },
    "return 0": Object {
      "End": true,
      "Result": 0,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return 1": Object {
      "End": true,
      "Result": 1,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "set__end__try": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { return $SFN.parallel(() => "hello", () => "world")) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "return \\"world\\"",
          "States": Object {
            "return \\"world\\"": Object {
              "End": true,
              "Result": "world",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`try { return $SFN.parallel(() => "hello", async () => { await task(); await task(); })) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "await task()",
          "States": Object {
            "await task()": Object {
              "InputPath": "$.fnl_context.null",
              "Next": "await task() 1",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap0",
              "Type": "Task",
            },
            "await task() 1": Object {
              "InputPath": "$.fnl_context.null",
              "Next": "return null",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap1",
              "Type": "Task",
            },
            "return null": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "1__try",
      "ResultPath": "$.heap2",
      "Type": "Parallel",
    },
  },
}
`;

exports[`try { task } catch { throw } finally { task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task()": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task()",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task()": Object {
      "Next": "finally",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "recover",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": null,
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task(\\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch { task() } finally { task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": null,
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "finally",
          "ResultPath": "$.fnl_tmp_1",
        },
      ],
      "Next": "finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "3",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch(err) { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__await task(\\"1\\")": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"sam\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__await task(\\"1\\")": Object {
      "Next": "1__catch__await task(\\"1\\")",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "if(err.message === \\"sam\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { throw } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "throw new Error(\\"go\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__throw new Error(\\"go\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "finally": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"go\\")": Object {
      "Next": "catch__throw new Error(\\"go\\")",
      "Result": Object {
        "message": "go",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try, task, empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await computeScore({id: \\"id\\", name: \\"name\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: \\"id\\", name: \\"name\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "return null",
          "ResultPath": null,
        },
      ],
      "Next": "return null",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw Error('error'), empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw Error(\\"cause\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error(\\"cause\\")": Object {
      "Next": "return null",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, catch, throw, finally, return 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "return \\"rock-star\\"",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "return \\"rock-star\\"": Object {
      "End": true,
      "Result": "rock-star",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "go",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})": Object {
      "Next": "return null",
      "Result": Object {
        "property": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, finally 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "return \\"hello\\"",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch with guaranteed throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch with inner return and a catch variable 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "return err.message",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return err.message": Object {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`try-catch with inner return and no catch variable 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`try-catch with optional return of task 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello world\\"",
      "Parameters": Object {
        "id.$": "$.input.id",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional return of task 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__return await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "1__return await computeScore({id: input.id, name: \\"sam\\"})",
      "Parameters": Object {
        "id.$": "$.input.id",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional task 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello world\\"",
      "Parameters": Object {
        "id.$": "$.input.id",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional throw of an Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"cause\\")",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch, err variable, contains for-of, throw Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "return err.message",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "throw Error(\\"err\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return err.message": Object {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error(\\"err\\")": Object {
      "Next": "catch__for(item of input.items)",
      "Result": Object {
        "message": "err",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch, err variable, contains for-of, throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "return err.message",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "throw new Error(\\"err\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return err.message": Object {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"err\\")": Object {
      "Next": "catch__for(item of input.items)",
      "Result": Object {
        "message": "err",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch, no variable, contains for-of, throw 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "throw new Error(\\"err\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"err\\")": Object {
      "Next": "catch__for(item of input.items)",
      "Result": Object {
        "message": "err",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch-finally 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "return \\"hello\\"",
          "ResultPath": null,
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context in object 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return {a: context.Execution.Name}",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {a: context.Execution.Name}": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$$.Execution.Name",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`use context object 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(context)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(context)",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(context)": Object {
      "InputPath": "$$",
      "Next": "1__return task(context)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context parameter 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return context.Execution.Name",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return context.Execution.Name": Object {
      "End": true,
      "InputPath": "$$.Execution.Name",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`use context parameter in function call 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(context.Execution.Id)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(context.Execution.Id)",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(context.Execution.Id)": Object {
      "InputPath": "$$.Execution.Id",
      "Next": "1__return task(context.Execution.Id)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context parameter in template 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return name: \${context.Execution.Id}": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return name: \${context.Execution.Id}",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return name: \${context.Execution.Id}": Object {
      "Next": "1__return name: \${context.Execution.Id}",
      "Parameters": Object {
        "string.$": "States.Format('name: {}',$$.Execution.Id)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor literal number of seconds 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitFor(1)": Object {
      "Next": "return null",
      "Seconds": 1,
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitFor(1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor literal timestamp 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitUntil(\\"2022-08-01T00:00:00Z\\")": Object {
      "Next": "return null",
      "Timestamp": "2022-08-01T00:00:00Z",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitUntil(\\"2022-08-01T00:00:00Z\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor reference number of seconds 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitFor(input.seconds)": Object {
      "Next": "return null",
      "SecondsPath": "$.input.seconds",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitFor(input.seconds)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitUntil reference timestamp 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitUntil(input.until)": Object {
      "Next": "return null",
      "TimestampPath": "$.input.until",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitUntil(input.until)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`while (cond) { cond = task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (cond === null)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 1": Object {
      "InputPath": "$.heap0",
      "Next": "while (cond === null)",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (cond === null)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.cond",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "cond = await task()",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`while (cond); cond = task() 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (cond === null)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 1": Object {
      "InputPath": "$.heap0",
      "Next": "while (cond === null)",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (cond === null)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.cond",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "cond = await task()",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`while(true) { try { } catch { wait } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "while (true)",
      "Seconds": 1,
      "Type": "Wait",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "while (true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "try",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;
