// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`$SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.forEach(input.list, function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.list, function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map([1, 2, 3], (item) => nitem) 1`] = `
Object {
  "StartAt": "return $SFN.map([1, 2, 3], function(item))",
  "States": Object {
    "$SFN.map([1, 2, 3], function(item))": Object {
      "ItemsPath": "$.heap1",
      "Iterator": Object {
        "StartAt": "return \`nitem\`",
        "States": Object {
          "1__return \`nitem\`": Object {
            "End": true,
            "InputPath": "$.heap0.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return \`nitem\`": Object {
            "Next": "1__return \`nitem\`",
            "Parameters": Object {
              "string.$": "States.Format('n{}',$.item)",
            },
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.map([1, 2, 3], function(item))",
      "Parameters": Object {
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "1__return $SFN.map([1, 2, 3], function(item))": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map([1, 2, 3], function(item))": Object {
      "Next": "$SFN.map([1, 2, 3], function(item))",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.map(input.list, function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await $SFN.map(input.list, function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item.length > 2) 1`] = `
Object {
  "StartAt": "return [1, 2, 3, 4].filter(function(item))",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function(item))": Object {
      "End": true,
      "InputPath": "$.heap0[?(@>2)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function(item))": Object {
      "Next": "1__return [1, 2, 3, 4].filter(function(item))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3].map(item => item) 1`] = `
Object {
  "StartAt": "return [1, 2, 3].map(function(item))",
  "States": Object {
    "1__return [1, 2, 3].map(function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function(item)) 1": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "return item",
        "States": Object {
          "return item": Object {
            "End": true,
            "InputPath": "$.item",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return [1, 2, 3].map(function(item))",
      "Parameters": Object {
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return [1, 2, 3].map(function(item))": Object {
      "Next": "1__return [1, 2, 3].map(function(item)) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`\`template me \${await task(input.value)}\` 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await task(input.value)": Object {
      "InputPath": "$.fnl_context.input.value",
      "Next": "1__0_tmp = await task(input.value)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await task(input.value)": Object {
      "InputPath": "$.heap0",
      "Next": "return \`template me 0_tmp\`",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__return \`template me 0_tmp\`": Object {
      "End": true,
      "InputPath": "$.heap2.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return \`template me 0_tmp\` 1": Object {
      "Next": "1__return \`template me 0_tmp\`",
      "Parameters": Object {
        "string.$": "States.Format('template me {}',$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await task(input.value)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return \`template me 0_tmp\`": Object {
      "InputPath": "$.0_tmp",
      "Next": "1__return \`template me 0_tmp\` 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`\`template me \${input.value}\` 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return \`template me input.value\`": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return \`template me input.value\`",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return \`template me input.value\`": Object {
      "Next": "1__return \`template me input.value\`",
      "Parameters": Object {
        "string.$": "States.Format('template me {}',$.fnl_context.input.value)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`boolean logic 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "!input.a && input.b": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__!input.a && input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.fnl_context.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.fnl_context.input.a",
                  },
                  Object {
                    "Or": Array [
                      Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "Not": Object {
                              "And": Array [
                                Object {
                                  "IsString": true,
                                  "Variable": "$.fnl_context.input.a",
                                },
                                Object {
                                  "StringEquals": "",
                                  "Variable": "$.fnl_context.input.a",
                                },
                              ],
                            },
                          },
                        ],
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "Not": Object {
                              "And": Array [
                                Object {
                                  "IsNumeric": true,
                                  "Variable": "$.fnl_context.input.a",
                                },
                                Object {
                                  "NumericEquals": 0,
                                  "Variable": "$.fnl_context.input.a",
                                },
                              ],
                            },
                          },
                        ],
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsBoolean": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "BooleanEquals": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.fnl_context.input.b",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.fnl_context.input.b",
                  },
                  Object {
                    "Or": Array [
                      Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.b",
                          },
                          Object {
                            "Not": Object {
                              "And": Array [
                                Object {
                                  "IsString": true,
                                  "Variable": "$.fnl_context.input.b",
                                },
                                Object {
                                  "StringEquals": "",
                                  "Variable": "$.fnl_context.input.b",
                                },
                              ],
                            },
                          },
                        ],
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.b",
                          },
                          Object {
                            "Not": Object {
                              "And": Array [
                                Object {
                                  "IsNumeric": true,
                                  "Variable": "$.fnl_context.input.b",
                                },
                                Object {
                                  "NumericEquals": 0,
                                  "Variable": "$.fnl_context.input.b",
                                },
                              ],
                            },
                          },
                        ],
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsBoolean": true,
                            "Variable": "$.fnl_context.input.b",
                          },
                          Object {
                            "BooleanEquals": true,
                            "Variable": "$.fnl_context.input.b",
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__!input.a && input.b",
      "Type": "Choice",
    },
    "!input.a || input.b": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__!input.a || input.b",
          "Not": Object {
            "Or": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.fnl_context.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.fnl_context.input.a",
                  },
                  Object {
                    "Or": Array [
                      Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "Not": Object {
                              "And": Array [
                                Object {
                                  "IsString": true,
                                  "Variable": "$.fnl_context.input.a",
                                },
                                Object {
                                  "StringEquals": "",
                                  "Variable": "$.fnl_context.input.a",
                                },
                              ],
                            },
                          },
                        ],
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "Not": Object {
                              "And": Array [
                                Object {
                                  "IsNumeric": true,
                                  "Variable": "$.fnl_context.input.a",
                                },
                                Object {
                                  "NumericEquals": 0,
                                  "Variable": "$.fnl_context.input.a",
                                },
                              ],
                            },
                          },
                        ],
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsBoolean": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "BooleanEquals": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.fnl_context.input.b",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.fnl_context.input.b",
                  },
                  Object {
                    "Or": Array [
                      Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.b",
                          },
                          Object {
                            "Not": Object {
                              "And": Array [
                                Object {
                                  "IsString": true,
                                  "Variable": "$.fnl_context.input.b",
                                },
                                Object {
                                  "StringEquals": "",
                                  "Variable": "$.fnl_context.input.b",
                                },
                              ],
                            },
                          },
                        ],
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.b",
                          },
                          Object {
                            "Not": Object {
                              "And": Array [
                                Object {
                                  "IsNumeric": true,
                                  "Variable": "$.fnl_context.input.b",
                                },
                                Object {
                                  "NumericEquals": 0,
                                  "Variable": "$.fnl_context.input.b",
                                },
                              ],
                            },
                          },
                        ],
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsBoolean": true,
                            "Variable": "$.fnl_context.input.b",
                          },
                          Object {
                            "BooleanEquals": true,
                            "Variable": "$.fnl_context.input.b",
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__!input.a || input.b",
      "Type": "Choice",
    },
    "!input.a || input.b && input.a": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__!input.a || input.b && input.a",
          "Not": Object {
            "Or": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.fnl_context.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.fnl_context.input.a",
                  },
                  Object {
                    "Or": Array [
                      Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "Not": Object {
                              "And": Array [
                                Object {
                                  "IsString": true,
                                  "Variable": "$.fnl_context.input.a",
                                },
                                Object {
                                  "StringEquals": "",
                                  "Variable": "$.fnl_context.input.a",
                                },
                              ],
                            },
                          },
                        ],
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "Not": Object {
                              "And": Array [
                                Object {
                                  "IsNumeric": true,
                                  "Variable": "$.fnl_context.input.a",
                                },
                                Object {
                                  "NumericEquals": 0,
                                  "Variable": "$.fnl_context.input.a",
                                },
                              ],
                            },
                          },
                        ],
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsBoolean": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                          Object {
                            "BooleanEquals": true,
                            "Variable": "$.fnl_context.input.a",
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
              Object {
                "And": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsPresent": true,
                        "Variable": "$.fnl_context.input.b",
                      },
                      Object {
                        "IsNull": false,
                        "Variable": "$.fnl_context.input.b",
                      },
                      Object {
                        "Or": Array [
                          Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "Not": Object {
                                  "And": Array [
                                    Object {
                                      "IsString": true,
                                      "Variable": "$.fnl_context.input.b",
                                    },
                                    Object {
                                      "StringEquals": "",
                                      "Variable": "$.fnl_context.input.b",
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "Not": Object {
                                  "And": Array [
                                    Object {
                                      "IsNumeric": true,
                                      "Variable": "$.fnl_context.input.b",
                                    },
                                    Object {
                                      "NumericEquals": 0,
                                      "Variable": "$.fnl_context.input.b",
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          Object {
                            "And": Array [
                              Object {
                                "IsBoolean": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "BooleanEquals": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsPresent": true,
                        "Variable": "$.fnl_context.input.a",
                      },
                      Object {
                        "IsNull": false,
                        "Variable": "$.fnl_context.input.a",
                      },
                      Object {
                        "Or": Array [
                          Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "Not": Object {
                                  "And": Array [
                                    Object {
                                      "IsString": true,
                                      "Variable": "$.fnl_context.input.a",
                                    },
                                    Object {
                                      "StringEquals": "",
                                      "Variable": "$.fnl_context.input.a",
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "Not": Object {
                                  "And": Array [
                                    Object {
                                      "IsNumeric": true,
                                      "Variable": "$.fnl_context.input.a",
                                    },
                                    Object {
                                      "NumericEquals": 0,
                                      "Variable": "$.fnl_context.input.a",
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                          Object {
                            "And": Array [
                              Object {
                                "IsBoolean": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "BooleanEquals": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "assignFalse__!input.a || input.b && input.a",
      "Type": "Choice",
    },
    "!true": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__!true",
          "Not": Object {
            "IsNull": false,
            "Variable": "$$.Execution.Id",
          },
        },
      ],
      "Default": "assignFalse__!true",
      "Type": "Choice",
    },
    "1__return {and: input.a && input.b, or: input.a || input.b, not: !true, not": Object {
      "End": true,
      "Parameters": Object {
        "and.$": "$.heap0",
        "chain.$": "$.heap5",
        "not.$": "$.heap2",
        "notAnd.$": "$.heap3",
        "notOr.$": "$.heap4",
        "or.$": "$.heap1",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {and: input.a && input.b, or: input.a || input.b, not: !true, notAnd",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "assignFalse__!input.a && input.b": Object {
      "Next": "!input.a || input.b",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "assignFalse__!input.a || input.b": Object {
      "Next": "!input.a || input.b && input.a",
      "Result": false,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "assignFalse__!input.a || input.b && input.a": Object {
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, not: !true, not",
      "Result": false,
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "assignFalse__!true": Object {
      "Next": "!input.a && input.b",
      "Result": false,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignFalse__input.a || input.b": Object {
      "Next": "!true",
      "Result": false,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "assignFalse__return {and: input.a && input.b, or: input.a || input.b, not: ": Object {
      "Next": "input.a || input.b",
      "Result": false,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "assignTrue__!input.a && input.b": Object {
      "Next": "!input.a || input.b",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "assignTrue__!input.a || input.b": Object {
      "Next": "!input.a || input.b && input.a",
      "Result": true,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "assignTrue__!input.a || input.b && input.a": Object {
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, not: !true, not",
      "Result": true,
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "assignTrue__!true": Object {
      "Next": "!input.a && input.b",
      "Result": true,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignTrue__input.a || input.b": Object {
      "Next": "!true",
      "Result": true,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "assignTrue__return {and: input.a && input.b, or: input.a || input.b, not: !": Object {
      "Next": "input.a || input.b",
      "Result": true,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.a || input.b": Object {
      "Choices": Array [
        Object {
          "Next": "assignTrue__input.a || input.b",
          "Or": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "assignFalse__input.a || input.b",
      "Type": "Choice",
    },
    "return {and: input.a && input.b, or: input.a || input.b, not: !true, notAnd": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__return {and: input.a && input.b, or: input.a || input.b, not: !",
        },
      ],
      "Default": "assignFalse__return {and: input.a && input.b, or: input.a || input.b, not: ",
      "Type": "Choice",
    },
  },
}
`;

exports[`boolean return 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.a && input.b": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.a && input.b",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "assignFalse__return input.a && input.b": Object {
      "Next": "1__return input.a && input.b",
      "Result": false,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "assignTrue__return input.a && input.b": Object {
      "Next": "1__return input.a && input.b",
      "Result": true,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return input.a && input.b": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.a",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.a",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.fnl_context.input.b",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsString": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "StringEquals": "",
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "Not": Object {
                            "And": Array [
                              Object {
                                "IsNumeric": true,
                                "Variable": "$.fnl_context.input.b",
                              },
                              Object {
                                "NumericEquals": 0,
                                "Variable": "$.fnl_context.input.b",
                              },
                            ],
                          },
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                        Object {
                          "BooleanEquals": true,
                          "Variable": "$.fnl_context.input.b",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "assignTrue__return input.a && input.b",
        },
      ],
      "Default": "assignFalse__return input.a && input.b",
      "Type": "Choice",
    },
  },
}
`;

exports[`break from do-while-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "break",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "break": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return null",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from for-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "Break",
          ],
          "Next": "return null",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.fnl_context.input.items",
      "Iterator": Object {
        "StartAt": "if(item == \\"hello\\")",
        "States": Object {
          "break": Object {
            "Error": "Break",
            "Type": "Fail",
          },
          "else__if(item == \\"hello\\")": Object {
            "End": true,
            "Type": "Pass",
          },
          "if(item == \\"hello\\")": Object {
            "Choices": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.item",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.item",
                      },
                      Object {
                        "StringEquals": "hello",
                        "Variable": "$.item",
                      },
                    ],
                  },
                ],
                "Next": "break",
              },
            ],
            "Default": "else__if(item == \\"hello\\")",
            "Type": "Choice",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from while-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return null",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`call AWS.DynamoDB.GetItem, then Lambda and return LiteralExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ": Object {
      "InputPath": "$.heap0",
      "Next": "if(person.Item == undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "1__score = await computeScore({id: person.Item.id.S, name: person.Item.name": Object {
      "InputPath": "$.heap1",
      "Next": "return {id: person.Item.id.S, name: person.Item.name.S, score: score}",
      "ResultPath": "$.score",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(person.Item == undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.person.Item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return undefined",
        },
      ],
      "Default": "score = await computeScore({id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp": Object {
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return undefined": Object {
      "End": true,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S, score: score}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
        "score.$": "$.score",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "score = await computeScore({id: person.Item.id.S, name: person.Item.name.S}": Object {
      "Next": "1__score = await computeScore({id: person.Item.id.S, name: person.Item.name",
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`call Lambda Function, store as variable, return variable 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await getPerson({id: input.id})": Object {
      "InputPath": "$.heap0",
      "Next": "return person",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "person = await getPerson({id: input.id})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "person = await getPerson({id: input.id})": Object {
      "Next": "1__person = await getPerson({id: input.id})",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return person": Object {
      "End": true,
      "InputPath": "$.person",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Lambda Function, store as variable, return variable no block 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return getPerson({id: input.id})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return getPerson({id: input.id})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return getPerson({id: input.id})": Object {
      "Next": "1__return getPerson({id: input.id})",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function describe from another Step Function 1`] = `
Object {
  "StartAt": "return machine1.describeExecution(\\"hello\\")",
  "States": Object {
    "1__return machine1.describeExecution(\\"hello\\")": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1.describeExecution(\\"hello\\")": Object {
      "Next": "1__return machine1.describeExecution(\\"hello\\")",
      "Parameters": Object {
        "ExecutionArn": "hello",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function describe from another Step Function from context 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1.describeExecution(input.id)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1.describeExecution(input.id)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return machine1.describeExecution(input.id)": Object {
      "Next": "1__return machine1.describeExecution(input.id)",
      "Parameters": Object {
        "ExecutionArn.$": "$.fnl_context.input.id",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function 1`] = `
Object {
  "StartAt": "return machine1({})",
  "States": Object {
    "1__return machine1({})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({})": Object {
      "Next": "1__return machine1({})",
      "Parameters": Object {
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with dynamic input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: input.value1}})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: {value: input.value1}})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return machine1({input: {value: input.value1}})": Object {
      "Next": "1__return machine1({input: {value: input.value1}})",
      "Parameters": Object {
        "Input": Object {
          "value.$": "$.fnl_context.input.value1",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with dynamic input field input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: input})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: input})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return machine1({input: input})": Object {
      "Next": "1__return machine1({input: input})",
      "Parameters": Object {
        "Input.$": "$.fnl_context.input",
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with input 1`] = `
Object {
  "StartAt": "return machine1({input: {value: \\"hello\\"}})",
  "States": Object {
    "1__return machine1({input: {value: \\"hello\\"}})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: {value: \\"hello\\"}})": Object {
      "Next": "1__return machine1({input: {value: \\"hello\\"}})",
      "Parameters": Object {
        "Input": Object {
          "value": "hello",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with name and trace 1`] = `
Object {
  "StartAt": "return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})",
  "States": Object {
    "1__return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})": Object {
      "Next": "1__return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})",
      "Parameters": Object {
        "Name": "exec1",
        "StateMachineArn": "__REPLACED_TOKEN",
        "TraceHeader": "1",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with name and trace from variables 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({name: input.name, traceHeader: input.header})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({name: input.name, traceHeader: input.header})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return machine1({name: input.name, traceHeader: input.header})": Object {
      "Next": "1__return machine1({name: input.name, traceHeader: input.header})",
      "Parameters": Object {
        "Name.$": "$.fnl_context.input.name",
        "StateMachineArn": "__REPLACED_TOKEN",
        "TraceHeader.$": "$.fnl_context.input.header",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with null coalesce 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1": Object {
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Parameters": Object {
        "Input": Object {
          "value.$": "$.heap0",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: {value: input.value ?? \\"default\\"}})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.value",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.value",
            },
          ],
          "Next": "takeLeft__return machine1({input: {value: input.value ?? \\"default\\"}})",
        },
      ],
      "Default": "takeRight__return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Type": "Choice",
    },
    "takeLeft__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "InputPath": "$.fnl_context.input.value",
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "takeRight__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`catch and throw Error 1`] = `
Object {
  "StartAt": "try",
  "States": Object {
    "catch__try": Object {
      "Cause": "{\\"property\\":\\"custom cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
  },
}
`;

exports[`catch and throw new Error 1`] = `
Object {
  "StartAt": "try",
  "States": Object {
    "catch__try": Object {
      "Cause": "{\\"property\\":\\"custom cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
  },
}
`;

exports[`condition on task output 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__0_tmp = await task()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await task()": Object {
      "InputPath": "$.heap0",
      "Next": "if(0_tmp == 1)",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await task()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(0_tmp == 1)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.0_tmp",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.0_tmp",
                },
                Object {
                  "NumericEquals": 1,
                  "Variable": "$.0_tmp",
                },
              ],
            },
          ],
          "Next": "return null 1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null 1": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally call DynamoDB and then void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id == \\"hello\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: input.id}}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(input.id == \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: input.id}}})",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally return void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id == \\"hello\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(input.id == \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "return null 1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null 1": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally return void 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id == \\"hello\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(input.id == \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "return null 1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null 1": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in do..while loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.key == \\"sam\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await task(input.key)": Object {
      "InputPath": "$.fnl_context.input.key",
      "Next": "if(input.key == \\"sam\\")",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(input.key == \\"sam\\")": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "if(input.key == \\"sam\\") 1",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(input.key == \\"sam\\") 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.key",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.key",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.fnl_context.input.key",
                },
              ],
            },
          ],
          "Next": "if(input.key == \\"sam\\")",
        },
      ],
      "Default": "await task(input.key)",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in for loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "ItemsPath": "$.fnl_context.input.items",
      "Iterator": Object {
        "StartAt": "if(item == \\"hello\\")",
        "States": Object {
          "continue": Object {
            "End": true,
            "ResultPath": null,
            "Type": "Pass",
          },
          "else__if(item == \\"hello\\")": Object {
            "End": true,
            "Type": "Pass",
          },
          "if(item == \\"hello\\")": Object {
            "Choices": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.item",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.item",
                      },
                      Object {
                        "StringEquals": "hello",
                        "Variable": "$.item",
                      },
                    ],
                  },
                ],
                "Next": "continue",
              },
            ],
            "Default": "else__if(item == \\"hello\\")",
            "Type": "Choice",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in while loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await task(input.key)": Object {
      "InputPath": "$.fnl_context.input.key",
      "Next": "while (true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(input.key == \\"sam\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.key",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.key",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.fnl_context.input.key",
                },
              ],
            },
          ],
          "Next": "while (true)",
        },
      ],
      "Default": "await task(input.key)",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "if(input.key == \\"sam\\")",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`else if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val == \\"a\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(input.val == \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.val",
                },
                Object {
                  "StringEquals": "a",
                  "Variable": "$.fnl_context.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.val",
                },
                Object {
                  "StringEquals": "b",
                  "Variable": "$.fnl_context.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yip\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.val",
                },
                Object {
                  "StringEquals": "c",
                  "Variable": "$.fnl_context.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"woop\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yip\\"": Object {
      "End": true,
      "Result": "yip",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`else if else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val == \\"a\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(input.val == \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.val",
                },
                Object {
                  "StringEquals": "a",
                  "Variable": "$.fnl_context.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.val",
                },
                Object {
                  "StringEquals": "b",
                  "Variable": "$.fnl_context.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"woop\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`empty function 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return null",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for (const i in [task(input)]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await task(input)": Object {
      "InputPath": "$.fnl_context.input",
      "Next": "1__0_tmp = await task(input)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await task(input)": Object {
      "InputPath": "$.heap0",
      "Next": "for(i in [0_tmp])",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await task(input)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "for(i in [0_tmp])": Object {
      "Next": "for(i in [0_tmp]) 1",
      "Parameters": Object {
        "arr.$": "States.Array($.0_tmp)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(i in [0_tmp]) 1": Object {
      "ItemsPath": "$.heap1.arr",
      "Iterator": Object {
        "StartAt": "1_tmp = await task(i)",
        "States": Object {
          "1__1_tmp = await task(i)": Object {
            "InputPath": "$.heap2",
            "Next": "await task(1_tmp)",
            "ResultPath": "$.1_tmp",
            "Type": "Pass",
          },
          "1_tmp = await task(i)": Object {
            "InputPath": "$.i",
            "Next": "1__1_tmp = await task(i)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap2",
            "Type": "Task",
          },
          "await task(1_tmp)": Object {
            "End": true,
            "InputPath": "$.1_tmp",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap3",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "0_i.$": "$$.Map.Item.Value",
        "0_tmp.$": "$.0_tmp",
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Index",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for (const i of [task(input)]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await task(input)": Object {
      "InputPath": "$.fnl_context.input",
      "Next": "1__0_tmp = await task(input)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await task(input)": Object {
      "InputPath": "$.heap0",
      "Next": "for(i of [0_tmp])",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await task(input)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "for(i of [0_tmp])": Object {
      "Next": "for(i of [0_tmp]) 1",
      "Parameters": Object {
        "arr.$": "States.Array($.0_tmp)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(i of [0_tmp]) 1": Object {
      "ItemsPath": "$.heap1.arr",
      "Iterator": Object {
        "StartAt": "1_tmp = await task(i)",
        "States": Object {
          "1__1_tmp = await task(i)": Object {
            "InputPath": "$.heap2",
            "Next": "await task(1_tmp)",
            "ResultPath": "$.1_tmp",
            "Type": "Pass",
          },
          "1_tmp = await task(i)": Object {
            "InputPath": "$.i",
            "Next": "1__1_tmp = await task(i)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap2",
            "Type": "Task",
          },
          "await task(1_tmp)": Object {
            "End": true,
            "InputPath": "$.1_tmp",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap3",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "0_tmp.$": "$.0_tmp",
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for i in items, items[i] 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "ItemsPath": "$.fnl_context.input.items",
      "Iterator": Object {
        "StartAt": "a = items[i]",
        "States": Object {
          "a = items[i]": Object {
            "End": true,
            "InputPath": "$.0_i",
            "ResultPath": "$.a",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "0_i.$": "$$.Map.Item.Value",
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Index",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop and do nothing 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "ItemsPath": "$.fnl_context.input.items",
      "Iterator": Object {
        "StartAt": "a = item",
        "States": Object {
          "a = item": Object {
            "End": true,
            "InputPath": "$.item",
            "ResultPath": "$.a",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop inline array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(item of [1, 2, 3])": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "a = item",
        "States": Object {
          "a = item": Object {
            "End": true,
            "InputPath": "$.item",
            "ResultPath": "$.a",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(item of [1, 2, 3])",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "for(item of [1, 2, 3])": Object {
      "Next": "1__for(item of [1, 2, 3])",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop over a list literal 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "people = [\\"sam\\", \\"sam\\"]",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "for(name of people)": Object {
      "ItemsPath": "$.people",
      "Iterator": Object {
        "StartAt": "await computeScore({id: input.id, name: name})",
        "States": Object {
          "await computeScore({id: input.id, name: name})": Object {
            "End": true,
            "Parameters": Object {
              "id.$": "$.fnl_context.input.id",
              "name.$": "$.name",
            },
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "name.$": "$$.Map.Item.Value",
        "people.$": "$.people",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "people = [\\"sam\\", \\"sam\\"]": Object {
      "Next": "for(name of people)",
      "Result": Array [
        "sam",
        "sam",
      ],
      "ResultPath": "$.people",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-of { try { task() } catch (err) { if(err) throw } finally { task() } } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "ItemsPath": "$.fnl_context.input.items",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "1__catch__await task(item)": Object {
            "InputPath": "$.err.0_ParsedError",
            "Next": "catch(err)",
            "ResultPath": "$.err",
            "Type": "Pass",
          },
          "1__finally": Object {
            "Choices": Array [
              Object {
                "IsPresent": true,
                "Next": "throw__1__finally",
                "Variable": "$.0_tmp",
              },
            ],
            "Type": "Choice",
          },
          "await task(item)": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__await task(item)",
                "ResultPath": "$.err",
              },
            ],
            "InputPath": "$.item",
            "Next": "finally",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "catch(err)": Object {
            "Choices": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.err.message",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.err.message",
                      },
                      Object {
                        "StringEquals": "you dun' goofed",
                        "Variable": "$.err.message",
                      },
                    ],
                  },
                ],
                "Next": "throw new Error(\\"little\\")",
              },
            ],
            "Default": "finally",
            "Type": "Choice",
          },
          "catch__await task(item)": Object {
            "Next": "1__catch__await task(item)",
            "Parameters": Object {
              "0_ParsedError.$": "States.StringToJson($.err.Cause)",
            },
            "ResultPath": "$.err",
            "Type": "Pass",
          },
          "finally": Object {
            "Next": "1__finally",
            "Parameters": "2",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap1",
            "Type": "Task",
          },
          "throw new Error(\\"little\\")": Object {
            "Next": "finally",
            "Result": Object {
              "message": "little",
            },
            "ResultPath": "$.0_tmp",
            "Type": "Pass",
          },
          "throw__1__finally": Object {
            "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
            "Error": "ReThrowFromFinally",
            "Type": "Fail",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if (?? === typeof x) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "5__if(input.id == undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return \\"null\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "StringEquals": "undefined",
                  "Variable": "$.heap0",
                },
              ],
            },
          ],
          "Next": "return \\"undefined\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap1",
                },
                Object {
                  "StringEquals": "string",
                  "Variable": "$.heap1",
                },
              ],
            },
          ],
          "Next": "return \\"string\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "StringEquals": "boolean",
                  "Variable": "$.heap2",
                },
              ],
            },
          ],
          "Next": "return \\"boolean\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap3",
                },
                Object {
                  "StringEquals": "number",
                  "Variable": "$.heap3",
                },
              ],
            },
          ],
          "Next": "return \\"number\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap4",
                },
                Object {
                  "StringEquals": "bigint",
                  "Variable": "$.heap4",
                },
              ],
            },
          ],
          "Next": "return \\"bigint\\"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.id == undefined)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "boolean__if(input.id == undefined)": Object {
      "Next": "input.id",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__input.id": Object {
      "Next": "input.id 1",
      "Result": "boolean",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "boolean__input.id 1": Object {
      "Next": "input.id 2",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__input.id 2": Object {
      "Next": "input.id 3",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__input.id 3": Object {
      "Next": "5__if(input.id == undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "if(input.id == undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__if(input.id == undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__if(input.id == undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__if(input.id == undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if(input.id == undefined)",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__if(input.id == undefined)",
      "Type": "Choice",
    },
    "input.id": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__input.id",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.id",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__input.id",
      "Type": "Choice",
    },
    "input.id 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__input.id 1",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__input.id 1",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__input.id 1",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.id 1",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__input.id 1",
      "Type": "Choice",
    },
    "input.id 2": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__input.id 2",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__input.id 2",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__input.id 2",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.id 2",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__input.id 2",
      "Type": "Choice",
    },
    "input.id 3": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__input.id 3",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__input.id 3",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__input.id 3",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.id 3",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__input.id 3",
      "Type": "Choice",
    },
    "number__if(input.id == undefined)": Object {
      "Next": "input.id",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__input.id": Object {
      "Next": "input.id 1",
      "Result": "number",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "number__input.id 1": Object {
      "Next": "input.id 2",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__input.id 2": Object {
      "Next": "input.id 3",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__input.id 3": Object {
      "Next": "5__if(input.id == undefined)",
      "Result": "number",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "object__if(input.id == undefined)": Object {
      "Next": "input.id",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__input.id": Object {
      "Next": "input.id 1",
      "Result": "object",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "object__input.id 1": Object {
      "Next": "input.id 2",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__input.id 2": Object {
      "Next": "input.id 3",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__input.id 3": Object {
      "Next": "5__if(input.id == undefined)",
      "Result": "object",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return \\"bigint\\"": Object {
      "End": true,
      "Result": "bigint",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"boolean\\"": Object {
      "End": true,
      "Result": "boolean",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"null\\"": Object {
      "End": true,
      "Result": "null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"number\\"": Object {
      "End": true,
      "Result": "number",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"string\\"": Object {
      "End": true,
      "Result": "string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"undefined\\"": Object {
      "End": true,
      "Result": "undefined",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "string__if(input.id == undefined)": Object {
      "Next": "input.id",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__input.id": Object {
      "Next": "input.id 1",
      "Result": "string",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "string__input.id 1": Object {
      "Next": "input.id 2",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__input.id 2": Object {
      "Next": "input.id 3",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__input.id 3": Object {
      "Next": "5__if(input.id == undefined)",
      "Result": "string",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "undefined__if(input.id == undefined)": Object {
      "Next": "input.id",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__input.id": Object {
      "Next": "input.id 1",
      "Result": "undefined",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "undefined__input.id 1": Object {
      "Next": "input.id 2",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__input.id 2": Object {
      "Next": "input.id 3",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__input.id 3": Object {
      "Next": "5__if(input.id == undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`if (typeof x === ??) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "5__if(input.id == undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return \\"null\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "StringEquals": "undefined",
                  "Variable": "$.heap0",
                },
              ],
            },
          ],
          "Next": "return \\"undefined\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap1",
                },
                Object {
                  "StringEquals": "string",
                  "Variable": "$.heap1",
                },
              ],
            },
          ],
          "Next": "return \\"string\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "StringEquals": "boolean",
                  "Variable": "$.heap2",
                },
              ],
            },
          ],
          "Next": "return \\"boolean\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap3",
                },
                Object {
                  "StringEquals": "number",
                  "Variable": "$.heap3",
                },
              ],
            },
          ],
          "Next": "return \\"number\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap4",
                },
                Object {
                  "StringEquals": "bigint",
                  "Variable": "$.heap4",
                },
              ],
            },
          ],
          "Next": "return \\"bigint\\"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.id == undefined)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "boolean__if(input.id == undefined)": Object {
      "Next": "input.id",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__input.id": Object {
      "Next": "input.id 1",
      "Result": "boolean",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "boolean__input.id 1": Object {
      "Next": "input.id 2",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__input.id 2": Object {
      "Next": "input.id 3",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__input.id 3": Object {
      "Next": "5__if(input.id == undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "if(input.id == undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__if(input.id == undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__if(input.id == undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__if(input.id == undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if(input.id == undefined)",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__if(input.id == undefined)",
      "Type": "Choice",
    },
    "input.id": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__input.id",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.id",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__input.id",
      "Type": "Choice",
    },
    "input.id 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__input.id 1",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__input.id 1",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__input.id 1",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.id 1",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__input.id 1",
      "Type": "Choice",
    },
    "input.id 2": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__input.id 2",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__input.id 2",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__input.id 2",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.id 2",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__input.id 2",
      "Type": "Choice",
    },
    "input.id 3": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__input.id 3",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__input.id 3",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__input.id 3",
        },
        Object {
          "IsPresent": true,
          "Next": "object__input.id 3",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__input.id 3",
      "Type": "Choice",
    },
    "number__if(input.id == undefined)": Object {
      "Next": "input.id",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__input.id": Object {
      "Next": "input.id 1",
      "Result": "number",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "number__input.id 1": Object {
      "Next": "input.id 2",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__input.id 2": Object {
      "Next": "input.id 3",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__input.id 3": Object {
      "Next": "5__if(input.id == undefined)",
      "Result": "number",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "object__if(input.id == undefined)": Object {
      "Next": "input.id",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__input.id": Object {
      "Next": "input.id 1",
      "Result": "object",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "object__input.id 1": Object {
      "Next": "input.id 2",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__input.id 2": Object {
      "Next": "input.id 3",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__input.id 3": Object {
      "Next": "5__if(input.id == undefined)",
      "Result": "object",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return \\"bigint\\"": Object {
      "End": true,
      "Result": "bigint",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"boolean\\"": Object {
      "End": true,
      "Result": "boolean",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"null\\"": Object {
      "End": true,
      "Result": "null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"number\\"": Object {
      "End": true,
      "Result": "number",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"string\\"": Object {
      "End": true,
      "Result": "string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"undefined\\"": Object {
      "End": true,
      "Result": "undefined",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "string__if(input.id == undefined)": Object {
      "Next": "input.id",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__input.id": Object {
      "Next": "input.id 1",
      "Result": "string",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "string__input.id 1": Object {
      "Next": "input.id 2",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__input.id 2": Object {
      "Next": "input.id 3",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__input.id 3": Object {
      "Next": "5__if(input.id == undefined)",
      "Result": "string",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "undefined__if(input.id == undefined)": Object {
      "Next": "input.id",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__input.id": Object {
      "Next": "input.id 1",
      "Result": "undefined",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "undefined__input.id 1": Object {
      "Next": "input.id 2",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__input.id 2": Object {
      "Next": "input.id 3",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__input.id 3": Object {
      "Next": "5__if(input.id == undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`if 1`] = `
Object {
  "StartAt": "if(true)",
  "States": Object {
    "if(true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return \\"yup\\"",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val == \\"a\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(input.val == \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.val",
                },
                Object {
                  "StringEquals": "a",
                  "Variable": "$.fnl_context.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val != \\"a\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(input.val != \\"a\\")": Object {
      "Choices": Array [
        Object {
          "Next": "if(input.val == \\"b\\")",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.fnl_context.input.val",
              },
              Object {
                "And": Array [
                  Object {
                    "IsString": true,
                    "Variable": "$.fnl_context.input.val",
                  },
                  Object {
                    "StringEquals": "a",
                    "Variable": "$.fnl_context.input.val",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "return \\"woop\\"",
      "Type": "Choice",
    },
    "if(input.val == \\"b\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.val",
                },
                Object {
                  "StringEquals": "b",
                  "Variable": "$.fnl_context.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"hullo\\"",
        },
      ],
      "Default": "return \\"woop\\"",
      "Type": "Choice",
    },
    "return \\"hullo\\"": Object {
      "End": true,
      "Result": "hullo",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if invoke 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if(await task())": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "IsNull": false,
              "Variable": "$.heap0",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hi\\"",
        },
      ],
      "Default": "return \\"woop\\"",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(await task())",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(await task())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return \\"hi\\"": Object {
      "End": true,
      "Result": "hi",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if-else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id == \\"hello\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(input.id == \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if-else-if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id == \\"hello\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(input.id == \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "world",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "return \\"world\\"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`import from express state machine into machine 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await machine({input: {id: \\"hi\\"}})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await machine({input: {id: \\"hi\\"}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "Input": Object {
          "id": "hi",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`import from state machine into state machine 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await machine({input: {id: \\"hi\\"}})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await machine({input: {id: \\"hi\\"}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "Input": Object {
          "id": "hi",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`let and set 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = null",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "a = \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + \\" world\\"",
      "Result": "hello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + \\" world\\"": Object {
      "Next": "a = \\"hello\\" + 1",
      "Result": "hello world",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + 1": Object {
      "Next": "a = 1 + \\"hello\\"",
      "Result": "hello1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + [\\"world\\"]": Object {
      "Next": "return a",
      "Result": "helloworld",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + null": Object {
      "Next": "a = [null]",
      "Result": "hellonull",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + true": Object {
      "Next": "a = false + \\"hello\\"",
      "Result": "hellotrue",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + {place: \\"world\\"}": Object {
      "Next": "a = \\"hello\\" + [\\"world\\"]",
      "Result": "hello[object Object]",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = -1": Object {
      "Next": "a = -100",
      "Result": -1,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = -100": Object {
      "Next": "a = 1 + 2",
      "Result": -100,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 0": Object {
      "Next": "a = -1",
      "Result": 0,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1 + \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + true",
      "Result": "1hello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1 + 2": Object {
      "Next": "a = \\"hello\\"",
      "Result": 3,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [-1]": Object {
      "Next": "a = [true]",
      "Result": Array [
        -1,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [1]": Object {
      "Next": "a = [-1]",
      "Result": Array [
        1,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [null]": Object {
      "Next": "a = [1]",
      "Result": Array [
        null,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [true]": Object {
      "Next": "a = [{key: \\"value\\"}]",
      "Result": Array [
        true,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [{key: \\"value\\"}]": Object {
      "Next": "a = {key: \\"value\\"}",
      "Result": Array [
        Object {
          "key": "value",
        },
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = a": Object {
      "InputPath": "$.a",
      "Next": "a = \\"hello\\" + {place: \\"world\\"}",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = false": Object {
      "Next": "a = 0",
      "Result": false,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = false + \\"hello\\"": Object {
      "Next": "a = null + \\"hello\\"",
      "Result": "falsehello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "a = true",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null + \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + null",
      "Result": "nullhello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = true": Object {
      "Next": "a = false",
      "Result": true,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {key: \\"value\\"}": Object {
      "Next": "a = a",
      "Result": Object {
        "key": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`let cond; do { cond = task() } while (cond) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__cond = await task() 1": Object {
      "InputPath": "$.heap0",
      "Next": "cond = await task()",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "cond = await task()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.cond",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "cond = await task() 1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "cond = await task() 1": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__cond = await task() 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.filter(item => item.length > 2).map(item => item) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.filter(function(item)).map(function(item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.filter(function(item)).map(function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.list.filter(function(item)).map(function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list[?(@.length>2)]",
      "Iterator": Object {
        "StartAt": "return item",
        "States": Object {
          "return item": Object {
            "End": true,
            "InputPath": "$.item",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return input.list.filter(function(item)).map(function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
  },
}
`;

exports[`list.filter(item => item.length > 2).map(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.filter(function(item)).map(function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.filter(function(item)).map(function(item)))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return Promise.all(input.list.filter(function(item)).map(function(item)))": Object {
      "ItemsPath": "$.fnl_context.input.list[?(@.length>2)]",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return Promise.all(input.list.filter(function(item)).map(function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`list.forEach((item, i) => if (i == 0) task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function(item, i))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function(item, i))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.list.forEach(function(item, i))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "if(i == 0)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "if(i == 0)": Object {
            "Choices": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.i",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.i",
                      },
                      Object {
                        "NumericEquals": 0,
                        "Variable": "$.i",
                      },
                    ],
                  },
                ],
                "Next": "return task(item)",
              },
            ],
            "Default": "return null",
            "Type": "Choice",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return input.list.forEach(function(item, i))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`list.forEach((item, i, list) => if (i == 0) task(item) else task(list[0])) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function(item, i))": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function(item, i))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.list.forEach(function(item, i))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "if(i == 0)",
        "States": Object {
          "1__return task(input.list[0])": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap1",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "if(i == 0)": Object {
            "Choices": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.i",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.i",
                      },
                      Object {
                        "NumericEquals": 0,
                        "Variable": "$.i",
                      },
                    ],
                  },
                ],
                "Next": "return task(item)",
              },
            ],
            "Default": "return task(input.list[0])",
            "Type": "Choice",
          },
          "return task(input.list[0])": Object {
            "InputPath": "$.fnl_context.input.list[0]",
            "Next": "1__return task(input.list[0])",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap1",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return input.list.forEach(function(item, i))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
  },
}
`;

exports[`list.forEach(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.list.forEach(function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return input.list.forEach(function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`list.map((item, i) => if (i == 0) task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function(item, i)))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function(item, i)))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function(item, i)))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "if(i == 0)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "if(i == 0)": Object {
            "Choices": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.i",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.i",
                      },
                      Object {
                        "NumericEquals": 0,
                        "Variable": "$.i",
                      },
                    ],
                  },
                ],
                "Next": "return task(item)",
              },
            ],
            "Default": "return null",
            "Type": "Choice",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return Promise.all(input.list.map(function(item, i)))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`list.map((item, i, list) => if (i == 0) task(item) else task(list[0])) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function(item, i)))": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function(item, i)))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function(item, i)))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "if(i == 0)",
        "States": Object {
          "1__return task(input.list[0])": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap1",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "if(i == 0)": Object {
            "Choices": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.i",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.i",
                      },
                      Object {
                        "NumericEquals": 0,
                        "Variable": "$.i",
                      },
                    ],
                  },
                ],
                "Next": "return task(item)",
              },
            ],
            "Default": "return task(input.list[0])",
            "Type": "Choice",
          },
          "return task(input.list[0])": Object {
            "InputPath": "$.fnl_context.input.list[0]",
            "Next": "1__return task(input.list[0])",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap1",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return Promise.all(input.list.map(function(item, i)))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "i.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
  },
}
`;

exports[`list.map(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function(item)))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function(item)))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function(item)))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return Promise.all(input.list.map(function(item)))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`nested try-catch 1`] = `
Object {
  "StartAt": "try",
  "States": Object {
    "catch__try": Object {
      "Cause": "{\\"message\\":\\"error3\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
    "catch__try 1": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "error2",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try 1",
      "Result": Object {
        "message": "error1",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`null coalesce logic 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {null: input.a ?? input.b}": Object {
      "End": true,
      "Parameters": Object {
        "null.$": "$.heap0",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {null: input.a ?? input.b}",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return {null: input.a ?? input.b}": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.a",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.a",
            },
          ],
          "Next": "takeLeft__return {null: input.a ?? input.b}",
        },
      ],
      "Default": "takeRight__return {null: input.a ?? input.b}",
      "Type": "Choice",
    },
    "takeLeft__return {null: input.a ?? input.b}": Object {
      "InputPath": "$.fnl_context.input.a",
      "Next": "1__return {null: input.a ?? input.b}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "takeRight__return {null: input.a ?? input.b}": Object {
      "InputPath": "$.fnl_context.input.b",
      "Next": "1__return {null: input.a ?? input.b}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`put an event bus event 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {": Object {
      "Next": "return null",
      "Parameters": Object {
        "Entries": Array [
          Object {
            "Detail": Object {
              "value.$": "$.fnl_context.input.id",
            },
            "DetailType": "someEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
        ],
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`put multiple event bus events 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {": Object {
      "Next": "return null",
      "Parameters": Object {
        "Entries": Array [
          Object {
            "Detail": Object {
              "value.$": "$.fnl_context.input.id",
            },
            "DetailType": "someEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
          Object {
            "Detail": Object {
              "constant": "hi",
              "value.$": "$.fnl_context.input.id",
            },
            "DetailType": "someOtherEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
        ],
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`result = $SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`result = $SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__result = await $SFN.map(input.list, function(item))": Object {
      "InputPath": "$.heap1",
      "Next": "return result",
      "ResultPath": "$.result",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "result = await $SFN.map(input.list, function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "result = await $SFN.map(input.list, function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__result = await $SFN.map(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return result": Object {
      "End": true,
      "InputPath": "$.result",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return $SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.forEach(list, (item) => try { task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__await task(item)",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "catch__await task(item)": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.forEach(list, {maxConcurrency: 2} (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, {maxConcurrency: 2}, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, {maxConcurrency: 2}, function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, {maxConcurrency: 2}, function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 2,
      "Next": "1__return $SFN.forEach(input.list, {maxConcurrency: 2}, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.map(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, (item) => try { task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "try",
        "States": Object {
          "1__try": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "catch__try": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "try": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__try",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "1__try",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.map(input.list, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, {maxConcurrency: 2} (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, {maxConcurrency: 2}, function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, {maxConcurrency: 2}, function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, {maxConcurrency: 2}, function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 2,
      "Next": "1__return $SFN.map(input.list, {maxConcurrency: 2}, function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.parallel(() => "hello", () => "world")) 1`] = `
Object {
  "StartAt": "return $SFN.parallel([function(), function()])",
  "States": Object {
    "1__return $SFN.parallel([function(), function()])": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel([function(), function()])": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "return \\"world\\"",
          "States": Object {
            "return \\"world\\"": Object {
              "End": true,
              "Result": "world",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel([function(), function()])",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return $SFN.parallel(() => try { task() } catch { return null })) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try 1": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try 1",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try 1": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try 1": Object {
      "Branches": Array [
        Object {
          "StartAt": "try",
          "States": Object {
            "1__try": Object {
              "End": true,
              "InputPath": "$.heap0",
              "ResultPath": "$",
              "Type": "Pass",
            },
            "catch__try": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
            "try": Object {
              "Catch": Array [
                Object {
                  "ErrorEquals": Array [
                    "States.ALL",
                  ],
                  "Next": "catch__try",
                  "ResultPath": null,
                },
              ],
              "InputPath": "$.fnl_context.null",
              "Next": "1__try",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap0",
              "Type": "Task",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 1",
          "ResultPath": null,
        },
      ],
      "Next": "1__try 1",
      "ResultPath": "$.heap1",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return AWS.DynamoDB.GetItem 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ": Object {
      "InputPath": "$.heap0",
      "Next": "if(person.Item == undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(person.Item == undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.person.Item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return undefined",
        },
      ],
      "Default": "return {id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp": Object {
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.fnl_context.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return undefined": Object {
      "End": true,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.DynamoDB.GetItem dynamic parameters 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ": Object {
      "InputPath": "$.heap1",
      "Next": "if(person.Item == undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S:  1": Object {
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.heap0",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "if(person.Item == undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.person.Item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return undefined",
        },
      ],
      "Default": "return {id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "takeLeft__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {i",
        },
      ],
      "Default": "takeRight__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {",
      "Type": "Choice",
    },
    "return undefined": Object {
      "End": true,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "takeLeft__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {i": Object {
      "InputPath": "$.fnl_context.input.id",
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S:  1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "takeRight__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {": Object {
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S:  1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.Lambda.Invoke dynamic parameters 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ??": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "takeLeft__0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: i",
        },
      ],
      "Default": "takeRight__0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: ",
      "Type": "Choice",
    },
    "1__0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id": Object {
      "InputPath": "$.heap1",
      "Next": "return 0_tmp.Payload",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id 1": Object {
      "Next": "1__0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id",
      "Parameters": Object {
        "FunctionName": "__REPLACED_TOKEN",
        "Payload": Object {
          "id.$": "$.heap0",
        },
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ??",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return 0_tmp.Payload": Object {
      "End": true,
      "InputPath": "$.0_tmp.Payload",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "takeLeft__0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: i": Object {
      "InputPath": "$.fnl_context.input.id",
      "Next": "1__0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "takeRight__0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: ": Object {
      "Next": "1__0_tmp = await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id 1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input[\\"id special\\"]",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.input[\\"id special\\"]": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.input['id special']",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr number 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.arr[0]",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.input.arr[0]": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.input.arr[0]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return PropAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.id",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.input.id": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return a single Lambda Function call 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return getPerson({id: input.id})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return getPerson({id: input.id})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return getPerson({id: input.id})": Object {
      "Next": "1__return getPerson({id: input.id})",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return await task(await task()) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__0_tmp = await task()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await task()": Object {
      "InputPath": "$.heap0",
      "Next": "return task(0_tmp)",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__return task(0_tmp)": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await task()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return task(0_tmp)": Object {
      "InputPath": "$.0_tmp",
      "Next": "1__return task(0_tmp)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`return identifier 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.id",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.id": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(-1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(-1)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.items.slice(-1)": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.items[-1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(0, -1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(0, -1)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.items.slice(0, -1)": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.items[0:-1]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.items.slice(1)": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.items[1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1, 3) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1, 3)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.items.slice(1, 3)": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.items[1:3]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1, undefined) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1, undefined)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.items.slice(1, undefined)": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.items[1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return optional PropAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.id",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.input.id": Object {
      "End": true,
      "InputPath": "$.fnl_context.input.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task({ key: items.filter(*) }) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({equals: input.items.filter(function(item)), and: input.item": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({equals: input.items.filter(function(item)), and: input.items.f",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return task({equals: input.items.filter(function(item)), and: input.items.f": Object {
      "Next": "1__return task({equals: input.items.filter(function(item)), and: input.item",
      "Parameters": Object {
        "and.$": "$.fnl_context.input.items[?(@.str=='hello'&&@.items[0]=='hello')]",
        "equals.$": "$.fnl_context.input.items[?(@.str=='hello')]",
        "or.$": "$.fnl_context.input.items[?(@.str=='hello'||@.items[0]=='hello')]",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return task({key: items.slice(1, 3)}) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({key: input.items.slice(1, 3)})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({key: input.items.slice(1, 3)})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return task({key: input.items.slice(1, 3)})": Object {
      "Next": "1__return task({key: input.items.slice(1, 3)})",
      "Parameters": Object {
        "key.$": "$.fnl_context.input.items[1:3]",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return task(1) ?? task(2)) 1`] = `
Object {
  "StartAt": "0_tmp = await task(1)",
  "States": Object {
    "0_tmp = await task(1)": Object {
      "Next": "1__0_tmp = await task(1)",
      "Parameters": 1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await task(1)": Object {
      "InputPath": "$.heap0",
      "Next": "1_tmp = await task(2)",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__1_tmp = await task(2)": Object {
      "InputPath": "$.heap1",
      "Next": "return 0_tmp ?? 1_tmp",
      "ResultPath": "$.1_tmp",
      "Type": "Pass",
    },
    "1__return 0_tmp ?? 1_tmp": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1_tmp = await task(2)": Object {
      "Next": "1__1_tmp = await task(2)",
      "Parameters": 2,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return 0_tmp ?? 1_tmp": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.0_tmp",
            },
            Object {
              "IsNull": false,
              "Variable": "$.0_tmp",
            },
          ],
          "Next": "takeLeft__return 0_tmp ?? 1_tmp",
        },
      ],
      "Default": "takeRight__return 0_tmp ?? 1_tmp",
      "Type": "Choice",
    },
    "takeLeft__return 0_tmp ?? 1_tmp": Object {
      "InputPath": "$.0_tmp",
      "Next": "1__return 0_tmp ?? 1_tmp",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "takeRight__return 0_tmp ?? 1_tmp": Object {
      "InputPath": "$.1_tmp",
      "Next": "1__return 0_tmp ?? 1_tmp",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task(await task()) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__0_tmp = await task()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await task()": Object {
      "InputPath": "$.heap0",
      "Next": "return task(0_tmp)",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__return task(0_tmp)": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await task()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return task(0_tmp)": Object {
      "InputPath": "$.0_tmp",
      "Next": "1__return task(0_tmp)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`return typeof x 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return typeof input.id": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return typeof input.id",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "boolean__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return typeof input.id": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "string__return typeof input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "boolean__return typeof input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.fnl_context.input.id",
            },
          ],
          "Next": "number__return typeof input.id",
        },
        Object {
          "IsPresent": true,
          "Next": "object__return typeof input.id",
          "Variable": "$.fnl_context.input.id",
        },
      ],
      "Default": "undefined__return typeof input.id",
      "Type": "Choice",
    },
    "string__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return null",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`single quotes in StringLiteralExpr should be escaped in a JSON Path filter expression 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({escape: input.items.filter(function(item))})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({escape: input.items.filter(function(item))})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return task({escape: input.items.filter(function(item))})": Object {
      "Next": "1__return task({escape: input.items.filter(function(item))})",
      "Parameters": Object {
        "escape.$": "$.fnl_context.input.items[?(@.str=='hello\\\\'world')]",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`spread constant array and object 1`] = `
Object {
  "StartAt": "return {array: [0, ...array, 3], object: {key: \\"value\\", ...object}}",
  "States": Object {
    "return {array: [0, ...array, 3], object: {key: \\"value\\", ...object}}": Object {
      "End": true,
      "Result": Object {
        "array": Array [
          0,
          1,
          2,
          3,
        ],
        "object": Object {
          "hello": "world",
          "key": "value",
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`task(-1) 1`] = `
Object {
  "StartAt": "return task(-1)",
  "States": Object {
    "1__return task(-1)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(-1)": Object {
      "Next": "1__return task(-1)",
      "Parameters": -1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`task(any) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await task(null)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await task(\\"hello\\" + \\" world\\")": Object {
      "Next": "await task(\\"hello\\" + 1)",
      "Parameters": "hello world",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap8",
      "Type": "Task",
    },
    "await task(\\"hello\\" + 1)": Object {
      "Next": "await task(1 + \\"hello\\")",
      "Parameters": "hello1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap9",
      "Type": "Task",
    },
    "await task(\\"hello\\" + [\\"world\\"])": Object {
      "Next": "return null",
      "Parameters": "helloworld",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap22",
      "Type": "Task",
    },
    "await task(\\"hello\\" + null)": Object {
      "Next": "await task([null])",
      "Parameters": "hellonull",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap14",
      "Type": "Task",
    },
    "await task(\\"hello\\" + true)": Object {
      "Next": "await task(false + \\"hello\\")",
      "Parameters": "hellotrue",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap11",
      "Type": "Task",
    },
    "await task(\\"hello\\" + {place: \\"world\\"})": Object {
      "Next": "await task(\\"hello\\" + [\\"world\\"])",
      "Parameters": "hello[object Object]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap21",
      "Type": "Task",
    },
    "await task(\\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + \\" world\\")",
      "Parameters": "hello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap7",
      "Type": "Task",
    },
    "await task(-1)": Object {
      "Next": "await task(-100)",
      "Parameters": -1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "await task(-100)": Object {
      "Next": "await task(1 + 2)",
      "Parameters": -100,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap5",
      "Type": "Task",
    },
    "await task(0)": Object {
      "Next": "await task(-1)",
      "Parameters": 0,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "await task(1 + \\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + true)",
      "Parameters": "1hello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap10",
      "Type": "Task",
    },
    "await task(1 + 2)": Object {
      "Next": "await task(\\"hello\\")",
      "Parameters": 3,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap6",
      "Type": "Task",
    },
    "await task([-1])": Object {
      "Next": "await task([true])",
      "Parameters": Array [
        -1,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap17",
      "Type": "Task",
    },
    "await task([1])": Object {
      "Next": "await task([-1])",
      "Parameters": Array [
        1,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap16",
      "Type": "Task",
    },
    "await task([null])": Object {
      "Next": "await task([1])",
      "Parameters": Array [
        null,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap15",
      "Type": "Task",
    },
    "await task([true])": Object {
      "Next": "await task([{key: \\"value\\"}])",
      "Parameters": Array [
        true,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap18",
      "Type": "Task",
    },
    "await task([{key: \\"value\\"}])": Object {
      "Next": "await task({key: \\"value\\"})",
      "Parameters": Array [
        Object {
          "key": "value",
        },
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap19",
      "Type": "Task",
    },
    "await task(false + \\"hello\\")": Object {
      "Next": "await task(null + \\"hello\\")",
      "Parameters": "falsehello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap12",
      "Type": "Task",
    },
    "await task(false)": Object {
      "Next": "await task(0)",
      "Parameters": false,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "await task(null + \\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + null)",
      "Parameters": "nullhello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap13",
      "Type": "Task",
    },
    "await task(null)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "await task(true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "await task(true)": Object {
      "Next": "await task(false)",
      "Parameters": true,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "await task({key: \\"value\\"})": Object {
      "Next": "await task(\\"hello\\" + {place: \\"world\\"})",
      "Parameters": Object {
        "key": "value",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap20",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`task(input.list[-1]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(input.list[-1])": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(input.list[-1])",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return task(input.list[-1])": Object {
      "InputPath": "$.fnl_context.input.list[-1]",
      "Next": "1__return task(input.list[-1])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`template literal strings 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({key: \`input.obj.str hello input.obj.items[0]\`})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key: \`input.obj.str hello input.obj.items[0]\`}) 1": Object {
      "Next": "1__return task({key: \`input.obj.str hello input.obj.items[0]\`})",
      "Parameters": Object {
        "key.$": "$.heap0.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({key: \`input.obj.str hello input.obj.items[0]\`})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return task({key: \`input.obj.str hello input.obj.items[0]\`})": Object {
      "Next": "1__return task({key: \`input.obj.str hello input.obj.items[0]\`}) 1",
      "Parameters": Object {
        "string.$": "States.Format('{} hello {}',$.fnl_context.input.obj.str,$.fnl_context.input.obj.items[0])",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`template literal strings complex 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "0_tmp = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__0_tmp = await task()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "1__0_tmp = await task()": Object {
      "InputPath": "$.heap0",
      "Next": "return task({key: \`input.obj.str ?? \\"default\\" hello hello input.obj.items[0",
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "1__return task({key: \`input.obj.str ?? \\"default\\" hello hello input.obj.item": Object {
      "End": true,
      "InputPath": "$.heap4",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key: \`input.obj.str ?? \\"default\\" hello hello input.obj.item 1": Object {
      "Next": "1__return task({key: \`input.obj.str ?? \\"default\\" hello hello input.obj.item",
      "Parameters": Object {
        "key.$": "$.heap3.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "0_tmp = await task()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "\`input.obj.str ?? \\"default\\" hello hello input.obj.items[0] ?? 0_tmp\`": Object {
      "Next": "1__return task({key: \`input.obj.str ?? \\"default\\" hello hello input.obj.item 1",
      "Parameters": Object {
        "string.$": "States.Format('{} hello hello {}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "input.obj.items[0] ?? 0_tmp": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.obj.items[0]",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.obj.items[0]",
            },
          ],
          "Next": "takeLeft__input.obj.items[0] ?? 0_tmp",
        },
      ],
      "Default": "takeRight__input.obj.items[0] ?? 0_tmp",
      "Type": "Choice",
    },
    "return task({key: \`input.obj.str ?? \\"default\\" hello hello input.obj.items[0": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.obj.str",
            },
            Object {
              "IsNull": false,
              "Variable": "$.fnl_context.input.obj.str",
            },
          ],
          "Next": "takeLeft__return task({key: \`input.obj.str ?? \\"default\\" hello hello input.o",
        },
      ],
      "Default": "takeRight__return task({key: \`input.obj.str ?? \\"default\\" hello hello input.",
      "Type": "Choice",
    },
    "takeLeft__input.obj.items[0] ?? 0_tmp": Object {
      "InputPath": "$.fnl_context.input.obj.items[0]",
      "Next": "\`input.obj.str ?? \\"default\\" hello hello input.obj.items[0] ?? 0_tmp\`",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "takeLeft__return task({key: \`input.obj.str ?? \\"default\\" hello hello input.o": Object {
      "InputPath": "$.fnl_context.input.obj.str",
      "Next": "input.obj.items[0] ?? 0_tmp",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "takeRight__input.obj.items[0] ?? 0_tmp": Object {
      "InputPath": "$.0_tmp",
      "Next": "\`input.obj.str ?? \\"default\\" hello hello input.obj.items[0] ?? 0_tmp\`",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "takeRight__return task({key: \`input.obj.str ?? \\"default\\" hello hello input.": Object {
      "Next": "input.obj.items[0] ?? 0_tmp",
      "Result": "default",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`throw Error 1`] = `
Object {
  "StartAt": "throw Error(\\"cause\\")",
  "States": Object {
    "throw Error(\\"cause\\")": Object {
      "Cause": "{\\"message\\":\\"cause\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw in for-of 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "ItemsPath": "$.fnl_context.input.items",
      "Iterator": Object {
        "StartAt": "throw new Error(\\"err\\")",
        "States": Object {
          "throw new Error(\\"err\\")": Object {
            "Cause": "{\\"message\\":\\"err\\"}",
            "Error": "Error",
            "Type": "Fail",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`throw new CustomError 1`] = `
Object {
  "StartAt": "throw new CustomError(\\"cause\\")",
  "States": Object {
    "throw new CustomError(\\"cause\\")": Object {
      "Cause": "{\\"property\\":\\"cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new Error 1`] = `
Object {
  "StartAt": "throw new Error(\\"cause\\")",
  "States": Object {
    "throw new Error(\\"cause\\")": Object {
      "Cause": "{\\"message\\":\\"cause\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { $SFN.forEach(list, (item) => task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { $SFN.map(list, (item) => task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { for-of } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__for(item of input.items)": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.0_tmp",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "you dun' goofed",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "catch__for(item of input.items)": Object {
      "Next": "1__catch__for(item of input.items)",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "for(item of input.items)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__for(item of input.items)",
          "ResultPath": "$.err",
        },
      ],
      "ItemsPath": "$.fnl_context.input.items",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "End": true,
            "InputPath": "$.item",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "finally",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { list.forEach(item => task(item)) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { list.forEach(item => task(item)) } 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function(item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function(item))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return input.list.forEach(function(item))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "try",
        "States": Object {
          "1__try": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "catch__try": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "try": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__try",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "1__try",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return input.list.forEach(function(item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { list.forEach(item => throw) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "throw new Error(\\"cause\\")",
        "States": Object {
          "throw new Error(\\"cause\\")": Object {
            "Cause": "{\\"message\\":\\"cause\\"}",
            "Error": "Error",
            "Type": "Fail",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
  },
}
`;

exports[`try { list.forEach(item => throw) } catch (err) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return 0",
        },
      ],
      "Default": "return 1",
      "Type": "Choice",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "return 0": Object {
      "End": true,
      "Result": 0,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return 1": Object {
      "End": true,
      "Result": 1,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.err",
        },
      ],
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "throw new Error(\\"cause\\")",
        "States": Object {
          "throw new Error(\\"cause\\")": Object {
            "Cause": "{\\"message\\":\\"cause\\"}",
            "Error": "Error",
            "Type": "Fail",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
  },
}
`;

exports[`try { list.map(item => task(item)) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { list.map(item => task(item)) } 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function(item)))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function(item)))",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function(item)))": Object {
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "try",
        "States": Object {
          "1__try": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "catch__try": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "try": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__try",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "1__try",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__return Promise.all(input.list.map(function(item)))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { list.map(item => throw) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "throw new Error(\\"cause\\")",
        "States": Object {
          "throw new Error(\\"cause\\")": Object {
            "Cause": "{\\"message\\":\\"cause\\"}",
            "Error": "Error",
            "Type": "Fail",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
  },
}
`;

exports[`try { list.map(item => throw) } catch (err) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return 0",
        },
      ],
      "Default": "return 1",
      "Type": "Choice",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "return 0": Object {
      "End": true,
      "Result": 0,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return 1": Object {
      "End": true,
      "Result": 1,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.err",
        },
      ],
      "ItemsPath": "$.fnl_context.input.list",
      "Iterator": Object {
        "StartAt": "throw new Error(\\"cause\\")",
        "States": Object {
          "throw new Error(\\"cause\\")": Object {
            "Cause": "{\\"message\\":\\"cause\\"}",
            "Error": "Error",
            "Type": "Fail",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
  },
}
`;

exports[`try { return $SFN.parallel(() => "hello", () => "world")) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "return \\"world\\"",
          "States": Object {
            "return \\"world\\"": Object {
              "End": true,
              "Result": "world",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`try { return $SFN.parallel(() => "hello", async () => { await task(); await task(); })) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "await task()",
          "States": Object {
            "await task()": Object {
              "InputPath": "$.fnl_context.null",
              "Next": "await task() 1",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap0",
              "Type": "Task",
            },
            "await task() 1": Object {
              "InputPath": "$.fnl_context.null",
              "Next": "return null",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap1",
              "Type": "Task",
            },
            "return null": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "1__try",
      "ResultPath": "$.heap2",
      "Type": "Parallel",
    },
  },
}
`;

exports[`try { task } catch { throw } finally { task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.0_tmp",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task()",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await task()": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task()",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task()": Object {
      "Next": "finally",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "recover",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.0_tmp",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": null,
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task(\\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch { task() } finally { task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.0_tmp",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": null,
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "finally",
          "ResultPath": "$.0_tmp",
        },
      ],
      "Next": "finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "3",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch(err) { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__await task(\\"1\\")": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.0_tmp",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": "$.err",
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "catch__await task(\\"1\\")": Object {
      "Next": "1__catch__await task(\\"1\\")",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { throw } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.0_tmp",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "throw new Error(\\"go\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__throw new Error(\\"go\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "finally": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"go\\")": Object {
      "Next": "catch__throw new Error(\\"go\\")",
      "Result": Object {
        "message": "go",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.0_tmp",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try, task, empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await computeScore({id: \\"id\\", name: \\"name\\"})",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await computeScore({id: \\"id\\", name: \\"name\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "return null",
          "ResultPath": null,
        },
      ],
      "Next": "return null",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw Error('error'), empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw Error(\\"cause\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error(\\"cause\\")": Object {
      "Next": "return null",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, catch, throw, finally, return 1`] = `
Object {
  "StartAt": "try",
  "States": Object {
    "catch__try": Object {
      "Next": "return \\"rock-star\\"",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "return \\"rock-star\\"": Object {
      "End": true,
      "Result": "rock-star",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "go",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new CustomError(\\"cause\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new CustomError(\\"cause\\")": Object {
      "Next": "return null",
      "Result": Object {
        "property": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, finally 1`] = `
Object {
  "StartAt": "try",
  "States": Object {
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "return \\"hello\\"",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch with guaranteed throw new Error 1`] = `
Object {
  "StartAt": "try",
  "States": Object {
    "catch__try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch with inner return and a catch variable 1`] = `
Object {
  "StartAt": "try",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.err",
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`try-catch with inner return and no catch variable 1`] = `
Object {
  "StartAt": "try",
  "States": Object {
    "catch__try": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`try-catch with optional return of task 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.err",
        },
      ],
      "Next": "return \\"hello world\\"",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional return of task 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "1__return await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.err",
        },
      ],
      "Next": "1__return await computeScore({id: input.id, name: \\"sam\\"})",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "return await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional task 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.err",
        },
      ],
      "Next": "return \\"hello world\\"",
      "Parameters": Object {
        "id.$": "$.fnl_context.input.id",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional throw of an Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnl_context.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnl_context.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.fnl_context.input.id",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"cause\\")",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch, err variable, contains for-of, throw Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__for(item of input.items)": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "Next": "1__catch__for(item of input.items)",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__for(item of input.items)",
          "ResultPath": "$.err",
        },
      ],
      "ItemsPath": "$.fnl_context.input.items",
      "Iterator": Object {
        "StartAt": "throw Error(\\"err\\")",
        "States": Object {
          "throw Error(\\"err\\")": Object {
            "Cause": "{\\"message\\":\\"err\\"}",
            "Error": "Error",
            "Type": "Fail",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch, err variable, contains for-of, throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__for(item of input.items)": Object {
      "InputPath": "$.err.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "Next": "1__catch__for(item of input.items)",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.err.Cause)",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__for(item of input.items)",
          "ResultPath": "$.err",
        },
      ],
      "ItemsPath": "$.fnl_context.input.items",
      "Iterator": Object {
        "StartAt": "throw new Error(\\"err\\")",
        "States": Object {
          "throw new Error(\\"err\\")": Object {
            "Cause": "{\\"message\\":\\"err\\"}",
            "Error": "Error",
            "Type": "Fail",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch, no variable, contains for-of, throw 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__for(item of input.items)",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.fnl_context.input.items",
      "Iterator": Object {
        "StartAt": "throw new Error(\\"err\\")",
        "States": Object {
          "throw new Error(\\"err\\")": Object {
            "Cause": "{\\"message\\":\\"err\\"}",
            "Error": "Error",
            "Type": "Fail",
          },
        },
      },
      "MaxConcurrency": 1,
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch-finally 1`] = `
Object {
  "StartAt": "try",
  "States": Object {
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "return \\"hello\\"",
          "ResultPath": null,
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`waitFor literal number of seconds 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitFor(1)": Object {
      "Next": "return null",
      "Seconds": 1,
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitFor(1)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor literal timestamp 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitUntil(\\"2022-08-01T00:00:00Z\\")": Object {
      "Next": "return null",
      "Timestamp": "2022-08-01T00:00:00Z",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitUntil(\\"2022-08-01T00:00:00Z\\")",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor reference number of seconds 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitFor(input.seconds)": Object {
      "Next": "return null",
      "SecondsPath": "$.fnl_context.input.seconds",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitFor(input.seconds)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitUntil reference timestamp 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitUntil(input.until)": Object {
      "Next": "return null",
      "TimestampPath": "$.fnl_context.input.until",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitUntil(input.until)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`while (cond) { cond = task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__cond = await task()": Object {
      "InputPath": "$.heap0",
      "Next": "while (cond == undefined)",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "while (cond == undefined)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__cond = await task()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (cond == undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.cond",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "cond = await task()",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`while (cond); cond = task() 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__cond = await task()": Object {
      "InputPath": "$.heap0",
      "Next": "while (cond == undefined)",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "while (cond == undefined)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__cond = await task()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (cond == undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.cond",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "cond = await task()",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`while(true) { try { } catch { wait } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "OutputPath": "$",
      "Parameters": Object {
        "input.$": "$",
        "null": null,
      },
      "ResultPath": "$.fnl_context",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "return null",
      "Seconds": 1,
      "Type": "Wait",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "while (true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "try",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;
