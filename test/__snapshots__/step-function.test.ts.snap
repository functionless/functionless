// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`$SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map([1, 2, 3], (item) => nitem) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.map([1, 2, 3], function (item))": Object {
      "ItemsPath": "$.heap2",
      "Iterator": Object {
        "StartAt": "return nitem",
        "States": Object {
          "1__return nitem": Object {
            "End": true,
            "InputPath": "$.heap1.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "nitem": Object {
            "Next": "1__return nitem",
            "Parameters": Object {
              "string.$": "States.Format('n{}',$.heap0)",
            },
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "return nitem": Object {
            "InputPath": "$.item",
            "Next": "nitem",
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.map([1, 2, 3], function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap3",
      "Type": "Map",
    },
    "1__return $SFN.map([1, 2, 3], function (item))": Object {
      "End": true,
      "InputPath": "$.heap3",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map([1, 2, 3], function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map([1, 2, 3], function (item))": Object {
      "Next": "$SFN.map([1, 2, 3], function (item))",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.map(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index) => item > index) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function (item,index))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > index": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function (item,index))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function (item,index))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function (item,index))": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function (item,index))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "check__[1, 2, 3, 4].filter(function (item,index))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,index)",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function (item,index))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function (item,index))": Object {
      "Next": "set__end__[1, 2, 3, 4].filter(function (item,index))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > index": Object {
      "Next": "1__return item > index",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "function (item,index)": Object {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "index",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function (item,index))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap2",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap2",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.heap2",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,index))",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function (item,index))",
      "Type": "Choice",
    },
    "index": Object {
      "InputPath": "$.heap1.arr[0].index",
      "Next": "return item > index",
      "ResultPath": "$.index",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,index))": Object {
      "Next": "check__[1, 2, 3, 4].filter(function (item,index))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item,index))": Object {
      "Next": "[1, 2, 3, 4].filter(function (item,index))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > index": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "IsPresent": true,
              "Variable": "$.index",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.index",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.item",
                        },
                        Object {
                          "StringGreaterThanPath": "$.index",
                          "Variable": "$.item",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.item",
                        },
                        Object {
                          "NumericGreaterThanPath": "$.index",
                          "Variable": "$.item",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > index",
        },
      ],
      "Default": "false__return item > index",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function (item,index))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function (item,index))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function (item,index))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function (item,index))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > index": Object {
      "Next": "1__return item > index",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index, array) => item > 1 + 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > arr[0]": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function (item,_,arr))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "_": Object {
      "InputPath": "$.heap1.arr[0].index",
      "Next": "arr",
      "ResultPath": "$._",
      "Type": "Pass",
    },
    "arr": Object {
      "InputPath": "$.heap0",
      "Next": "return item > arr[0]",
      "ResultPath": "$.arr",
      "Type": "Pass",
    },
    "check__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,_,arr)",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "Next": "set__end__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > arr[0]": Object {
      "Next": "1__return item > arr[0]",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "function (item,_,arr)": Object {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "_",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap2",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap2",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.heap2",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,arr))",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Type": "Choice",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "Next": "[1, 2, 3, 4].filter(function (item,_,arr))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > arr[0]": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "IsPresent": true,
              "Variable": "$.arr[0]",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.arr[0]",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.item",
                        },
                        Object {
                          "StringGreaterThanPath": "$.arr[0]",
                          "Variable": "$.item",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.item",
                        },
                        Object {
                          "NumericGreaterThanPath": "$.arr[0]",
                          "Variable": "$.item",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > arr[0]",
        },
      ],
      "Default": "false__return item > arr[0]",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function (item,_,arr))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,arr))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > arr[0]": Object {
      "Next": "1__return item > arr[0]",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index, array) => item > 1 + 2) 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > first": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "_": Object {
      "InputPath": "$.heap1.arr[0].index",
      "Next": "first",
      "ResultPath": "$._",
      "Type": "Pass",
    },
    "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,_,[ first ])",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "Next": "set__end__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > first": Object {
      "Next": "1__return item > first",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "first": Object {
      "InputPath": "$.heap0[0]",
      "Next": "return item > first",
      "ResultPath": "$.first",
      "Type": "Pass",
    },
    "function (item,_,[ first ])": Object {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "_",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap2",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap2",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.heap2",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Type": "Choice",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]": Object {
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "Next": "[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > first": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "IsPresent": true,
              "Variable": "$.first",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.first",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.item",
                        },
                        Object {
                          "StringGreaterThanPath": "$.first",
                          "Variable": "$.item",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.item",
                        },
                        Object {
                          "NumericGreaterThanPath": "$.first",
                          "Variable": "$.item",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > first",
        },
      ],
      "Default": "false__return item > first",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > first": Object {
      "Next": "1__return item > first",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > {}) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [{}].filter(function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item === {a: \\"a\\"}": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[{}].filter(function (item))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [{}].filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[{}].filter(function (item))": Object {
      "Next": "check__[{}].filter(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "check__[{}].filter(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[{}].filter(function (item))",
      "Type": "Choice",
    },
    "end__[{}].filter(function (item))": Object {
      "Next": "set__end__[{}].filter(function (item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item === {a: \\"a\\"}": Object {
      "Next": "1__return item === {a: \\"a\\"}",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "handleResult__[{}].filter(function (item))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap2",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap2",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.heap2",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[{}].filter(function (item))",
        },
      ],
      "Default": "tail__[{}].filter(function (item))",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap1.arr[0]",
      "Next": "return item === {a: \\"a\\"}",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[{}].filter(function (item))": Object {
      "Next": "check__[{}].filter(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [{}].filter(function (item))": Object {
      "Next": "[{}].filter(function (item))",
      "Result": Array [
        Object {},
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item === {a: \\"a\\"}": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                Object {
                  "IsNull": true,
                  "Variable": "$$.Execution.Id",
                },
              ],
            },
          ],
          "Next": "true__return item === {a: \\"a\\"}",
        },
      ],
      "Default": "false__return item === {a: \\"a\\"}",
      "Type": "Choice",
    },
    "set__end__[{}].filter(function (item))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [{}].filter(function (item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[{}].filter(function (item))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[{}].filter(function (item))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item === {a: \\"a\\"}": Object {
      "Next": "1__return item === {a: \\"a\\"}",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > {}) 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [{value: \\"a\\"}].filter(function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return value === a": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[{value: \\"a\\"}].filter(function (item))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [{value: \\"a\\"}].filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[{value: \\"a\\"}].filter(function (item))": Object {
      "Next": "check__[{value: \\"a\\"}].filter(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "a = \\"a\\"": Object {
      "Next": "{ value } = item",
      "Result": "a",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "check__[{value: \\"a\\"}].filter(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[{value: \\"a\\"}].filter(function (item))",
      "Type": "Choice",
    },
    "end__[{value: \\"a\\"}].filter(function (item))": Object {
      "Next": "set__end__[{value: \\"a\\"}].filter(function (item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return value === a": Object {
      "Next": "1__return value === a",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "handleResult__[{value: \\"a\\"}].filter(function (item))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap2",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap2",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.heap2",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[{value: \\"a\\"}].filter(function (item))",
        },
      ],
      "Default": "tail__[{value: \\"a\\"}].filter(function (item))",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap1.arr[0]",
      "Next": "a = \\"a\\"",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[{value: \\"a\\"}].filter(function (item))": Object {
      "Next": "check__[{value: \\"a\\"}].filter(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [{value: \\"a\\"}].filter(function (item))": Object {
      "Next": "[{value: \\"a\\"}].filter(function (item))",
      "Result": Array [
        Object {
          "value": "a",
        },
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value === a": Object {
      "Choices": Array [
        Object {
          "Next": "true__return value === a",
          "Or": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": false,
                  "Variable": "$.value",
                },
                Object {
                  "IsPresent": false,
                  "Variable": "$.a",
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.value",
                },
                Object {
                  "IsPresent": true,
                  "Variable": "$.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": true,
                          "Variable": "$.value",
                        },
                        Object {
                          "IsNull": true,
                          "Variable": "$.a",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": false,
                          "Variable": "$.value",
                        },
                        Object {
                          "IsNull": false,
                          "Variable": "$.a",
                        },
                        Object {
                          "Or": Array [
                            Object {
                              "And": Array [
                                Object {
                                  "IsString": true,
                                  "Variable": "$.value",
                                },
                                Object {
                                  "StringEqualsPath": "$.a",
                                  "Variable": "$.value",
                                },
                              ],
                            },
                            Object {
                              "And": Array [
                                Object {
                                  "IsBoolean": true,
                                  "Variable": "$.value",
                                },
                                Object {
                                  "BooleanEqualsPath": "$.a",
                                  "Variable": "$.value",
                                },
                              ],
                            },
                            Object {
                              "And": Array [
                                Object {
                                  "IsNumeric": true,
                                  "Variable": "$.value",
                                },
                                Object {
                                  "NumericEqualsPath": "$.a",
                                  "Variable": "$.value",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "false__return value === a",
      "Type": "Choice",
    },
    "set__end__[{value: \\"a\\"}].filter(function (item))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [{value: \\"a\\"}].filter(function (item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[{value: \\"a\\"}].filter(function (item))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[{value: \\"a\\"}].filter(function (item))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return value === a": Object {
      "Next": "1__return value === a",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "{ value } = item": Object {
      "InputPath": "$.item['value']",
      "Next": "return value === a",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > 1 + 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0[?(@>3)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item))": Object {
      "Next": "1__return [1, 2, 3, 4].filter(function (item))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0[?(@>2)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item))": Object {
      "Next": "1__return [1, 2, 3, 4].filter(function (item))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3].map(item => item) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3].map(function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function (item)) 1": Object {
      "Next": "check__1__return [1, 2, 3].map(function (item)) 1",
      "Parameters": Object {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3].map(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__1__return [1, 2, 3].map(function (item)) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__1__return [1, 2, 3].map(function (item)) 1",
      "Type": "Choice",
    },
    "end__1__return [1, 2, 3].map(function (item)) 1": Object {
      "Next": "set__end__1__return [1, 2, 3].map(function (item)) 1",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__1__return [1, 2, 3].map(function (item)) 1": Object {
      "Next": "check__1__return [1, 2, 3].map(function (item)) 1",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap1.arr[0]",
      "Next": "return item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return [1, 2, 3].map(function (item))": Object {
      "Next": "1__return [1, 2, 3].map(function (item)) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": Object {
      "InputPath": "$.item",
      "Next": "handleResult__1__return [1, 2, 3].map(function (item)) 1",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "set__end__1__return [1, 2, 3].map(function (item)) 1": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3].map(function (item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`\`template me \${await task(input.value)}\` 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return template me await task(input.value)": Object {
      "End": true,
      "InputPath": "$.heap2.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return template me await task(input.value)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(input.value)": Object {
      "InputPath": "$.heap0",
      "Next": "template me await task(input.value)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return template me await task(input.value)": Object {
      "InputPath": "$.input.value",
      "Next": "await task(input.value)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "template me await task(input.value)": Object {
      "Next": "1__return template me await task(input.value)",
      "Parameters": Object {
        "string.$": "States.Format('template me {}',$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`\`template me \${input.value}\` 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return template me input.value": Object {
      "End": true,
      "InputPath": "$.heap1.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return template me input.value",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return template me input.value": Object {
      "InputPath": "$.input.value",
      "Next": "template me input.value",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "template me input.value": Object {
      "Next": "1__return template me input.value",
      "Parameters": Object {
        "string.$": "States.Format('template me {}',$.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`Boolean 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber": Object {
      "End": true,
      "Parameters": Object {
        "empty": false,
        "falseBoolean": false,
        "falseNumber": false,
        "falseString": false,
        "trueBoolean": true,
        "trueNumber": true,
        "trueObject": true,
        "trueString": true,
        "var.$": "$.heap1",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber: B",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNu": Object {
      "Next": "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber 1",
      "Result": false,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber: B": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.value",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.value",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.value",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.value",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.value",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.input.value",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNum",
        },
      ],
      "Default": "false__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNu",
      "Type": "Choice",
    },
    "true__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNum": Object {
      "Next": "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber 1",
      "Result": true,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`add iamConditions AWS.SDK.CloudWatch.describeAlarms 1`] = `
Object {
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "FC4345940": Object {
      "DependsOn": Array [
        "FServiceRole3AC82EE1",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function() { return null; }",
        },
        "FunctionName": "testFunction",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "FServiceRole3AC82EE1",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "FServiceRole3AC82EE1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TableCD117FA1": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "ProvisionedThroughput": Object {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5,
        },
        "TableName": "testTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "fn5FF616E3": Object {
      "DependsOn": Array [
        "fnRoleDefaultPolicy4FB655BE",
        "fnRole50A611CF",
      ],
      "Properties": Object {
        "DefinitionString": "{\\"StartAt\\":\\"Initialize Functionless Context\\",\\"States\\":{\\"Initialize Functionless Context\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"fnl_context\\":{\\"null\\":null}},\\"ResultPath\\":\\"$\\",\\"Next\\":\\"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso\\"},\\"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso\\":{\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:::aws-sdk:cloudwatch:describeAlarms\\",\\"Next\\":\\"MetricAlarms\\",\\"Parameters\\":{},\\"ResultPath\\":\\"$.heap0\\"},\\"MetricAlarms\\":{\\"Type\\":\\"Pass\\",\\"Next\\":\\"return MetricAlarms\\",\\"ResultPath\\":\\"$.MetricAlarms\\",\\"InputPath\\":\\"$.heap0['MetricAlarms']\\"},\\"return MetricAlarms\\":{\\"Type\\":\\"Pass\\",\\"End\\":true,\\"ResultPath\\":\\"$\\",\\"InputPath\\":\\"$.MetricAlarms\\"}}}",
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "fnRole50A611CF",
            "Arn",
          ],
        },
        "StateMachineType": "EXPRESS",
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "fnRole50A611CF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "fnRoleDefaultPolicy4FB655BE": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "cloudwatch:DescribeAlarms",
              "Condition": Object {
                "StringEquals": Object {
                  "aws:ResourceTag/env": Array [
                    "test",
                  ],
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "fnRoleDefaultPolicy4FB655BE",
        "Roles": Array [
          Object {
            "Ref": "fnRole50A611CF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`await Promise.all(input.list.map((item) => task(item)))).filter 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return await Promise.all(input.list.map(function (item))).filter(functio": Object {
      "End": true,
      "InputPath": "$.heap0[?(@!=null)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return await Promise.all(input.list.map(function (item))).fil",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await Promise.all(input.list.map(function (item))).filter(function (",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return await Promise.all(input.list.map(function (item))).filter(fun": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return await Promise.all(input.list.map(function (item))).filter(funct",
      "Type": "Choice",
    },
    "end__return await Promise.all(input.list.map(function (item))).filter(funct": Object {
      "Next": "set__end__return await Promise.all(input.list.map(function (item))).filter(",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return await Promise.all(input.list.map(function (item))).fil": Object {
      "Next": "check__return await Promise.all(input.list.map(function (item))).filter(fun",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return await Promise.all(input.list.map(function (item))).filter(function (": Object {
      "Next": "check__return await Promise.all(input.list.map(function (item))).filter(fun",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return await Promise.all(input.list.map(function (item))).filter(": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return await Promise.all(input.list.map(function (item))).filter(functio",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch({ message })",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch({ message })": Object {
      "InputPath": "$.fnl_tmp_0['message']",
      "Next": "return message",
      "ResultPath": "$.message",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return message": Object {
      "End": true,
      "InputPath": "$.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`binding for 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return keyvalue": Object {
      "End": true,
      "InputPath": "$.heap2.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for({ key, value } = {key: \\"x\\", value: \\"y\\"};;)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for({ key, value } = {key: \\"x\\", value: \\"y\\"};;)": Object {
      "Next": "value",
      "Result": "x",
      "ResultPath": "$.key",
      "Type": "Pass",
    },
    "keyvalue": Object {
      "Next": "1__return keyvalue",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap0,$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return keyvalue": Object {
      "InputPath": "$.key",
      "Next": "value 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "value": Object {
      "Next": "return keyvalue",
      "Result": "y",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value 1": Object {
      "InputPath": "$.value",
      "Next": "keyvalue",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding forOf 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a": Object {
      "InputPath": "$.a",
      "Next": "keyvaluea",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "for({ key, value } of input.value)",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = keyvaluea": Object {
      "InputPath": "$.key",
      "Next": "value 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "a = keyvaluea 1": Object {
      "InputPath": "$.heap3.string",
      "Next": "tail__for({ key, value } of input.value)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for({ key, value } of input.value)": Object {
      "InputPath": "$.input.value",
      "Next": "hasNext__for({ key, value } of input.value)",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "hasNext__for({ key, value } of input.value)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "{ key, value }",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "keyvaluea": Object {
      "Next": "a = keyvaluea 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}',$.heap0,$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for({ key, value } of input.value)": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for({ key, value } of input.value)",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$.heap4[0]['value']",
      "Next": "a = keyvaluea",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value 1": Object {
      "InputPath": "$.value",
      "Next": "a",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "{ key, value }": Object {
      "InputPath": "$.heap4[0]['key']",
      "Next": "value",
      "ResultPath": "$.key",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding forOf weird values 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a": Object {
      "InputPath": "$.a",
      "Next": "vala",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "a 1": Object {
      "InputPath": "$.a",
      "Next": "vala 1",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "a 2": Object {
      "InputPath": "$.a",
      "Next": "vala 2",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "for(val of input.value ?? [1, 2, 3])",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = vala": Object {
      "InputPath": "$.val",
      "Next": "a",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "a = vala 1": Object {
      "InputPath": "$.heap3.string",
      "Next": "tail__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = vala 2": Object {
      "InputPath": "$.val__1",
      "Next": "a 1",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "a = vala 3": Object {
      "InputPath": "$.heap8.string",
      "Next": "tail__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = vala 4": Object {
      "InputPath": "$.val__2",
      "Next": "a 2",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "a = vala 5": Object {
      "InputPath": "$.heap12.string",
      "Next": "tail__for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "false__for(val of input.value ?? [1, 2, 3])": Object {
      "Next": "for(val of input.value ?? [1, 2, 3]) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "false__for(val of input.value || [1, 2, 3])": Object {
      "Next": "for(val of input.value || [1, 2, 3]) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "for(val of a = \\"b\\" , true && [1, 2, 3])": Object {
      "Next": "for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "Result": "b",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(val of a = \\"b\\" , true && [1, 2, 3]) 1": Object {
      "Next": "hasNext__for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "for(val of input.value ?? [1, 2, 3])": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.value",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.value",
            },
          ],
          "Next": "true__for(val of input.value ?? [1, 2, 3])",
        },
      ],
      "Default": "false__for(val of input.value ?? [1, 2, 3])",
      "Type": "Choice",
    },
    "for(val of input.value ?? [1, 2, 3]) 1": Object {
      "InputPath": "$.heap0",
      "Next": "hasNext__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "for(val of input.value || [1, 2, 3]) 1": Object {
      "InputPath": "$.heap5",
      "Next": "hasNext__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "hasNext__for(val of a = \\"b\\" , true && [1, 2, 3]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "val 2",
          "Variable": "$.heap13[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "hasNext__for(val of input.value ?? [1, 2, 3]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "val",
          "Variable": "$.heap4[0]",
        },
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.value",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.value",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.value",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.value",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.value",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.input.value",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__for(val of input.value || [1, 2, 3])",
        },
      ],
      "Default": "false__for(val of input.value || [1, 2, 3])",
      "Type": "Choice",
    },
    "hasNext__for(val of input.value || [1, 2, 3]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "val 1",
          "Variable": "$.heap9[0]",
        },
      ],
      "Default": "for(val of a = \\"b\\" , true && [1, 2, 3])",
      "Type": "Choice",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(val of a = \\"b\\" , true && [1, 2, 3]) 1": Object {
      "InputPath": "$.heap13[1:]",
      "Next": "hasNext__for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "tail__for(val of input.value ?? [1, 2, 3]) 1": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "tail__for(val of input.value || [1, 2, 3]) 1": Object {
      "InputPath": "$.heap9[1:]",
      "Next": "hasNext__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "true__for(val of input.value ?? [1, 2, 3])": Object {
      "InputPath": "$.input.value",
      "Next": "for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "true__for(val of input.value || [1, 2, 3])": Object {
      "InputPath": "$.input.value",
      "Next": "for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "val": Object {
      "InputPath": "$.heap4[0]",
      "Next": "a = vala",
      "ResultPath": "$.val",
      "Type": "Pass",
    },
    "val 1": Object {
      "InputPath": "$.heap9[0]",
      "Next": "a = vala 2",
      "ResultPath": "$.val__1",
      "Type": "Pass",
    },
    "val 2": Object {
      "InputPath": "$.heap13[0]",
      "Next": "a = vala 4",
      "ResultPath": "$.val__2",
      "Type": "Pass",
    },
    "vala": Object {
      "Next": "a = vala 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "vala 1": Object {
      "Next": "a = vala 3",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap6,$.heap7)",
      },
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "vala 2": Object {
      "Next": "a = vala 5",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap10,$.heap11)",
      },
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions $SFN.forEach 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.forEach(input.value, function ({ value: b, arr: [ c ] }))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.value, function ({ value: b, arr: [ c ] }))": Object {
      "ItemsPath": "$.input.value",
      "Iterator": Object {
        "StartAt": "function ({ value: b, arr: [ c ] })",
        "States": Object {
          "1__return bc": Object {
            "End": true,
            "InputPath": "$.heap2.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "bc": Object {
            "Next": "1__return bc",
            "Parameters": Object {
              "string.$": "States.Format('{}{}',$.heap0,$.heap1)",
            },
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
          "c": Object {
            "InputPath": "$$.Map.Item.Value['arr'][0]",
            "Next": "return bc",
            "ResultPath": "$.c",
            "Type": "Pass",
          },
          "c 1": Object {
            "InputPath": "$.c",
            "Next": "bc",
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "function ({ value: b, arr: [ c ] })": Object {
            "InputPath": "$$.Map.Item.Value['value']",
            "Next": "c",
            "ResultPath": "$.b",
            "Type": "Pass",
          },
          "return bc": Object {
            "InputPath": "$.b",
            "Next": "c 1",
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "return \\"success\\"",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
      },
      "ResultPath": "$.heap3",
      "Type": "Map",
    },
    "return \\"success\\"": Object {
      "End": true,
      "Result": "success",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions $SFN.map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).": Object {
      "End": true,
      "InputPath": "$.heap5.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })). 1": Object {
      "ItemsPath": "$.heap3",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "Choices": Array [
              Object {
                "IsString": true,
                "Next": "assign__Default 1",
                "Variable": "$.item",
              },
            ],
            "Default": "format__Default",
            "Type": "Choice",
          },
          "assign__Default": Object {
            "End": true,
            "InputPath": "$.heap6.str",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "assign__Default 1": Object {
            "InputPath": "$.item",
            "Next": "assign__Default",
            "ResultPath": "$.heap6.str",
            "Type": "Pass",
          },
          "format__Default": Object {
            "Next": "assign__Default",
            "Parameters": Object {
              "str.$": "States.JsonToString($.item)",
            },
            "ResultPath": "$.heap6",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__1__return await $SFN.map(input.value, function ({ value: b, arr: [",
      "Parameters": Object {
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).joi",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return await $SFN.map(input.value, function ({ value: b, arr: [ ": Object {
      "Next": "tail__1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ",
      "Parameters": Object {
        "string.$": "States.Format('{},{}', $.heap5.string, $.heap4[0])",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__1__return await $SFN.map(input.value, function ({ value: b, arr: [": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap5",
              },
            },
          ],
          "Next": "initValue__1__return await $SFN.map(input.value, function ({ value: b, arr:",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.heap4[0]",
            },
            Object {
              "IsPresent": false,
              "Variable": "$.heap5",
            },
          ],
          "Next": "returnEmpty__1__return await $SFN.map(input.value, function ({ value: b, ar",
        },
        Object {
          "IsPresent": true,
          "Next": "append__1__return await $SFN.map(input.value, function ({ value: b, arr: [ ",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).",
      "Type": "Choice",
    },
    "initValue__1__return await $SFN.map(input.value, function ({ value: b, arr:": Object {
      "InputPath": "$.heap4[0]",
      "Next": "tail__1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).joi": Object {
      "ItemsPath": "$.input.value",
      "Iterator": Object {
        "StartAt": "function ({ value: b, arr: [ c ] })",
        "States": Object {
          "1__return bc": Object {
            "End": true,
            "InputPath": "$.heap2.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "bc": Object {
            "Next": "1__return bc",
            "Parameters": Object {
              "string.$": "States.Format('{}{}',$.heap0,$.heap1)",
            },
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
          "c": Object {
            "InputPath": "$$.Map.Item.Value['arr'][0]",
            "Next": "return bc",
            "ResultPath": "$.c",
            "Type": "Pass",
          },
          "c 1": Object {
            "InputPath": "$.c",
            "Next": "bc",
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "function ({ value: b, arr: [ c ] })": Object {
            "InputPath": "$$.Map.Item.Value['value']",
            "Next": "c",
            "ResultPath": "$.b",
            "Type": "Pass",
          },
          "return bc": Object {
            "InputPath": "$.b",
            "Next": "c 1",
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })). 1",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
      },
      "ResultPath": "$.heap3",
      "Type": "Map",
    },
    "returnEmpty__1__return await $SFN.map(input.value, function ({ value: b, ar": Object {
      "Next": "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).",
      "Result": "",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "tail__1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__1__return await $SFN.map(input.value, function ({ value: b, arr: [",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions filter 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.value.filter(function ({ value: b, arr: [ c ] }))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.value.filter(function ({ value: b, arr: [ c ] }))": Object {
      "End": true,
      "InputPath": "$.input.value[?(@['value']==@['arr'][0])]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions forEach 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return bc": Object {
      "InputPath": "$.heap3.string",
      "Next": "tail__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "bc": Object {
      "Next": "1__return bc",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "c": Object {
      "InputPath": "$.heap0.arr[0]['arr'][0]",
      "Next": "return bc",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "c 1": Object {
      "InputPath": "$.c",
      "Next": "bc",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "check__input.value.forEach(function ({ value: b, arr: [ c ] }))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "{ value: b, arr: [ c ] }",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "Type": "Choice",
    },
    "end__input.value.forEach(function ({ value: b, arr: [ c ] }))": Object {
      "Next": "return \\"success\\"",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.value.forEach(function ({ value: b, arr: [ c ] }))": Object {
      "Next": "check__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "Parameters": Object {
        "arr.$": "$.input.value",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return \\"success\\"": Object {
      "End": true,
      "Result": "success",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return bc": Object {
      "InputPath": "$.b",
      "Next": "c 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__input.value.forEach(function ({ value: b, arr: [ c ] }))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "{ value: b, arr: [ c ] }": Object {
      "InputPath": "$.heap0.arr[0]['value']",
      "Next": "c",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return bc": Object {
      "InputPath": "$.heap3.string",
      "Next": "handleResult__return input.value.map(function ({ value: b, arr: [ c ] })).j",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return input.value.map(function ({ value: b, arr: [ c ] })).join()": Object {
      "End": true,
      "InputPath": "$.heap5.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return input.value.map(function ({ value: b, arr: [ c ] })).join() 1": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "Choices": Array [
              Object {
                "IsString": true,
                "Next": "assign__Default 1",
                "Variable": "$.item",
              },
            ],
            "Default": "format__Default",
            "Type": "Choice",
          },
          "assign__Default": Object {
            "End": true,
            "InputPath": "$.heap6.str",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "assign__Default 1": Object {
            "InputPath": "$.item",
            "Next": "assign__Default",
            "ResultPath": "$.heap6.str",
            "Type": "Pass",
          },
          "format__Default": Object {
            "Next": "assign__Default",
            "Parameters": Object {
              "str.$": "States.JsonToString($.item)",
            },
            "ResultPath": "$.heap6",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__1__return input.value.map(function ({ value: b, arr: [ c ] })).joi",
      "Parameters": Object {
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return input.value.map(function ({ value: b, arr: [ c ] })).join": Object {
      "Next": "tail__1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": Object {
        "string.$": "States.Format('{},{}', $.heap5.string, $.heap4[0])",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "bc": Object {
      "Next": "1__return bc",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "c": Object {
      "InputPath": "$.heap0.arr[0]['arr'][0]",
      "Next": "return bc",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "c 1": Object {
      "InputPath": "$.c",
      "Next": "bc",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "check__return input.value.map(function ({ value: b, arr: [ c ] })).join()": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "{ value: b, arr: [ c ] }",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Type": "Choice",
    },
    "end__return input.value.map(function ({ value: b, arr: [ c ] })).join()": Object {
      "Next": "set__end__return input.value.map(function ({ value: b, arr: [ c ] })).join(",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.value.map(function ({ value: b, arr: [ c ] })).j": Object {
      "Next": "check__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__1__return input.value.map(function ({ value: b, arr: [ c ] })).joi": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap5",
              },
            },
          ],
          "Next": "initValue__1__return input.value.map(function ({ value: b, arr: [ c ] })).j",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.heap4[0]",
            },
            Object {
              "IsPresent": false,
              "Variable": "$.heap5",
            },
          ],
          "Next": "returnEmpty__1__return input.value.map(function ({ value: b, arr: [ c ] }))",
        },
        Object {
          "IsPresent": true,
          "Next": "append__1__return input.value.map(function ({ value: b, arr: [ c ] })).join",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Type": "Choice",
    },
    "initValue__1__return input.value.map(function ({ value: b, arr: [ c ] })).j": Object {
      "InputPath": "$.heap4[0]",
      "Next": "tail__1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "return bc": Object {
      "InputPath": "$.b",
      "Next": "c 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return input.value.map(function ({ value: b, arr: [ c ] })).join()": Object {
      "Next": "check__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": Object {
        "arr.$": "$.input.value",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "returnEmpty__1__return input.value.map(function ({ value: b, arr: [ c ] }))": Object {
      "Next": "1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Result": "",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "set__end__return input.value.map(function ({ value: b, arr: [ c ] })).join(": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.value.map(function ({ value: b, arr: [ c ] })).join() 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__1__return input.value.map(function ({ value: b, arr: [ c ] })).join()": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__1__return input.value.map(function ({ value: b, arr: [ c ] })).joi",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "{ value: b, arr: [ c ] }": Object {
      "InputPath": "$.heap0.arr[0]['value']",
      "Next": "c",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions use in map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3].map(function ()).join()": Object {
      "End": true,
      "InputPath": "$.heap6.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function ()).join() 1": Object {
      "ItemsPath": "$.heap1",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "Choices": Array [
              Object {
                "IsString": true,
                "Next": "assign__Default 1",
                "Variable": "$.item",
              },
            ],
            "Default": "format__Default",
            "Type": "Choice",
          },
          "assign__Default": Object {
            "End": true,
            "InputPath": "$.heap7.str",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "assign__Default 1": Object {
            "InputPath": "$.item",
            "Next": "assign__Default",
            "ResultPath": "$.heap7.str",
            "Type": "Pass",
          },
          "format__Default": Object {
            "Next": "assign__Default",
            "Parameters": Object {
              "str.$": "States.JsonToString($.item)",
            },
            "ResultPath": "$.heap7",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__1__return [1, 2, 3].map(function ()).join() 1",
      "Parameters": Object {
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap5",
      "Type": "Map",
    },
    "1__return [1, 2, 3].map(function ()).join() 2": Object {
      "Next": "check__1__return [1, 2, 3].map(function ()).join() 2",
      "Parameters": Object {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "1__return valuev": Object {
      "InputPath": "$.heap4.string",
      "Next": "handleResult__1__return [1, 2, 3].map(function ()).join() 2",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "{ value, obj }",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return [1, 2, 3].map(function ()).join() 1": Object {
      "Next": "tail__1__return [1, 2, 3].map(function ()).join() 1",
      "Parameters": Object {
        "string.$": "States.Format('{},{}', $.heap6.string, $.heap5[0])",
      },
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "check__1__return [1, 2, 3].map(function ()).join() 2": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return valuev",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__1__return [1, 2, 3].map(function ()).join() 2",
      "Type": "Choice",
    },
    "end__1__return [1, 2, 3].map(function ()).join() 2": Object {
      "Next": "set__end__1__return [1, 2, 3].map(function ()).join() 2",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__1__return [1, 2, 3].map(function ()).join() 2": Object {
      "Next": "check__1__return [1, 2, 3].map(function ()).join() 2",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__1__return [1, 2, 3].map(function ()).join() 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap5[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap6",
              },
            },
          ],
          "Next": "initValue__1__return [1, 2, 3].map(function ()).join() 1",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.heap5[0]",
            },
            Object {
              "IsPresent": false,
              "Variable": "$.heap6",
            },
          ],
          "Next": "returnEmpty__1__return [1, 2, 3].map(function ()).join() 1",
        },
        Object {
          "IsPresent": true,
          "Next": "append__1__return [1, 2, 3].map(function ()).join() 1",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "1__return [1, 2, 3].map(function ()).join()",
      "Type": "Choice",
    },
    "initValue__1__return [1, 2, 3].map(function ()).join() 1": Object {
      "InputPath": "$.heap5[0]",
      "Next": "tail__1__return [1, 2, 3].map(function ()).join() 1",
      "ResultPath": "$.heap6.string",
      "Type": "Pass",
    },
    "obj": Object {
      "InputPath": "$$.Execution.Input['obj']",
      "Next": "{ value: v } = obj",
      "ResultPath": "$.obj",
      "Type": "Pass",
    },
    "return [1, 2, 3].map(function ()).join()": Object {
      "Next": "1__return [1, 2, 3].map(function ()).join() 2",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return valuev": Object {
      "InputPath": "$.value",
      "Next": "v",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "returnEmpty__1__return [1, 2, 3].map(function ()).join() 1": Object {
      "Next": "1__return [1, 2, 3].map(function ()).join()",
      "Result": "",
      "ResultPath": "$.heap6.string",
      "Type": "Pass",
    },
    "set__end__1__return [1, 2, 3].map(function ()).join() 2": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3].map(function ()).join() 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__1__return [1, 2, 3].map(function ()).join() 1": Object {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__1__return [1, 2, 3].map(function ()).join() 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "v": Object {
      "InputPath": "$.v",
      "Next": "valuev",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "valuev": Object {
      "Next": "1__return valuev",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap2,$.heap3)",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "{ value, obj }": Object {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "obj",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "{ value: v } = obj": Object {
      "InputPath": "$.obj['value']",
      "Next": "return [1, 2, 3].map(function ()).join()",
      "ResultPath": "$.v",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input['arr'][0]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop array rest 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input['arr'][1:]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop binding 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "value",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop nested 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input['value']['b']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop rename 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop with default 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "value = \\"b\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__value = \\"b\\"": Object {
      "Next": "value",
      "Result": "b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$.heap0",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value = \\"b\\"": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "value__value = \\"b\\"",
          "Variable": "$$.Execution.Input['value']",
        },
      ],
      "Default": "default__value = \\"b\\"",
      "Type": "Choice",
    },
    "value__value = \\"b\\"": Object {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "value",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop with self default 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ value, value2 = value }",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__value2 = value": Object {
      "InputPath": "$.value",
      "Next": "value2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value2": Object {
      "End": true,
      "InputPath": "$.value2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value2": Object {
      "InputPath": "$.heap0",
      "Next": "return value2",
      "ResultPath": "$.value2",
      "Type": "Pass",
    },
    "value2 = value": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "value__value2 = value",
          "Variable": "$$.Execution.Input['value2']",
        },
      ],
      "Default": "default__value2 = value",
      "Type": "Choice",
    },
    "value__value2 = value": Object {
      "InputPath": "$$.Execution.Input['value2']",
      "Next": "value2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "{ value, value2 = value }": Object {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "value2 = value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ arr: [ b ] } = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ arr: [ b ] } = input": Object {
      "InputPath": "$.input['arr'][0]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable binding 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ value } = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ value } = input": Object {
      "InputPath": "$.input['value']",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable nested 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ value: { b } } = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ value: { b } } = input": Object {
      "InputPath": "$.input['value']['b']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable rename 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ value: b } = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ value: b } = input": Object {
      "InputPath": "$.input['value']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable with default 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ value = \\"b\\" } = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__{ value = \\"b\\" } = input": Object {
      "Next": "value",
      "Result": "b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$.heap0",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value__{ value = \\"b\\" } = input": Object {
      "InputPath": "$.input['value']",
      "Next": "value",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "{ value = \\"b\\" } = input": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "value__{ value = \\"b\\" } = input",
          "Variable": "$.input['value']",
        },
      ],
      "Default": "default__{ value = \\"b\\" } = input",
      "Type": "Choice",
    },
  },
}
`;

exports[`boolean logic 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "!input.a && input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__!input.a && input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.heap12",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.heap12",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.heap12",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.heap12",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.heap12",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap12",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.heap12",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.heap12",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap12",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.heap12",
                      },
                    ],
                  },
                  Object {
                    "Not": Object {
                      "Or": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.heap12",
                        },
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.heap12",
                        },
                        Object {
                          "IsString": true,
                          "Variable": "$.heap12",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a && input.b",
      "Type": "Choice",
    },
    "!input.a || input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__!input.a || input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.heap15",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.heap15",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.heap15",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.heap15",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.heap15",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap15",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.heap15",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.heap15",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap15",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.heap15",
                      },
                    ],
                  },
                  Object {
                    "Not": Object {
                      "Or": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.heap15",
                        },
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.heap15",
                        },
                        Object {
                          "IsString": true,
                          "Variable": "$.heap15",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a || input.b",
      "Type": "Choice",
    },
    "!input.a || input.b && input.a": Object {
      "Choices": Array [
        Object {
          "Next": "true__!input.a || input.b && input.a",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.heap19",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.heap19",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.heap19",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.heap19",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.heap19",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap19",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.heap19",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.heap19",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap19",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.heap19",
                      },
                    ],
                  },
                  Object {
                    "Not": Object {
                      "Or": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.heap19",
                        },
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.heap19",
                        },
                        Object {
                          "IsString": true,
                          "Variable": "$.heap19",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a || input.b && input.a",
      "Type": "Choice",
    },
    "!true": Object {
      "Choices": Array [
        Object {
          "Next": "true__!true",
          "Not": Object {
            "IsNull": false,
            "Variable": "$$.Execution.Id",
          },
        },
      ],
      "Default": "false__!true",
      "Type": "Choice",
    },
    "11__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": Object {
      "InputPath": "$.heap10",
      "Next": "input.a && input.b",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "13__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": Object {
      "InputPath": "$.heap13",
      "Next": "input.a || input.b 1",
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "15__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": Object {
      "InputPath": "$.heap16",
      "Next": "input.a || input.b && input.a",
      "ResultPath": "$.heap17",
      "Type": "Pass",
    },
    "17__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": Object {
      "InputPath": "$.heap20",
      "Next": "18__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap21",
      "Type": "Pass",
    },
    "18__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": Object {
      "InputPath": "$.input.s",
      "Next": "input.a && input.s",
      "ResultPath": "$.heap22",
      "Type": "Pass",
    },
    "1__input.b && input.a": Object {
      "InputPath": "$.heap18",
      "Next": "!input.a || input.b && input.a",
      "ResultPath": "$.heap19",
      "Type": "Pass",
    },
    "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": Object {
      "End": true,
      "Parameters": Object {
        "and.$": "$.heap1",
        "andAllConstant": false,
        "andCondition.$": "$.heap5",
        "andFalsyConstantString": "",
        "andTruthyConstantString.$": "$.heap22",
        "andVariable.$": "$.heap24",
        "chain.$": "$.heap21",
        "not.$": "$.heap11",
        "notAnd.$": "$.heap14",
        "notOr.$": "$.heap17",
        "nullCondition.$": "$.heap9",
        "or.$": "$.heap3",
        "orAllConstant": true,
        "orCondition.$": "$.heap7",
        "orFalsyConstantString.$": "$.heap25",
        "orTruthyConstantString": "hi",
        "orVariable.$": "$.heap27",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i 1": Object {
      "InputPath": "$.heap0",
      "Next": "input.a || input.b",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "20__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": Object {
      "InputPath": "$.heap23",
      "Next": "21__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap24",
      "Type": "Pass",
    },
    "21__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": Object {
      "InputPath": "$.input.s",
      "Next": "input.b || input.s",
      "ResultPath": "$.heap25",
      "Type": "Pass",
    },
    "23__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": Object {
      "InputPath": "$.heap26",
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "ResultPath": "$.heap27",
      "Type": "Pass",
    },
    "3__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": Object {
      "InputPath": "$.heap2",
      "Next": "input.a === input.b && input.s === \\"hello\\"",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "5__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": Object {
      "InputPath": "$.heap4",
      "Next": "input.a === input.b || input.s === \\"hello\\"",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "7__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": Object {
      "InputPath": "$.heap6",
      "Next": "input.a === input.b ?? input.s === \\"hello\\"",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "9__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": Object {
      "InputPath": "$.heap8",
      "Next": "!true",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {and: input.a && input.b, or: input.a || input.b, andCondition: inpu",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__!input.a && input.b": Object {
      "Next": "13__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": false,
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "false__!input.a || input.b": Object {
      "Next": "15__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": false,
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "false__!input.a || input.b && input.a": Object {
      "Next": "17__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": false,
      "ResultPath": "$.heap20",
      "Type": "Pass",
    },
    "false__!true": Object {
      "Next": "11__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": false,
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "false__input.a && input.b": Object {
      "InputPath": "$.input.b",
      "Next": "!input.a && input.b",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "false__input.a && input.s": Object {
      "InputPath": "$.input.s",
      "Next": "20__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap23",
      "Type": "Pass",
    },
    "false__input.a === input.b && input.s === \\"hello\\"": Object {
      "Next": "5__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": false,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "false__input.a === input.b ?? input.s === \\"hello\\"": Object {
      "Next": "9__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": false,
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "false__input.a === input.b || input.s === \\"hello\\"": Object {
      "Next": "7__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": false,
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "false__input.a || input.b": Object {
      "InputPath": "$.input.b",
      "Next": "3__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "false__input.a || input.b 1": Object {
      "InputPath": "$.input.b",
      "Next": "!input.a || input.b",
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "false__input.b && input.a": Object {
      "InputPath": "$.input.a",
      "Next": "1__input.b && input.a",
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "false__input.b || input.s": Object {
      "InputPath": "$.input.s",
      "Next": "23__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap26",
      "Type": "Pass",
    },
    "false__return {and: input.a && input.b, or: input.a || input.b, andConditio": Object {
      "InputPath": "$.input.b",
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.a && input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__input.a && input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                  Object {
                    "Not": Object {
                      "Or": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.a && input.b",
      "Type": "Choice",
    },
    "input.a && input.s": Object {
      "Choices": Array [
        Object {
          "Next": "true__input.a && input.s",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                  Object {
                    "Not": Object {
                      "Or": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.a && input.s",
      "Type": "Choice",
    },
    "input.a === input.b && input.s === \\"hello\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsPresent": false,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "IsPresent": false,
                      "Variable": "$.input.b",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsPresent": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "IsPresent": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Or": Array [
                        Object {
                          "And": Array [
                            Object {
                              "IsNull": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "IsNull": true,
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                        Object {
                          "And": Array [
                            Object {
                              "IsNull": false,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "IsNull": false,
                              "Variable": "$.input.b",
                            },
                            Object {
                              "Or": Array [
                                Object {
                                  "And": Array [
                                    Object {
                                      "IsString": true,
                                      "Variable": "$.input.a",
                                    },
                                    Object {
                                      "StringEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                                Object {
                                  "And": Array [
                                    Object {
                                      "IsBoolean": true,
                                      "Variable": "$.input.a",
                                    },
                                    Object {
                                      "BooleanEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                                Object {
                                  "And": Array [
                                    Object {
                                      "IsNumeric": true,
                                      "Variable": "$.input.a",
                                    },
                                    Object {
                                      "NumericEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.s",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.input.s",
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.input.s",
                        },
                        Object {
                          "StringEquals": "hello",
                          "Variable": "$.input.s",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a === input.b && input.s === \\"hello\\"",
        },
      ],
      "Default": "false__input.a === input.b && input.s === \\"hello\\"",
      "Type": "Choice",
    },
    "input.a === input.b ?? input.s === \\"hello\\"": Object {
      "Choices": Array [
        Object {
          "Next": "true__input.a === input.b ?? input.s === \\"hello\\"",
          "Or": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": false,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsPresent": false,
                  "Variable": "$.input.b",
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.b",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsNull": true,
                          "Variable": "$.input.b",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": false,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsNull": false,
                          "Variable": "$.input.b",
                        },
                        Object {
                          "Or": Array [
                            Object {
                              "And": Array [
                                Object {
                                  "IsString": true,
                                  "Variable": "$.input.a",
                                },
                                Object {
                                  "StringEqualsPath": "$.input.b",
                                  "Variable": "$.input.a",
                                },
                              ],
                            },
                            Object {
                              "And": Array [
                                Object {
                                  "IsBoolean": true,
                                  "Variable": "$.input.a",
                                },
                                Object {
                                  "BooleanEqualsPath": "$.input.b",
                                  "Variable": "$.input.a",
                                },
                              ],
                            },
                            Object {
                              "And": Array [
                                Object {
                                  "IsNumeric": true,
                                  "Variable": "$.input.a",
                                },
                                Object {
                                  "NumericEqualsPath": "$.input.b",
                                  "Variable": "$.input.a",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "false__input.a === input.b ?? input.s === \\"hello\\"",
      "Type": "Choice",
    },
    "input.a === input.b || input.s === \\"hello\\"": Object {
      "Choices": Array [
        Object {
          "Next": "true__input.a === input.b || input.s === \\"hello\\"",
          "Or": Array [
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsPresent": false,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "IsPresent": false,
                      "Variable": "$.input.b",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsPresent": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "IsPresent": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Or": Array [
                        Object {
                          "And": Array [
                            Object {
                              "IsNull": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "IsNull": true,
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                        Object {
                          "And": Array [
                            Object {
                              "IsNull": false,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "IsNull": false,
                              "Variable": "$.input.b",
                            },
                            Object {
                              "Or": Array [
                                Object {
                                  "And": Array [
                                    Object {
                                      "IsString": true,
                                      "Variable": "$.input.a",
                                    },
                                    Object {
                                      "StringEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                                Object {
                                  "And": Array [
                                    Object {
                                      "IsBoolean": true,
                                      "Variable": "$.input.a",
                                    },
                                    Object {
                                      "BooleanEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                                Object {
                                  "And": Array [
                                    Object {
                                      "IsNumeric": true,
                                      "Variable": "$.input.a",
                                    },
                                    Object {
                                      "NumericEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.s",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.input.s",
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.input.s",
                        },
                        Object {
                          "StringEquals": "hello",
                          "Variable": "$.input.s",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "false__input.a === input.b || input.s === \\"hello\\"",
      "Type": "Choice",
    },
    "input.a || input.b": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b",
        },
      ],
      "Default": "false__input.a || input.b",
      "Type": "Choice",
    },
    "input.a || input.b && input.a": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b && input.a",
        },
        Object {
          "Next": "true__input.b && input.a",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.b",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.b",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.b",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.b",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.b",
                      },
                    ],
                  },
                  Object {
                    "Not": Object {
                      "Or": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.input.b",
                        },
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.input.b",
                        },
                        Object {
                          "IsString": true,
                          "Variable": "$.input.b",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.b && input.a",
      "Type": "Choice",
    },
    "input.a || input.b 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b 1",
        },
      ],
      "Default": "false__input.a || input.b 1",
      "Type": "Choice",
    },
    "input.b || input.s": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.b",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.b",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.input.b",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__input.b || input.s",
        },
      ],
      "Default": "false__input.b || input.s",
      "Type": "Choice",
    },
    "return {and: input.a && input.b, or: input.a || input.b, andCondition: inpu": Object {
      "Choices": Array [
        Object {
          "Next": "true__return {and: input.a && input.b, or: input.a || input.b, andCondition",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                  Object {
                    "Not": Object {
                      "Or": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__return {and: input.a && input.b, or: input.a || input.b, andConditio",
      "Type": "Choice",
    },
    "true__!input.a && input.b": Object {
      "Next": "13__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": true,
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "true__!input.a || input.b": Object {
      "Next": "15__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": true,
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "true__!input.a || input.b && input.a": Object {
      "Next": "17__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": true,
      "ResultPath": "$.heap20",
      "Type": "Pass",
    },
    "true__!true": Object {
      "Next": "11__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": true,
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "true__input.a && input.b": Object {
      "InputPath": "$.input.a",
      "Next": "!input.a && input.b",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "true__input.a && input.s": Object {
      "InputPath": "$.input.a",
      "Next": "20__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap23",
      "Type": "Pass",
    },
    "true__input.a === input.b && input.s === \\"hello\\"": Object {
      "Next": "5__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": true,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "true__input.a === input.b ?? input.s === \\"hello\\"": Object {
      "Next": "9__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": true,
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "true__input.a === input.b || input.s === \\"hello\\"": Object {
      "Next": "7__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": true,
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "true__input.a || input.b": Object {
      "InputPath": "$.input.a",
      "Next": "3__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "true__input.a || input.b && input.a": Object {
      "InputPath": "$.input.a",
      "Next": "!input.a || input.b && input.a",
      "ResultPath": "$.heap19",
      "Type": "Pass",
    },
    "true__input.a || input.b 1": Object {
      "InputPath": "$.input.a",
      "Next": "!input.a || input.b",
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "true__input.b && input.a": Object {
      "InputPath": "$.input.b",
      "Next": "1__input.b && input.a",
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "true__input.b || input.s": Object {
      "InputPath": "$.input.b",
      "Next": "23__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap26",
      "Type": "Pass",
    },
    "true__return {and: input.a && input.b, or: input.a || input.b, andCondition": Object {
      "InputPath": "$.input.a",
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`boolean return 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.a && input.b": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.a && input.b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return input.a && input.b": Object {
      "InputPath": "$.input.b",
      "Next": "1__return input.a && input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return input.a && input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__return input.a && input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                  Object {
                    "Not": Object {
                      "Or": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__return input.a && input.b",
      "Type": "Choice",
    },
    "true__return input.a && input.b": Object {
      "InputPath": "$.input.a",
      "Next": "1__return input.a && input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from do-while-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "break",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "break": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return null",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from for-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(item === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.item",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return null",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "if(item === \\"hello\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from while-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return null",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`call AWS.DynamoDB.GetItem, then Lambda and return LiteralExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ": Object {
      "Next": "person",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.heap0",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.heap5",
        "name.$": "$.heap6",
        "score.$": "$.heap7",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score} 1": Object {
      "InputPath": "$.person.Item.name.S",
      "Next": "2__return {id: person.Item.id.S, name: person.Item.name.S, score: score}",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "1__score = await computeScore({id: person.Item.id.S, name: person.Item.name": Object {
      "Next": "score",
      "Parameters": Object {
        "id.$": "$.heap2",
        "name.$": "$.heap3",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "1__score = await computeScore({id: person.Item.id.S, name: person.Item.name 1": Object {
      "InputPath": "$.person.Item.name.S",
      "Next": "1__score = await computeScore({id: person.Item.id.S, name: person.Item.name",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "2__return {id: person.Item.id.S, name: person.Item.name.S, score: score}": Object {
      "InputPath": "$.score",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score}",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": Object {
      "Choices": Array [
        Object {
          "Next": "return",
          "Or": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.person.Item",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.person.Item",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.person.Item",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "score = await computeScore({id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": Object {
      "InputPath": "$.heap1",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp": Object {
      "InputPath": "$.input.id",
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S, score: score}": Object {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score} 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "score": Object {
      "InputPath": "$.heap4",
      "Next": "return {id: person.Item.id.S, name: person.Item.name.S, score: score}",
      "ResultPath": "$.score",
      "Type": "Pass",
    },
    "score = await computeScore({id: person.Item.id.S, name: person.Item.name.S}": Object {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__score = await computeScore({id: person.Item.id.S, name: person.Item.name 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Lambda Function, store as variable, return variable 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await getPerson({id: input.id})": Object {
      "Next": "person",
      "Parameters": Object {
        "id.$": "$.heap0",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "person = await getPerson({id: input.id})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "person": Object {
      "InputPath": "$.heap1",
      "Next": "return person",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await getPerson({id: input.id})": Object {
      "InputPath": "$.input.id",
      "Next": "1__person = await getPerson({id: input.id})",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return person": Object {
      "End": true,
      "InputPath": "$.person",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Lambda Function, store as variable, return variable no block 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return getPerson({id: input.id})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return getPerson({id: input.id}) 1": Object {
      "Next": "1__return getPerson({id: input.id})",
      "Parameters": Object {
        "id.$": "$.heap0",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return getPerson({id: input.id})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return getPerson({id: input.id})": Object {
      "InputPath": "$.input.id",
      "Next": "1__return getPerson({id: input.id}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Step Function describe from another Step Function 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1.describeExecution(\\"hello\\")": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1.describeExecution(\\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1.describeExecution(\\"hello\\")": Object {
      "Next": "1__return machine1.describeExecution(\\"hello\\")",
      "Parameters": Object {
        "ExecutionArn": "hello",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:describeExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function describe from another Step Function from context 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1.describeExecution(input.id)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1.describeExecution(input.id)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1.describeExecution(input.id)": Object {
      "Next": "1__return machine1.describeExecution(input.id)",
      "Parameters": Object {
        "ExecutionArn.$": "$.input.id",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:describeExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({})": Object {
      "Next": "1__return machine1({})",
      "Parameters": Object {
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with dynamic input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: input.value1}})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return machine1({input: {value: input.value1}}) 1": Object {
      "Next": "1__return machine1({input: {value: input.value1}})",
      "Parameters": Object {
        "Input": Object {
          "value.$": "$.heap0",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: {value: input.value1}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: {value: input.value1}})": Object {
      "InputPath": "$.input.value1",
      "Next": "1__return machine1({input: {value: input.value1}}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Step Function from another Step Function with dynamic input field input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: input})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: input})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: input})": Object {
      "Next": "1__return machine1({input: input})",
      "Parameters": Object {
        "Input.$": "$.input",
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: \\"hello\\"}})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: {value: \\"hello\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: {value: \\"hello\\"}})": Object {
      "Next": "1__return machine1({input: {value: \\"hello\\"}})",
      "Parameters": Object {
        "Input": Object {
          "value": "hello",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with name and trace 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})": Object {
      "Next": "1__return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})",
      "Parameters": Object {
        "Name": "exec1",
        "StateMachineArn": "__REPLACED_TOKEN",
        "TraceHeader": "1",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with name and trace from variables 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({name: input.name, traceHeader: input.header})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({name: input.name, traceHeader: input.header})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({name: input.name, traceHeader: input.header})": Object {
      "Next": "1__return machine1({name: input.name, traceHeader: input.header})",
      "Parameters": Object {
        "Name.$": "$.input.name",
        "StateMachineArn": "__REPLACED_TOKEN",
        "TraceHeader.$": "$.input.header",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with null coalesce 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1": Object {
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Parameters": Object {
        "Input": Object {
          "value.$": "$.heap1",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 2": Object {
      "InputPath": "$.heap0",
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 2",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.value",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.value",
            },
          ],
          "Next": "true__return machine1({input: {value: input.value ?? \\"default\\"}})",
        },
      ],
      "Default": "false__return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Type": "Choice",
    },
    "true__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "InputPath": "$.input.value",
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`catch and throw Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})": Object {
      "Cause": "{\\"property\\":\\"custom cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`catch and throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})": Object {
      "Cause": "{\\"property\\":\\"custom cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`closure from map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return aitem": Object {
      "InputPath": "$.heap3.string",
      "Next": "handleResult__return input.list.map(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return input.list.map(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"x\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"x\\"": Object {
      "Next": "return input.list.map(function (item))",
      "Result": "x",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "aitem": Object {
      "Next": "1__return aitem",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "check__return input.list.map(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.map(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.map(function (item))": Object {
      "Next": "set__end__return input.list.map(function (item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.map(function (item))": Object {
      "Next": "check__return input.list.map(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return aitem",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "item 1": Object {
      "InputPath": "$.item",
      "Next": "aitem",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return aitem": Object {
      "InputPath": "$.a",
      "Next": "item 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return input.list.map(function (item))": Object {
      "Next": "check__return input.list.map(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__return input.list.map(function (item))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.map(function (item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`condition on task output 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if(await task() === 1)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "NumericEquals": 1,
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(await task() === 1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(await task() === 1)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await task() === 1)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally call DynamoDB and then void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: input.id}": Object {
      "Next": "return null",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.heap0",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: input.id}}})": Object {
      "InputPath": "$.input.id",
      "Next": "1__await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: input.id}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: input.id}}})",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally return void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally return void 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in do..while loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.key === \\"sam\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(input.key)": Object {
      "InputPath": "$.input.key",
      "Next": "if(input.key === \\"sam\\")",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(input.key === \\"sam\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.key",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.input.key",
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.input.key",
                        },
                        Object {
                          "StringEquals": "sam",
                          "Variable": "$.input.key",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "if(input.key === \\"sam\\")",
        },
        Object {
          "IsNull": false,
          "Next": "await task(input.key)",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in for loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(item === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.item",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "tail__for(item of input.items)",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "if(item === \\"hello\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in while loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(input.key)": Object {
      "InputPath": "$.input.key",
      "Next": "while (true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.key",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.input.key",
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.input.key",
                        },
                        Object {
                          "StringEquals": "sam",
                          "Variable": "$.input.key",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "while (true)",
        },
        Object {
          "IsNull": false,
          "Next": "await task(input.key)",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`else if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val === \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    Object {
                      "StringEquals": "a",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    Object {
                      "StringEquals": "b",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"yip\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    Object {
                      "StringEquals": "c",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"woop\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yip\\"": Object {
      "End": true,
      "Result": "yip",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`else if else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val === \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    Object {
                      "StringEquals": "a",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    Object {
                      "StringEquals": "b",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"woop\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`empty for 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(_ of [await task(input.items)])": Object {
      "InputPath": "$.heap0",
      "Next": "[await task(input.items)]",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(_ of [await task(input.items)])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input.items)]": Object {
      "Next": "for(_ of [await task(input.items)]) 1",
      "Parameters": Object {
        "out.$": "States.Array($.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "_": Object {
      "InputPath": "$.heap3[0]",
      "Next": "tail__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$._",
      "Type": "Pass",
    },
    "for(_ of [await task(input.items)])": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(_ of [await task(input.items)])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(_ of [await task(input.items)]) 1": Object {
      "InputPath": "$.heap2.out",
      "Next": "hasNext__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "hasNext__for(_ of [await task(input.items)]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "_",
          "Variable": "$.heap3[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(_ of [await task(input.items)]) 1": Object {
      "InputPath": "$.heap3[1:]",
      "Next": "hasNext__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`empty function 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return null",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for (const i in [task(input)]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await task(await task(i))": Object {
      "InputPath": "$.heap3",
      "Next": "tail__for(i in [await task(input)]) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "1__for(i in [await task(input)])": Object {
      "InputPath": "$.heap0",
      "Next": "[await task(input)]",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "1__for(i in [await task(input)]) 1": Object {
      "ItemsPath": "$.heap5",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in [await task(input)]) 1",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap5",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in [await task(input)])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input)]": Object {
      "Next": "for(i in [await task(input)]) 1",
      "Parameters": Object {
        "out.$": "States.Array($.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap5[0].item",
      "Next": "await task(await task(i))",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "await task(await task(i))": Object {
      "InputPath": "$.i",
      "Next": "1__await task(await task(i))",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "for(i in [await task(input)])": Object {
      "InputPath": "$.input",
      "Next": "1__for(i in [await task(input)])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(i in [await task(input)]) 1": Object {
      "InputPath": "$.heap2.out",
      "Next": "1__for(i in [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__for(i in [await task(input)]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap5[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in [await task(input)]) 1": Object {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__for(i in [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`for (const i of [task(input)]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await task(await task(i))": Object {
      "InputPath": "$.heap3",
      "Next": "tail__for(i of [await task(input)]) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "1__for(i of [await task(input)])": Object {
      "InputPath": "$.heap0",
      "Next": "[await task(input)]",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i of [await task(input)])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input)]": Object {
      "Next": "for(i of [await task(input)]) 1",
      "Parameters": Object {
        "out.$": "States.Array($.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "await task(await task(i))": Object {
      "InputPath": "$.i",
      "Next": "1__await task(await task(i))",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "for(i of [await task(input)])": Object {
      "InputPath": "$.input",
      "Next": "1__for(i of [await task(input)])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(i of [await task(input)]) 1": Object {
      "InputPath": "$.heap2.out",
      "Next": "hasNext__for(i of [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__for(i of [await task(input)]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap5[0]",
      "Next": "await task(await task(i))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i of [await task(input)]) 1": Object {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__for(i of [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`for assign 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap2",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "for(i in input.items)",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = i": Object {
      "InputPath": "$.i",
      "Next": "i 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "a = i 1": Object {
      "InputPath": "$.heap1.string",
      "Next": "tail__for(i in input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = i 2": Object {
      "InputPath": "$.i__1",
      "Next": "i 3",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "a = i 3": Object {
      "InputPath": "$.heap4.string",
      "Next": "tail__for(i of input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap2[0].item",
      "Next": "a = i",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 2",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap2[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": Object {
      "Next": "a = i 1",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "i 2": Object {
      "InputPath": "$.heap5[0]",
      "Next": "a = i 2",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "i 3": Object {
      "Next": "a = i 3",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.heap3)",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": Object {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`for break 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === \\"1\\")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return \\"end\\"",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": Object {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === \\"1\\")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i__1",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.i__1",
                    },
                    Object {
                      "StringEquals": "1",
                      "Variable": "$.i__1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"end\\"",
        },
      ],
      "Default": "return i",
      "Type": "Choice",
    },
    "if(input.items[i] === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.0__i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.0__i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.0__i",
                    },
                    Object {
                      "StringEquals": "1",
                      "Variable": "$.0__i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "for(i of input.items)",
        },
      ],
      "Default": "return input.items[i]",
      "Type": "Choice",
    },
    "return \\"end\\"": Object {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": Object {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": Object {
      "End": true,
      "InputPath": "$.0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for const i in items, items[i] 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = items[i]": Object {
      "InputPath": "$.0__i",
      "Next": "tail__for(i in input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "a = items[i]",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for continue 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === \\"1\\")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return \\"end\\"",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": Object {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === \\"1\\")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i__1",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.i__1",
                    },
                    Object {
                      "StringEquals": "1",
                      "Variable": "$.i__1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "tail__for(i of input.items)",
        },
      ],
      "Default": "return i",
      "Type": "Choice",
    },
    "if(input.items[i] === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.0__i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.0__i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.0__i",
                    },
                    Object {
                      "StringEquals": "1",
                      "Variable": "$.0__i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "tail__for(i in input.items)",
        },
      ],
      "Default": "return input.items[i]",
      "Type": "Choice",
    },
    "return \\"end\\"": Object {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": Object {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": Object {
      "End": true,
      "InputPath": "$.0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for i in items, items[i] 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = items[i]": Object {
      "InputPath": "$.0__i",
      "Next": "tail__for(i in input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "a = items[i]",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for return 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === \\"1\\")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return \\"end\\"",
      "Type": "Choice",
    },
    "i": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": Object {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === \\"1\\")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i__1",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.i__1",
                    },
                    Object {
                      "StringEquals": "1",
                      "Variable": "$.i__1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return i",
        },
      ],
      "Default": "tail__for(i of input.items)",
      "Type": "Choice",
    },
    "if(input.items[i] === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.0__i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.0__i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.0__i",
                    },
                    Object {
                      "StringEquals": "1",
                      "Variable": "$.0__i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return input.items[i]",
        },
      ],
      "Default": "tail__for(i in input.items)",
      "Type": "Choice",
    },
    "return \\"end\\"": Object {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": Object {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": Object {
      "End": true,
      "InputPath": "$.0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) empty 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(;;)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "body__for(;;)": Object {
      "Next": "increment__for(;;)",
      "Type": "Pass",
    },
    "for(;;)": Object {
      "Next": "body__for(;;)",
      "Type": "Pass",
    },
    "increment__for(;;)": Object {
      "Next": "for(;;)",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i = 0;i < 3;i = if(i === 0))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericLessThan": 3,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "await task(i)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "1__if(i === 1)": Object {
      "InputPath": "$.heap1",
      "Next": "i = if(i === 0) 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i = 0;i < 3;i = if(i === 0))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(i)": Object {
      "InputPath": "$.i",
      "Next": "i = if(i === 0)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "false__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 3,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(i = 0;i < 3;i = if(i === 0))": Object {
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "Result": 0,
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__i = if(i === 0)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericEquals": 1,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__if(i === 1)",
        },
      ],
      "Default": "false__if(i === 1)",
      "Type": "Choice",
    },
    "i = if(i === 0) 1": Object {
      "InputPath": "$.heap2",
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__i = if(i === 0)": Object {
      "Next": "i = if(i === 0) 1",
      "Result": 1,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "true__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 2,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop complex 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await task({i: i, j: j})": Object {
      "Next": "i = i.slice(1) , j = j.slice(1)",
      "Parameters": Object {
        "i.$": "$.heap0",
        "j.$": "$.heap1",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "1__await task({i: i, j: j}) 1": Object {
      "InputPath": "$.j",
      "Next": "1__await task({i: i, j: j})",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i[0]",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.i[0]",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.i[0]",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.i[0]",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.i[0]",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i[0]",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.i[0]",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.i[0]",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.i[0]",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.i[0]",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.i[0]",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.i[0]",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.i[0]",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "await task({i: i, j: j})",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task({i: i, j: j})": Object {
      "InputPath": "$.i",
      "Next": "1__await task({i: i, j: j}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))": Object {
      "Next": "j",
      "Result": Array [
        1,
        2,
      ],
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = i.slice(1) , j = j.slice(1)": Object {
      "InputPath": "$.i[1:]",
      "Next": "j = j.slice(1)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "j": Object {
      "Next": "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "Result": Array [
        3,
        4,
      ],
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "j = j.slice(1)": Object {
      "InputPath": "$.j[1:]",
      "Next": "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop empty body 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i = 0;i < 3;i = if(i === 0))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.i",
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.i",
                        },
                        Object {
                          "NumericLessThan": 3,
                          "Variable": "$.i",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.i",
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.i",
                        },
                        Object {
                          "NumericEquals": 0,
                          "Variable": "$.i",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__i = if(i === 0)",
        },
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.i",
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.i",
                        },
                        Object {
                          "NumericLessThan": 3,
                          "Variable": "$.i",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.i",
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.i",
                        },
                        Object {
                          "NumericEquals": 1,
                          "Variable": "$.i",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__if(i === 1)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericLessThan": 3,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "false__if(i === 1)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "1__if(i === 1)": Object {
      "InputPath": "$.heap0",
      "Next": "i = if(i === 0) 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i = 0;i < 3;i = if(i === 0))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 3,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i = 0;i < 3;i = if(i === 0))": Object {
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "Result": 0,
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = if(i === 0) 1": Object {
      "InputPath": "$.heap1",
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__i = if(i === 0)": Object {
      "Next": "i = if(i === 0) 1",
      "Result": 1,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "true__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 2,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) no statement 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "return null",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-in-loop variable initializer 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(x of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(x of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(x of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(x of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "x",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return x": Object {
      "End": true,
      "InputPath": "$.x",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "x": Object {
      "InputPath": "$.heap0[0]",
      "Next": "return x",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop and do nothing 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = item": Object {
      "InputPath": "$.item",
      "Next": "tail__for(item of input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "a = item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop inline array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of [1, 2, 3])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = item": Object {
      "InputPath": "$.item",
      "Next": "tail__for(item of [1, 2, 3])",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(item of [1, 2, 3])": Object {
      "Next": "hasNext__for(item of [1, 2, 3])",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of [1, 2, 3])": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "a = item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of [1, 2, 3])": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of [1, 2, 3])",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop over a list literal 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await computeScore({id: input.id, name: name})": Object {
      "Next": "tail__for(name of people)",
      "Parameters": Object {
        "id.$": "$.heap0",
        "name.$": "$.heap1",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "1__await computeScore({id: input.id, name: name}) 1": Object {
      "InputPath": "$.name",
      "Next": "1__await computeScore({id: input.id, name: name})",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "people = [\\"sam\\", \\"sam\\"]",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: name})": Object {
      "InputPath": "$.input.id",
      "Next": "1__await computeScore({id: input.id, name: name}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(name of people)": Object {
      "InputPath": "$.people",
      "Next": "hasNext__for(name of people)",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "hasNext__for(name of people)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "name",
          "Variable": "$.heap3[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "name": Object {
      "InputPath": "$.heap3[0]",
      "Next": "await computeScore({id: input.id, name: name})",
      "ResultPath": "$.name",
      "Type": "Pass",
    },
    "people = [\\"sam\\", \\"sam\\"]": Object {
      "Next": "for(name of people)",
      "Result": Array [
        "sam",
        "sam",
      ],
      "ResultPath": "$.people",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(name of people)": Object {
      "InputPath": "$.heap3[1:]",
      "Next": "hasNext__for(name of people)",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-of { try { task() } catch (err) { if(err) throw } finally { task() } } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"you dun' goofed\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(err.message === \\"you dun' goofed\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    Object {
                      "StringEquals": "you dun' goofed",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap2[0]",
      "Next": "try",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "InputPath": "$.item",
      "Next": "finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`for-of-loop variable initializer 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(x in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(x in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(x in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__x": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "return x",
      "ResultPath": "$.0__x",
      "Type": "Pass",
    },
    "for(x in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(x in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(x in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "x",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return x": Object {
      "End": true,
      "InputPath": "$.x",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "x": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__x",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
  },
}
`;

exports[`iam policy for AWS.SDK.CloudWatch.describeAlarms 1`] = `
Object {
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "FC4345940": Object {
      "DependsOn": Array [
        "FServiceRole3AC82EE1",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function() { return null; }",
        },
        "FunctionName": "testFunction",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "FServiceRole3AC82EE1",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "FServiceRole3AC82EE1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TableCD117FA1": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "ProvisionedThroughput": Object {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5,
        },
        "TableName": "testTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "fn5FF616E3": Object {
      "DependsOn": Array [
        "fnRoleDefaultPolicy4FB655BE",
        "fnRole50A611CF",
      ],
      "Properties": Object {
        "DefinitionString": "{\\"StartAt\\":\\"Initialize Functionless Context\\",\\"States\\":{\\"Initialize Functionless Context\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"fnl_context\\":{\\"null\\":null}},\\"ResultPath\\":\\"$\\",\\"Next\\":\\"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso\\"},\\"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso\\":{\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:::aws-sdk:cloudwatch:describeAlarms\\",\\"Next\\":\\"MetricAlarms\\",\\"Parameters\\":{},\\"ResultPath\\":\\"$.heap0\\"},\\"MetricAlarms\\":{\\"Type\\":\\"Pass\\",\\"Next\\":\\"return MetricAlarms\\",\\"ResultPath\\":\\"$.MetricAlarms\\",\\"InputPath\\":\\"$.heap0['MetricAlarms']\\"},\\"return MetricAlarms\\":{\\"Type\\":\\"Pass\\",\\"End\\":true,\\"ResultPath\\":\\"$\\",\\"InputPath\\":\\"$.MetricAlarms\\"}}}",
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "fnRole50A611CF",
            "Arn",
          ],
        },
        "StateMachineType": "EXPRESS",
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "fnRole50A611CF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "fnRoleDefaultPolicy4FB655BE": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "cloudwatch:DescribeAlarms",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "fnRoleDefaultPolicy4FB655BE",
        "Roles": Array [
          Object {
            "Ref": "fnRole50A611CF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`if (?? === typeof x) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if_1__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "StringEquals": "undefined",
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"undefined\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_2__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_2__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_2__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_2__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap1",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap1",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap1",
                    },
                    Object {
                      "StringEquals": "string",
                      "Variable": "$.heap1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"string\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_3__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_3__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_3__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_3__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "StringEquals": "boolean",
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"boolean\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_4__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_4__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_4__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_4__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap3",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap3",
                    },
                    Object {
                      "StringEquals": "number",
                      "Variable": "$.heap3",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"number\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_5__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_5__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_5__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_5__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap4",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap4",
                    },
                    Object {
                      "StringEquals": "bigint",
                      "Variable": "$.heap4",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"bigint\\"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "boolean__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "Next": "return \\"null\\"",
          "Or": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_1__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_1__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_1__if(input.id === undefined)",
      "Type": "Choice",
    },
    "number__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "number__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "object__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "object__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return \\"bigint\\"": Object {
      "End": true,
      "Result": "bigint",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"boolean\\"": Object {
      "End": true,
      "Result": "boolean",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"null\\"": Object {
      "End": true,
      "Result": "null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"number\\"": Object {
      "End": true,
      "Result": "number",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"string\\"": Object {
      "End": true,
      "Result": "string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"undefined\\"": Object {
      "End": true,
      "Result": "undefined",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "string__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "string__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "undefined__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "undefined__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`if (typeof x === ??) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if_1__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "StringEquals": "undefined",
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"undefined\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_2__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_2__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_2__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_2__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap1",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap1",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap1",
                    },
                    Object {
                      "StringEquals": "string",
                      "Variable": "$.heap1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"string\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_3__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_3__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_3__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_3__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "StringEquals": "boolean",
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"boolean\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_4__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_4__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_4__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_4__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap3",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap3",
                    },
                    Object {
                      "StringEquals": "number",
                      "Variable": "$.heap3",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"number\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_5__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_5__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_5__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_5__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.heap4",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap4",
                    },
                    Object {
                      "StringEquals": "bigint",
                      "Variable": "$.heap4",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"bigint\\"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "boolean__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "Next": "return \\"null\\"",
          "Or": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_1__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_1__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_1__if(input.id === undefined)",
      "Type": "Choice",
    },
    "number__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "number__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "object__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "object__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return \\"bigint\\"": Object {
      "End": true,
      "Result": "bigint",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"boolean\\"": Object {
      "End": true,
      "Result": "boolean",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"null\\"": Object {
      "End": true,
      "Result": "null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"number\\"": Object {
      "End": true,
      "Result": "number",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"string\\"": Object {
      "End": true,
      "Result": "string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"undefined\\"": Object {
      "End": true,
      "Result": "undefined",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "string__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "string__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "undefined__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "undefined__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return \\"yup\\"",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val === \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    Object {
                      "StringEquals": "a",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val !== \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val !== \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.val",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNull": false,
                        "Variable": "$.input.val",
                      },
                      Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.val",
                          },
                          Object {
                            "StringEquals": "a",
                            "Variable": "$.input.val",
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.input.val",
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.input.val",
                        },
                        Object {
                          "StringEquals": "b",
                          "Variable": "$.input.val",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hullo\\"",
        },
        Object {
          "Next": "return \\"woop\\"",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.input.val",
              },
              Object {
                "And": Array [
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.val",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.val",
                      },
                      Object {
                        "StringEquals": "a",
                        "Variable": "$.input.val",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "return \\"woop\\"",
      "Type": "Choice",
    },
    "return \\"hullo\\"": Object {
      "End": true,
      "Result": "hullo",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if invoke 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if(await task())": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap0",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap0",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap0",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.heap0",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "return \\"hi\\"",
        },
      ],
      "Default": "return \\"woop\\"",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(await task())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(await task())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return \\"hi\\"": Object {
      "End": true,
      "Result": "hi",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if-else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if-else-if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "world",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"world\\"",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`import from express state machine into machine 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await machine({input: {id: \\"hi\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await machine({input: {id: \\"hi\\"}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "Input": Object {
          "id": "hi",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`import from state machine into state machine 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await machine({input: {id: \\"hi\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await machine({input: {id: \\"hi\\"}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "Input": Object {
          "id": "hi",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`input.b ? task() : task(input) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__false__return if(input.b)": Object {
      "InputPath": "$.heap1",
      "Next": "1__return if(input.b)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return if(input.b)": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__true__return if(input.b)": Object {
      "InputPath": "$.heap0",
      "Next": "1__return if(input.b)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return if(input.b)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return if(input.b)": Object {
      "InputPath": "$.input",
      "Next": "1__false__return if(input.b)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return if(input.b)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.b",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.b",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.input.b",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__return if(input.b)",
        },
      ],
      "Default": "false__return if(input.b)",
      "Type": "Choice",
    },
    "true__return if(input.b)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__true__return if(input.b)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`input.list.map((item) => item).filter((item) => item.length > 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.map(function (item)).filter(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0[?(@.length>2)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.map(function (item)).filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.map(function (item)).filter(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.map(function (item)).filter(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.map(function (item)).filter(function (item))": Object {
      "Next": "set__end__return input.list.map(function (item)).filter(function (item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.map(function (item)).filter(function (item)": Object {
      "Next": "check__return input.list.map(function (item)).filter(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.map(function (item)).filter(function (item))": Object {
      "Next": "check__return input.list.map(function (item)).filter(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": Object {
      "InputPath": "$.item",
      "Next": "handleResult__return input.list.map(function (item)).filter(function (item)",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "set__end__return input.list.map(function (item)).filter(function (item))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.map(function (item)).filter(function (item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`let and set 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = null",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + \\" world\\"",
      "Result": "hello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + \\" world\\"": Object {
      "Next": "a = \\"hello\\" + 1",
      "Result": "hello world",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + 1": Object {
      "Next": "a = 1 + \\"hello\\"",
      "Result": "hello1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + [\\"world\\"]": Object {
      "Next": "return a",
      "Result": "helloworld",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + null": Object {
      "Next": "a = [null]",
      "Result": "hellonull",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + true": Object {
      "Next": "a = false + \\"hello\\"",
      "Result": "hellotrue",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + {place: \\"world\\"}": Object {
      "Next": "a = \\"hello\\" + [\\"world\\"]",
      "Result": "hello[object Object]",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = -1": Object {
      "Next": "a = -100",
      "Result": -1,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = -100": Object {
      "Next": "a = 1 + 2",
      "Result": -100,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 0": Object {
      "Next": "a = -1",
      "Result": 0,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1 + \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + true",
      "Result": "1hello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1 + 2": Object {
      "Next": "a = \\"hello\\"",
      "Result": 3,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [-1]": Object {
      "Next": "a = [true]",
      "Result": Array [
        -1,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [1]": Object {
      "Next": "a = [-1]",
      "Result": Array [
        1,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [null]": Object {
      "Next": "a = [1]",
      "Result": Array [
        null,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [true]": Object {
      "Next": "a = [{key: \\"value\\"}]",
      "Result": Array [
        true,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [{key: \\"value\\"}]": Object {
      "Next": "a = {key: \\"value\\"}",
      "Result": Array [
        Object {
          "key": "value",
        },
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = a": Object {
      "InputPath": "$.a",
      "Next": "a = \\"hello\\" + {place: \\"world\\"}",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = false": Object {
      "Next": "a = 0",
      "Result": false,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = false + \\"hello\\"": Object {
      "Next": "a = null + \\"hello\\"",
      "Result": "falsehello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "a = true",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null + \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + null",
      "Result": "nullhello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = true": Object {
      "Next": "a = false",
      "Result": true,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {1: \\"value\\"}": Object {
      "Next": "a = a",
      "Result": Object {
        "1": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {key: \\"value\\"}": Object {
      "Next": "a = {1: \\"value\\"}",
      "Result": Object {
        "key": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`let cond; do { cond = task() } while (cond) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "cond = await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "Choices": Array [
        Object {
          "Next": "cond = await task() 1",
          "Or": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": false,
                  "Variable": "$.cond",
                },
                Object {
                  "IsPresent": false,
                  "Variable": "$.fnl_context.null",
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.cond",
                },
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.null",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": true,
                          "Variable": "$.cond",
                        },
                        Object {
                          "IsNull": true,
                          "Variable": "$.fnl_context.null",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": false,
                          "Variable": "$.cond",
                        },
                        Object {
                          "IsNull": false,
                          "Variable": "$.fnl_context.null",
                        },
                        Object {
                          "Or": Array [
                            Object {
                              "And": Array [
                                Object {
                                  "IsString": true,
                                  "Variable": "$.cond",
                                },
                                Object {
                                  "StringEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            Object {
                              "And": Array [
                                Object {
                                  "IsBoolean": true,
                                  "Variable": "$.cond",
                                },
                                Object {
                                  "BooleanEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            Object {
                              "And": Array [
                                Object {
                                  "IsNumeric": true,
                                  "Variable": "$.cond",
                                },
                                Object {
                                  "NumericEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "cond = await task() 1": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 2": Object {
      "InputPath": "$.heap0",
      "Next": "cond = await task()",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`let empty 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"b\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"b\\"": Object {
      "Next": "return a",
      "Result": "b",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.filter(item => item.length > 2).map(item => item) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.filter(function (item)).map(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.filter(function (item)).map(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.filter(function (item)).map(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.filter(function (item)).map(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.filter(function (item)).map(function (item))": Object {
      "Next": "set__end__return input.list.filter(function (item)).map(function (item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.filter(function (item)).map(function (item)": Object {
      "Next": "check__return input.list.filter(function (item)).map(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.filter(function (item)).map(function (item))": Object {
      "Next": "check__return input.list.filter(function (item)).map(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list[?(@.length>2)]",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": Object {
      "InputPath": "$.item",
      "Next": "handleResult__return input.list.filter(function (item)).map(function (item)",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "set__end__return input.list.filter(function (item)).map(function (item))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.filter(function (item)).map(function (item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.filter(item => item.length > 2).map(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.filter(function (item)).map(function (item": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.filter(function (item)).map(fun",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.filter(function (item)).map(function (item)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.filter(function (item)).map(function (": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.filter(function (item)).map(function (it",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.filter(function (item)).map(function (it": Object {
      "Next": "set__end__return Promise.all(input.list.filter(function (item)).map(functio",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.filter(function (item)).map(fun": Object {
      "Next": "check__return Promise.all(input.list.filter(function (item)).map(function (",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return Promise.all(input.list.filter(function (item)).map(function (item)))": Object {
      "Next": "check__return Promise.all(input.list.filter(function (item)).map(function (",
      "Parameters": Object {
        "arr.$": "$.input.list[?(@.length>2)]",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.filter(function (item)).map(functio": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.filter(function (item)).map(function (item",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach((item, i) => if (i == 0) task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function (item,i))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function (item,i))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item,i))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item,i))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item,i))": Object {
      "Next": "1__return input.list.forEach(function (item,i))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return input.list.forEach(function (item,i))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return input.list.forEach(function (item,i))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
      },
      "Type": "Map",
    },
    "return null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function (item,i))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach((item, i, list) => if (i == 0) task(item) else task(list[0])) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function (item,i))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(input.list[0])": Object {
      "InputPath": "$.heap2",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function (item,i))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item,i))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item,i))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item,i))": Object {
      "Next": "1__return input.list.forEach(function (item,i))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return task(input.list[0])",
      "Type": "Choice",
    },
    "return input.list.forEach(function (item,i))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return input.list.forEach(function (item,i))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
      },
      "Type": "Map",
    },
    "return task(input.list[0])": Object {
      "InputPath": "$.input.list[0]",
      "Next": "1__return task(input.list[0])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function (item,i))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach(item => ) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "input.list.forEach(function (item))",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = aitem": Object {
      "InputPath": "$.a",
      "Next": "item 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "a = aitem 1": Object {
      "InputPath": "$.heap3.string",
      "Next": "return null 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "aitem": Object {
      "Next": "a = aitem 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "check__input.list.forEach(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__input.list.forEach(function (item))",
      "Type": "Choice",
    },
    "end__input.list.forEach(function (item))": Object {
      "Next": "return null",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.list.forEach(function (item))": Object {
      "Next": "check__input.list.forEach(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "a = aitem",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "item 1": Object {
      "InputPath": "$.item",
      "Next": "aitem",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null 1": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "tail__input.list.forEach(function (item))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item))": Object {
      "Next": "1__return input.list.forEach(function (item))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.forEach(function (item))": Object {
      "Next": "check__return input.list.forEach(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function (item))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map((item, i) => if (i == 0) task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function (item,i)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item,i)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item,i)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item,i)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item,i)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return Promise.all(input.list.map(function (item,i)))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "return null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function (item,i)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map((item, i, list) => if (i == 0) task(item) else task(list[0])) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function (item,i)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(input.list[0])": Object {
      "InputPath": "$.heap2",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item,i)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item,i)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item,i)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item,i)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    Object {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return task(input.list[0])",
      "Type": "Choice",
    },
    "return Promise.all(input.list.map(function (item,i)))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "return task(input.list[0])": Object {
      "InputPath": "$.input.list[0]",
      "Next": "1__return task(input.list[0])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function (item,i)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function (item)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function (item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function (item)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`nested try-catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Cause": "{\\"message\\":\\"error3\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
    "catch__try 1": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "error2",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try 1",
      "Result": Object {
        "message": "error1",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`non-literal params AWS.SDK.CloudWatch.deleteAlarms 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(fun": Object {
      "Next": "return null",
      "Parameters": Object {
        "AlarmNames.$": "$.heap2",
      },
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:deleteAlarms",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "1__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(fun 1": Object {
      "InputPath": "$.heap1",
      "Next": "1__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(fun",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "MetricAlarms": Object {
      "InputPath": "$.heap0['MetricAlarms']",
      "Next": "if(MetricAlarms === undefined)",
      "ResultPath": "$.MetricAlarms",
      "Type": "Pass",
    },
    "a": Object {
      "InputPath": "$.heap1.arr[0]",
      "Next": "return a.AlarmName",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(functi": Object {
      "Next": "check__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map",
      "Parameters": Object {
        "arr.$": "$.MetricAlarms",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "check__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "a",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(f",
      "Type": "Choice",
    },
    "end__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(f": Object {
      "Next": "set__end__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAla": Object {
      "Next": "check__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "if(MetricAlarms === undefined)": Object {
      "Choices": Array [
        Object {
          "Next": "return",
          "Or": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.MetricAlarms",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.MetricAlarms",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.MetricAlarms",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(functi",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return a.AlarmName": Object {
      "InputPath": "$.a.AlarmName",
      "Next": "handleResult__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAla",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "set__end__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(fun 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso": Object {
      "Next": "MetricAlarms",
      "Parameters": Object {},
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`null coalesce logic 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {null: input.a ?? input.b}": Object {
      "End": true,
      "Parameters": Object {
        "null.$": "$.heap1",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {null: input.a ?? input.b} 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__return {null: input.a ?? input.b}",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {null: input.a ?? input.b}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return {null: input.a ?? input.b}": Object {
      "InputPath": "$.input.b",
      "Next": "1__return {null: input.a ?? input.b} 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return {null: input.a ?? input.b}": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.a",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.a",
            },
          ],
          "Next": "true__return {null: input.a ?? input.b}",
        },
      ],
      "Default": "false__return {null: input.a ?? input.b}",
      "Type": "Choice",
    },
    "true__return {null: input.a ?? input.b}": Object {
      "InputPath": "$.input.a",
      "Next": "1__return {null: input.a ?? input.b} 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`overwrite aslServiceName AWS.SDK.CloudWatch.describeAlarms 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "MetricAlarms": Object {
      "InputPath": "$.heap0['MetricAlarms']",
      "Next": "return MetricAlarms",
      "ResultPath": "$.MetricAlarms",
      "Type": "Pass",
    },
    "return MetricAlarms": Object {
      "End": true,
      "InputPath": "$.MetricAlarms",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso": Object {
      "Next": "MetricAlarms",
      "Parameters": Object {},
      "Resource": "arn:aws:states:::aws-sdk:cw:describeAlarms",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`overwrite iamActions AWS.SDK.CloudWatch.describeAlarms 1`] = `
Object {
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Parameters": Object {
    "BootstrapVersion": Object {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": Object {
    "FC4345940": Object {
      "DependsOn": Array [
        "FServiceRole3AC82EE1",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = function() { return null; }",
        },
        "FunctionName": "testFunction",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "FServiceRole3AC82EE1",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "FServiceRole3AC82EE1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TableCD117FA1": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "KeySchema": Array [
          Object {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "ProvisionedThroughput": Object {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5,
        },
        "TableName": "testTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "fn5FF616E3": Object {
      "DependsOn": Array [
        "fnRoleDefaultPolicy4FB655BE",
        "fnRole50A611CF",
      ],
      "Properties": Object {
        "DefinitionString": "{\\"StartAt\\":\\"Initialize Functionless Context\\",\\"States\\":{\\"Initialize Functionless Context\\":{\\"Type\\":\\"Pass\\",\\"Parameters\\":{\\"fnl_context\\":{\\"null\\":null}},\\"ResultPath\\":\\"$\\",\\"Next\\":\\"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso\\"},\\"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso\\":{\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:aws:states:::aws-sdk:cloudwatch:describeAlarms\\",\\"Next\\":\\"MetricAlarms\\",\\"Parameters\\":{},\\"ResultPath\\":\\"$.heap0\\"},\\"MetricAlarms\\":{\\"Type\\":\\"Pass\\",\\"Next\\":\\"return MetricAlarms\\",\\"ResultPath\\":\\"$.MetricAlarms\\",\\"InputPath\\":\\"$.heap0['MetricAlarms']\\"},\\"return MetricAlarms\\":{\\"Type\\":\\"Pass\\",\\"End\\":true,\\"ResultPath\\":\\"$\\",\\"InputPath\\":\\"$.MetricAlarms\\"}}}",
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "fnRole50A611CF",
            "Arn",
          ],
        },
        "StateMachineType": "EXPRESS",
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "fnRole50A611CF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "fnRoleDefaultPolicy4FB655BE": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "cloudwatch:Describe*",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "fnRoleDefaultPolicy4FB655BE",
        "Roles": Array [
          Object {
            "Ref": "fnRole50A611CF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": Object {
    "CheckBootstrapVersion": Object {
      "Assertions": Array [
        Object {
          "Assert": Object {
            "Fn::Not": Array [
              Object {
                "Fn::Contains": Array [
                  Array [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  Object {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`parse json 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\")": Object {
      "End": true,
      "InputPath": "$.heap1.out",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\") 1": Object {
      "Next": "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\")",
      "Parameters": Object {
        "out.$": "States.StringToJson($.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\")": Object {
      "Next": "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\") 1",
      "Result": "{ a: 'a', b: { c: 'c' } }",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`purge SQS Queue 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await queue.purge()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.purge()": Object {
      "Next": "return null",
      "Parameters": Object {
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:purgeQueue",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`put an event bus event 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail": Object {
      "Next": "return null",
      "Parameters": Object {
        "Entries": Array [
          Object {
            "Account": "123456789012",
            "Detail": Object {
              "value.$": "$.heap0",
            },
            "DetailType": "someEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Id": "bbbbbbbb-eeee-eeee-eeee-ffffffffffff",
            "Region": "us-east-1",
            "Resources": Array [
              "__REPLACED_ARN",
            ],
            "Source": "sfnTest",
            "Time": "2022-08-05T16:19:03Z",
            "Version": "1",
          },
        ],
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {": Object {
      "InputPath": "$.input.id",
      "Next": "1__await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`put multiple event bus events 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail": Object {
      "InputPath": "$.input.id",
      "Next": "2__await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "2__await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail": Object {
      "Next": "return null",
      "Parameters": Object {
        "Entries": Array [
          Object {
            "Detail": Object {
              "value.$": "$.heap0",
            },
            "DetailType": "someEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
          Object {
            "Detail": Object {
              "constant": "hi",
              "value.$": "$.heap1",
            },
            "DetailType": "someOtherEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
        ],
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail: {": Object {
      "InputPath": "$.input.id",
      "Next": "1__await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`receiveMessage with JSON serialization 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await queue.receiveMessage()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.receiveMessage()": Object {
      "Next": "parseIfMessages__await queue.receiveMessage()",
      "Parameters": Object {
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:receiveMessage",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "parseIfMessages__await queue.receiveMessage()": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "parse__await queue.receiveMessage()",
          "Variable": "$.heap0.Messages",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "parse__await queue.receiveMessage()": Object {
      "ItemsPath": "$.heap0.Messages",
      "Iterator": Object {
        "StartAt": "JsonParse",
        "States": Object {
          "JsonParse": Object {
            "Next": "UnwrapMessage",
            "Parameters": Object {
              "parsed.$": "States.StringToJson($.message.Body)",
            },
            "ResultPath": "$.message.Message",
            "Type": "Pass",
          },
          "UnwrapMessage": Object {
            "End": true,
            "InputPath": "$.message.Message.parsed",
            "OutputPath": "$.message",
            "ResultPath": "$.message.Message",
            "Type": "Pass",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "message.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0.Messages",
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`receiveMessage with Text serialization 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return queue.receiveMessage()": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return queue.receiveMessage()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return queue.receiveMessage()": Object {
      "Next": "1__return queue.receiveMessage()",
      "Parameters": Object {
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:receiveMessage",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`result = $SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`result = $SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "result = await $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "result": Object {
      "InputPath": "$.heap1",
      "Next": "return result",
      "ResultPath": "$.result",
      "Type": "Pass",
    },
    "result = await $SFN.map(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "result",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return result": Object {
      "End": true,
      "InputPath": "$.result",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return $SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.forEach(list, (item) => try { task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__await task(item)",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "catch__await task(item)": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.forEach(list, {maxConcurrency: 2} (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 2,
      "Next": "1__return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, (item) => try { task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "try",
        "States": Object {
          "1__try": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "catch__try": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "try": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__try",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "1__try",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, {maxConcurrency: 2} (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, {maxConcurrency: 2}, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, {maxConcurrency: 2}, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 2,
      "Next": "1__return $SFN.map(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.parallel(() => "hello", () => "world")) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.parallel(function (), function ())": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.parallel(function (), function ())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel(function (), function ())": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "return \\"world\\"",
          "States": Object {
            "return \\"world\\"": Object {
              "End": true,
              "Result": "world",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel(function (), function ())",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return $SFN.parallel(() => {})) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.parallel(function ())": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.parallel(function ())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel(function ())": Object {
      "Branches": Array [
        Object {
          "StartAt": "return null",
          "States": Object {
            "return null": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel(function ())",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return $SFN.parallel(() => try { task() } catch { return null })) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try 1": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try 1",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try 1": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try 1": Object {
      "Branches": Array [
        Object {
          "StartAt": "try",
          "States": Object {
            "1__try": Object {
              "End": true,
              "InputPath": "$.heap0",
              "ResultPath": "$",
              "Type": "Pass",
            },
            "catch__try": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
            "try": Object {
              "Catch": Array [
                Object {
                  "ErrorEquals": Array [
                    "States.ALL",
                  ],
                  "Next": "catch__try",
                  "ResultPath": null,
                },
              ],
              "InputPath": "$.fnl_context.null",
              "Next": "1__try",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap0",
              "Type": "Task",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 1",
          "ResultPath": null,
        },
      ],
      "Next": "1__try 1",
      "ResultPath": "$.heap1",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return AWS.DynamoDB.GetItem 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ": Object {
      "Next": "person",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.heap0",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.heap2",
        "name.$": "$.heap3",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S} 1": Object {
      "InputPath": "$.person.Item.name.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S}",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": Object {
      "Choices": Array [
        Object {
          "Next": "return",
          "Or": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.person.Item",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.person.Item",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.person.Item",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return {id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": Object {
      "InputPath": "$.heap1",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp": Object {
      "InputPath": "$.input.id",
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S} 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.DynamoDB.GetItem dynamic parameters 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ": Object {
      "Next": "person",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.heap1",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S:  1": Object {
      "InputPath": "$.heap0",
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.heap3",
        "name.$": "$.heap4",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S} 1": Object {
      "InputPath": "$.person.Item.name.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S}",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: ": Object {
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S:  1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": Object {
      "Choices": Array [
        Object {
          "Next": "return",
          "Or": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.person.Item",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.person.Item",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.person.Item",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return {id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": Object {
      "InputPath": "$.heap2",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.id",
            },
          ],
          "Next": "true__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {",
        },
      ],
      "Default": "false__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: ",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S} 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "true__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {": Object {
      "InputPath": "$.input.id",
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S:  1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.Lambda.Invoke dynamic parameters 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ": Object {
      "End": true,
      "InputPath": "$.heap2.Payload",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1": Object {
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ",
      "Parameters": Object {
        "FunctionName": "__REPLACED_TOKEN",
        "Payload": Object {
          "id.$": "$.heap1",
        },
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  2": Object {
      "InputPath": "$.heap0",
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ?? ",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input": Object {
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  2",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ?? ": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.id",
            },
          ],
          "Next": "true__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.",
        },
      ],
      "Default": "false__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input",
      "Type": "Choice",
    },
    "true__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.": Object {
      "InputPath": "$.input.id",
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.SDK.CloudWatch.describeAlarms 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "alarms = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {resources: [\\"*",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "alarms": Object {
      "InputPath": "$.heap0",
      "Next": "if(alarms.MetricAlarms === undefined)",
      "ResultPath": "$.alarms",
      "Type": "Pass",
    },
    "alarms = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {resources: [\\"*": Object {
      "Next": "alarms",
      "Parameters": Object {},
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(alarms.MetricAlarms === undefined)": Object {
      "Choices": Array [
        Object {
          "Next": "return",
          "Or": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.alarms.MetricAlarms",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.alarms.MetricAlarms",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.alarms.MetricAlarms",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return alarms.MetricAlarms",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return alarms.MetricAlarms": Object {
      "End": true,
      "InputPath": "$.alarms.MetricAlarms",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.SDK.CloudWatch.describeAlarms dynamic parameters 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: inpu": Object {
      "Next": "alarms",
      "Parameters": Object {
        "AlarmNamePrefix.$": "$.heap1",
      },
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: inpu 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: inpu",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: input.p",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "alarms": Object {
      "InputPath": "$.heap2",
      "Next": "if(alarms.MetricAlarms === undefined)",
      "ResultPath": "$.alarms",
      "Type": "Pass",
    },
    "alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: input.p": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.prefix",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.prefix",
            },
          ],
          "Next": "true__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: i",
        },
      ],
      "Default": "false__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: ",
      "Type": "Choice",
    },
    "false__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: ": Object {
      "Next": "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: inpu 1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(alarms.MetricAlarms === undefined)": Object {
      "Choices": Array [
        Object {
          "Next": "return",
          "Or": Array [
            Object {
              "IsPresent": false,
              "Variable": "$.alarms.MetricAlarms",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.alarms.MetricAlarms",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNull": false,
                      "Variable": "$.alarms.MetricAlarms",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return alarms.MetricAlarms",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return alarms.MetricAlarms": Object {
      "End": true,
      "InputPath": "$.alarms.MetricAlarms",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: i": Object {
      "InputPath": "$.input.prefix",
      "Next": "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: inpu 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input[\\"id special\\"]",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input[\\"id special\\"]": Object {
      "End": true,
      "InputPath": "$.input.input['id special']",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr number 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.arr[0]",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.arr[0]": Object {
      "End": true,
      "InputPath": "$.input.input.arr[0]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr number reference 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.input.arr[id]": Object {
      "End": true,
      "InputPath": "$.heap0.out",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "id = 0",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "array__return input.input.arr[id]": Object {
      "Next": "1__return input.input.arr[id]",
      "Parameters": Object {
        "out.$": "States.ArrayGetItem($.input.input.arr,$.id)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "checkString__return input.input.arr[id]": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsString": true,
              "Variable": "$.heap0.out.str",
            },
            Object {
              "StringEquals": "[]",
              "Variable": "$.heap0.out.str",
            },
          ],
          "Next": "array__return input.input.arr[id]",
        },
      ],
      "Default": "object__return input.input.arr[id]",
      "Type": "Choice",
    },
    "id = 0": Object {
      "Next": "return input.input.arr[id]",
      "Result": 0,
      "ResultPath": "$.id",
      "Type": "Pass",
    },
    "object__return input.input.arr[id]": Object {
      "Cause": "Reference element access is not valid for objects.",
      "Error": "Functionless.InvalidAccess",
      "Type": "Fail",
    },
    "return input.input.arr[id]": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "array__return input.input.arr[id]",
          "Variable": "$.input.input.arr[0]",
        },
      ],
      "Default": "stringify__return input.input.arr[id]",
      "Type": "Choice",
    },
    "stringify__return input.input.arr[id]": Object {
      "Next": "checkString__return input.input.arr[id]",
      "Parameters": Object {
        "str.$": "States.JsonToString($.input.input.arr)",
      },
      "ResultPath": "$.heap0.out",
      "Type": "Pass",
    },
  },
}
`;

exports[`return PropAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.id": Object {
      "End": true,
      "InputPath": "$.input.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return a single Lambda Function call 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return getPerson({id: input.id})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return getPerson({id: input.id}) 1": Object {
      "Next": "1__return getPerson({id: input.id})",
      "Parameters": Object {
        "id.$": "$.heap0",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return getPerson({id: input.id})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return getPerson({id: input.id})": Object {
      "InputPath": "$.input.id",
      "Next": "1__return getPerson({id: input.id}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return await task(await task()) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(await task())": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(await task()) 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__return task(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(await task())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(await task())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return task(await task()) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return cond ? task(1) : task(2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__false__return if(input.cond)": Object {
      "InputPath": "$.heap1",
      "Next": "1__return if(input.cond)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return if(input.cond)": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__true__return if(input.cond)": Object {
      "InputPath": "$.heap0",
      "Next": "1__return if(input.cond)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return if(input.cond)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return if(input.cond)": Object {
      "Next": "1__false__return if(input.cond)",
      "Parameters": 2,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return if(input.cond)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.cond",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.cond",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.cond",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.cond",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.cond",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.cond",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.cond",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.cond",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.cond",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.cond",
                    },
                  ],
                },
                Object {
                  "Not": Object {
                    "Or": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.cond",
                      },
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.cond",
                      },
                      Object {
                        "IsString": true,
                        "Variable": "$.input.cond",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__return if(input.cond)",
        },
      ],
      "Default": "false__return if(input.cond)",
      "Type": "Choice",
    },
    "true__return if(input.cond)": Object {
      "Next": "1__true__return if(input.cond)",
      "Parameters": 1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return identifier 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.id": Object {
      "End": true,
      "InputPath": "$.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(-1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(-1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(-1)": Object {
      "End": true,
      "InputPath": "$.input.items[-1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(0, -1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(0, -1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(0, -1)": Object {
      "End": true,
      "InputPath": "$.input.items[0:-1]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1)": Object {
      "End": true,
      "InputPath": "$.input.items[1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1, 3) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1, 3)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1, 3)": Object {
      "End": true,
      "InputPath": "$.input.items[1:3]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1, undefined) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1, undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1, undefined)": Object {
      "End": true,
      "InputPath": "$.input.items[1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return optional PropAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.id": Object {
      "End": true,
      "InputPath": "$.input.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task({ key: items.filter(*) }) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({equals: input.items.filter(function (item)), and: input.ite": Object {
      "End": true,
      "InputPath": "$.heap3",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({equals: input.items.filter(function (item)), and: input.ite 1": Object {
      "Next": "1__return task({equals: input.items.filter(function (item)), and: input.ite",
      "Parameters": Object {
        "and.$": "$.heap1",
        "equals.$": "$.heap0",
        "or.$": "$.heap2",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "1__return task({equals: input.items.filter(function (item)), and: input.ite 2": Object {
      "InputPath": "$.input.items[?(@.str=='hello'&&@.items[0]=='hello')]",
      "Next": "2__return task({equals: input.items.filter(function (item)), and: input.ite",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "2__return task({equals: input.items.filter(function (item)), and: input.ite": Object {
      "InputPath": "$.input.items[?(@.str=='hello'||@.items[0]=='hello')]",
      "Next": "1__return task({equals: input.items.filter(function (item)), and: input.ite 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({equals: input.items.filter(function (item)), and: input.items.",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({equals: input.items.filter(function (item)), and: input.items.": Object {
      "InputPath": "$.input.items[?(@.str=='hello')]",
      "Next": "1__return task({equals: input.items.filter(function (item)), and: input.ite 2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task({key: items.slice(1, 3)}) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({key: input.items.slice(1, 3)})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key: input.items.slice(1, 3)}) 1": Object {
      "Next": "1__return task({key: input.items.slice(1, 3)})",
      "Parameters": Object {
        "key.$": "$.heap0",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({key: input.items.slice(1, 3)})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({key: input.items.slice(1, 3)})": Object {
      "InputPath": "$.input.items[1:3]",
      "Next": "1__return task({key: input.items.slice(1, 3)}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task(1) ?? task(2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__false__await task(1) ?? await task(2)": Object {
      "InputPath": "$.heap1",
      "Next": "1__return await task(1) ?? await task(2)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return await task(1) ?? await task(2)": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await task(1) ?? await task(2)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(1) ?? await task(2)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "IsNull": false,
              "Variable": "$.heap0",
            },
          ],
          "Next": "true__await task(1) ?? await task(2)",
        },
      ],
      "Default": "false__await task(1) ?? await task(2)",
      "Type": "Choice",
    },
    "false__await task(1) ?? await task(2)": Object {
      "Next": "1__false__await task(1) ?? await task(2)",
      "Parameters": 2,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return await task(1) ?? await task(2)": Object {
      "Next": "await task(1) ?? await task(2)",
      "Parameters": 1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "true__await task(1) ?? await task(2)": Object {
      "InputPath": "$.heap0",
      "Next": "1__return await task(1) ?? await task(2)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task(await task()) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(await task())": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(await task()) 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__return task(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(await task())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(await task())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return task(await task()) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return typeof x 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return typeof input.id": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return typeof input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return typeof input.id": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__return typeof input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__return typeof input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__return typeof input.id",
        },
        Object {
          "IsPresent": true,
          "Next": "object__return typeof input.id",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__return typeof input.id",
      "Type": "Choice",
    },
    "string__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessage JSON array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await queue.sendMessage({MessageBody: [input]})": Object {
      "Next": "return null",
      "Parameters": Object {
        "MessageBody.$": "States.JsonToString($.heap2)",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "1__await queue.sendMessage({MessageBody: [input]}) 1": Object {
      "InputPath": "$.heap1.arr",
      "Next": "1__await queue.sendMessage({MessageBody: [input]})",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "await queue.sendMessage({MessageBody: [input]})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[input]": Object {
      "Next": "1__await queue.sendMessage({MessageBody: [input]}) 1",
      "Parameters": Object {
        "arr.$": "States.Array($.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "await queue.sendMessage({MessageBody: [input]})": Object {
      "InputPath": "$.input",
      "Next": "[input]",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessage TextSerializer 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await queue.sendMessage({MessageBody: input.message})": Object {
      "Next": "return null",
      "Parameters": Object {
        "MessageBody.$": "$.heap0",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "await queue.sendMessage({MessageBody: input.message})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessage({MessageBody: input.message})": Object {
      "InputPath": "$.input.message",
      "Next": "1__await queue.sendMessage({MessageBody: input.message})",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessage TextSerializer literal string 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await queue.sendMessage({MessageBody: \\"hello world\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessage({MessageBody: \\"hello world\\"})": Object {
      "Next": "return null",
      "Parameters": Object {
        "MessageBody": "hello world",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessage object literal with JSON Path to SQS Queue 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await queue.sendMessage({MessageBody: {orderId: input.orderId}})": Object {
      "Next": "2__await queue.sendMessage({MessageBody: {orderId: input.orderId}})",
      "Parameters": Object {
        "orderId.$": "$.heap0",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "2__await queue.sendMessage({MessageBody: {orderId: input.orderId}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "MessageBody.$": "States.JsonToString($.heap1)",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "await queue.sendMessage({MessageBody: {orderId: input.orderId}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessage({MessageBody: {orderId: input.orderId}})": Object {
      "InputPath": "$.input.orderId",
      "Next": "1__await queue.sendMessage({MessageBody: {orderId: input.orderId}})",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessage when whole message is JSON Path 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await queue.sendMessage({MessageBody: input})": Object {
      "Next": "return null",
      "Parameters": Object {
        "MessageBody.$": "States.JsonToString($.heap0)",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "await queue.sendMessage({MessageBody: input})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessage({MessageBody: input})": Object {
      "InputPath": "$.input",
      "Next": "1__await queue.sendMessage({MessageBody: input})",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessageBatch with JSON serialization 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess": Object {
      "Next": "2__await queue.sendMessageBatch({Entries: input.messages.map(function (mess",
      "Parameters": Object {
        "Entries.$": "$.heap5",
      },
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "1__return {Id: i, MessageBody: message}": Object {
      "Next": "handleResult__await queue.sendMessageBatch({Entries: input.messages.map(fun",
      "Parameters": Object {
        "Id.$": "$.heap3",
        "MessageBody.$": "$.heap4",
      },
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return {Id: i, MessageBody: message} 1": Object {
      "InputPath": "$.heap2.string",
      "Next": "2__return {Id: i, MessageBody: message}",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "2__await queue.sendMessageBatch({Entries: input.messages.map(function (mess": Object {
      "ItemsPath": "$.heap6.Entries",
      "Iterator": Object {
        "StartAt": "serialize Message",
        "States": Object {
          "serialize Message": Object {
            "Next": "unwrap Message",
            "Parameters": Object {
              "value.$": "States.JsonToString($.entry.MessageBody)",
            },
            "ResultPath": "$.entry.MessageBody",
            "Type": "Pass",
          },
          "unwrap Message": Object {
            "End": true,
            "InputPath": "$.entry.MessageBody.value",
            "OutputPath": "$.entry",
            "ResultPath": "$.entry.MessageBody",
            "Type": "Pass",
          },
        },
      },
      "Next": "send message batch__2__await queue.sendMessageBatch({Entries: input.message",
      "Parameters": Object {
        "entry.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap7",
      "Type": "Map",
    },
    "2__return {Id: i, MessageBody: message}": Object {
      "InputPath": "$.message",
      "Next": "1__return {Id: i, MessageBody: message}",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "await queue.sendMessageBatch({Entries: input.messages.map(function (message",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessageBatch({Entries: input.messages.map(function (message": Object {
      "ItemsPath": "$.input.messages",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__await queue.sendMessageBatch({Entries: input.messages.map(function (",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "check__await queue.sendMessageBatch({Entries: input.messages.map(function (": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (message,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__await queue.sendMessageBatch({Entries: input.messages.map(function (me",
      "Type": "Choice",
    },
    "end__await queue.sendMessageBatch({Entries: input.messages.map(function (me": Object {
      "Next": "set__end__await queue.sendMessageBatch({Entries: input.messages.map(functio",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (message,i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.message",
      "Type": "Pass",
    },
    "handleResult__await queue.sendMessageBatch({Entries: input.messages.map(fun": Object {
      "Next": "check__await queue.sendMessageBatch({Entries: input.messages.map(function (",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "return {Id: i, MessageBody: message}",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": Object {
      "Next": "1__return {Id: i, MessageBody: message} 1",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {Id: i, MessageBody: message}": Object {
      "InputPath": "$.i",
      "Next": "i 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "send message batch__2__await queue.sendMessageBatch({Entries: input.message": Object {
      "Next": "return null",
      "Parameters": Object {
        "Entries.$": "$.heap7",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessageBatch",
      "ResultPath": "$.heap7",
      "Type": "Task",
    },
    "set__end__await queue.sendMessageBatch({Entries: input.messages.map(functio": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessageBatch with Text serialization 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess": Object {
      "Next": "return null",
      "Parameters": Object {
        "Entries.$": "$.heap5",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessageBatch",
      "ResultPath": "$.heap6",
      "Type": "Task",
    },
    "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "1__return {Id: i, MessageBody: message}": Object {
      "Next": "handleResult__await queue.sendMessageBatch({Entries: input.messages.map(fun",
      "Parameters": Object {
        "Id.$": "$.heap3",
        "MessageBody.$": "$.heap4",
      },
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return {Id: i, MessageBody: message} 1": Object {
      "InputPath": "$.heap2.string",
      "Next": "2__return {Id: i, MessageBody: message}",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "2__return {Id: i, MessageBody: message}": Object {
      "InputPath": "$.message",
      "Next": "1__return {Id: i, MessageBody: message}",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "await queue.sendMessageBatch({Entries: input.messages.map(function (message",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessageBatch({Entries: input.messages.map(function (message": Object {
      "ItemsPath": "$.input.messages",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__await queue.sendMessageBatch({Entries: input.messages.map(function (",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "check__await queue.sendMessageBatch({Entries: input.messages.map(function (": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (message,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__await queue.sendMessageBatch({Entries: input.messages.map(function (me",
      "Type": "Choice",
    },
    "end__await queue.sendMessageBatch({Entries: input.messages.map(function (me": Object {
      "Next": "set__end__await queue.sendMessageBatch({Entries: input.messages.map(functio",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (message,i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.message",
      "Type": "Pass",
    },
    "handleResult__await queue.sendMessageBatch({Entries: input.messages.map(fun": Object {
      "Next": "check__await queue.sendMessageBatch({Entries: input.messages.map(function (",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "return {Id: i, MessageBody: message}",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": Object {
      "Next": "1__return {Id: i, MessageBody: message} 1",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {Id: i, MessageBody: message}": Object {
      "InputPath": "$.i",
      "Next": "i 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "set__end__await queue.sendMessageBatch({Entries: input.messages.map(functio": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`set obj 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {a: a, b: b, c: c}": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.heap0",
        "b.$": "$.heap1",
        "c.$": "$.heap2",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {a: a, b: b, c: c} 1": Object {
      "InputPath": "$.b",
      "Next": "2__return {a: a, b: b, c: c}",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "2__return {a: a, b: b, c: c}": Object {
      "InputPath": "$.c",
      "Next": "1__return {a: a, b: b, c: c}",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = {1: \\"value\\"}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = {1: \\"value\\"}": Object {
      "Next": "b = a[1]",
      "Result": Object {
        "1": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "b = a[1]": Object {
      "InputPath": "$.a[1]",
      "Next": "c = a[\\"1\\"]",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "c = a[\\"1\\"]": Object {
      "InputPath": "$.a['1']",
      "Next": "return {a: a, b: b, c: c}",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "return {a: a, b: b, c: c}": Object {
      "InputPath": "$.a",
      "Next": "1__return {a: a, b: b, c: c} 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`shadow 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(b in [1, 2, 3])": Object {
      "ItemsPath": "$.heap4",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(b in [1, 2, 3])",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "1__return aa__2": Object {
      "End": true,
      "InputPath": "$.heap7.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return aba__1": Object {
      "End": true,
      "InputPath": "$.heap3.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "a__2 = \\"\\"",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"\\" 1": Object {
      "Next": "a__1 = \\"\\"",
      "Result": "",
      "ResultPath": "$.a__1",
      "Type": "Pass",
    },
    "a = \\"\\" 2": Object {
      "Next": "return aba__1",
      "Result": "",
      "ResultPath": "$.a__3",
      "Type": "Pass",
    },
    "a__1": Object {
      "InputPath": "$.a__1__1",
      "Next": "aba__1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "a__1 = \\"\\"": Object {
      "Next": "if(a === \\"\\")",
      "Result": "",
      "ResultPath": "$.a__1__1",
      "Type": "Pass",
    },
    "a__2": Object {
      "InputPath": "$.a__2",
      "Next": "aa__2",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "a__2 = \\"\\"": Object {
      "Next": "for(b in [1, 2, 3])",
      "Result": "",
      "ResultPath": "$.a__2",
      "Type": "Pass",
    },
    "aa__2": Object {
      "Next": "1__return aa__2",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap5,$.heap6)",
      },
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "aba__1": Object {
      "Next": "1__return aba__1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}',$.heap0,$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "assignValue__b": Object {
      "InputPath": "$.heap4[0].item",
      "Next": "a = \\"\\" 1",
      "ResultPath": "$.0__b",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$.heap4[0].index",
      "Next": "assignValue__b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "b 1": Object {
      "InputPath": "$.b",
      "Next": "a__1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(b in [1, 2, 3])": Object {
      "Next": "1__for(b in [1, 2, 3])",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "hasNext__for(b in [1, 2, 3])": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "b",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "return aa__2",
      "Type": "Choice",
    },
    "if(a === \\"\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.a__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.a__1",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.a__1",
                    },
                    Object {
                      "StringEquals": "",
                      "Variable": "$.a__1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "a = \\"\\" 2",
        },
      ],
      "Default": "tail__for(b in [1, 2, 3])",
      "Type": "Choice",
    },
    "return aa__2": Object {
      "InputPath": "$.a",
      "Next": "a__2",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "return aba__1": Object {
      "InputPath": "$.a__3",
      "Next": "b 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(b in [1, 2, 3])": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for(b in [1, 2, 3])",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`single quotes in StringLiteralExpr should be escaped in a JSON Path filter expression 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({escape: input.items.filter(function (item))})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({escape: input.items.filter(function (item))}) 1": Object {
      "Next": "1__return task({escape: input.items.filter(function (item))})",
      "Parameters": Object {
        "escape.$": "$.heap0",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({escape: input.items.filter(function (item))})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({escape: input.items.filter(function (item))})": Object {
      "InputPath": "$.input.items[?(@.str=='hello\\\\'world')]",
      "Next": "1__return task({escape: input.items.filter(function (item))}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`spread constant array and object 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return {array: [0, ...array, 3], object: {key: \\"value\\", ...object}}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {array: [0, ...array, 3], object: {key: \\"value\\", ...object}}": Object {
      "End": true,
      "Result": Object {
        "array": Array [
          0,
          1,
          2,
          3,
        ],
        "object": Object {
          "hello": "world",
          "key": "value",
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify json 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return JSON.stringify(input)": Object {
      "End": true,
      "InputPath": "$.heap0.out",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return JSON.stringify(input)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify(input)": Object {
      "Next": "1__return JSON.stringify(input)",
      "Parameters": Object {
        "out.$": "States.JsonToString($.input)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify object literal 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}})": Object {
      "End": true,
      "InputPath": "$.heap1.out",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}}) 1": Object {
      "Next": "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}})",
      "Parameters": Object {
        "out.$": "States.JsonToString($.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}})": Object {
      "Next": "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}}) 1",
      "Result": Object {
        "a": "a",
        "b": Object {
          "c": "c",
        },
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify undefined 2 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return JSON.stringify(undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify(undefined)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`task(-1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(-1)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(-1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(-1)": Object {
      "Next": "1__return task(-1)",
      "Parameters": -1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`task(any) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"hello\\" + \\" world\\")": Object {
      "Next": "await task(\\"hello\\" + 1)",
      "Parameters": "hello world",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap9",
      "Type": "Task",
    },
    "await task(\\"hello\\" + 1)": Object {
      "Next": "await task(1 + \\"hello\\")",
      "Parameters": "hello1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap10",
      "Type": "Task",
    },
    "await task(\\"hello\\" + [\\"world\\"])": Object {
      "Next": "return null",
      "Parameters": "helloworld",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap23",
      "Type": "Task",
    },
    "await task(\\"hello\\" + null)": Object {
      "Next": "await task([null])",
      "Parameters": "hellonull",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap15",
      "Type": "Task",
    },
    "await task(\\"hello\\" + true)": Object {
      "Next": "await task(false + \\"hello\\")",
      "Parameters": "hellotrue",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap12",
      "Type": "Task",
    },
    "await task(\\"hello\\" + {place: \\"world\\"})": Object {
      "Next": "await task(\\"hello\\" + [\\"world\\"])",
      "Parameters": "hello[object Object]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap22",
      "Type": "Task",
    },
    "await task(\\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + \\" world\\")",
      "Parameters": "hello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap8",
      "Type": "Task",
    },
    "await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "await task(null)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "await task(-1)": Object {
      "Next": "await task(-100)",
      "Parameters": -1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap5",
      "Type": "Task",
    },
    "await task(-100)": Object {
      "Next": "await task(1 + 2)",
      "Parameters": -100,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap6",
      "Type": "Task",
    },
    "await task(0)": Object {
      "Next": "await task(-1)",
      "Parameters": 0,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "await task(1 + \\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + true)",
      "Parameters": "1hello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap11",
      "Type": "Task",
    },
    "await task(1 + 2)": Object {
      "Next": "await task(\\"hello\\")",
      "Parameters": 3,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap7",
      "Type": "Task",
    },
    "await task([-1])": Object {
      "Next": "await task([true])",
      "Parameters": Array [
        -1,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap18",
      "Type": "Task",
    },
    "await task([1])": Object {
      "Next": "await task([-1])",
      "Parameters": Array [
        1,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap17",
      "Type": "Task",
    },
    "await task([null])": Object {
      "Next": "await task([1])",
      "Parameters": Array [
        null,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap16",
      "Type": "Task",
    },
    "await task([true])": Object {
      "Next": "await task([{key: \\"value\\"}])",
      "Parameters": Array [
        true,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap19",
      "Type": "Task",
    },
    "await task([{key: \\"value\\"}])": Object {
      "Next": "await task({key: \\"value\\"})",
      "Parameters": Array [
        Object {
          "key": "value",
        },
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap20",
      "Type": "Task",
    },
    "await task(false + \\"hello\\")": Object {
      "Next": "await task(null + \\"hello\\")",
      "Parameters": "falsehello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap13",
      "Type": "Task",
    },
    "await task(false)": Object {
      "Next": "await task(0)",
      "Parameters": false,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "await task(null + \\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + null)",
      "Parameters": "nullhello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap14",
      "Type": "Task",
    },
    "await task(null)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "await task(true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "await task(true)": Object {
      "Next": "await task(false)",
      "Parameters": true,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "await task({key: \\"value\\"})": Object {
      "Next": "await task(\\"hello\\" + {place: \\"world\\"})",
      "Parameters": Object {
        "key": "value",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap21",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`task(input.list[-1]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(input.list[-1])": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(input.list[-1])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(input.list[-1])": Object {
      "InputPath": "$.input.list[-1]",
      "Next": "1__return task(input.list[-1])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`template literal strings 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    " input.obj.str \\"hello\\"input.obj.items[0]": Object {
      "Next": "1__return task({key:  input.obj.str \\"hello\\"input.obj.items[0]}) 2",
      "Parameters": Object {
        "string.$": "States.Format('{} hello {}',$.heap0,$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return task({key:  input.obj.str \\"hello\\"input.obj.items[0]})": Object {
      "End": true,
      "InputPath": "$.heap4",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key:  input.obj.str \\"hello\\"input.obj.items[0]}) 1": Object {
      "Next": "1__return task({key:  input.obj.str \\"hello\\"input.obj.items[0]})",
      "Parameters": Object {
        "key.$": "$.heap3",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "1__return task({key:  input.obj.str \\"hello\\"input.obj.items[0]}) 2": Object {
      "InputPath": "$.heap2.string",
      "Next": "1__return task({key:  input.obj.str \\"hello\\"input.obj.items[0]}) 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({key:  input.obj.str \\"hello\\"input.obj.items[0]})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "input.obj.items[0]": Object {
      "InputPath": "$.input.obj.items[0]",
      "Next": " input.obj.str \\"hello\\"input.obj.items[0]",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return task({key:  input.obj.str \\"hello\\"input.obj.items[0]})": Object {
      "InputPath": "$.input.obj.str",
      "Next": "input.obj.items[0]",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`template literal strings complex 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    " hello input.obj.str ?? \\"default\\"": Object {
      "InputPath": "$.heap0",
      "Next": "input.obj.items[0] ?? await task()",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    " hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.items[0] ?? await task()": Object {
      "Next": "1__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.ite 2",
      "Parameters": Object {
        "string.$": "States.Format('{} hello hello {}',$.heap1,$.heap4)",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "1__false__input.obj.items[0] ?? await task()": Object {
      "InputPath": "$.heap2",
      "Next": "input.obj.items[0] ?? await task() 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "1__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.ite": Object {
      "End": true,
      "InputPath": "$.heap7",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.ite 1": Object {
      "Next": "1__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.ite",
      "Parameters": Object {
        "key.$": "$.heap6",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap7",
      "Type": "Task",
    },
    "1__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.ite 2": Object {
      "InputPath": "$.heap5.string",
      "Next": "1__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.ite 1",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.items[",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__input.obj.items[0] ?? await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__false__input.obj.items[0] ?? await task()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "false__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj": Object {
      "Next": " hello input.obj.str ?? \\"default\\"",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.obj.items[0] ?? await task()": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.obj.items[0]",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.obj.items[0]",
            },
          ],
          "Next": "true__input.obj.items[0] ?? await task()",
        },
      ],
      "Default": "false__input.obj.items[0] ?? await task()",
      "Type": "Choice",
    },
    "input.obj.items[0] ?? await task() 1": Object {
      "InputPath": "$.heap3",
      "Next": " hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.items[0] ?? await task()",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.items[": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.obj.str",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.obj.str",
            },
          ],
          "Next": "true__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.",
        },
      ],
      "Default": "false__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj",
      "Type": "Choice",
    },
    "true__input.obj.items[0] ?? await task()": Object {
      "InputPath": "$.input.obj.items[0]",
      "Next": "input.obj.items[0] ?? await task() 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "true__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.": Object {
      "InputPath": "$.input.obj.str",
      "Next": " hello input.obj.str ?? \\"default\\"",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`throw Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw Error(\\"cause\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error(\\"cause\\")": Object {
      "Cause": "{\\"message\\":\\"cause\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw in for-of 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "throw new Error(\\"err\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"err\\")": Object {
      "Cause": "{\\"message\\":\\"err\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new Error(\\"cause\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Cause": "{\\"message\\":\\"cause\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new StepFunctionError 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})": Object {
      "Cause": "{\\"property\\":\\"cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new functionless.StepFunctionError 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new functionless.StepFunctionError(\\"CustomError\\", {property: \\"cause\\"}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new functionless.StepFunctionError(\\"CustomError\\", {property: \\"cause\\"}": Object {
      "Cause": "{\\"property\\":\\"cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { $SFN.forEach(list, (item) => task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { $SFN.map(list, (item) => task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { for-of } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__for(item of input.items)": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(item)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__for(item of input.items)",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "InputPath": "$.item",
      "Next": "tail__for(item of input.items)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"you dun' goofed\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "Next": "1__catch__for(item of input.items)",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "if(err.message === \\"you dun' goofed\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    Object {
                      "StringEquals": "you dun' goofed",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap1[0]",
      "Next": "await task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { list.forEach(item => task(item)) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__try",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__try": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__try",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.forEach(item => task(item)) } 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__try": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item))": Object {
      "Next": "1__return input.list.forEach(function (item))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "try",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.forEach(function (item))": Object {
      "Next": "check__return input.list.forEach(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__return input.list.forEach(function (item))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__try",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`try { list.forEach(item => throw) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.forEach(item => throw) } catch (err) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    Object {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return 0",
        },
      ],
      "Default": "return 1",
      "Type": "Choice",
    },
    "return 0": Object {
      "End": true,
      "Result": 0,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return 1": Object {
      "End": true,
      "Result": 1,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => task(item)) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__try",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "set__end__try",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__try": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => task(item)) } 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function (item)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__try": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "handleResult__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "try",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function (item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__return Promise.all(input.list.map(function (item)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__try",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`try { list.map(item => throw) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "set__end__try",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__try": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => throw) } catch (err) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "set__end__try",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    Object {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return 0",
        },
      ],
      "Default": "return 1",
      "Type": "Choice",
    },
    "return 0": Object {
      "End": true,
      "Result": 0,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return 1": Object {
      "End": true,
      "Result": 1,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "set__end__try": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { return $SFN.parallel(() => "hello", () => "world")) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "return \\"world\\"",
          "States": Object {
            "return \\"world\\"": Object {
              "End": true,
              "Result": "world",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`try { return $SFN.parallel(() => "hello", async () => { await task(); await task(); })) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "await task()",
          "States": Object {
            "await task()": Object {
              "InputPath": "$.fnl_context.null",
              "Next": "await task() 1",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap0",
              "Type": "Task",
            },
            "await task() 1": Object {
              "InputPath": "$.fnl_context.null",
              "Next": "return null",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap1",
              "Type": "Task",
            },
            "return null": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "1__try",
      "ResultPath": "$.heap2",
      "Type": "Parallel",
    },
  },
}
`;

exports[`try { task } catch { throw } finally { task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task()": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task()",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task()": Object {
      "Next": "finally",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "recover",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": null,
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task(\\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "sam",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch { task() } finally { task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": null,
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "finally",
          "ResultPath": "$.fnl_tmp_1",
        },
      ],
      "Next": "finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "3",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch(err) { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__await task(\\"1\\")": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"sam\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__await task(\\"1\\")": Object {
      "Next": "1__catch__await task(\\"1\\")",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "if(err.message === \\"sam\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    Object {
                      "StringEquals": "sam",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { throw } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "throw new Error(\\"go\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__throw new Error(\\"go\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "sam",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "finally": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"go\\")": Object {
      "Next": "catch__throw new Error(\\"go\\")",
      "Result": Object {
        "message": "go",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try, task, empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await computeScore({id: \\"id\\", name: \\"name\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: \\"id\\", name: \\"name\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "return null",
          "ResultPath": null,
        },
      ],
      "Next": "return null",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw Error('error'), empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw Error(\\"cause\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error(\\"cause\\")": Object {
      "Next": "return null",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, catch, throw, finally, return 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "return \\"rock-star\\"",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "return \\"rock-star\\"": Object {
      "End": true,
      "Result": "rock-star",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "go",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})": Object {
      "Next": "return null",
      "Result": Object {
        "property": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, finally 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "return \\"hello\\"",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch with guaranteed throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    Object {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch with inner return and a catch variable 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "return err.message",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return err.message": Object {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`try-catch with inner return and no catch variable 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`try-catch with optional return of task 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello world\\"",
      "Parameters": Object {
        "id.$": "$.heap0",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "InputPath": "$.input.id",
      "Next": "1__await computeScore({id: input.id, name: \\"sam\\"})",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    Object {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional return of task 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__return await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await computeScore({id: input.id, name: \\"sam\\"}) 1": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "1__return await computeScore({id: input.id, name: \\"sam\\"})",
      "Parameters": Object {
        "id.$": "$.heap0",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    Object {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "InputPath": "$.input.id",
      "Next": "1__return await computeScore({id: input.id, name: \\"sam\\"}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional task 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello world\\"",
      "Parameters": Object {
        "id.$": "$.heap0",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "InputPath": "$.input.id",
      "Next": "1__await computeScore({id: input.id, name: \\"sam\\"})",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    Object {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional throw of an Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    Object {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"cause\\")",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch, err variable, contains for-of, throw Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "return err.message",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "throw Error(\\"err\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return err.message": Object {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error(\\"err\\")": Object {
      "Next": "catch__for(item of input.items)",
      "Result": Object {
        "message": "err",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch, err variable, contains for-of, throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "return err.message",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "throw new Error(\\"err\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return err.message": Object {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"err\\")": Object {
      "Next": "catch__for(item of input.items)",
      "Result": Object {
        "message": "err",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch, no variable, contains for-of, throw 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "throw new Error(\\"err\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"err\\")": Object {
      "Next": "catch__for(item of input.items)",
      "Result": Object {
        "message": "err",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch-finally 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "return \\"hello\\"",
          "ResultPath": null,
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context in object 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {a: context.Execution.Name}": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.heap0",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {a: context.Execution.Name}",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {a: context.Execution.Name}": Object {
      "InputPath": "$$.Execution.Name",
      "Next": "1__return {a: context.Execution.Name}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`use context object 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(context)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(context)",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(context)": Object {
      "InputPath": "$$",
      "Next": "1__return task(context)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context parameter 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return context.Execution.Name",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return context.Execution.Name": Object {
      "End": true,
      "InputPath": "$$.Execution.Name",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`use context parameter in function call 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(context.Execution.Id)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(context.Execution.Id)",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(context.Execution.Id)": Object {
      "InputPath": "$$.Execution.Id",
      "Next": "1__return task(context.Execution.Id)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context parameter in template 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return name: context.Execution.Id": Object {
      "End": true,
      "InputPath": "$.heap1.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return name: context.Execution.Id",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "name: context.Execution.Id": Object {
      "Next": "1__return name: context.Execution.Id",
      "Parameters": Object {
        "string.$": "States.Format('name: {}',$.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return name: context.Execution.Id": Object {
      "InputPath": "$$.Execution.Id",
      "Next": "name: context.Execution.Id",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor literal number of seconds 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitFor(1)": Object {
      "Next": "return null",
      "Seconds": 1,
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitFor(1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor literal timestamp 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitUntil(\\"2022-08-01T00:00:00Z\\")": Object {
      "Next": "return null",
      "Timestamp": "2022-08-01T00:00:00Z",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitUntil(\\"2022-08-01T00:00:00Z\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor reference number of seconds 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitFor(input.seconds)": Object {
      "Next": "return null",
      "SecondsPath": "$.input.seconds",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitFor(input.seconds)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitUntil reference timestamp 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitUntil(input.until)": Object {
      "Next": "return null",
      "TimestampPath": "$.input.until",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitUntil(input.until)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`while (cond) { cond = task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (cond === null)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 1": Object {
      "InputPath": "$.heap0",
      "Next": "while (cond === null)",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (cond === null)": Object {
      "Choices": Array [
        Object {
          "Next": "cond = await task()",
          "Or": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": false,
                  "Variable": "$.cond",
                },
                Object {
                  "IsPresent": false,
                  "Variable": "$.fnl_context.null",
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.cond",
                },
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.null",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": true,
                          "Variable": "$.cond",
                        },
                        Object {
                          "IsNull": true,
                          "Variable": "$.fnl_context.null",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": false,
                          "Variable": "$.cond",
                        },
                        Object {
                          "IsNull": false,
                          "Variable": "$.fnl_context.null",
                        },
                        Object {
                          "Or": Array [
                            Object {
                              "And": Array [
                                Object {
                                  "IsString": true,
                                  "Variable": "$.cond",
                                },
                                Object {
                                  "StringEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            Object {
                              "And": Array [
                                Object {
                                  "IsBoolean": true,
                                  "Variable": "$.cond",
                                },
                                Object {
                                  "BooleanEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            Object {
                              "And": Array [
                                Object {
                                  "IsNumeric": true,
                                  "Variable": "$.cond",
                                },
                                Object {
                                  "NumericEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`while (cond); cond = task() 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (cond === null)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 1": Object {
      "InputPath": "$.heap0",
      "Next": "while (cond === null)",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (cond === null)": Object {
      "Choices": Array [
        Object {
          "Next": "cond = await task()",
          "Or": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": false,
                  "Variable": "$.cond",
                },
                Object {
                  "IsPresent": false,
                  "Variable": "$.fnl_context.null",
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.cond",
                },
                Object {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.null",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": true,
                          "Variable": "$.cond",
                        },
                        Object {
                          "IsNull": true,
                          "Variable": "$.fnl_context.null",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": false,
                          "Variable": "$.cond",
                        },
                        Object {
                          "IsNull": false,
                          "Variable": "$.fnl_context.null",
                        },
                        Object {
                          "Or": Array [
                            Object {
                              "And": Array [
                                Object {
                                  "IsString": true,
                                  "Variable": "$.cond",
                                },
                                Object {
                                  "StringEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            Object {
                              "And": Array [
                                Object {
                                  "IsBoolean": true,
                                  "Variable": "$.cond",
                                },
                                Object {
                                  "BooleanEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            Object {
                              "And": Array [
                                Object {
                                  "IsNumeric": true,
                                  "Variable": "$.cond",
                                },
                                Object {
                                  "NumericEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`while(true) { try { } catch { wait } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "while (true)",
      "Seconds": 1,
      "Type": "Wait",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "while (true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "try",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;
