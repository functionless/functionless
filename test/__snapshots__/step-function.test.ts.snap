// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`$SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map([1, 2, 3], (item) => naitem) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.map([1, 2, 3], function (item))": Object {
      "ItemsPath": "$.heap3",
      "Iterator": Object {
        "StartAt": "return naitem",
        "States": Object {
          "1__return naitem": Object {
            "End": true,
            "InputPath": "$.heap2.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "naitem": Object {
            "Next": "1__return naitem",
            "Parameters": Object {
              "string.$": "States.Format('n{}{}',$.a,$.item)",
            },
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
          "return naitem": Object {
            "InputPath": "$.a",
            "Next": "naitem",
            "ResultPath": null,
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.map([1, 2, 3], function (item))",
      "Parameters": Object {
        "a": "a",
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "1__return $SFN.map([1, 2, 3], function (item))": Object {
      "End": true,
      "InputPath": "$.heap4",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map([1, 2, 3], function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map([1, 2, 3], function (item))": Object {
      "Next": "$SFN.map([1, 2, 3], function (item))",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map([1, 2, 3], (item) => nitem) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.map([1, 2, 3], function (item))": Object {
      "ItemsPath": "$.heap2",
      "Iterator": Object {
        "StartAt": "return nitem",
        "States": Object {
          "1__return nitem": Object {
            "End": true,
            "InputPath": "$.heap1.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "nitem": Object {
            "Next": "1__return nitem",
            "Parameters": Object {
              "string.$": "States.Format('n{}',$.item)",
            },
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "return nitem": Object {
            "InputPath": "$.item",
            "Next": "nitem",
            "ResultPath": null,
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.map([1, 2, 3], function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap3",
      "Type": "Map",
    },
    "1__return $SFN.map([1, 2, 3], function (item))": Object {
      "End": true,
      "InputPath": "$.heap3",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map([1, 2, 3], function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map([1, 2, 3], function (item))": Object {
      "Next": "$SFN.map([1, 2, 3], function (item))",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.map(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index) => item > index) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function (item,index))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > index": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function (item,index))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function (item,index))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function (item,index))": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function (item,index))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "check__[1, 2, 3, 4].filter(function (item,index))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,index)",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function (item,index))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function (item,index))": Object {
      "Next": "set__end__[1, 2, 3, 4].filter(function (item,index))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > index": Object {
      "Next": "1__return item > index",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "function (item,index)": Object {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "index",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function (item,index))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,index))",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function (item,index))",
      "Type": "Choice",
    },
    "index": Object {
      "InputPath": "$.heap1.arr[0].index",
      "Next": "return item > index",
      "ResultPath": "$.index",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,index))": Object {
      "Next": "check__[1, 2, 3, 4].filter(function (item,index))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item,index))": Object {
      "Next": "[1, 2, 3, 4].filter(function (item,index))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > index": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "StringGreaterThanPath": "$.index",
                      "Variable": "$.item",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "NumericGreaterThanPath": "$.index",
                      "Variable": "$.item",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > index",
        },
      ],
      "Default": "false__return item > index",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function (item,index))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function (item,index))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function (item,index))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function (item,index))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > index": Object {
      "Next": "1__return item > index",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index, array) => item > 1 + 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > arr[0]": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function (item,_,arr))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "arr": Object {
      "InputPath": "$.heap0",
      "Next": "return item > arr[0]",
      "ResultPath": "$.arr",
      "Type": "Pass",
    },
    "check__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,_,arr)",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "Next": "set__end__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > arr[0]": Object {
      "Next": "1__return item > arr[0]",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "function (item,_,arr)": Object {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "arr",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,arr))",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Type": "Choice",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "Next": "[1, 2, 3, 4].filter(function (item,_,arr))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > arr[0]": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "StringGreaterThanPath": "$.arr[0]",
                      "Variable": "$.item",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "NumericGreaterThanPath": "$.arr[0]",
                      "Variable": "$.item",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > arr[0]",
        },
      ],
      "Default": "false__return item > arr[0]",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function (item,_,arr))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function (item,_,arr))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,arr))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > arr[0]": Object {
      "Next": "1__return item > arr[0]",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index, array) => item > 1 + 2) 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > first": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,_,[ first ])",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "Next": "set__end__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > first": Object {
      "Next": "1__return item > first",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "first": Object {
      "InputPath": "$.heap0[0]",
      "Next": "return item > first",
      "ResultPath": "$.first",
      "Type": "Pass",
    },
    "function (item,_,[ first ])": Object {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "first",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Type": "Choice",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]": Object {
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "Next": "[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > first": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "StringGreaterThanPath": "$.first",
                      "Variable": "$.item",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.item",
                    },
                    Object {
                      "NumericGreaterThanPath": "$.first",
                      "Variable": "$.item",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > first",
        },
      ],
      "Default": "false__return item > first",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function (item,_,[ first ]))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > first": Object {
      "Next": "1__return item > first",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > {}) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [{}].filter(function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item === {a: \\"a\\"}": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[{}].filter(function (item))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [{}].filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[{}].filter(function (item))": Object {
      "Next": "check__[{}].filter(function (item))",
      "Parameters": Object {
        "arr": Array [
          Object {},
        ],
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "check__[{}].filter(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[{}].filter(function (item))",
      "Type": "Choice",
    },
    "end__[{}].filter(function (item))": Object {
      "Next": "set__end__[{}].filter(function (item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item === {a: \\"a\\"}": Object {
      "Next": "1__return item === {a: \\"a\\"}",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "handleResult__[{}].filter(function (item))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[{}].filter(function (item))",
        },
      ],
      "Default": "tail__[{}].filter(function (item))",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap1.arr[0]",
      "Next": "return item === {a: \\"a\\"}",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[{}].filter(function (item))": Object {
      "Next": "check__[{}].filter(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [{}].filter(function (item))": Object {
      "Next": "[{}].filter(function (item))",
      "Result": Array [
        Object {},
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item === {a: \\"a\\"}": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "true__return item === {a: \\"a\\"}",
        },
      ],
      "Default": "false__return item === {a: \\"a\\"}",
      "Type": "Choice",
    },
    "set__end__[{}].filter(function (item))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [{}].filter(function (item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[{}].filter(function (item))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[{}].filter(function (item))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item === {a: \\"a\\"}": Object {
      "Next": "1__return item === {a: \\"a\\"}",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > {}) 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [{value: \\"a\\"}].filter(function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return value === a": Object {
      "InputPath": "$.heap3",
      "Next": "handleResult__[{value: \\"a\\"}].filter(function (item))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [{value: \\"a\\"}].filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[{value: \\"a\\"}].filter(function (item))": Object {
      "Next": "check__[{value: \\"a\\"}].filter(function (item))",
      "Parameters": Object {
        "arr": Array [
          Object {
            "value": "a",
          },
        ],
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "a = \\"a\\"": Object {
      "Next": "{ value } = item",
      "Result": "a",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "check__[{value: \\"a\\"}].filter(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "a = \\"a\\"",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[{value: \\"a\\"}].filter(function (item))",
      "Type": "Choice",
    },
    "end__[{value: \\"a\\"}].filter(function (item))": Object {
      "Next": "set__end__[{value: \\"a\\"}].filter(function (item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return value === a": Object {
      "Next": "1__return value === a",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "handleResult__[{value: \\"a\\"}].filter(function (item))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[{value: \\"a\\"}].filter(function (item))",
        },
      ],
      "Default": "tail__[{value: \\"a\\"}].filter(function (item))",
      "Type": "Choice",
    },
    "predicateTrue__handleResult__[{value: \\"a\\"}].filter(function (item))": Object {
      "Next": "check__[{value: \\"a\\"}].filter(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [{value: \\"a\\"}].filter(function (item))": Object {
      "Next": "[{value: \\"a\\"}].filter(function (item))",
      "Result": Array [
        Object {
          "value": "a",
        },
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value === a": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.value",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.value",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.a",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.value",
                    },
                    Object {
                      "StringEqualsPath": "$.a",
                      "Variable": "$.value",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.value",
                    },
                    Object {
                      "BooleanEqualsPath": "$.a",
                      "Variable": "$.value",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.value",
                    },
                    Object {
                      "NumericEqualsPath": "$.a",
                      "Variable": "$.value",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return value === a",
        },
      ],
      "Default": "false__return value === a",
      "Type": "Choice",
    },
    "set__end__[{value: \\"a\\"}].filter(function (item))": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [{value: \\"a\\"}].filter(function (item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[{value: \\"a\\"}].filter(function (item))": Object {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[{value: \\"a\\"}].filter(function (item))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return value === a": Object {
      "Next": "1__return value === a",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "{ value } = item": Object {
      "InputPath": "$.heap1.arr[0].value",
      "Next": "return value === a",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > 1 + 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0[?(@>3)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item))": Object {
      "Next": "1__return [1, 2, 3, 4].filter(function (item))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3, 4].filter(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0[?(@>2)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3, 4].filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item))": Object {
      "Next": "1__return [1, 2, 3, 4].filter(function (item))",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > 2) assign 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = [1, 2, 3, 4].filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a": Object {
      "InputPath": "$.heap0[?(@>2)]",
      "Next": "return a",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [1, 2, 3, 4].filter(function (item))": Object {
      "Next": "a",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > 2) assign obj 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {a: [1, 2, 3, 4].filter(function (item))}": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.heap1",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {a: [1, 2, 3, 4].filter(function (item))} 1": Object {
      "InputPath": "$.heap0[?(@>2)]",
      "Next": "1__return {a: [1, 2, 3, 4].filter(function (item))}",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {a: [1, 2, 3, 4].filter(function (item))}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {a: [1, 2, 3, 4].filter(function (item))}": Object {
      "Next": "1__return {a: [1, 2, 3, 4].filter(function (item))} 1",
      "Result": Array [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3].map(item => item) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3].map(function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function (item)) 1": Object {
      "Next": "check__1__return [1, 2, 3].map(function (item)) 1",
      "Parameters": Object {
        "arr": Array [
          1,
          2,
          3,
        ],
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3].map(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__1__return [1, 2, 3].map(function (item)) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__1__return [1, 2, 3].map(function (item)) 1",
      "Type": "Choice",
    },
    "end__1__return [1, 2, 3].map(function (item)) 1": Object {
      "Next": "set__end__1__return [1, 2, 3].map(function (item)) 1",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__1__return [1, 2, 3].map(function (item)) 1": Object {
      "Next": "check__1__return [1, 2, 3].map(function (item)) 1",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3].map(function (item))": Object {
      "Next": "1__return [1, 2, 3].map(function (item)) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": Object {
      "InputPath": "$.heap1.arr[0]",
      "Next": "handleResult__1__return [1, 2, 3].map(function (item)) 1",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "set__end__1__return [1, 2, 3].map(function (item)) 1": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3].map(function (item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`\`template me \${await task(input.value)}\` 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return template me await task(input.value)": Object {
      "End": true,
      "InputPath": "$.heap2.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return template me await task(input.value)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return template me await task(input.value)": Object {
      "InputPath": "$.input.value",
      "Next": "template me await task(input.value)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "template me await task(input.value)": Object {
      "Next": "1__return template me await task(input.value)",
      "Parameters": Object {
        "string.$": "States.Format('template me {}',$.heap0)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`\`template me \${input.value}\` 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return template me input.value": Object {
      "End": true,
      "InputPath": "$.heap1.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "template me input.value",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "template me input.value": Object {
      "Next": "1__return template me input.value",
      "Parameters": Object {
        "string.$": "States.Format('template me {}',$.input.value)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`Boolean 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber": Object {
      "End": true,
      "Parameters": Object {
        "empty": false,
        "falseBoolean": false,
        "falseNumber": false,
        "falseString": false,
        "trueBoolean": true,
        "trueNumber": true,
        "trueObject": true,
        "trueString": true,
        "var.$": "$.heap0",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber: B",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNu": Object {
      "Next": "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber 1",
      "Result": false,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber: B": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.value",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.value",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.value",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNum",
        },
      ],
      "Default": "false__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNu",
      "Type": "Choice",
    },
    "true__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNum": Object {
      "Next": "1__return {trueString: Boolean(\\"1\\"), trueBoolean: Boolean(true), trueNumber 1",
      "Result": true,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`await Promise.all(input.list.map((item) => task(item)))).filter 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return await Promise.all(input.list.map(function (item))).filter(functio": Object {
      "End": true,
      "InputPath": "$.heap0[?(@!=null)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return await Promise.all(input.list.map(function (item))).fil",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await Promise.all(input.list.map(function (item))).filter(function (",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return await Promise.all(input.list.map(function (item))).filter(fun": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return task(item)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return await Promise.all(input.list.map(function (item))).filter(funct",
      "Type": "Choice",
    },
    "end__return await Promise.all(input.list.map(function (item))).filter(funct": Object {
      "Next": "set__end__return await Promise.all(input.list.map(function (item))).filter(",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return await Promise.all(input.list.map(function (item))).fil": Object {
      "Next": "check__return await Promise.all(input.list.map(function (item))).filter(fun",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return await Promise.all(input.list.map(function (item))).filter(function (": Object {
      "Next": "check__return await Promise.all(input.list.map(function (item))).filter(fun",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return await Promise.all(input.list.map(function (item))).filter(": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return await Promise.all(input.list.map(function (item))).filter(functio",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch({ message })",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch({ message })": Object {
      "InputPath": "$.fnl_tmp_0.message",
      "Next": "return message",
      "ResultPath": "$.message",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return message": Object {
      "End": true,
      "InputPath": "$.fnl_tmp_0.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
  },
}
`;

exports[`binding for 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return keyvalue": Object {
      "End": true,
      "InputPath": "$.heap2.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for({ key, value } = {key: \\"x\\", value: \\"y\\"};;)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for({ key, value } = {key: \\"x\\", value: \\"y\\"};;)": Object {
      "Next": "value",
      "Result": "x",
      "ResultPath": "$.key",
      "Type": "Pass",
    },
    "keyvalue": Object {
      "Next": "1__return keyvalue",
      "Parameters": Object {
        "string.$": "States.Format('{}{}','x','y')",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "value": Object {
      "Next": "keyvalue",
      "Result": "y",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding forOf 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "for({ key, value } of input.value)",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = keyvaluea 1": Object {
      "InputPath": "$.heap3.string",
      "Next": "tail__for({ key, value } of input.value)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for({ key, value } of input.value)": Object {
      "InputPath": "$.input.value",
      "Next": "hasNext__for({ key, value } of input.value)",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "hasNext__for({ key, value } of input.value)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "keyvaluea",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "keyvaluea": Object {
      "Next": "a = keyvaluea 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}',$.heap4[0].key,$.heap4[0].value,$.a)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for({ key, value } of input.value)": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for({ key, value } of input.value)",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding forOf weird values 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "for(val of input.value ?? [1, 2, 3])",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = vala 1": Object {
      "InputPath": "$.heap3.string",
      "Next": "tail__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = vala 3": Object {
      "InputPath": "$.heap8.string",
      "Next": "tail__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = vala 5": Object {
      "InputPath": "$.heap12.string",
      "Next": "tail__for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "false__for(val of input.value ?? [1, 2, 3])": Object {
      "Next": "for(val of input.value ?? [1, 2, 3]) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "false__for(val of input.value || [1, 2, 3])": Object {
      "Next": "for(val of input.value || [1, 2, 3]) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "for(val of a = \\"b\\" , true && [1, 2, 3])": Object {
      "Next": "for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "Result": "b",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(val of a = \\"b\\" , true && [1, 2, 3]) 1": Object {
      "Next": "hasNext__for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "for(val of input.value ?? [1, 2, 3])": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.value",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.value",
            },
          ],
          "Next": "true__for(val of input.value ?? [1, 2, 3])",
        },
      ],
      "Default": "false__for(val of input.value ?? [1, 2, 3])",
      "Type": "Choice",
    },
    "for(val of input.value ?? [1, 2, 3]) 1": Object {
      "InputPath": "$.heap0",
      "Next": "hasNext__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "for(val of input.value || [1, 2, 3])": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.value",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.value",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.value",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.value",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.value",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__for(val of input.value || [1, 2, 3])",
        },
      ],
      "Default": "false__for(val of input.value || [1, 2, 3])",
      "Type": "Choice",
    },
    "for(val of input.value || [1, 2, 3]) 1": Object {
      "InputPath": "$.heap5",
      "Next": "hasNext__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "hasNext__for(val of a = \\"b\\" , true && [1, 2, 3]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "vala 2",
          "Variable": "$.heap13[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "hasNext__for(val of input.value ?? [1, 2, 3]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "vala",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "for(val of input.value || [1, 2, 3])",
      "Type": "Choice",
    },
    "hasNext__for(val of input.value || [1, 2, 3]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "vala 1",
          "Variable": "$.heap9[0]",
        },
      ],
      "Default": "for(val of a = \\"b\\" , true && [1, 2, 3])",
      "Type": "Choice",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(val of a = \\"b\\" , true && [1, 2, 3]) 1": Object {
      "InputPath": "$.heap13[1:]",
      "Next": "hasNext__for(val of a = \\"b\\" , true && [1, 2, 3]) 1",
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "tail__for(val of input.value ?? [1, 2, 3]) 1": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "tail__for(val of input.value || [1, 2, 3]) 1": Object {
      "InputPath": "$.heap9[1:]",
      "Next": "hasNext__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "true__for(val of input.value ?? [1, 2, 3])": Object {
      "InputPath": "$.input.value",
      "Next": "for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "true__for(val of input.value || [1, 2, 3])": Object {
      "InputPath": "$.input.value",
      "Next": "for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "vala": Object {
      "Next": "a = vala 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap4[0],$.a)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "vala 1": Object {
      "Next": "a = vala 3",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap9[0],$.a)",
      },
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "vala 2": Object {
      "Next": "a = vala 5",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap13[0],$.a)",
      },
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions $SFN.forEach 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await $SFN.forEach(input.value, function ({ value: b, arr: [ c ] }))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.value, function ({ value: b, arr: [ c ] }))": Object {
      "ItemsPath": "$.input.value",
      "Iterator": Object {
        "StartAt": "function ({ value: b, arr: [ c ] })",
        "States": Object {
          "1__return bc": Object {
            "End": true,
            "InputPath": "$.heap2.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "bc": Object {
            "Next": "1__return bc",
            "Parameters": Object {
              "string.$": "States.Format('{}{}',$$.Map.Item.Value.value,$$.Map.Item.Value.arr[0])",
            },
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
          "function ({ value: b, arr: [ c ] })": Object {
            "InputPath": "$$.Map.Item.Value.value",
            "Next": "bc",
            "ResultPath": null,
            "Type": "Pass",
          },
        },
      },
      "Next": "return \\"success\\"",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
      },
      "ResultPath": null,
      "Type": "Map",
    },
    "return \\"success\\"": Object {
      "End": true,
      "Result": "success",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions $SFN.map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).": Object {
      "End": true,
      "InputPath": "$.heap5.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })). 1": Object {
      "InputPath": "$.heap3",
      "Next": "hasNext__1__return await $SFN.map(input.value, function ({ value: b, arr: [",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).joi",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return await $SFN.map(input.value, function ({ value: b, arr: [ ": Object {
      "Next": "tail__1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ",
      "Parameters": Object {
        "string.$": "States.Format('{},{}', $.heap5.string, $.heap4[0])",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__1__return await $SFN.map(input.value, function ({ value: b, arr: [": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap5",
              },
            },
          ],
          "Next": "initValue__1__return await $SFN.map(input.value, function ({ value: b, arr:",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap4[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap5",
              },
            },
          ],
          "Next": "returnEmpty__1__return await $SFN.map(input.value, function ({ value: b, ar",
        },
        Object {
          "IsPresent": true,
          "Next": "append__1__return await $SFN.map(input.value, function ({ value: b, arr: [ ",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).",
      "Type": "Choice",
    },
    "initValue__1__return await $SFN.map(input.value, function ({ value: b, arr:": Object {
      "InputPath": "$.heap4[0]",
      "Next": "tail__1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).joi": Object {
      "ItemsPath": "$.input.value",
      "Iterator": Object {
        "StartAt": "function ({ value: b, arr: [ c ] })",
        "States": Object {
          "1__return bc": Object {
            "End": true,
            "InputPath": "$.heap2.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "bc": Object {
            "Next": "1__return bc",
            "Parameters": Object {
              "string.$": "States.Format('{}{}',$$.Map.Item.Value.value,$$.Map.Item.Value.arr[0])",
            },
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
          "function ({ value: b, arr: [ c ] })": Object {
            "InputPath": "$$.Map.Item.Value.value",
            "Next": "bc",
            "ResultPath": null,
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })). 1",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
      },
      "ResultPath": "$.heap3",
      "Type": "Map",
    },
    "returnEmpty__1__return await $SFN.map(input.value, function ({ value: b, ar": Object {
      "Next": "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).",
      "Result": "",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "tail__1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__1__return await $SFN.map(input.value, function ({ value: b, arr: [",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions filter 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.value.filter(function ({ value: b, arr: [ c ] }))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.value.filter(function ({ value: b, arr: [ c ] }))": Object {
      "End": true,
      "InputPath": "$.input.value[?(@.value==@.arr[0])]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions forEach 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return bc": Object {
      "InputPath": "$.heap3.string",
      "Next": "tail__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "bc": Object {
      "Next": "1__return bc",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap0.arr[0].value,$.heap0.arr[0].arr[0])",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "check__input.value.forEach(function ({ value: b, arr: [ c ] }))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "bc",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "Type": "Choice",
    },
    "end__input.value.forEach(function ({ value: b, arr: [ c ] }))": Object {
      "Next": "return \\"success\\"",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.value.forEach(function ({ value: b, arr: [ c ] }))": Object {
      "Next": "check__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "Parameters": Object {
        "arr.$": "$.input.value",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return \\"success\\"": Object {
      "End": true,
      "Result": "success",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__input.value.forEach(function ({ value: b, arr: [ c ] }))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return bc": Object {
      "InputPath": "$.heap3.string",
      "Next": "handleResult__return input.value.map(function ({ value: b, arr: [ c ] })).j",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return input.value.map(function ({ value: b, arr: [ c ] })).join()": Object {
      "End": true,
      "InputPath": "$.heap5.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return input.value.map(function ({ value: b, arr: [ c ] })).join() 1": Object {
      "InputPath": "$.heap0",
      "Next": "hasNext__1__return input.value.map(function ({ value: b, arr: [ c ] })).joi",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return input.value.map(function ({ value: b, arr: [ c ] })).join": Object {
      "Next": "tail__1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": Object {
        "string.$": "States.Format('{},{}', $.heap5.string, $.heap4[0])",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "bc": Object {
      "Next": "1__return bc",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.heap0.arr[0].value,$.heap0.arr[0].arr[0])",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "check__return input.value.map(function ({ value: b, arr: [ c ] })).join()": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "bc",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Type": "Choice",
    },
    "end__return input.value.map(function ({ value: b, arr: [ c ] })).join()": Object {
      "Next": "set__end__return input.value.map(function ({ value: b, arr: [ c ] })).join(",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.value.map(function ({ value: b, arr: [ c ] })).j": Object {
      "Next": "check__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__1__return input.value.map(function ({ value: b, arr: [ c ] })).joi": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap5",
              },
            },
          ],
          "Next": "initValue__1__return input.value.map(function ({ value: b, arr: [ c ] })).j",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap4[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap5",
              },
            },
          ],
          "Next": "returnEmpty__1__return input.value.map(function ({ value: b, arr: [ c ] }))",
        },
        Object {
          "IsPresent": true,
          "Next": "append__1__return input.value.map(function ({ value: b, arr: [ c ] })).join",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Type": "Choice",
    },
    "initValue__1__return input.value.map(function ({ value: b, arr: [ c ] })).j": Object {
      "InputPath": "$.heap4[0]",
      "Next": "tail__1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "return input.value.map(function ({ value: b, arr: [ c ] })).join()": Object {
      "Next": "check__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": Object {
        "arr.$": "$.input.value",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "returnEmpty__1__return input.value.map(function ({ value: b, arr: [ c ] }))": Object {
      "Next": "1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Result": "",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "set__end__return input.value.map(function ({ value: b, arr: [ c ] })).join(": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.value.map(function ({ value: b, arr: [ c ] })).join() 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__1__return input.value.map(function ({ value: b, arr: [ c ] })).join()": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__1__return input.value.map(function ({ value: b, arr: [ c ] })).joi",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions use in map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return [1, 2, 3].map(function ()).join()": Object {
      "End": true,
      "InputPath": "$.heap6.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function ()).join() 1": Object {
      "InputPath": "$.heap1",
      "Next": "hasNext__1__return [1, 2, 3].map(function ()).join() 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function ()).join() 2": Object {
      "Next": "check__1__return [1, 2, 3].map(function ()).join() 2",
      "Parameters": Object {
        "arr": Array [
          1,
          2,
          3,
        ],
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "1__return valuev": Object {
      "InputPath": "$.heap4.string",
      "Next": "handleResult__1__return [1, 2, 3].map(function ()).join() 2",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return [1, 2, 3].map(function ()).join()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return [1, 2, 3].map(function ()).join() 1": Object {
      "Next": "tail__1__return [1, 2, 3].map(function ()).join() 1",
      "Parameters": Object {
        "string.$": "States.Format('{},{}', $.heap6.string, $.heap5[0])",
      },
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "check__1__return [1, 2, 3].map(function ()).join() 2": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "valuev",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__1__return [1, 2, 3].map(function ()).join() 2",
      "Type": "Choice",
    },
    "end__1__return [1, 2, 3].map(function ()).join() 2": Object {
      "Next": "set__end__1__return [1, 2, 3].map(function ()).join() 2",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__1__return [1, 2, 3].map(function ()).join() 2": Object {
      "Next": "check__1__return [1, 2, 3].map(function ()).join() 2",
      "Parameters": Object {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap1.arrStr, States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__1__return [1, 2, 3].map(function ()).join() 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap5[0]",
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap6",
              },
            },
          ],
          "Next": "initValue__1__return [1, 2, 3].map(function ()).join() 1",
        },
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap5[0]",
              },
            },
            Object {
              "Not": Object {
                "IsPresent": true,
                "Variable": "$.heap6",
              },
            },
          ],
          "Next": "returnEmpty__1__return [1, 2, 3].map(function ()).join() 1",
        },
        Object {
          "IsPresent": true,
          "Next": "append__1__return [1, 2, 3].map(function ()).join() 1",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "1__return [1, 2, 3].map(function ()).join()",
      "Type": "Choice",
    },
    "initValue__1__return [1, 2, 3].map(function ()).join() 1": Object {
      "InputPath": "$.heap5[0]",
      "Next": "tail__1__return [1, 2, 3].map(function ()).join() 1",
      "ResultPath": "$.heap6.string",
      "Type": "Pass",
    },
    "return [1, 2, 3].map(function ()).join()": Object {
      "Next": "1__return [1, 2, 3].map(function ()).join() 2",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "returnEmpty__1__return [1, 2, 3].map(function ()).join() 1": Object {
      "Next": "1__return [1, 2, 3].map(function ()).join()",
      "Result": "",
      "ResultPath": "$.heap6.string",
      "Type": "Pass",
    },
    "set__end__1__return [1, 2, 3].map(function ()).join() 2": Object {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3].map(function ()).join() 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__1__return [1, 2, 3].map(function ()).join() 1": Object {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__1__return [1, 2, 3].map(function ()).join() 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "valuev": Object {
      "Next": "1__return valuev",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$$.Execution.Input.value,$$.Execution.Input.obj.value)",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input.arr[0]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$$.Execution.Input.arr[0]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop array rest 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input.arr[1:]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop binding 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "value",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$$.Execution.Input.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$$.Execution.Input.value",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop nested 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input.value.b",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$$.Execution.Input.value.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop rename 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$$.Execution.Input.value",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$$.Execution.Input.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop with default 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "value = \\"b\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__value = \\"b\\"": Object {
      "Next": "value",
      "Result": "b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$.heap0",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value = \\"b\\"": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "value__value = \\"b\\"",
          "Variable": "$$.Execution.Input.value",
        },
      ],
      "Default": "default__value = \\"b\\"",
      "Type": "Choice",
    },
    "value__value = \\"b\\"": Object {
      "InputPath": "$$.Execution.Input.value",
      "Next": "value",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop with self default 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "value2 = value",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__value2 = value": Object {
      "InputPath": "$$.Execution.Input.value",
      "Next": "value2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value2": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value2": Object {
      "InputPath": "$.heap0",
      "Next": "return value2",
      "ResultPath": "$.value2",
      "Type": "Pass",
    },
    "value2 = value": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "value__value2 = value",
          "Variable": "$$.Execution.Input.value2",
        },
      ],
      "Default": "default__value2 = value",
      "Type": "Choice",
    },
    "value__value2 = value": Object {
      "InputPath": "$$.Execution.Input.value2",
      "Next": "value2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding unicode variable names 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$ = \\"$$\\"": Object {
      "Next": "ƒ = {π: Math.PI, ø: [], Ø: NaN, e: 2.718281828459045, root2: 2.718281828459",
      "Result": "$$",
      "ResultPath": "$.$",
      "Type": "Pass",
    },
    "1__return {ƒ: ƒ, out: H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗": Object {
      "End": true,
      "Parameters": Object {
        "out.$": "$.heap5.string",
        "ƒ.$": "$.heap1",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙": Object {
      "Next": "await task(H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍",
      "Result": 42,
      "ResultPath": "$.H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙̞̪̗ͥͤͩ̾͑̔͐ͅṮ̴̷̷̗̼͍̿̿̓̽͐H̙̙̔̄͜",
      "Type": "Pass",
    },
    "H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙ 2": Object {
      "Next": "1__return {ƒ: ƒ, out: H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}',$.H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙̞̪̗ͥͤͩ̾͑̔͐ͅṮ̴̷̷̗̼͍̿̿̓̽͐H̙̙̔̄͜,'___',$.$)",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍": Object {
      "InputPath": "$.H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙̞̪̗ͥͤͩ̾͑̔͐ͅṮ̴̷̷̗̼͍̿̿̓̽͐H̙̙̔̄͜",
      "Next": "$ = \\"$$\\"",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return {ƒ: ƒ, out: H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍": Object {
      "InputPath": "$.ƒ",
      "Next": "H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍̀͢M̴̡̲̭͍͇̼̟̯̦̉̒͠Ḛ̛̙ 2",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "ƒ = {π: Math.PI, ø: [], Ø: NaN, e: 2.718281828459045, root2: 2.718281828459": Object {
      "Next": "return {ƒ: ƒ, out: H̹̙̦̮͉̩̗̗ͧ̇̏̊̾Eͨ͆͒̆ͮ̃͏̷̮̣̫̤̣Cͯ̂͐͏̨̛͔̦̟͈̻O̜͎͍͙͚̬̝̣̽ͮ͐͗̀ͤ̍",
      "Result": Object {
        "A": 1.2824271291,
        "C10": 0.12345678910111213,
        "K": 2.685452001,
        "c": 299792458,
        "e": 2.718281828459045,
        "oo": null,
        "root2": 2.718281828459045,
        "Ø": null,
        "ø": Array [],
        "α": 2.5029,
        "γ": 1.30357,
        "δ": 4.6692,
        "ζ": 1.2020569,
        "π": 3.141592653589793,
        "φ": 1.61803398874,
      },
      "ResultPath": "$.ƒ",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ arr: [ b ] } = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.input.arr[0]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ arr: [ b ] } = input": Object {
      "InputPath": "$.input.arr[0]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable binding 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ value } = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.input.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ value } = input": Object {
      "InputPath": "$.input.value",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable nested 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ value: { b } } = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.input.value.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ value: { b } } = input": Object {
      "InputPath": "$.input.value.b",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable rename 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ value: b } = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": Object {
      "End": true,
      "InputPath": "$.input.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ value: b } = input": Object {
      "InputPath": "$.input.value",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable with default 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "{ value = \\"b\\" } = input",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__{ value = \\"b\\" } = input": Object {
      "Next": "value",
      "Result": "b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": Object {
      "InputPath": "$.heap0",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value__{ value = \\"b\\" } = input": Object {
      "InputPath": "$.input.value",
      "Next": "value",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "{ value = \\"b\\" } = input": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "value__{ value = \\"b\\" } = input",
          "Variable": "$.input.value",
        },
      ],
      "Default": "default__{ value = \\"b\\" } = input",
      "Type": "Choice",
    },
  },
}
`;

exports[`boolean logic 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "!input.a && input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__!input.a && input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.heap12",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.heap12",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.heap12",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.heap12",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.heap12",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap12",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.heap12",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.heap12",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap12",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.heap12",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a && input.b",
      "Type": "Choice",
    },
    "!input.a || input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__!input.a || input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.heap15",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.heap15",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.heap15",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.heap15",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.heap15",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap15",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.heap15",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.heap15",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap15",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.heap15",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a || input.b",
      "Type": "Choice",
    },
    "!input.a || input.b && input.a": Object {
      "Choices": Array [
        Object {
          "Next": "true__!input.a || input.b && input.a",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.heap19",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.heap19",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.heap19",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.heap19",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.heap19",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.heap19",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.heap19",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.heap19",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.heap19",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.heap19",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a || input.b && input.a",
      "Type": "Choice",
    },
    "!true": Object {
      "Choices": Array [
        Object {
          "Next": "true__!true",
          "Not": Object {
            "IsNull": false,
            "Variable": "$$.Execution.Id",
          },
        },
      ],
      "Default": "false__!true",
      "Type": "Choice",
    },
    "1__input.b && input.a": Object {
      "InputPath": "$.heap18",
      "Next": "!input.a || input.b && input.a",
      "ResultPath": "$.heap19",
      "Type": "Pass",
    },
    "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": Object {
      "End": true,
      "Parameters": Object {
        "and.$": "$.heap0",
        "andAllConstant": false,
        "andCondition.$": "$.heap4",
        "andFalsyConstantString": "",
        "andTruthyConstantString.$": "$.input.s",
        "andVariable.$": "$.heap23",
        "chain.$": "$.heap20",
        "not.$": "$.heap10",
        "notAnd.$": "$.heap13",
        "notOr.$": "$.heap16",
        "nullCondition.$": "$.heap8",
        "or.$": "$.heap2",
        "orAllConstant": true,
        "orCondition.$": "$.heap6",
        "orFalsyConstantString.$": "$.input.s",
        "orTruthyConstantString": "hi",
        "orVariable.$": "$.heap26",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "23__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": Object {
      "InputPath": "$.heap26",
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "ResultPath": "$.heap27",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {and: input.a && input.b, or: input.a || input.b, andCondition: inpu",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__!input.a && input.b": Object {
      "Next": "input.a || input.b 1",
      "Result": false,
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "false__!input.a || input.b": Object {
      "Next": "input.a || input.b && input.a",
      "Result": false,
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "false__!input.a || input.b && input.a": Object {
      "Next": "input.a && input.s",
      "Result": false,
      "ResultPath": "$.heap20",
      "Type": "Pass",
    },
    "false__!true": Object {
      "Next": "input.a && input.b",
      "Result": false,
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "false__input.a && input.b": Object {
      "InputPath": "$.input.b",
      "Next": "!input.a && input.b",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "false__input.a && input.s": Object {
      "InputPath": "$.input.s",
      "Next": "input.b || input.s",
      "ResultPath": "$.heap23",
      "Type": "Pass",
    },
    "false__input.a === input.b && input.s === \\"hello\\"": Object {
      "Next": "input.a === input.b || input.s === \\"hello\\"",
      "Result": false,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "false__input.a === input.b ?? input.s === \\"hello\\"": Object {
      "Next": "!true",
      "Result": false,
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "false__input.a === input.b || input.s === \\"hello\\"": Object {
      "Next": "input.a === input.b ?? input.s === \\"hello\\"",
      "Result": false,
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "false__input.a || input.b": Object {
      "InputPath": "$.input.b",
      "Next": "input.a === input.b && input.s === \\"hello\\"",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "false__input.a || input.b 1": Object {
      "InputPath": "$.input.b",
      "Next": "!input.a || input.b",
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "false__input.b && input.a": Object {
      "InputPath": "$.input.a",
      "Next": "1__input.b && input.a",
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "false__input.b || input.s": Object {
      "InputPath": "$.input.s",
      "Next": "23__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap26",
      "Type": "Pass",
    },
    "false__return {and: input.a && input.b, or: input.a || input.b, andConditio": Object {
      "InputPath": "$.input.b",
      "Next": "input.a || input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.a && input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__input.a && input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.a && input.b",
      "Type": "Choice",
    },
    "input.a && input.s": Object {
      "Choices": Array [
        Object {
          "Next": "true__input.a && input.s",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.a && input.s",
      "Type": "Choice",
    },
    "input.a === input.b && input.s === \\"hello\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsNull": true,
                          "Variable": "$.input.b",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "StringEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "BooleanEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "NumericEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.s",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.s",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.s",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a === input.b && input.s === \\"hello\\"",
        },
      ],
      "Default": "false__input.a === input.b && input.s === \\"hello\\"",
      "Type": "Choice",
    },
    "input.a === input.b ?? input.s === \\"hello\\"": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.a",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.input.b",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "StringEqualsPath": "$.input.b",
                      "Variable": "$.input.a",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEqualsPath": "$.input.b",
                      "Variable": "$.input.a",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "NumericEqualsPath": "$.input.b",
                      "Variable": "$.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a === input.b ?? input.s === \\"hello\\"",
        },
      ],
      "Default": "false__input.a === input.b ?? input.s === \\"hello\\"",
      "Type": "Choice",
    },
    "input.a === input.b || input.s === \\"hello\\"": Object {
      "Choices": Array [
        Object {
          "Next": "true__input.a === input.b || input.s === \\"hello\\"",
          "Or": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "Or": Array [
                    Object {
                      "And": Array [
                        Object {
                          "IsNull": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "IsNull": true,
                          "Variable": "$.input.b",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "StringEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "BooleanEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                    Object {
                      "And": Array [
                        Object {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        Object {
                          "NumericEqualsPath": "$.input.b",
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.s",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.s",
                    },
                    Object {
                      "StringEquals": "hello",
                      "Variable": "$.input.s",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "false__input.a === input.b || input.s === \\"hello\\"",
      "Type": "Choice",
    },
    "input.a || input.b": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b",
        },
      ],
      "Default": "false__input.a || input.b",
      "Type": "Choice",
    },
    "input.a || input.b && input.a": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b && input.a",
        },
        Object {
          "Next": "true__input.b && input.a",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.b",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.b",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.b",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.b",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.b",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.b",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.b && input.a",
      "Type": "Choice",
    },
    "input.a || input.b 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b 1",
        },
      ],
      "Default": "false__input.a || input.b 1",
      "Type": "Choice",
    },
    "input.b || input.s": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.b",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.b",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.b || input.s",
        },
      ],
      "Default": "false__input.b || input.s",
      "Type": "Choice",
    },
    "return {and: input.a && input.b, or: input.a || input.b, andCondition: inpu": Object {
      "Choices": Array [
        Object {
          "Next": "true__return {and: input.a && input.b, or: input.a || input.b, andCondition",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__return {and: input.a && input.b, or: input.a || input.b, andConditio",
      "Type": "Choice",
    },
    "true__!input.a && input.b": Object {
      "Next": "input.a || input.b 1",
      "Result": true,
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "true__!input.a || input.b": Object {
      "Next": "input.a || input.b && input.a",
      "Result": true,
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "true__!input.a || input.b && input.a": Object {
      "Next": "input.a && input.s",
      "Result": true,
      "ResultPath": "$.heap20",
      "Type": "Pass",
    },
    "true__!true": Object {
      "Next": "input.a && input.b",
      "Result": true,
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "true__input.a && input.b": Object {
      "InputPath": "$.input.a",
      "Next": "!input.a && input.b",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "true__input.a && input.s": Object {
      "InputPath": "$.input.a",
      "Next": "input.b || input.s",
      "ResultPath": "$.heap23",
      "Type": "Pass",
    },
    "true__input.a === input.b && input.s === \\"hello\\"": Object {
      "Next": "input.a === input.b || input.s === \\"hello\\"",
      "Result": true,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "true__input.a === input.b ?? input.s === \\"hello\\"": Object {
      "Next": "!true",
      "Result": true,
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "true__input.a === input.b || input.s === \\"hello\\"": Object {
      "Next": "input.a === input.b ?? input.s === \\"hello\\"",
      "Result": true,
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "true__input.a || input.b": Object {
      "InputPath": "$.input.a",
      "Next": "input.a === input.b && input.s === \\"hello\\"",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "true__input.a || input.b && input.a": Object {
      "InputPath": "$.input.a",
      "Next": "!input.a || input.b && input.a",
      "ResultPath": "$.heap19",
      "Type": "Pass",
    },
    "true__input.a || input.b 1": Object {
      "InputPath": "$.input.a",
      "Next": "!input.a || input.b",
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "true__input.b && input.a": Object {
      "InputPath": "$.input.b",
      "Next": "1__input.b && input.a",
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "true__input.b || input.s": Object {
      "InputPath": "$.input.b",
      "Next": "23__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap26",
      "Type": "Pass",
    },
    "true__return {and: input.a && input.b, or: input.a || input.b, andCondition": Object {
      "InputPath": "$.input.a",
      "Next": "input.a || input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`boolean return 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.a && input.b": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.a && input.b",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return input.a && input.b": Object {
      "InputPath": "$.input.b",
      "Next": "1__return input.a && input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return input.a && input.b": Object {
      "Choices": Array [
        Object {
          "Next": "true__return input.a && input.b",
          "Not": Object {
            "And": Array [
              Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  Object {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              Object {
                "Or": Array [
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "Not": Object {
                          "And": Array [
                            Object {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            Object {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      Object {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__return input.a && input.b",
      "Type": "Choice",
    },
    "true__return input.a && input.b": Object {
      "InputPath": "$.input.a",
      "Next": "1__return input.a && input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from do-while-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "break",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "break": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return null",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from for-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(item === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.item",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.item",
                },
              ],
            },
          ],
          "Next": "return null",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "if(item === \\"hello\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from while-loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return null",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`call AWS.DynamoDB.GetItem, then Lambda and return LiteralExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ": Object {
      "Next": "person",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
        "score.$": "$.heap4",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score} 1": Object {
      "InputPath": "$.person.Item.name.S",
      "Next": "2__return {id: person.Item.id.S, name: person.Item.name.S, score: score}",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "1__score = await computeScore({id: person.Item.id.S, name: person.Item.name": Object {
      "Next": "score",
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "2__return {id: person.Item.id.S, name: person.Item.name.S, score: score}": Object {
      "InputPath": "$.heap4",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score}",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.person.Item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "1__score = await computeScore({id: person.Item.id.S, name: person.Item.name",
      "Type": "Choice",
    },
    "person": Object {
      "InputPath": "$.heap1",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S, score: score}": Object {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score} 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "score": Object {
      "InputPath": "$.heap4",
      "Next": "return {id: person.Item.id.S, name: person.Item.name.S, score: score}",
      "ResultPath": "$.score",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Lambda Function, store as variable, return variable 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await getPerson({id: input.id})": Object {
      "Next": "person",
      "Parameters": Object {
        "id.$": "$.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "1__person = await getPerson({id: input.id})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "person": Object {
      "InputPath": "$.heap1",
      "Next": "return person",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "return person": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Lambda Function, store as variable, return variable no block 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return getPerson({id: input.id})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return getPerson({id: input.id}) 1": Object {
      "Next": "1__return getPerson({id: input.id})",
      "Parameters": Object {
        "id.$": "$.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "1__return getPerson({id: input.id}) 1",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Step Function describe from another Step Function 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1.describeExecution(\\"hello\\")": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1.describeExecution(\\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1.describeExecution(\\"hello\\")": Object {
      "Next": "1__return machine1.describeExecution(\\"hello\\")",
      "Parameters": Object {
        "ExecutionArn": "hello",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function describe from another Step Function from context 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1.describeExecution(input.id)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1.describeExecution(input.id)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1.describeExecution(input.id)": Object {
      "Next": "1__return machine1.describeExecution(input.id)",
      "Parameters": Object {
        "ExecutionArn.$": "$.input.id",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({})": Object {
      "Next": "1__return machine1({})",
      "Parameters": Object {
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with dynamic input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: input.value1}})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return machine1({input: {value: input.value1}}) 1": Object {
      "Next": "1__return machine1({input: {value: input.value1}})",
      "Parameters": Object {
        "Input": Object {
          "value.$": "$.input.value1",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "1__return machine1({input: {value: input.value1}}) 1",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Step Function from another Step Function with dynamic input field input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: input})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: input})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: input})": Object {
      "Next": "1__return machine1({input: input})",
      "Parameters": Object {
        "Input.$": "$.input",
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with input 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: \\"hello\\"}})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: {value: \\"hello\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: {value: \\"hello\\"}})": Object {
      "Next": "1__return machine1({input: {value: \\"hello\\"}})",
      "Parameters": Object {
        "Input": Object {
          "value": "hello",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with name and trace 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})": Object {
      "Next": "1__return machine1({name: \\"exec1\\", traceHeader: \\"1\\"})",
      "Parameters": Object {
        "Name": "exec1",
        "StateMachineArn": "__REPLACED_TOKEN",
        "TraceHeader": "1",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with name and trace from variables 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({name: input.name, traceHeader: input.header})": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({name: input.name, traceHeader: input.header})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({name: input.name, traceHeader: input.header})": Object {
      "Next": "1__return machine1({name: input.name, traceHeader: input.header})",
      "Parameters": Object {
        "Name.$": "$.input.name",
        "StateMachineArn": "__REPLACED_TOKEN",
        "TraceHeader.$": "$.input.header",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with null coalesce 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1": Object {
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Parameters": Object {
        "Input": Object {
          "value.$": "$.heap0",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.value",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.value",
            },
          ],
          "Next": "true__return machine1({input: {value: input.value ?? \\"default\\"}})",
        },
      ],
      "Default": "false__return machine1({input: {value: input.value ?? \\"default\\"}})",
      "Type": "Choice",
    },
    "true__return machine1({input: {value: input.value ?? \\"default\\"}})": Object {
      "InputPath": "$.input.value",
      "Next": "1__return machine1({input: {value: input.value ?? \\"default\\"}}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`catch and throw Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})": Object {
      "Cause": "{\\"property\\":\\"custom cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
    "try": Object {
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`catch and throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})": Object {
      "Cause": "{\\"property\\":\\"custom cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
    "try": Object {
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"custom cause\\"})",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`closure from map 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return aitem": Object {
      "InputPath": "$.heap3.string",
      "Next": "handleResult__return input.list.map(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return input.list.map(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"x\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"x\\"": Object {
      "Next": "return input.list.map(function (item))",
      "Result": "x",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "aitem": Object {
      "Next": "1__return aitem",
      "Parameters": Object {
        "string.$": "States.Format('{}{}','x',$.heap0.arr[0])",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "check__return input.list.map(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "aitem",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.map(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.map(function (item))": Object {
      "Next": "set__end__return input.list.map(function (item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.map(function (item))": Object {
      "Next": "check__return input.list.map(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return input.list.map(function (item))": Object {
      "Next": "check__return input.list.map(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__return input.list.map(function (item))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.map(function (item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`condition on task output 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if(await task() === 1)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "NumericEquals": 1,
                  "Variable": "$.heap0",
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(await task() === 1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(await task() === 1)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await task() === 1)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally call DynamoDB and then void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: input.id}": Object {
      "Next": "return null",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": null,
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "1__await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: input.id}",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally return void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally return void 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in do..while loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.key === \\"sam\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(input.key)": Object {
      "InputPath": "$.input.key",
      "Next": "if(input.key === \\"sam\\")",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "if(input.key === \\"sam\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.key",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.key",
                    },
                    Object {
                      "StringEquals": "sam",
                      "Variable": "$.input.key",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "if(input.key === \\"sam\\")",
        },
        Object {
          "IsNull": false,
          "Next": "await task(input.key)",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in for loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(item === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.item",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.item",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.item",
                },
              ],
            },
          ],
          "Next": "tail__for(item of input.items)",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "item": Object {
      "InputPath": "$.heap0[0]",
      "Next": "if(item === \\"hello\\")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in while loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(input.key)": Object {
      "InputPath": "$.input.key",
      "Next": "while (true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.key",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.key",
                    },
                    Object {
                      "StringEquals": "sam",
                      "Variable": "$.input.key",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "while (true)",
        },
        Object {
          "IsNull": false,
          "Next": "await task(input.key)",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`else if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val === \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "a",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "b",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yip\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "c",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"woop\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yip\\"": Object {
      "End": true,
      "Result": "yip",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`else if else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val === \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "a",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "b",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"woop\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`empty for 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(_ of [await task(input.items)])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input.items)]": Object {
      "Next": "for(_ of [await task(input.items)]) 1",
      "Parameters": Object {
        "arr.$": "States.Array($.heap0)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "for(_ of [await task(input.items)])": Object {
      "InputPath": "$.input.items",
      "Next": "[await task(input.items)]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(_ of [await task(input.items)]) 1": Object {
      "InputPath": "$.heap2.arr",
      "Next": "hasNext__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "hasNext__for(_ of [await task(input.items)]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "tail__for(_ of [await task(input.items)]) 1",
          "Variable": "$.heap3[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(_ of [await task(input.items)]) 1": Object {
      "InputPath": "$.heap3[1:]",
      "Next": "hasNext__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`empty function 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return null",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for (const i in [task(input)]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await task(await task(i))": Object {
      "InputPath": "$.heap3",
      "Next": "tail__for(i in [await task(input)]) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "1__for(i in [await task(input)]) 1": Object {
      "ItemsPath": "$.heap5",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in [await task(input)]) 1",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap5",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in [await task(input)])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input)]": Object {
      "Next": "for(i in [await task(input)]) 1",
      "Parameters": Object {
        "arr.$": "States.Array($.heap0)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "await task(await task(i))": Object {
      "InputPath": "$.heap5[0].index",
      "Next": "1__await task(await task(i))",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "for(i in [await task(input)])": Object {
      "InputPath": "$.input",
      "Next": "[await task(input)]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(i in [await task(input)]) 1": Object {
      "InputPath": "$.heap2.arr",
      "Next": "1__for(i in [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__for(i in [await task(input)]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "await task(await task(i))",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in [await task(input)]) 1": Object {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__for(i in [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`for (const i of [task(input)]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await task(await task(i))": Object {
      "InputPath": "$.heap3",
      "Next": "tail__for(i of [await task(input)]) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i of [await task(input)])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input)]": Object {
      "Next": "for(i of [await task(input)]) 1",
      "Parameters": Object {
        "arr.$": "States.Array($.heap0)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "await task(await task(i))": Object {
      "InputPath": "$.heap5[0]",
      "Next": "1__await task(await task(i))",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "for(i of [await task(input)])": Object {
      "InputPath": "$.input",
      "Next": "[await task(input)]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(i of [await task(input)]) 1": Object {
      "InputPath": "$.heap2.arr",
      "Next": "hasNext__for(i of [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__for(i of [await task(input)]) 1": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "await task(await task(i))",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i of [await task(input)]) 1": Object {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__for(i of [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`for assign 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap2",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "for(i in input.items)",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = i 1": Object {
      "InputPath": "$.heap1.string",
      "Next": "tail__for(i in input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = i 3": Object {
      "InputPath": "$.heap4.string",
      "Next": "tail__for(i of input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 3",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "i 1": Object {
      "Next": "a = i 1",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.heap2[0].index)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "i 3": Object {
      "Next": "a = i 3",
      "Parameters": Object {
        "string.$": "States.Format('{}',$.heap5[0])",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": Object {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`for break 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === \\"1\\")",
      "ResultPath": "$.fnls__0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "assignValue__i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return \\"end\\"",
      "Type": "Choice",
    },
    "i 1": Object {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === \\"1\\")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.i__1",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.i__1",
                },
              ],
            },
          ],
          "Next": "return \\"end\\"",
        },
      ],
      "Default": "return i",
      "Type": "Choice",
    },
    "if(input.items[i] === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnls__0__i",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnls__0__i",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.fnls__0__i",
                },
              ],
            },
          ],
          "Next": "for(i of input.items)",
        },
      ],
      "Default": "return input.items[i]",
      "Type": "Choice",
    },
    "return \\"end\\"": Object {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": Object {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": Object {
      "End": true,
      "InputPath": "$.fnls__0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for const i in items, items[i] 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "tail__for(i in input.items)",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for continue 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === \\"1\\")",
      "ResultPath": "$.fnls__0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "assignValue__i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return \\"end\\"",
      "Type": "Choice",
    },
    "i 1": Object {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === \\"1\\")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.i__1",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.i__1",
                },
              ],
            },
          ],
          "Next": "tail__for(i of input.items)",
        },
      ],
      "Default": "return i",
      "Type": "Choice",
    },
    "if(input.items[i] === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnls__0__i",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnls__0__i",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.fnls__0__i",
                },
              ],
            },
          ],
          "Next": "tail__for(i in input.items)",
        },
      ],
      "Default": "return input.items[i]",
      "Type": "Choice",
    },
    "return \\"end\\"": Object {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": Object {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": Object {
      "End": true,
      "InputPath": "$.fnls__0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for i in items, items[i] 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "tail__for(i in input.items)",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for return 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === \\"1\\")",
      "ResultPath": "$.fnls__0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "assignValue__i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return \\"end\\"",
      "Type": "Choice",
    },
    "i 1": Object {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === \\"1\\")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.i__1",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.i__1",
                },
              ],
            },
          ],
          "Next": "return i",
        },
      ],
      "Default": "tail__for(i of input.items)",
      "Type": "Choice",
    },
    "if(input.items[i] === \\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.fnls__0__i",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.fnls__0__i",
                },
                Object {
                  "StringEquals": "1",
                  "Variable": "$.fnls__0__i",
                },
              ],
            },
          ],
          "Next": "return input.items[i]",
        },
      ],
      "Default": "tail__for(i in input.items)",
      "Type": "Choice",
    },
    "return \\"end\\"": Object {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": Object {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": Object {
      "End": true,
      "InputPath": "$.fnls__0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) empty 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(;;)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "body__for(;;)": Object {
      "Next": "increment__for(;;)",
      "Type": "Pass",
    },
    "for(;;)": Object {
      "Next": "body__for(;;)",
      "Type": "Pass",
    },
    "increment__for(;;)": Object {
      "Next": "for(;;)",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i = 0;i < 3;i = if(i === 0))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericLessThan": 3,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "await task(i)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "1__if(i === 1)": Object {
      "InputPath": "$.heap1",
      "Next": "i = if(i === 0) 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i = 0;i < 3;i = if(i === 0))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(i)": Object {
      "InputPath": "$.i",
      "Next": "i = if(i === 0)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "false__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 3,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(i = 0;i < 3;i = if(i === 0))": Object {
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "Result": 0,
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "true__i = if(i === 0)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 1,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "true__if(i === 1)",
        },
      ],
      "Default": "false__if(i === 1)",
      "Type": "Choice",
    },
    "i = if(i === 0) 1": Object {
      "InputPath": "$.heap2",
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__i = if(i === 0)": Object {
      "Next": "i = if(i === 0) 1",
      "Result": 1,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "true__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 2,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop complex 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await task({i: i, j: j})": Object {
      "Next": "i = i.slice(1) , j = j.slice(1)",
      "Parameters": Object {
        "i.$": "$.i",
        "j.$": "$.j",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.i[0]",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.i[0]",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.i[0]",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.i[0]",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.i[0]",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.i[0]",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.i[0]",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.i[0]",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.i[0]",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.i[0]",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "1__await task({i: i, j: j})",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))": Object {
      "Next": "j",
      "Result": Array [
        1,
        2,
      ],
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = i.slice(1) , j = j.slice(1)": Object {
      "InputPath": "$.i[1:]",
      "Next": "j = j.slice(1)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "j": Object {
      "Next": "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "Result": Array [
        3,
        4,
      ],
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "j = j.slice(1)": Object {
      "InputPath": "$.j[1:]",
      "Next": "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop empty body 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(i = 0;i < 3;i = if(i === 0))": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericLessThan": 3,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "i = if(i === 0)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "1__if(i === 1)": Object {
      "InputPath": "$.heap0",
      "Next": "i = if(i === 0) 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(i = 0;i < 3;i = if(i === 0))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 3,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i = 0;i < 3;i = if(i === 0))": Object {
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "Result": 0,
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "true__i = if(i === 0)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 1,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "true__if(i === 1)",
        },
      ],
      "Default": "false__if(i === 1)",
      "Type": "Choice",
    },
    "i = if(i === 0) 1": Object {
      "InputPath": "$.heap1",
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__i = if(i === 0)": Object {
      "Next": "i = if(i === 0) 1",
      "Result": 1,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "true__if(i === 1)": Object {
      "Next": "1__if(i === 1)",
      "Result": 2,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) no statement 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "return null",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-in-loop variable initializer 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(x of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(x of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(x of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(x of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "x",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return x": Object {
      "End": true,
      "InputPath": "$.heap0[0]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "x": Object {
      "InputPath": "$.heap0[0]",
      "Next": "return x",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop and do nothing 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "tail__for(item of input.items)",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop inline array 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of [1, 2, 3])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of [1, 2, 3])": Object {
      "Next": "hasNext__for(item of [1, 2, 3])",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of [1, 2, 3])": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "tail__for(item of [1, 2, 3])",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of [1, 2, 3])": Object {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of [1, 2, 3])",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop over a list literal 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await computeScore({id: input.id, name: name})": Object {
      "Next": "tail__for(name of people)",
      "Parameters": Object {
        "id.$": "$.input.id",
        "name.$": "$.heap3[0]",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "people = [\\"sam\\", \\"sam\\"]",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(name of people)": Object {
      "Next": "hasNext__for(name of people)",
      "Parameters": Array [
        "sam",
        "sam",
      ],
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "hasNext__for(name of people)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "1__await computeScore({id: input.id, name: name})",
          "Variable": "$.heap3[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "people = [\\"sam\\", \\"sam\\"]": Object {
      "Next": "for(name of people)",
      "Result": Array [
        "sam",
        "sam",
      ],
      "ResultPath": "$.people",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(name of people)": Object {
      "InputPath": "$.heap3[1:]",
      "Next": "hasNext__for(name of people)",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-of { try { task() } catch (err) { if(err) throw } finally { task() } } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"you dun' goofed\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "try",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(err.message === \\"you dun' goofed\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "you dun' goofed",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "InputPath": "$.heap2[0]",
      "Next": "finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
  },
}
`;

exports[`for-of-loop variable initializer 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(x in input.items)": Object {
      "ItemsPath": "$.heap0",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(x in input.items)",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(x in input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__x": Object {
      "InputPath": "$.heap0[0].item",
      "Next": "return x",
      "ResultPath": "$.fnls__0__x",
      "Type": "Pass",
    },
    "for(x in input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "1__for(x in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(x in input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "x",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return x": Object {
      "End": true,
      "InputPath": "$.heap0[0].index",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "x": Object {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__x",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
  },
}
`;

exports[`if (?? === typeof x) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if_1__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "StringEquals": "undefined",
                  "Variable": "$.heap0",
                },
              ],
            },
          ],
          "Next": "return \\"undefined\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_2__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_2__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_2__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_2__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap1",
                },
                Object {
                  "StringEquals": "string",
                  "Variable": "$.heap1",
                },
              ],
            },
          ],
          "Next": "return \\"string\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_3__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_3__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_3__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_3__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "StringEquals": "boolean",
                  "Variable": "$.heap2",
                },
              ],
            },
          ],
          "Next": "return \\"boolean\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_4__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_4__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_4__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_4__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap3",
                },
                Object {
                  "StringEquals": "number",
                  "Variable": "$.heap3",
                },
              ],
            },
          ],
          "Next": "return \\"number\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_5__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_5__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_5__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_5__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap4",
                },
                Object {
                  "StringEquals": "bigint",
                  "Variable": "$.heap4",
                },
              ],
            },
          ],
          "Next": "return \\"bigint\\"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "boolean__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return \\"null\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_1__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_1__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_1__if(input.id === undefined)",
      "Type": "Choice",
    },
    "number__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "number__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "object__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "object__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return \\"bigint\\"": Object {
      "End": true,
      "Result": "bigint",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"boolean\\"": Object {
      "End": true,
      "Result": "boolean",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"null\\"": Object {
      "End": true,
      "Result": "null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"number\\"": Object {
      "End": true,
      "Result": "number",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"string\\"": Object {
      "End": true,
      "Result": "string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"undefined\\"": Object {
      "End": true,
      "Result": "undefined",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "string__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "string__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "undefined__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "undefined__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`if (typeof x === ??) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if_1__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "StringEquals": "undefined",
                  "Variable": "$.heap0",
                },
              ],
            },
          ],
          "Next": "return \\"undefined\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_2__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_2__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_2__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_2__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_2__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap1",
                },
                Object {
                  "StringEquals": "string",
                  "Variable": "$.heap1",
                },
              ],
            },
          ],
          "Next": "return \\"string\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_3__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_3__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_3__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_3__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_3__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap2",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap2",
                },
                Object {
                  "StringEquals": "boolean",
                  "Variable": "$.heap2",
                },
              ],
            },
          ],
          "Next": "return \\"boolean\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_4__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_4__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_4__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_4__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_4__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap3",
                },
                Object {
                  "StringEquals": "number",
                  "Variable": "$.heap3",
                },
              ],
            },
          ],
          "Next": "return \\"number\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_5__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_5__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_5__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_5__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_5__if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap4",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.heap4",
                },
                Object {
                  "StringEquals": "bigint",
                  "Variable": "$.heap4",
                },
              ],
            },
          ],
          "Next": "return \\"bigint\\"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "boolean__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "if(input.id === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return \\"null\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_1__if(input.id === undefined)",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_1__if(input.id === undefined)",
        },
        Object {
          "IsPresent": true,
          "Next": "object__if_1__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_1__if(input.id === undefined)",
      "Type": "Choice",
    },
    "number__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "number__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "object__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "object__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return \\"bigint\\"": Object {
      "End": true,
      "Result": "bigint",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"boolean\\"": Object {
      "End": true,
      "Result": "boolean",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"null\\"": Object {
      "End": true,
      "Result": "null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"number\\"": Object {
      "End": true,
      "Result": "number",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"string\\"": Object {
      "End": true,
      "Result": "string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"undefined\\"": Object {
      "End": true,
      "Result": "undefined",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "string__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "string__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "undefined__if_1__if(input.id === undefined)": Object {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__if_2__if(input.id === undefined)": Object {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "undefined__if_3__if(input.id === undefined)": Object {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__if_4__if(input.id === undefined)": Object {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__if_5__if(input.id === undefined)": Object {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "return \\"yup\\"",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val === \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "StringEquals": "a",
                  "Variable": "$.input.val",
                },
              ],
            },
          ],
          "Next": "return \\"yup\\"",
        },
      ],
      "Default": "return \\"noop\\"",
      "Type": "Choice",
    },
    "return \\"noop\\"": Object {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"yup\\"": Object {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.val !== \\"a\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val !== \\"a\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "Not": Object {
                "And": Array [
                  Object {
                    "IsPresent": true,
                    "Variable": "$.input.val",
                  },
                  Object {
                    "And": Array [
                      Object {
                        "IsString": true,
                        "Variable": "$.input.val",
                      },
                      Object {
                        "StringEquals": "a",
                        "Variable": "$.input.val",
                      },
                    ],
                  },
                ],
              },
            },
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.val",
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    Object {
                      "StringEquals": "b",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hullo\\"",
        },
        Object {
          "Next": "return \\"woop\\"",
          "Not": Object {
            "And": Array [
              Object {
                "IsPresent": true,
                "Variable": "$.input.val",
              },
              Object {
                "And": Array [
                  Object {
                    "IsString": true,
                    "Variable": "$.input.val",
                  },
                  Object {
                    "StringEquals": "a",
                    "Variable": "$.input.val",
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "return \\"woop\\"",
      "Type": "Choice",
    },
    "return \\"hullo\\"": Object {
      "End": true,
      "Result": "hullo",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if invoke 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__if(await task())": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.heap0",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.heap0",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.heap0",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return \\"hi\\"",
        },
      ],
      "Default": "return \\"woop\\"",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "if(await task())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(await task())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return \\"hi\\"": Object {
      "End": true,
      "Result": "hi",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"woop\\"": Object {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if-else 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if-else-if 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "if(input.id === \\"hello\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === \\"hello\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "world",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "return \\"world\\"",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`import from express state machine into machine 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await machine({input: {id: \\"hi\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await machine({input: {id: \\"hi\\"}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "Input": Object {
          "id": "hi",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`import from state machine into state machine 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await machine({input: {id: \\"hi\\"}})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await machine({input: {id: \\"hi\\"}})": Object {
      "Next": "return null",
      "Parameters": Object {
        "Input": Object {
          "id": "hi",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`input.b ? task() : task(input) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__false__return if(input.b)": Object {
      "InputPath": "$.heap1",
      "Next": "1__return if(input.b)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return if(input.b)": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__true__return if(input.b)": Object {
      "InputPath": "$.heap0",
      "Next": "1__return if(input.b)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return if(input.b)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return if(input.b)": Object {
      "InputPath": "$.input",
      "Next": "1__false__return if(input.b)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return if(input.b)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.b",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.b",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.b",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.b",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.b",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return if(input.b)",
        },
      ],
      "Default": "false__return if(input.b)",
      "Type": "Choice",
    },
    "true__return if(input.b)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__true__return if(input.b)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`input.list.map((item) => item).filter((item) => item.length > 2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.map(function (item)).filter(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0[?(@.length>2)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.map(function (item)).filter(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.map(function (item)).filter(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.map(function (item)).filter(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.map(function (item)).filter(function (item))": Object {
      "Next": "set__end__return input.list.map(function (item)).filter(function (item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.map(function (item)).filter(function (item)": Object {
      "Next": "check__return input.list.map(function (item)).filter(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return input.list.map(function (item)).filter(function (item))": Object {
      "Next": "check__return input.list.map(function (item)).filter(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "handleResult__return input.list.map(function (item)).filter(function (item)",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "set__end__return input.list.map(function (item)).filter(function (item))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.map(function (item)).filter(function (item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`let and set 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = null",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + \\" world\\"",
      "Result": "hello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + \\" world\\"": Object {
      "Next": "a = \\"hello\\" + 1",
      "Result": "hello world",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + 1": Object {
      "Next": "a = 1 + \\"hello\\"",
      "Result": "hello1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + [\\"world\\"]": Object {
      "Next": "return a",
      "Result": "helloworld",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + null": Object {
      "Next": "a = [null]",
      "Result": "hellonull",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + true": Object {
      "Next": "a = false + \\"hello\\"",
      "Result": "hellotrue",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"hello\\" + {place: \\"world\\"}": Object {
      "Next": "a = \\"hello\\" + [\\"world\\"]",
      "Result": "hello[object Object]",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = -1": Object {
      "Next": "a = -100",
      "Result": -1,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = -100": Object {
      "Next": "a = 1 + 2",
      "Result": -100,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 0": Object {
      "Next": "a = -1",
      "Result": 0,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1 + \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + true",
      "Result": "1hello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1 + 2": Object {
      "Next": "a = \\"hello\\"",
      "Result": 3,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [-1]": Object {
      "Next": "a = [true]",
      "Result": Array [
        -1,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [1]": Object {
      "Next": "a = [-1]",
      "Result": Array [
        1,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [null]": Object {
      "Next": "a = [1]",
      "Result": Array [
        null,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [true]": Object {
      "Next": "a = [{key: \\"value\\"}]",
      "Result": Array [
        true,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [{key: \\"value\\"}]": Object {
      "Next": "a = {key: \\"value\\"}",
      "Result": Array [
        Object {
          "key": "value",
        },
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = a": Object {
      "InputPath": "$.a",
      "Next": "a = \\"hello\\" + {place: \\"world\\"}",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = false": Object {
      "Next": "a = 0",
      "Result": false,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = false + \\"hello\\"": Object {
      "Next": "a = null + \\"hello\\"",
      "Result": "falsehello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "a = true",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null + \\"hello\\"": Object {
      "Next": "a = \\"hello\\" + null",
      "Result": "nullhello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = true": Object {
      "Next": "a = false",
      "Result": true,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {1: \\"value\\"}": Object {
      "Next": "a = a",
      "Result": Object {
        "1": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {key: \\"value\\"}": Object {
      "Next": "a = {1: \\"value\\"}",
      "Result": Object {
        "key": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`let cond; do { cond = task() } while (cond) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "cond = await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.cond",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "cond = await task() 1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "cond = await task() 1": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 2": Object {
      "InputPath": "$.heap0",
      "Next": "cond = await task()",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`let empty 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"b\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"b\\"": Object {
      "Next": "return a",
      "Result": "b",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return a": Object {
      "End": true,
      "Parameters": "b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.filter(item => item.length > 2).map(item => item) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.filter(function (item)).map(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.filter(function (item)).map(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.filter(function (item)).map(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.filter(function (item)).map(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.filter(function (item)).map(function (item))": Object {
      "Next": "set__end__return input.list.filter(function (item)).map(function (item))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.filter(function (item)).map(function (item)": Object {
      "Next": "check__return input.list.filter(function (item)).map(function (item))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return input.list.filter(function (item)).map(function (item))": Object {
      "Next": "check__return input.list.filter(function (item)).map(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list[?(@.length>2)]",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "handleResult__return input.list.filter(function (item)).map(function (item)",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "set__end__return input.list.filter(function (item)).map(function (item))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.filter(function (item)).map(function (item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.filter(item => item.length > 2).map(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.filter(function (item)).map(function (item": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.filter(function (item)).map(fun",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.filter(function (item)).map(function (item)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.filter(function (item)).map(function (": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return task(item)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.filter(function (item)).map(function (it",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.filter(function (item)).map(function (it": Object {
      "Next": "set__end__return Promise.all(input.list.filter(function (item)).map(functio",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.filter(function (item)).map(fun": Object {
      "Next": "check__return Promise.all(input.list.filter(function (item)).map(function (",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return Promise.all(input.list.filter(function (item)).map(function (item)))": Object {
      "Next": "check__return Promise.all(input.list.filter(function (item)).map(function (",
      "Parameters": Object {
        "arr.$": "$.input.list[?(@.length>2)]",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.filter(function (item)).map(functio": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.filter(function (item)).map(function (item",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach((item, i) => if (i == 0) task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function (item,i))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function (item,i))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item,i))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item,i))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item,i))": Object {
      "Next": "1__return input.list.forEach(function (item,i))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return input.list.forEach(function (item,i))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return input.list.forEach(function (item,i))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
      },
      "Type": "Map",
    },
    "return null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function (item,i))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach((item, i, list) => if (i == 0) task(item) else task(list[0])) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function (item,i))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(input.list[0])": Object {
      "InputPath": "$.heap2",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function (item,i))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item,i))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item,i))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item,i))": Object {
      "Next": "1__return input.list.forEach(function (item,i))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return task(input.list[0])",
      "Type": "Choice",
    },
    "return input.list.forEach(function (item,i))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return input.list.forEach(function (item,i))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
      },
      "Type": "Map",
    },
    "return task(input.list[0])": Object {
      "InputPath": "$.input.list[0]",
      "Next": "1__return task(input.list[0])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function (item,i))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach(item => ) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "a = \\"\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"\\"": Object {
      "Next": "input.list.forEach(function (item))",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = aitem 1": Object {
      "InputPath": "$.heap3.string",
      "Next": "return null 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "aitem": Object {
      "Next": "a = aitem 1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}',$.a,$.heap0.arr[0])",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "check__input.list.forEach(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "aitem",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__input.list.forEach(function (item))",
      "Type": "Choice",
    },
    "end__input.list.forEach(function (item))": Object {
      "Next": "return null",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.list.forEach(function (item))": Object {
      "Next": "check__input.list.forEach(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null 1": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "tail__input.list.forEach(function (item))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return task(item)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item))": Object {
      "Next": "1__return input.list.forEach(function (item))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return input.list.forEach(function (item))": Object {
      "Next": "check__return input.list.forEach(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function (item))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map((item, i) => if (i == 0) task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function (item,i)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item,i)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item,i)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item,i)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item,i)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return Promise.all(input.list.map(function (item,i)))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "return null": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function (item,i)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map((item, i, list) => if (i == 0) task(item) else task(list[0])) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function (item,i)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(input.list[0])": Object {
      "InputPath": "$.heap2",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item,i)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item,i)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item,i)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": Object {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item,i)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": Object {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.i",
            },
            Object {
              "And": Array [
                Object {
                  "IsNumeric": true,
                  "Variable": "$.i",
                },
                Object {
                  "NumericEquals": 0,
                  "Variable": "$.i",
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return task(input.list[0])",
      "Type": "Choice",
    },
    "return Promise.all(input.list.map(function (item,i)))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": Object {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": Object {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "return task(input.list[0])": Object {
      "InputPath": "$.input.list[0]",
      "Next": "1__return task(input.list[0])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return task(item)": Object {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function (item,i)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map(item => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function (item)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return task(item)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function (item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "InputPath": "$.heap0.arr[0]",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function (item)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`nested try-catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Cause": "{\\"message\\":\\"error3\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
    "catch__try 1": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "error2",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try 1",
      "Result": Object {
        "message": "error1",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`null coalesce logic 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {null: input.a ?? input.b}": Object {
      "End": true,
      "Parameters": Object {
        "null.$": "$.heap0",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {null: input.a ?? input.b} 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__return {null: input.a ?? input.b}",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {null: input.a ?? input.b}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return {null: input.a ?? input.b}": Object {
      "InputPath": "$.input.b",
      "Next": "1__return {null: input.a ?? input.b} 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return {null: input.a ?? input.b}": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.a",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.a",
            },
          ],
          "Next": "true__return {null: input.a ?? input.b}",
        },
      ],
      "Default": "false__return {null: input.a ?? input.b}",
      "Type": "Choice",
    },
    "true__return {null: input.a ?? input.b}": Object {
      "InputPath": "$.input.a",
      "Next": "1__return {null: input.a ?? input.b} 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`parse json 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\")": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\") 1": Object {
      "Next": "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\")",
      "Parameters": Object {
        "string.$": "States.StringToJson('{ a: 'a', b: { c: 'c' } }')",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "1__return JSON.parse(\\"{ a: 'a', b: { c: 'c' } }\\") 1",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`put an event bus event 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail": Object {
      "Next": "return null",
      "Parameters": Object {
        "Entries": Array [
          Object {
            "Account": "123456789012",
            "Detail": Object {
              "value.$": "$.heap0",
            },
            "DetailType": "someEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Id": "bbbbbbbb-eeee-eeee-eeee-ffffffffffff",
            "Region": "us-east-1",
            "Resources": Array [
              "__REPLACED_ARN",
            ],
            "Source": "sfnTest",
            "Time": "2022-08-05T16:19:03Z",
            "Version": "1",
          },
        ],
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": null,
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "1__await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`put multiple event bus events 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "2__await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail": Object {
      "Next": "return null",
      "Parameters": Object {
        "Entries": Array [
          Object {
            "Detail": Object {
              "value.$": "$.heap0",
            },
            "DetailType": "someEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
          Object {
            "Detail": Object {
              "constant": "hi",
              "value.$": "$.heap1",
            },
            "DetailType": "someOtherEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
        ],
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": null,
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "2__await bus.putEvents({detail-type: \\"someEvent\\", source: \\"sfnTest\\", detail",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`result = $SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`result = $SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "result = await $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "result": Object {
      "InputPath": "$.heap1",
      "Next": "return result",
      "ResultPath": "$.result",
      "Type": "Pass",
    },
    "result = await $SFN.map(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "result",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return result": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return $SFN.forEach(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": null,
            "Type": "Task",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.forEach(list, (item) => try { task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__await task(item)",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": null,
            "Type": "Task",
          },
          "catch__await task(item)": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.forEach(list, {maxConcurrency: 2} (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "await task(item)",
        "States": Object {
          "await task(item)": Object {
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": null,
            "Type": "Task",
          },
          "return null": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 2,
      "Next": "1__return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, (item) => try { task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "try",
        "States": Object {
          "1__try": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "catch__try": Object {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "try": Object {
            "Catch": Array [
              Object {
                "ErrorEquals": Array [
                  "States.ALL",
                ],
                "Next": "catch__try",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "1__try",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.map(input.list, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, {maxConcurrency: 2} (item) => task(item)) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.map(input.list, {maxConcurrency: 2}, function (item))": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.map(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, {maxConcurrency: 2}, function (item))": Object {
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 2,
      "Next": "1__return $SFN.map(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.parallel(() => "hello", () => "world")) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.parallel(function (), function ())": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.parallel(function (), function ())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel(function (), function ())": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "return \\"world\\"",
          "States": Object {
            "return \\"world\\"": Object {
              "End": true,
              "Result": "world",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel(function (), function ())",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return $SFN.parallel(() => {})) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return $SFN.parallel(function ())": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return $SFN.parallel(function ())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel(function ())": Object {
      "Branches": Array [
        Object {
          "StartAt": "return null",
          "States": Object {
            "return null": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel(function ())",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return $SFN.parallel(() => try { task() } catch { return null })) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try 1": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try 1",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try 1": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try 1": Object {
      "Branches": Array [
        Object {
          "StartAt": "try",
          "States": Object {
            "1__try": Object {
              "End": true,
              "InputPath": "$.heap0",
              "ResultPath": "$",
              "Type": "Pass",
            },
            "catch__try": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
            "try": Object {
              "Catch": Array [
                Object {
                  "ErrorEquals": Array [
                    "States.ALL",
                  ],
                  "Next": "catch__try",
                  "ResultPath": null,
                },
              ],
              "InputPath": "$.fnl_context.null",
              "Next": "1__try",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap0",
              "Type": "Task",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try 1",
          "ResultPath": null,
        },
      ],
      "Next": "1__try 1",
      "ResultPath": "$.heap1",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return AWS.DynamoDB.GetItem 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ": Object {
      "Next": "person",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S} 1": Object {
      "InputPath": "$.person.Item.name.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S}",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.person.Item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return {id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": Object {
      "InputPath": "$.heap1",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S} 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.DynamoDB.GetItem dynamic parameters 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ": Object {
      "Next": "person",
      "Parameters": Object {
        "Key": Object {
          "id": Object {
            "S.$": "$.heap0",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "End": true,
      "Parameters": Object {
        "id.$": "$.person.Item.id.S",
        "name.$": "$.person.Item.name.S",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S} 1": Object {
      "InputPath": "$.person.Item.name.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S}",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: ": Object {
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.person.Item",
            },
            Object {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return {id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": Object {
      "InputPath": "$.heap2",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: inp": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.id",
            },
          ],
          "Next": "true__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {",
        },
      ],
      "Default": "false__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: ",
      "Type": "Choice",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S}": Object {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S} 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "true__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {": Object {
      "InputPath": "$.input.id",
      "Next": "1__person = await $AWS.DynamoDB.GetItem({Table: personTable, Key: {id: {S: ",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.Lambda.Invoke dynamic parameters 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ": Object {
      "End": true,
      "InputPath": "$.heap2.Payload",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1": Object {
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ",
      "Parameters": Object {
        "FunctionName": "__REPLACED_TOKEN",
        "Payload": Object {
          "id.$": "$.heap0",
        },
      },
      "Resource": "__REPLACED_ARN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ?? ",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input": Object {
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ?? ": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.id",
            },
          ],
          "Next": "true__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.",
        },
      ],
      "Default": "false__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input",
      "Type": "Choice",
    },
    "true__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.": Object {
      "InputPath": "$.input.id",
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input[\\"id special\\"]",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input[\\"id special\\"]": Object {
      "End": true,
      "InputPath": "$.input.input.id special",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr number 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.arr[0]",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.arr[0]": Object {
      "End": true,
      "InputPath": "$.input.input.arr[0]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return PropAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.id": Object {
      "End": true,
      "InputPath": "$.input.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return a single Lambda Function call 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return getPerson({id: input.id})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return getPerson({id: input.id}) 1": Object {
      "Next": "1__return getPerson({id: input.id})",
      "Parameters": Object {
        "id.$": "$.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "1__return getPerson({id: input.id}) 1",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return await task(await task()) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(await task())": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(await task()) 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__return task(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(await task())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(await task())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return task(await task()) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return cond ? task(1) : task(2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__false__return if(input.cond)": Object {
      "InputPath": "$.heap1",
      "Next": "1__return if(input.cond)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return if(input.cond)": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__true__return if(input.cond)": Object {
      "InputPath": "$.heap0",
      "Next": "1__return if(input.cond)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return if(input.cond)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return if(input.cond)": Object {
      "Next": "1__false__return if(input.cond)",
      "Parameters": 2,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return if(input.cond)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.cond",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.cond",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.cond",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.cond",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.cond",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.cond",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.cond",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.cond",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.cond",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.cond",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return if(input.cond)",
        },
      ],
      "Default": "false__return if(input.cond)",
      "Type": "Choice",
    },
    "true__return if(input.cond)": Object {
      "Next": "1__true__return if(input.cond)",
      "Parameters": 1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return identifier 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.id": Object {
      "End": true,
      "InputPath": "$.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(-1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(-1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(-1)": Object {
      "End": true,
      "InputPath": "$.input.items[-1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(0, -1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(0, -1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(0, -1)": Object {
      "End": true,
      "InputPath": "$.input.items[0:-1]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1)": Object {
      "End": true,
      "InputPath": "$.input.items[1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1, 3) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1, 3)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1, 3)": Object {
      "End": true,
      "InputPath": "$.input.items[1:3]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1, undefined) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.items.slice(1, undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1, undefined)": Object {
      "End": true,
      "InputPath": "$.input.items[1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return optional PropAccessExpr 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return input.input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.id": Object {
      "End": true,
      "InputPath": "$.input.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task({ key: items.filter(*) }) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({equals: input.items.filter(function (item)), and: input.ite": Object {
      "End": true,
      "InputPath": "$.heap3",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({equals: input.items.filter(function (item)), and: input.ite 1": Object {
      "Next": "1__return task({equals: input.items.filter(function (item)), and: input.ite",
      "Parameters": Object {
        "and.$": "$.heap1",
        "equals.$": "$.heap0",
        "or.$": "$.heap2",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "1__return task({equals: input.items.filter(function (item)), and: input.ite 2": Object {
      "InputPath": "$.input.items[?(@.str=='hello'&&@.items[0]=='hello')]",
      "Next": "2__return task({equals: input.items.filter(function (item)), and: input.ite",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "2__return task({equals: input.items.filter(function (item)), and: input.ite": Object {
      "InputPath": "$.input.items[?(@.str=='hello'||@.items[0]=='hello')]",
      "Next": "1__return task({equals: input.items.filter(function (item)), and: input.ite 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({equals: input.items.filter(function (item)), and: input.items.",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({equals: input.items.filter(function (item)), and: input.items.": Object {
      "InputPath": "$.input.items[?(@.str=='hello')]",
      "Next": "1__return task({equals: input.items.filter(function (item)), and: input.ite 2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task({key: items.slice(1, 3)}) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({key: input.items.slice(1, 3)})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key: input.items.slice(1, 3)}) 1": Object {
      "Next": "1__return task({key: input.items.slice(1, 3)})",
      "Parameters": Object {
        "key.$": "$.heap0",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({key: input.items.slice(1, 3)})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({key: input.items.slice(1, 3)})": Object {
      "InputPath": "$.input.items[1:3]",
      "Next": "1__return task({key: input.items.slice(1, 3)}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task(1) ?? task(2) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__false__await task(1) ?? await task(2)": Object {
      "InputPath": "$.heap1",
      "Next": "1__return await task(1) ?? await task(2)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return await task(1) ?? await task(2)": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return await task(1) ?? await task(2)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(1) ?? await task(2)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            Object {
              "IsNull": false,
              "Variable": "$.heap0",
            },
          ],
          "Next": "true__await task(1) ?? await task(2)",
        },
      ],
      "Default": "false__await task(1) ?? await task(2)",
      "Type": "Choice",
    },
    "false__await task(1) ?? await task(2)": Object {
      "Next": "1__false__await task(1) ?? await task(2)",
      "Parameters": 2,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return await task(1) ?? await task(2)": Object {
      "Next": "await task(1) ?? await task(2)",
      "Parameters": 1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "true__await task(1) ?? await task(2)": Object {
      "InputPath": "$.heap0",
      "Next": "1__return await task(1) ?? await task(2)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task(await task()) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(await task())": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(await task()) 1": Object {
      "InputPath": "$.heap0",
      "Next": "1__return task(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(await task())",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(await task())": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return task(await task()) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return typeof x 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return typeof input.id": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return typeof input.id",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return typeof input.id": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__return typeof input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__return typeof input.id",
        },
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__return typeof input.id",
        },
        Object {
          "IsPresent": true,
          "Next": "object__return typeof input.id",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__return typeof input.id",
      "Type": "Choice",
    },
    "string__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__return typeof input.id": Object {
      "Next": "1__return typeof input.id",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return void 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`set obj 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {a: a, b: b, c: c}": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.a",
        "b.$": "$.a[1]",
        "c.$": "$.a['1']",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {a: a, b: b, c: c} 1": Object {
      "InputPath": "$.a[1]",
      "Next": "2__return {a: a, b: b, c: c}",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "2__return {a: a, b: b, c: c}": Object {
      "InputPath": "$.a['1']",
      "Next": "1__return {a: a, b: b, c: c}",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = {1: \\"value\\"}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = {1: \\"value\\"}": Object {
      "Next": "b = a[1]",
      "Result": Object {
        "1": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "b = a[1]": Object {
      "InputPath": "$.a[1]",
      "Next": "c = a[\\"1\\"]",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "c = a[\\"1\\"]": Object {
      "InputPath": "$.a['1']",
      "Next": "return {a: a, b: b, c: c}",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "return {a: a, b: b, c: c}": Object {
      "InputPath": "$.a",
      "Next": "1__return {a: a, b: b, c: c} 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`shadow 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__for(b in [1, 2, 3])": Object {
      "ItemsPath": "$.heap4",
      "Iterator": Object {
        "StartAt": "Default",
        "States": Object {
          "Default": Object {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(b in [1, 2, 3])",
      "Parameters": Object {
        "index.$": "States.Format('{}', $$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "1__return aa__2": Object {
      "End": true,
      "InputPath": "$.heap7.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return aba__1": Object {
      "End": true,
      "InputPath": "$.heap3.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "a = \\"1\\"",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"1\\"": Object {
      "Next": "a__2 = \\"2\\"",
      "Result": "1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"3\\"": Object {
      "Next": "a__1 = \\"4\\"",
      "Result": "3",
      "ResultPath": "$.a__1",
      "Type": "Pass",
    },
    "a = \\"6\\"": Object {
      "Next": "aba__1",
      "Result": "6",
      "ResultPath": "$.a__3",
      "Type": "Pass",
    },
    "a__1 = \\"4\\"": Object {
      "Next": "if(a === \\"3\\")",
      "Result": "4",
      "ResultPath": "$.a__1__1",
      "Type": "Pass",
    },
    "a__2 = \\"2\\"": Object {
      "Next": "for(b in [1, 2, 3])",
      "Result": "2",
      "ResultPath": "$.a__2",
      "Type": "Pass",
    },
    "aa__2": Object {
      "Next": "1__return aa__2",
      "Parameters": Object {
        "string.$": "States.Format('{}{}','1','2')",
      },
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "aba__1": Object {
      "Next": "1__return aba__1",
      "Parameters": Object {
        "string.$": "States.Format('{}{}{}','6',$.b,'4')",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "b": Object {
      "InputPath": "$.heap4[0].index",
      "Next": "a = \\"3\\"",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "for(b in [1, 2, 3])": Object {
      "Next": "1__for(b in [1, 2, 3])",
      "Result": Array [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "hasNext__for(b in [1, 2, 3])": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "b",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "aa__2",
      "Type": "Choice",
    },
    "if(a === \\"3\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.a__1",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.a__1",
                },
                Object {
                  "StringEquals": "3",
                  "Variable": "$.a__1",
                },
              ],
            },
          ],
          "Next": "a = \\"6\\"",
        },
      ],
      "Default": "tail__for(b in [1, 2, 3])",
      "Type": "Choice",
    },
    "tail__for(b in [1, 2, 3])": Object {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for(b in [1, 2, 3])",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`single quotes in StringLiteralExpr should be escaped in a JSON Path filter expression 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task({escape: input.items.filter(function (item))})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({escape: input.items.filter(function (item))}) 1": Object {
      "Next": "1__return task({escape: input.items.filter(function (item))})",
      "Parameters": Object {
        "escape.$": "$.heap0",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({escape: input.items.filter(function (item))})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({escape: input.items.filter(function (item))})": Object {
      "InputPath": "$.input.items[?(@.str=='hello\\\\'world')]",
      "Next": "1__return task({escape: input.items.filter(function (item))}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`spread constant array and object 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return {array: [0, ...array, 3], object: {key: \\"value\\", ...object}}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {array: [0, ...array, 3], object: {key: \\"value\\", ...object}}": Object {
      "End": true,
      "Result": Object {
        "array": Array [
          0,
          1,
          2,
          3,
        ],
        "object": Object {
          "hello": "world",
          "key": "value",
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify json 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return JSON.stringify(input)": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return JSON.stringify(input)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify(input)": Object {
      "Next": "1__return JSON.stringify(input)",
      "Parameters": Object {
        "string.$": "States.JsonToString($.input)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify object literal 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}})": Object {
      "End": true,
      "InputPath": "$.heap0.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}}) 1": Object {
      "Next": "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}})",
      "Parameters": Object {
        "string.$": "States.JsonToString([object Object])",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "1__return JSON.stringify({a: \\"a\\", b: {c: \\"c\\"}}) 1",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify undefined 2 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return JSON.stringify(undefined)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify(undefined)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`task(-1) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(-1)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(-1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(-1)": Object {
      "Next": "1__return task(-1)",
      "Parameters": -1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`task(any) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"hello\\" + \\" world\\")": Object {
      "Next": "await task(\\"hello\\" + 1)",
      "Parameters": "hello world",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(\\"hello\\" + 1)": Object {
      "Next": "await task(1 + \\"hello\\")",
      "Parameters": "hello1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(\\"hello\\" + [\\"world\\"])": Object {
      "Next": "return null",
      "Parameters": "helloworld",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(\\"hello\\" + null)": Object {
      "Next": "await task([null])",
      "Parameters": "hellonull",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(\\"hello\\" + true)": Object {
      "Next": "await task(false + \\"hello\\")",
      "Parameters": "hellotrue",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(\\"hello\\" + {place: \\"world\\"})": Object {
      "Next": "await task(\\"hello\\" + [\\"world\\"])",
      "Parameters": "hello[object Object]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(\\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + \\" world\\")",
      "Parameters": "hello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "await task(null)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(-1)": Object {
      "Next": "await task(-100)",
      "Parameters": -1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(-100)": Object {
      "Next": "await task(1 + 2)",
      "Parameters": -100,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(0)": Object {
      "Next": "await task(-1)",
      "Parameters": 0,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(1 + \\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + true)",
      "Parameters": "1hello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(1 + 2)": Object {
      "Next": "await task(\\"hello\\")",
      "Parameters": 3,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task([-1])": Object {
      "Next": "await task([true])",
      "Parameters": Array [
        -1,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task([1])": Object {
      "Next": "await task([-1])",
      "Parameters": Array [
        1,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task([null])": Object {
      "Next": "await task([1])",
      "Parameters": Array [
        null,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task([true])": Object {
      "Next": "await task([{key: \\"value\\"}])",
      "Parameters": Array [
        true,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task([{key: \\"value\\"}])": Object {
      "Next": "await task({key: \\"value\\"})",
      "Parameters": Array [
        Object {
          "key": "value",
        },
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(false + \\"hello\\")": Object {
      "Next": "await task(null + \\"hello\\")",
      "Parameters": "falsehello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(false)": Object {
      "Next": "await task(0)",
      "Parameters": false,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(null + \\"hello\\")": Object {
      "Next": "await task(\\"hello\\" + null)",
      "Parameters": "nullhello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(null)": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "await task(true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task(true)": Object {
      "Next": "await task(false)",
      "Parameters": true,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "await task({key: \\"value\\"})": Object {
      "Next": "await task(\\"hello\\" + {place: \\"world\\"})",
      "Parameters": Object {
        "key": "value",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`task(input.list[-1]) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(input.list[-1])": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(input.list[-1])",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(input.list[-1])": Object {
      "InputPath": "$.input.list[-1]",
      "Next": "1__return task(input.list[-1])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`template literal strings 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    " input.obj.str \\"hello\\"input.obj.items[0]": Object {
      "Next": "1__return task({key:  input.obj.str \\"hello\\"input.obj.items[0]}) 1",
      "Parameters": Object {
        "string.$": "States.Format('{} hello {}',$.input.obj.str,$.input.obj.items[0])",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return task({key:  input.obj.str \\"hello\\"input.obj.items[0]})": Object {
      "End": true,
      "InputPath": "$.heap4",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key:  input.obj.str \\"hello\\"input.obj.items[0]}) 1": Object {
      "Next": "1__return task({key:  input.obj.str \\"hello\\"input.obj.items[0]})",
      "Parameters": Object {
        "key.$": "$.heap2.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": " input.obj.str \\"hello\\"input.obj.items[0]",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`template literal strings complex 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    " hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.items[0] ?? await task()": Object {
      "Next": "1__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.ite 1",
      "Parameters": Object {
        "string.$": "States.Format('{} hello hello {}',$.heap0,$.heap3)",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "1__false__input.obj.items[0] ?? await task()": Object {
      "InputPath": "$.heap2",
      "Next": " hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.items[0] ?? await task()",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "1__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.ite": Object {
      "End": true,
      "InputPath": "$.heap7",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.ite 1": Object {
      "Next": "1__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.ite",
      "Parameters": Object {
        "key.$": "$.heap5.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap7",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.items[",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__input.obj.items[0] ?? await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__false__input.obj.items[0] ?? await task()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "false__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj": Object {
      "Next": "input.obj.items[0] ?? await task()",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.obj.items[0] ?? await task()": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.obj.items[0]",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.obj.items[0]",
            },
          ],
          "Next": "true__input.obj.items[0] ?? await task()",
        },
      ],
      "Default": "false__input.obj.items[0] ?? await task()",
      "Type": "Choice",
    },
    "return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.items[": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.obj.str",
            },
            Object {
              "IsNull": false,
              "Variable": "$.input.obj.str",
            },
          ],
          "Next": "true__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.",
        },
      ],
      "Default": "false__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj",
      "Type": "Choice",
    },
    "true__input.obj.items[0] ?? await task()": Object {
      "InputPath": "$.input.obj.items[0]",
      "Next": " hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.items[0] ?? await task()",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "true__return task({key:  hello input.obj.str ?? \\"default\\" \\"hello\\"input.obj.": Object {
      "InputPath": "$.input.obj.str",
      "Next": "input.obj.items[0] ?? await task()",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`throw Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw Error(\\"cause\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error(\\"cause\\")": Object {
      "Cause": "{\\"message\\":\\"cause\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw in for-of 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"err\\")",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"err\\")": Object {
      "Cause": "{\\"message\\":\\"err\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new Error(\\"cause\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Cause": "{\\"message\\":\\"cause\\"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new StepFunctionError 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})": Object {
      "Cause": "{\\"property\\":\\"cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new functionless.StepFunctionError 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new functionless.StepFunctionError(\\"CustomError\\", {property: \\"cause\\"}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new functionless.StepFunctionError(\\"CustomError\\", {property: \\"cause\\"}": Object {
      "Cause": "{\\"property\\":\\"cause\\"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { $SFN.forEach(list, (item) => task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { $SFN.map(list, (item) => task(item)) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.input.list",
      "Iterator": Object {
        "StartAt": "return task(item)",
        "States": Object {
          "1__return task(item)": Object {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": Object {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__try",
      "Parameters": Object {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { for-of } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__for(item of input.items)": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(item)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__for(item of input.items)",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "InputPath": "$.heap1[0]",
      "Next": "tail__for(item of input.items)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"you dun' goofed\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "Next": "1__catch__for(item of input.items)",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "await task(item)",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "if(err.message === \\"you dun' goofed\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "you dun' goofed",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": Object {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { list.forEach(item => task(item)) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "tail__try",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return task(item)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.heap0.arr[0]",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__try": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__try",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.forEach(item => task(item)) } 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return input.list.forEach(function (item))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__try": Object {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return input.list.forEach(function (item))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "try",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item))": Object {
      "Next": "1__return input.list.forEach(function (item))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return input.list.forEach(function (item))": Object {
      "Next": "check__return input.list.forEach(function (item))",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__return input.list.forEach(function (item))": Object {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.heap0.arr[0]",
      "Next": "1__try",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`try { list.forEach(item => throw) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.forEach(item => throw) } catch (err) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "if(err.message === \\"cause\\")",
      "Parameters": Object {
        "message": "cause",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return 0",
        },
      ],
      "Default": "return 1",
      "Type": "Choice",
    },
    "return 0": Object {
      "End": true,
      "Result": 0,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return 1": Object {
      "End": true,
      "Result": 1,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => task(item)) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(item)": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__try",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "return task(item)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "set__end__try",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.heap0.arr[0]",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__try": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => task(item)) } 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return Promise.all(input.list.map(function (item)))": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__try": Object {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "handleResult__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item)))": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "try",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item)))": Object {
      "Next": "set__end__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}', $.heap0.arrStr, States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function (item)))": Object {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__return Promise.all(input.list.map(function (item)))": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.heap0.arr[0]",
      "Next": "1__try",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`try { list.map(item => throw) } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "set__end__try",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__try": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => throw) } catch (err) 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "if(err.message === \\"cause\\")",
      "Parameters": Object {
        "message": "cause",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "check__try": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"cause\\")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": Object {
      "Next": "set__end__try",
      "Parameters": Object {
        "result.$": "States.StringToJson(States.Format('{}]', $.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return 0",
        },
      ],
      "Default": "return 1",
      "Type": "Choice",
    },
    "return 0": Object {
      "End": true,
      "Result": 0,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return 1": Object {
      "End": true,
      "Result": 1,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "set__end__try": Object {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "check__try",
      "Parameters": Object {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { return $SFN.parallel(() => "hello", () => "world")) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "return \\"world\\"",
          "States": Object {
            "return \\"world\\"": Object {
              "End": true,
              "Result": "world",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`try { return $SFN.parallel(() => "hello", async () => { await task(); await task(); })) } catch { return null } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__try": Object {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Branches": Array [
        Object {
          "StartAt": "return \\"hello\\"",
          "States": Object {
            "return \\"hello\\"": Object {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        Object {
          "StartAt": "await task()",
          "States": Object {
            "await task()": Object {
              "InputPath": "$.fnl_context.null",
              "Next": "await task() 1",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": null,
              "Type": "Task",
            },
            "await task() 1": Object {
              "InputPath": "$.fnl_context.null",
              "Next": "return null",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": null,
              "Type": "Task",
            },
            "return null": Object {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "1__try",
      "ResultPath": "$.heap2",
      "Type": "Parallel",
    },
  },
}
`;

exports[`try { task } catch { throw } finally { task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task()",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task()": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task()",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "catch__await task()": Object {
      "Next": "finally",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "recover",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": null,
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "catch__await task(\\"1\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch { task() } finally { task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": null,
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "catch__await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "finally",
          "ResultPath": "$.fnl_tmp_1",
        },
      ],
      "Next": "finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "3",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch(err) { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__await task(\\"1\\")": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "await task(\\"1\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(\\"1\\")": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__await task(\\"1\\")",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"sam\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__await task(\\"1\\")": Object {
      "Next": "1__catch__await task(\\"1\\")",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": Object {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "if(err.message === \\"sam\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { throw } catch { (maybe) throw } finally { task } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__finally": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": Object {
      "Next": "throw new Error(\\"go\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__throw new Error(\\"go\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "sam",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"little\\")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "finally": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "1__finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"go\\")": Object {
      "Next": "catch__throw new Error(\\"go\\")",
      "Result": Object {
        "message": "go",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "throw new Error(\\"little\\")": Object {
      "Next": "finally",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": Object {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try, task, empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "await computeScore({id: \\"id\\", name: \\"name\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: \\"id\\", name: \\"name\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "return null",
          "ResultPath": null,
        },
      ],
      "Next": "return null",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw Error('error'), empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw Error(\\"cause\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error(\\"cause\\")": Object {
      "Next": "return null",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, catch, throw, finally, return 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "return \\"rock-star\\"",
      "Result": Object {
        "message": "little",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "return \\"rock-star\\"": Object {
      "End": true,
      "Result": "rock-star",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "go",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, empty catch 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new StepFunctionError(\\"CustomError\\", {property: \\"cause\\"})": Object {
      "Next": "return null",
      "Result": Object {
        "property": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, finally 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "return \\"hello\\"",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch with guaranteed throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "if(err.message === \\"cause\\")",
      "Parameters": Object {
        "message": "cause",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch with inner return and a catch variable 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "return err.message",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return err.message": Object {
      "End": true,
      "InputPath": "$.fnl_tmp_0.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
  },
}
`;

exports[`try-catch with inner return and no catch variable 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
  },
}
`;

exports[`try-catch with optional return of task 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello world\\"",
      "Parameters": Object {
        "id.$": "$.input.id",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "1__await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional return of task 2`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__return await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await computeScore({id: input.id, name: \\"sam\\"}) 1": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "1__return await computeScore({id: input.id, name: \\"sam\\"})",
      "Parameters": Object {
        "id.$": "$.input.id",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "1__return await computeScore({id: input.id, name: \\"sam\\"}) 1",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional task 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__await computeScore({id: input.id, name: \\"sam\\"})": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return \\"hello world\\"",
      "Parameters": Object {
        "id.$": "$.input.id",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "1__catch__try": Object {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": Object {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === \\"cause\\")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "1__catch__try",
      "Parameters": Object {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "1__await computeScore({id: input.id, name: \\"sam\\"})",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional throw of an Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "if(err.message === \\"cause\\")",
      "Parameters": Object {
        "message": "cause",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "if(err.message === \\"cause\\")": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.err.message",
                },
                Object {
                  "StringEquals": "cause",
                  "Variable": "$.err.message",
                },
              ],
            },
          ],
          "Next": "return \\"hello\\"",
        },
      ],
      "Default": "return \\"world\\"",
      "Type": "Choice",
    },
    "return \\"hello world\\"": Object {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"world\\"": Object {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"cause\\")": Object {
      "Next": "catch__try",
      "Result": Object {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            Object {
              "And": Array [
                Object {
                  "IsString": true,
                  "Variable": "$.input.id",
                },
                Object {
                  "StringEquals": "hello",
                  "Variable": "$.input.id",
                },
              ],
            },
          ],
          "Next": "throw new Error(\\"cause\\")",
        },
      ],
      "Default": "return \\"hello world\\"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch, err variable, contains for-of, throw Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "Next": "return err.message",
      "Parameters": Object {
        "message": "err",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw Error(\\"err\\")",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return err.message": Object {
      "End": true,
      "Parameters": "err",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error(\\"err\\")": Object {
      "Next": "catch__for(item of input.items)",
      "Result": Object {
        "message": "err",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch, err variable, contains for-of, throw new Error 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "Next": "return err.message",
      "Parameters": Object {
        "message": "err",
      },
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"err\\")",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return err.message": Object {
      "End": true,
      "Parameters": "err",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"err\\")": Object {
      "Next": "catch__for(item of input.items)",
      "Result": Object {
        "message": "err",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch, no variable, contains for-of, throw 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "for(item of input.items)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": Object {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": Object {
      "Choices": Array [
        Object {
          "IsPresent": true,
          "Next": "throw new Error(\\"err\\")",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error(\\"err\\")": Object {
      "Next": "catch__for(item of input.items)",
      "Result": Object {
        "message": "err",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch-finally 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "try",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return \\"hello\\"": Object {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "return \\"hello\\"",
          "ResultPath": null,
        },
      ],
      "Next": "return \\"hello\\"",
      "Parameters": Object {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
  },
}
`;

exports[`use context in object 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return {a: context.Execution.Name}": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$$.Execution.Name",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return {a: context.Execution.Name}",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {a: context.Execution.Name}": Object {
      "InputPath": "$$.Execution.Name",
      "Next": "1__return {a: context.Execution.Name}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`use context object 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(context)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(context)",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(context)": Object {
      "InputPath": "$$",
      "Next": "1__return task(context)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context parameter 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "return context.Execution.Name",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return context.Execution.Name": Object {
      "End": true,
      "InputPath": "$$.Execution.Name",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`use context parameter in function call 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return task(context.Execution.Id)": Object {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "return task(context.Execution.Id)",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(context.Execution.Id)": Object {
      "InputPath": "$$.Execution.Id",
      "Next": "1__return task(context.Execution.Id)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context parameter in template 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "1__return name: context.Execution.Id": Object {
      "End": true,
      "InputPath": "$.heap1.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "name: context.Execution.Id",
      "Parameters": Object {
        "_.$": "$$.Execution.Input",
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "name: context.Execution.Id": Object {
      "Next": "1__return name: context.Execution.Id",
      "Parameters": Object {
        "string.$": "States.Format('name: {}',$$.Execution.Id)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor literal number of seconds 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitFor(1)": Object {
      "Next": "return null",
      "Seconds": 1,
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitFor(1)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor literal timestamp 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitUntil(\\"2022-08-01T00:00:00Z\\")": Object {
      "Next": "return null",
      "Timestamp": "2022-08-01T00:00:00Z",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitUntil(\\"2022-08-01T00:00:00Z\\")",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor reference number of seconds 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitFor(input.seconds)": Object {
      "Next": "return null",
      "SecondsPath": "$.input.seconds",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitFor(input.seconds)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitUntil reference timestamp 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "$SFN.waitUntil(input.until)": Object {
      "Next": "return null",
      "TimestampPath": "$.input.until",
      "Type": "Wait",
    },
    "Initialize Functionless Context": Object {
      "Next": "$SFN.waitUntil(input.until)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`while (cond) { cond = task() } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (cond === null)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 1": Object {
      "InputPath": "$.heap0",
      "Next": "while (cond === null)",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (cond === null)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.cond",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "cond = await task()",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`while (cond); cond = task() 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (cond === null)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": Object {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 1": Object {
      "InputPath": "$.heap0",
      "Next": "while (cond === null)",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (cond === null)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "IsPresent": true,
              "Variable": "$.cond",
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsNull": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "IsNull": true,
                      "Variable": "$.fnl_context.null",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "StringEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "BooleanEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.cond",
                    },
                    Object {
                      "NumericEqualsPath": "$.fnl_context.null",
                      "Variable": "$.cond",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "cond = await task()",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`while(true) { try { } catch { wait } 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "Initialize Functionless Context": Object {
      "Next": "while (true)",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": Object {
      "Next": "while (true)",
      "Seconds": 1,
      "Type": "Wait",
    },
    "return null": Object {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": Object {
      "Catch": Array [
        Object {
          "ErrorEquals": Array [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "while (true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": null,
      "Type": "Task",
    },
    "while (true)": Object {
      "Choices": Array [
        Object {
          "IsNull": false,
          "Next": "try",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`with optimizer 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "11__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x": Object {
      "InputPath": "$.heap11.string",
      "Next": "1__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "1__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.input.obj.a",
        "b.$": "$.input.arr[0]",
        "c": "a",
        "d": 1,
        "t.$": "$.heap11.string",
        "u": Object {
          "f": "e",
        },
        "v": "d",
        "w.$": "$.d.c",
        "x.$": "$.c.c",
        "y.$": "$.b",
        "z.$": "$.a",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "2__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "Next": "3__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "Parameters": "a",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "3__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "Next": "8__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "Parameters": 1,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "8__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "Next": "9__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "Parameters": "d",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "9__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "Next": "this g.e 1",
      "Parameters": Object {
        "f": "e",
      },
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "obj = {1: \\"a\\"}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"a\\"": Object {
      "Next": "b = {c: \\"\\"}",
      "Result": "a",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"b\\"": Object {
      "Next": "b = {c: \\"\\"}",
      "Result": "b",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "arr = [1]": Object {
      "Next": "if(input.x)",
      "Result": Array [
        1,
      ],
      "ResultPath": "$.arr",
      "Type": "Pass",
    },
    "b = {c: \\"\\"}": Object {
      "Next": "if(input.x) 1",
      "Result": Object {
        "c": "",
      },
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "b.c = \\"a\\"": Object {
      "Next": "c = {c: \\"\\"}",
      "Result": "a",
      "ResultPath": "$.b.c",
      "Type": "Pass",
    },
    "b.c = \\"b\\"": Object {
      "Next": "c = {c: \\"\\"}",
      "Result": "b",
      "ResultPath": "$.b.c",
      "Type": "Pass",
    },
    "c = {c: \\"\\"}": Object {
      "Next": "if(input.x) 2",
      "Result": Object {
        "c": "",
      },
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "c.c = \\"a\\"": Object {
      "Next": "d = {c: {c: \\"\\"}}",
      "Result": "a",
      "ResultPath": "$.c.c",
      "Type": "Pass",
    },
    "c.c = \\"b\\"": Object {
      "Next": "d = {c: {c: \\"\\"}}",
      "Result": "b",
      "ResultPath": "$.c.c",
      "Type": "Pass",
    },
    "d = {c: {c: \\"\\"}}": Object {
      "Next": "xx = {c: \\"1\\"}",
      "Result": Object {
        "c": Object {
          "c": "",
        },
      },
      "ResultPath": "$.d",
      "Type": "Pass",
    },
    "d.c = xx": Object {
      "Next": "e = {d: \\"d\\"}",
      "Parameters": Object {
        "c": "1",
      },
      "ResultPath": "$.d.c",
      "Type": "Pass",
    },
    "d.c = yy": Object {
      "Next": "e = {d: \\"d\\"}",
      "Parameters": Object {
        "c": "2",
      },
      "ResultPath": "$.d.c",
      "Type": "Pass",
    },
    "e = {d: \\"d\\"}": Object {
      "Next": "v = e.d",
      "Result": Object {
        "d": "d",
      },
      "ResultPath": "$.e",
      "Type": "Pass",
    },
    "f = {e: {f: \\"e\\"}}": Object {
      "Next": "u = f.e",
      "Result": Object {
        "e": Object {
          "f": "e",
        },
      },
      "ResultPath": "$.f",
      "Type": "Pass",
    },
    "g = {e: \\"f\\"}": Object {
      "Next": "2__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "Result": Object {
        "e": "f",
      },
      "ResultPath": "$.g",
      "Type": "Pass",
    },
    "if(input.x)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.x",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.x",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.x",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "a = \\"a\\"",
        },
      ],
      "Default": "a = \\"b\\"",
      "Type": "Choice",
    },
    "if(input.x) 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.x",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.x",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.x",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "b.c = \\"a\\"",
        },
      ],
      "Default": "b.c = \\"b\\"",
      "Type": "Choice",
    },
    "if(input.x) 2": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.x",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.x",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.x",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "c.c = \\"a\\"",
        },
      ],
      "Default": "c.c = \\"b\\"",
      "Type": "Choice",
    },
    "if(input.x) 3": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.x",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.x",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.x",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "d.c = xx",
        },
      ],
      "Default": "d.c = yy",
      "Type": "Choice",
    },
    "obj = {1: \\"a\\"}": Object {
      "Next": "arr = [1]",
      "Result": Object {
        "1": "a",
      },
      "ResultPath": "$.obj",
      "Type": "Pass",
    },
    "this g.e 1": Object {
      "Next": "11__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x",
      "Parameters": Object {
        "string.$": "States.Format('this {}','f')",
      },
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "u = f.e": Object {
      "Next": "g = {e: \\"f\\"}",
      "Parameters": Object {
        "f": "e",
      },
      "ResultPath": "$.u",
      "Type": "Pass",
    },
    "v = e.d": Object {
      "Next": "f = {e: {f: \\"e\\"}}",
      "Parameters": "d",
      "ResultPath": "$.v",
      "Type": "Pass",
    },
    "xx = {c: \\"1\\"}": Object {
      "Next": "yy = {c: \\"2\\"}",
      "Result": Object {
        "c": "1",
      },
      "ResultPath": "$.xx",
      "Type": "Pass",
    },
    "yy = {c: \\"2\\"}": Object {
      "Next": "if(input.x) 3",
      "Result": Object {
        "c": "2",
      },
      "ResultPath": "$.yy",
      "Type": "Pass",
    },
  },
}
`;

exports[`without optimizer 1`] = `
Object {
  "StartAt": "Initialize Functionless Context",
  "States": Object {
    "11__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x": Object {
      "InputPath": "$.heap11.string",
      "Next": "1__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "1__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "End": true,
      "Parameters": Object {
        "a.$": "$.heap0",
        "b.$": "$.heap1",
        "c.$": "$.heap2",
        "d.$": "$.heap3",
        "t.$": "$.heap12",
        "u.$": "$.heap9",
        "v.$": "$.heap8",
        "w.$": "$.heap7",
        "x.$": "$.heap6",
        "y.$": "$.heap5",
        "z.$": "$.heap4",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x, 1": Object {
      "InputPath": "$.arr2[0]",
      "Next": "2__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "2__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "InputPath": "$.obj['1']",
      "Next": "3__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "3__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "InputPath": "$.arr[0]",
      "Next": "4__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "4__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "InputPath": "$.z",
      "Next": "5__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "5__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "InputPath": "$.y",
      "Next": "6__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "6__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "InputPath": "$.x",
      "Next": "7__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "7__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "InputPath": "$.w",
      "Next": "8__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "8__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "InputPath": "$.v",
      "Next": "9__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "9__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x,": Object {
      "InputPath": "$.u",
      "Next": "this g.e",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "Initialize Functionless Context": Object {
      "Next": "obj = {1: \\"a\\"}",
      "Parameters": Object {
        "fnl_context": Object {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = \\"a\\"": Object {
      "Next": "z = a",
      "Result": "a",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = \\"b\\"": Object {
      "Next": "z = a",
      "Result": "b",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "arr = [1]": Object {
      "Next": "obj2 = input.obj",
      "Result": Array [
        1,
      ],
      "ResultPath": "$.arr",
      "Type": "Pass",
    },
    "arr2 = input.arr": Object {
      "InputPath": "$.input.arr",
      "Next": "if(input.x)",
      "ResultPath": "$.arr2",
      "Type": "Pass",
    },
    "b = {c: \\"\\"}": Object {
      "Next": "if(input.x) 1",
      "Result": Object {
        "c": "",
      },
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "b.c = \\"a\\"": Object {
      "Next": "y = b",
      "Result": "a",
      "ResultPath": "$.b.c",
      "Type": "Pass",
    },
    "b.c = \\"b\\"": Object {
      "Next": "y = b",
      "Result": "b",
      "ResultPath": "$.b.c",
      "Type": "Pass",
    },
    "c = {c: \\"\\"}": Object {
      "Next": "if(input.x) 2",
      "Result": Object {
        "c": "",
      },
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "c.c = \\"a\\"": Object {
      "Next": "x = c.c",
      "Result": "a",
      "ResultPath": "$.c.c",
      "Type": "Pass",
    },
    "c.c = \\"b\\"": Object {
      "Next": "x = c.c",
      "Result": "b",
      "ResultPath": "$.c.c",
      "Type": "Pass",
    },
    "d = {c: {c: \\"\\"}}": Object {
      "Next": "xx = {c: \\"1\\"}",
      "Result": Object {
        "c": Object {
          "c": "",
        },
      },
      "ResultPath": "$.d",
      "Type": "Pass",
    },
    "d.c = xx": Object {
      "InputPath": "$.xx",
      "Next": "w = d.c",
      "ResultPath": "$.d.c",
      "Type": "Pass",
    },
    "d.c = yy": Object {
      "InputPath": "$.yy",
      "Next": "w = d.c",
      "ResultPath": "$.d.c",
      "Type": "Pass",
    },
    "e = {d: \\"d\\"}": Object {
      "Next": "v = e.d",
      "Result": Object {
        "d": "d",
      },
      "ResultPath": "$.e",
      "Type": "Pass",
    },
    "f = {e: {f: \\"e\\"}}": Object {
      "Next": "u = f.e",
      "Result": Object {
        "e": Object {
          "f": "e",
        },
      },
      "ResultPath": "$.f",
      "Type": "Pass",
    },
    "g = {e: \\"f\\"}": Object {
      "Next": "return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x, w:",
      "Result": Object {
        "e": "f",
      },
      "ResultPath": "$.g",
      "Type": "Pass",
    },
    "if(input.x)": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.x",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.x",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.x",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "a = \\"a\\"",
        },
      ],
      "Default": "a = \\"b\\"",
      "Type": "Choice",
    },
    "if(input.x) 1": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.x",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.x",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.x",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "b.c = \\"a\\"",
        },
      ],
      "Default": "b.c = \\"b\\"",
      "Type": "Choice",
    },
    "if(input.x) 2": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.x",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.x",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.x",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "c.c = \\"a\\"",
        },
      ],
      "Default": "c.c = \\"b\\"",
      "Type": "Choice",
    },
    "if(input.x) 3": Object {
      "Choices": Array [
        Object {
          "And": Array [
            Object {
              "And": Array [
                Object {
                  "IsPresent": true,
                  "Variable": "$.input.x",
                },
                Object {
                  "IsNull": false,
                  "Variable": "$.input.x",
                },
              ],
            },
            Object {
              "Or": Array [
                Object {
                  "And": Array [
                    Object {
                      "IsString": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsString": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "StringEquals": "",
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsNumeric": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "Not": Object {
                        "And": Array [
                          Object {
                            "IsNumeric": true,
                            "Variable": "$.input.x",
                          },
                          Object {
                            "NumericEquals": 0,
                            "Variable": "$.input.x",
                          },
                        ],
                      },
                    },
                  ],
                },
                Object {
                  "And": Array [
                    Object {
                      "IsBoolean": true,
                      "Variable": "$.input.x",
                    },
                    Object {
                      "BooleanEquals": true,
                      "Variable": "$.input.x",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "d.c = xx",
        },
      ],
      "Default": "d.c = yy",
      "Type": "Choice",
    },
    "obj = {1: \\"a\\"}": Object {
      "Next": "arr = [1]",
      "Result": Object {
        "1": "a",
      },
      "ResultPath": "$.obj",
      "Type": "Pass",
    },
    "obj2 = input.obj": Object {
      "InputPath": "$.input.obj",
      "Next": "arr2 = input.arr",
      "ResultPath": "$.obj2",
      "Type": "Pass",
    },
    "return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x, w:": Object {
      "InputPath": "$.obj2.a",
      "Next": "1__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x, 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "this g.e": Object {
      "InputPath": "$.g.e",
      "Next": "this g.e 1",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "this g.e 1": Object {
      "Next": "11__return {a: obj2.a, b: arr2[0], c: obj[\\"1\\"], d: arr[0], z: z, y: y, x: x",
      "Parameters": Object {
        "string.$": "States.Format('this {}',$.heap10)",
      },
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "u = f.e": Object {
      "InputPath": "$.f.e",
      "Next": "g = {e: \\"f\\"}",
      "ResultPath": "$.u",
      "Type": "Pass",
    },
    "v = e.d": Object {
      "InputPath": "$.e.d",
      "Next": "f = {e: {f: \\"e\\"}}",
      "ResultPath": "$.v",
      "Type": "Pass",
    },
    "w = d.c": Object {
      "InputPath": "$.d.c",
      "Next": "e = {d: \\"d\\"}",
      "ResultPath": "$.w",
      "Type": "Pass",
    },
    "x = c.c": Object {
      "InputPath": "$.c.c",
      "Next": "d = {c: {c: \\"\\"}}",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
    "xx = {c: \\"1\\"}": Object {
      "Next": "yy = {c: \\"2\\"}",
      "Result": Object {
        "c": "1",
      },
      "ResultPath": "$.xx",
      "Type": "Pass",
    },
    "y = b": Object {
      "InputPath": "$.b",
      "Next": "c = {c: \\"\\"}",
      "ResultPath": "$.y",
      "Type": "Pass",
    },
    "yy = {c: \\"2\\"}": Object {
      "Next": "if(input.x) 3",
      "Result": Object {
        "c": "2",
      },
      "ResultPath": "$.yy",
      "Type": "Pass",
    },
    "z = a": Object {
      "InputPath": "$.a",
      "Next": "b = {c: \\"\\"}",
      "ResultPath": "$.z",
      "Type": "Pass",
    },
  },
}
`;
