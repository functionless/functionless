// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`$SFN.forEach(list, (item) => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await $SFN.forEach(input.list, function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.list, function (item))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "return task(item)",
        "States": {
          "1__return task(item)": {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map([1, 2, 3], (item) => nitem) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "$SFN.map([1, 2, 3], function (item))": {
      "ItemsPath": "$.heap2",
      "Iterator": {
        "StartAt": "return nitem",
        "States": {
          "1__return nitem": {
            "End": true,
            "InputPath": "$.heap1.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "nitem": {
            "Next": "1__return nitem",
            "Parameters": {
              "string.$": "States.Format('n{}',$.heap0)",
            },
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "return nitem": {
            "InputPath": "$.item",
            "Next": "nitem",
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.map([1, 2, 3], function (item))",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap3",
      "Type": "Map",
    },
    "1__return $SFN.map([1, 2, 3], function (item))": {
      "End": true,
      "InputPath": "$.heap3",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return $SFN.map([1, 2, 3], function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map([1, 2, 3], function (item))": {
      "Next": "$SFN.map([1, 2, 3], function (item))",
      "Result": [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`$SFN.map(list, (item) => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await $SFN.map(input.list, function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.map(input.list, function (item))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "return task(item)",
        "States": {
          "1__return task(item)": {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "return null",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index) => item > index) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return [1, 2, 3, 4].filter(function (item,index))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > index": {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function (item,index))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return [1, 2, 3, 4].filter(function (item,index))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function (item,index))": {
      "ItemsPath": "$.heap0",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function (item,index))",
      "Parameters": {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "check__[1, 2, 3, 4].filter(function (item,index))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "function (item,index)",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function (item,index))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function (item,index))": {
      "Next": "set__end__[1, 2, 3, 4].filter(function (item,index))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > index": {
      "Next": "1__return item > index",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "function (item,index)": {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "index",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function (item,index))": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.heap2",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.heap2",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.heap2",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,index))",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function (item,index))",
      "Type": "Choice",
    },
    "index": {
      "InputPath": "$.heap1.arr[0].index",
      "Next": "return item > index",
      "ResultPath": "$.index",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,index))": {
      "Next": "check__[1, 2, 3, 4].filter(function (item,index))",
      "Parameters": {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap1.arrStr,States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item,index))": {
      "Next": "[1, 2, 3, 4].filter(function (item,index))",
      "Result": [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > index": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.item",
            },
            {
              "IsPresent": true,
              "Variable": "$.index",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                {
                  "IsNull": false,
                  "Variable": "$.index",
                },
                {
                  "Or": [
                    {
                      "And": [
                        {
                          "IsString": true,
                          "Variable": "$.item",
                        },
                        {
                          "StringGreaterThanPath": "$.index",
                          "Variable": "$.item",
                        },
                      ],
                    },
                    {
                      "And": [
                        {
                          "IsNumeric": true,
                          "Variable": "$.item",
                        },
                        {
                          "NumericGreaterThanPath": "$.index",
                          "Variable": "$.item",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > index",
        },
      ],
      "Default": "false__return item > index",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function (item,index))": {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function (item,index))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function (item,index))": {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function (item,index))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > index": {
      "Next": "1__return item > index",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index, array) => item > 1 + 2) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return [1, 2, 3, 4].filter(function (item,_,arr))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > arr[0]": {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function (item,_,arr))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return [1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function (item,_,arr))": {
      "ItemsPath": "$.heap0",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "_": {
      "InputPath": "$.heap1.arr[0].index",
      "Next": "arr",
      "ResultPath": "$._",
      "Type": "Pass",
    },
    "arr": {
      "InputPath": "$.heap0",
      "Next": "return item > arr[0]",
      "ResultPath": "$.arr",
      "Type": "Pass",
    },
    "check__[1, 2, 3, 4].filter(function (item,_,arr))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "function (item,_,arr)",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function (item,_,arr))": {
      "Next": "set__end__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > arr[0]": {
      "Next": "1__return item > arr[0]",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "function (item,_,arr)": {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "_",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function (item,_,arr))": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.heap2",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.heap2",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.heap2",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,arr))",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Type": "Choice",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,arr))": {
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,arr))",
      "Parameters": {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap1.arrStr,States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item,_,arr))": {
      "Next": "[1, 2, 3, 4].filter(function (item,_,arr))",
      "Result": [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > arr[0]": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.item",
            },
            {
              "IsPresent": true,
              "Variable": "$.arr[0]",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                {
                  "IsNull": false,
                  "Variable": "$.arr[0]",
                },
                {
                  "Or": [
                    {
                      "And": [
                        {
                          "IsString": true,
                          "Variable": "$.item",
                        },
                        {
                          "StringGreaterThanPath": "$.arr[0]",
                          "Variable": "$.item",
                        },
                      ],
                    },
                    {
                      "And": [
                        {
                          "IsNumeric": true,
                          "Variable": "$.item",
                        },
                        {
                          "NumericGreaterThanPath": "$.arr[0]",
                          "Variable": "$.item",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > arr[0]",
        },
      ],
      "Default": "false__return item > arr[0]",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function (item,_,arr))": {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function (item,_,arr))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function (item,_,arr))": {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,arr))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > arr[0]": {
      "Next": "1__return item > arr[0]",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter((item, index, array) => item > 1 + 2) 2`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return [1, 2, 3, 4].filter(function (item,_,[ first ]))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item > first": {
      "InputPath": "$.heap3",
      "Next": "handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return [1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[1, 2, 3, 4].filter(function (item,_,[ first ]))": {
      "ItemsPath": "$.heap0",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "ResultSelector": {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "_": {
      "InputPath": "$.heap1.arr[0].index",
      "Next": "first",
      "ResultPath": "$._",
      "Type": "Pass",
    },
    "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "function (item,_,[ first ])",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Type": "Choice",
    },
    "end__[1, 2, 3, 4].filter(function (item,_,[ first ]))": {
      "Next": "set__end__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item > first": {
      "Next": "1__return item > first",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "first": {
      "InputPath": "$.heap0[0]",
      "Next": "return item > first",
      "ResultPath": "$.first",
      "Type": "Pass",
    },
    "function (item,_,[ first ])": {
      "InputPath": "$.heap1.arr[0].item",
      "Next": "_",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]))": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.heap2",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.heap2",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.heap2",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]",
        },
      ],
      "Default": "tail__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Type": "Choice",
    },
    "predicateTrue__handleResult__[1, 2, 3, 4].filter(function (item,_,[ first ]": {
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Parameters": {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap1.arrStr,States.JsonToString($.heap1.arr[0].item))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item,_,[ first ]))": {
      "Next": "[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "Result": [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item > first": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.item",
            },
            {
              "IsPresent": true,
              "Variable": "$.first",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                {
                  "IsNull": false,
                  "Variable": "$.first",
                },
                {
                  "Or": [
                    {
                      "And": [
                        {
                          "IsString": true,
                          "Variable": "$.item",
                        },
                        {
                          "StringGreaterThanPath": "$.first",
                          "Variable": "$.item",
                        },
                      ],
                    },
                    {
                      "And": [
                        {
                          "IsNumeric": true,
                          "Variable": "$.item",
                        },
                        {
                          "NumericGreaterThanPath": "$.first",
                          "Variable": "$.item",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__return item > first",
        },
      ],
      "Default": "false__return item > first",
      "Type": "Choice",
    },
    "set__end__[1, 2, 3, 4].filter(function (item,_,[ first ]))": {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[1, 2, 3, 4].filter(function (item,_,[ first ]))": {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[1, 2, 3, 4].filter(function (item,_,[ first ]))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item > first": {
      "Next": "1__return item > first",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > {}) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return [{}].filter(function (item))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return item === {a: "a"}": {
      "InputPath": "$.heap3",
      "Next": "handleResult__[{}].filter(function (item))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return [{}].filter(function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[{}].filter(function (item))": {
      "Next": "check__[{}].filter(function (item))",
      "Parameters": {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "check__[{}].filter(function (item))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[{}].filter(function (item))",
      "Type": "Choice",
    },
    "end__[{}].filter(function (item))": {
      "Next": "set__end__[{}].filter(function (item))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return item === {a: "a"}": {
      "Next": "1__return item === {a: "a"}",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "handleResult__[{}].filter(function (item))": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.heap2",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.heap2",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.heap2",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[{}].filter(function (item))",
        },
      ],
      "Default": "tail__[{}].filter(function (item))",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap1.arr[0]",
      "Next": "return item === {a: "a"}",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[{}].filter(function (item))": {
      "Next": "check__[{}].filter(function (item))",
      "Parameters": {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap1.arrStr,States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [{}].filter(function (item))": {
      "Next": "[{}].filter(function (item))",
      "Result": [
        {},
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item === {a: "a"}": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.item",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                {
                  "IsNull": true,
                  "Variable": "$$.Execution.Id",
                },
              ],
            },
          ],
          "Next": "true__return item === {a: "a"}",
        },
      ],
      "Default": "false__return item === {a: "a"}",
      "Type": "Choice",
    },
    "set__end__[{}].filter(function (item))": {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [{}].filter(function (item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[{}].filter(function (item))": {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[{}].filter(function (item))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return item === {a: "a"}": {
      "Next": "1__return item === {a: "a"}",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > {}) 2`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return [{value: "a"}].filter(function (item))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return value === a": {
      "InputPath": "$.heap3",
      "Next": "handleResult__[{value: "a"}].filter(function (item))",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return [{value: "a"}].filter(function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[{value: "a"}].filter(function (item))": {
      "Next": "check__[{value: "a"}].filter(function (item))",
      "Parameters": {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "a = "a"": {
      "Next": "{ value } = item",
      "Result": "a",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "check__[{value: "a"}].filter(function (item))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__[{value: "a"}].filter(function (item))",
      "Type": "Choice",
    },
    "end__[{value: "a"}].filter(function (item))": {
      "Next": "set__end__[{value: "a"}].filter(function (item))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "false__return value === a": {
      "Next": "1__return value === a",
      "Result": false,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "handleResult__[{value: "a"}].filter(function (item))": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.heap2",
                },
                {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.heap2",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.heap2",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.heap2",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.heap2",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.heap2",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.heap2",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.heap2",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "predicateTrue__handleResult__[{value: "a"}].filter(function (item))",
        },
      ],
      "Default": "tail__[{value: "a"}].filter(function (item))",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap1.arr[0]",
      "Next": "a = "a"",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "predicateTrue__handleResult__[{value: "a"}].filter(function (item))": {
      "Next": "check__[{value: "a"}].filter(function (item))",
      "Parameters": {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap1.arrStr,States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return [{value: "a"}].filter(function (item))": {
      "Next": "[{value: "a"}].filter(function (item))",
      "Result": [
        {
          "value": "a",
        },
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value === a": {
      "Choices": [
        {
          "Next": "true__return value === a",
          "Or": [
            {
              "And": [
                {
                  "IsPresent": false,
                  "Variable": "$.value",
                },
                {
                  "IsPresent": false,
                  "Variable": "$.a",
                },
              ],
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.value",
                },
                {
                  "IsPresent": true,
                  "Variable": "$.a",
                },
                {
                  "Or": [
                    {
                      "And": [
                        {
                          "IsNull": true,
                          "Variable": "$.value",
                        },
                        {
                          "IsNull": true,
                          "Variable": "$.a",
                        },
                      ],
                    },
                    {
                      "And": [
                        {
                          "IsNull": false,
                          "Variable": "$.value",
                        },
                        {
                          "IsNull": false,
                          "Variable": "$.a",
                        },
                        {
                          "Or": [
                            {
                              "And": [
                                {
                                  "IsString": true,
                                  "Variable": "$.value",
                                },
                                {
                                  "StringEqualsPath": "$.a",
                                  "Variable": "$.value",
                                },
                              ],
                            },
                            {
                              "And": [
                                {
                                  "IsBoolean": true,
                                  "Variable": "$.value",
                                },
                                {
                                  "BooleanEqualsPath": "$.a",
                                  "Variable": "$.value",
                                },
                              ],
                            },
                            {
                              "And": [
                                {
                                  "IsNumeric": true,
                                  "Variable": "$.value",
                                },
                                {
                                  "NumericEqualsPath": "$.a",
                                  "Variable": "$.value",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "false__return value === a",
      "Type": "Choice",
    },
    "set__end__[{value: "a"}].filter(function (item))": {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [{value: "a"}].filter(function (item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__[{value: "a"}].filter(function (item))": {
      "InputPath": "$.heap1.arr[1:]",
      "Next": "check__[{value: "a"}].filter(function (item))",
      "ResultPath": "$.heap1.arr",
      "Type": "Pass",
    },
    "true__return value === a": {
      "Next": "1__return value === a",
      "Result": true,
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "{ value } = item": {
      "InputPath": "$.item['value']",
      "Next": "return value === a",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > 1 + 2) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return [1, 2, 3, 4].filter(function (item))": {
      "End": true,
      "InputPath": "$.heap0[?(@>3)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return [1, 2, 3, 4].filter(function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item))": {
      "Next": "1__return [1, 2, 3, 4].filter(function (item))",
      "Result": [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3,4].filter(item => item > 2) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return [1, 2, 3, 4].filter(function (item))": {
      "End": true,
      "InputPath": "$.heap0[?(@>2)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return [1, 2, 3, 4].filter(function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return [1, 2, 3, 4].filter(function (item))": {
      "Next": "1__return [1, 2, 3, 4].filter(function (item))",
      "Result": [
        1,
        2,
        3,
        4,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`[1,2,3].map(item => item) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return [1, 2, 3].map(function (item))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function (item)) 1": {
      "Next": "check__1__return [1, 2, 3].map(function (item)) 1",
      "Parameters": {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return [1, 2, 3].map(function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__1__return [1, 2, 3].map(function (item)) 1": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__1__return [1, 2, 3].map(function (item)) 1",
      "Type": "Choice",
    },
    "end__1__return [1, 2, 3].map(function (item)) 1": {
      "Next": "set__end__1__return [1, 2, 3].map(function (item)) 1",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__1__return [1, 2, 3].map(function (item)) 1": {
      "Next": "check__1__return [1, 2, 3].map(function (item)) 1",
      "Parameters": {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap1.arrStr,States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap1.arr[0]",
      "Next": "return item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return [1, 2, 3].map(function (item))": {
      "Next": "1__return [1, 2, 3].map(function (item)) 1",
      "Result": [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": {
      "InputPath": "$.item",
      "Next": "handleResult__1__return [1, 2, 3].map(function (item)) 1",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "set__end__1__return [1, 2, 3].map(function (item)) 1": {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3].map(function (item))",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`\`template me \${await task(input.value)}\` 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return template me await task(input.value)": {
      "End": true,
      "InputPath": "$.heap2.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return template me await task(input.value)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(input.value)": {
      "InputPath": "$.heap0",
      "Next": "template me await task(input.value)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return template me await task(input.value)": {
      "InputPath": "$.input.value",
      "Next": "await task(input.value)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "template me await task(input.value)": {
      "Next": "1__return template me await task(input.value)",
      "Parameters": {
        "string.$": "States.Format('template me {}',$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`\`template me \${input.value}\` 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return template me input.value": {
      "End": true,
      "InputPath": "$.heap1.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return template me input.value",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return template me input.value": {
      "InputPath": "$.input.value",
      "Next": "template me input.value",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "template me input.value": {
      "Next": "1__return template me input.value",
      "Parameters": {
        "string.$": "States.Format('template me {}',$.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`Boolean 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return {trueString: Boolean("1"), trueBoolean: Boolean(true), trueNumber": {
      "End": true,
      "Parameters": {
        "empty": false,
        "falseBoolean": false,
        "falseNumber": false,
        "falseString": false,
        "trueBoolean": true,
        "trueNumber": true,
        "trueObject": true,
        "trueString": true,
        "var.$": "$.heap0",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return {trueString: Boolean("1"), trueBoolean: Boolean(true), trueNumber: B",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return {trueString: Boolean("1"), trueBoolean: Boolean(true), trueNu": {
      "Next": "1__return {trueString: Boolean("1"), trueBoolean: Boolean(true), trueNumber",
      "Result": false,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return {trueString: Boolean("1"), trueBoolean: Boolean(true), trueNumber: B": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.value",
                },
                {
                  "IsNull": false,
                  "Variable": "$.input.value",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.value",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.input.value",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.input.value",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.input.value",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.input.value",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.input.value",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.value",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.value",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.input.value",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__return {trueString: Boolean("1"), trueBoolean: Boolean(true), trueNum",
        },
      ],
      "Default": "false__return {trueString: Boolean("1"), trueBoolean: Boolean(true), trueNu",
      "Type": "Choice",
    },
    "true__return {trueString: Boolean("1"), trueBoolean: Boolean(true), trueNum": {
      "Next": "1__return {trueString: Boolean("1"), trueBoolean: Boolean(true), trueNumber",
      "Result": true,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`add iamConditions AWS.SDK.CloudWatch.describeAlarms 1`] = `
{
  "Mappings": {
    "ServiceprincipalMap": {
      "af-south-1": {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-west-1": {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "FC4345940": {
      "DependsOn": [
        "FServiceRole3AC82EE1",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function() { return null; }",
        },
        "FunctionName": "testFunction",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "FServiceRole3AC82EE1",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "FServiceRole3AC82EE1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TableCD117FA1": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5,
        },
        "TableName": "testTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "fn5FF616E3": {
      "DependsOn": [
        "fnRoleDefaultPolicy4FB655BE",
        "fnRole50A611CF",
      ],
      "Properties": {
        "DefinitionString": "{"StartAt":"Initialize Functionless Context","States":{"Initialize Functionless Context":{"Type":"Pass","Parameters":{"fnl_context":{"null":null}},"ResultPath":"$","Next":"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso"},"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso":{"Type":"Task","Resource":"arn:aws:states:::aws-sdk:cloudwatch:describeAlarms","Next":"MetricAlarms","Parameters":{},"ResultPath":"$.heap0"},"MetricAlarms":{"Type":"Pass","Next":"return MetricAlarms","ResultPath":"$.MetricAlarms","InputPath":"$.heap0['MetricAlarms']"},"return MetricAlarms":{"Type":"Pass","End":true,"ResultPath":"$","InputPath":"$.MetricAlarms"}}}",
        "RoleArn": {
          "Fn::GetAtt": [
            "fnRole50A611CF",
            "Arn",
          ],
        },
        "StateMachineType": "EXPRESS",
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "fnRole50A611CF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "fnRoleDefaultPolicy4FB655BE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:DescribeAlarms",
              "Condition": {
                "StringEquals": {
                  "aws:ResourceTag/env": [
                    "test",
                  ],
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "fnRoleDefaultPolicy4FB655BE",
        "Roles": [
          {
            "Ref": "fnRole50A611CF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`await Promise.all(input.list.map((item) => task(item)))).filter 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return await Promise.all(input.list.map(function (item))).filter(functio": {
      "End": true,
      "InputPath": "$.heap0[?(@!=null)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": {
      "InputPath": "$.heap1",
      "Next": "handleResult__return await Promise.all(input.list.map(function (item))).fil",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return await Promise.all(input.list.map(function (item))).filter(function (",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return await Promise.all(input.list.map(function (item))).filter(fun": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return await Promise.all(input.list.map(function (item))).filter(funct",
      "Type": "Choice",
    },
    "end__return await Promise.all(input.list.map(function (item))).filter(funct": {
      "Next": "set__end__return await Promise.all(input.list.map(function (item))).filter(",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return await Promise.all(input.list.map(function (item))).fil": {
      "Next": "check__return await Promise.all(input.list.map(function (item))).filter(fun",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return await Promise.all(input.list.map(function (item))).filter(function (": {
      "Next": "check__return await Promise.all(input.list.map(function (item))).filter(fun",
      "Parameters": {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return await Promise.all(input.list.map(function (item))).filter(": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return await Promise.all(input.list.map(function (item))).filter(functio",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding catch 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__catch__try": {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch({ message })",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch({ message })": {
      "InputPath": "$.fnl_tmp_0['message']",
      "Next": "return message",
      "ResultPath": "$.message",
      "Type": "Pass",
    },
    "catch__try": {
      "Next": "1__catch__try",
      "Parameters": {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return message": {
      "End": true,
      "InputPath": "$.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return "hello"",
      "Parameters": {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`binding for 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return keyvalue": {
      "End": true,
      "InputPath": "$.heap2.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "for({ key, value } = {key: "x", value: "y"};;)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for({ key, value } = {key: "x", value: "y"};;)": {
      "Next": "value",
      "Result": "x",
      "ResultPath": "$.key",
      "Type": "Pass",
    },
    "keyvalue": {
      "Next": "1__return keyvalue",
      "Parameters": {
        "string.$": "States.Format('{}{}',$.heap0,$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return keyvalue": {
      "InputPath": "$.key",
      "Next": "value 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "value": {
      "Next": "return keyvalue",
      "Result": "y",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value 1": {
      "InputPath": "$.value",
      "Next": "keyvalue",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding forOf 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "a = """,
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a": {
      "InputPath": "$.a",
      "Next": "keyvaluea",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "a = """: {
      "Next": "for({ key, value } of input.value)",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = keyvaluea": {
      "InputPath": "$.key",
      "Next": "value 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "a = keyvaluea 1": {
      "InputPath": "$.heap3.string",
      "Next": "tail__for({ key, value } of input.value)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for({ key, value } of input.value)": {
      "InputPath": "$.input.value",
      "Next": "hasNext__for({ key, value } of input.value)",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "hasNext__for({ key, value } of input.value)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "{ key, value }",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "keyvaluea": {
      "Next": "a = keyvaluea 1",
      "Parameters": {
        "string.$": "States.Format('{}{}{}',$.heap0,$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "return a": {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for({ key, value } of input.value)": {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for({ key, value } of input.value)",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "value": {
      "InputPath": "$.heap4[0]['value']",
      "Next": "a = keyvaluea",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value 1": {
      "InputPath": "$.value",
      "Next": "a",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "{ key, value }": {
      "InputPath": "$.heap4[0]['key']",
      "Next": "value",
      "ResultPath": "$.key",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding forOf weird values 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "a = """,
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a": {
      "InputPath": "$.a",
      "Next": "vala",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "a 1": {
      "InputPath": "$.a",
      "Next": "vala 1",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "a 2": {
      "InputPath": "$.a",
      "Next": "vala 2",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "a = """: {
      "Next": "for(val of input.value ?? [1, 2, 3])",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = vala": {
      "InputPath": "$.val",
      "Next": "a",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "a = vala 1": {
      "InputPath": "$.heap3.string",
      "Next": "tail__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = vala 2": {
      "InputPath": "$.val__1",
      "Next": "a 1",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "a = vala 3": {
      "InputPath": "$.heap8.string",
      "Next": "tail__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = vala 4": {
      "InputPath": "$.val__2",
      "Next": "a 2",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "a = vala 5": {
      "InputPath": "$.heap12.string",
      "Next": "tail__for(val of a = "b" , true && [1, 2, 3]) 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "false__for(val of input.value ?? [1, 2, 3])": {
      "Next": "for(val of input.value ?? [1, 2, 3]) 1",
      "Result": [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "false__for(val of input.value || [1, 2, 3])": {
      "Next": "for(val of input.value || [1, 2, 3]) 1",
      "Result": [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "for(val of a = "b" , true && [1, 2, 3])": {
      "Next": "for(val of a = "b" , true && [1, 2, 3]) 1",
      "Result": "b",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(val of a = "b" , true && [1, 2, 3]) 1": {
      "Next": "hasNext__for(val of a = "b" , true && [1, 2, 3]) 1",
      "Result": [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "for(val of input.value ?? [1, 2, 3])": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.value",
            },
            {
              "IsNull": false,
              "Variable": "$.input.value",
            },
          ],
          "Next": "true__for(val of input.value ?? [1, 2, 3])",
        },
      ],
      "Default": "false__for(val of input.value ?? [1, 2, 3])",
      "Type": "Choice",
    },
    "for(val of input.value ?? [1, 2, 3]) 1": {
      "InputPath": "$.heap0",
      "Next": "hasNext__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "for(val of input.value || [1, 2, 3]) 1": {
      "InputPath": "$.heap5",
      "Next": "hasNext__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "hasNext__for(val of a = "b" , true && [1, 2, 3]) 1": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "val 2",
          "Variable": "$.heap13[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "hasNext__for(val of input.value ?? [1, 2, 3]) 1": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "val",
          "Variable": "$.heap4[0]",
        },
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.value",
                },
                {
                  "IsNull": false,
                  "Variable": "$.input.value",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.value",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.input.value",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.input.value",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.input.value",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.input.value",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.input.value",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.input.value",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.value",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.value",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.input.value",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__for(val of input.value || [1, 2, 3])",
        },
      ],
      "Default": "false__for(val of input.value || [1, 2, 3])",
      "Type": "Choice",
    },
    "hasNext__for(val of input.value || [1, 2, 3]) 1": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "val 1",
          "Variable": "$.heap9[0]",
        },
      ],
      "Default": "for(val of a = "b" , true && [1, 2, 3])",
      "Type": "Choice",
    },
    "return a": {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(val of a = "b" , true && [1, 2, 3]) 1": {
      "InputPath": "$.heap13[1:]",
      "Next": "hasNext__for(val of a = "b" , true && [1, 2, 3]) 1",
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "tail__for(val of input.value ?? [1, 2, 3]) 1": {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "tail__for(val of input.value || [1, 2, 3]) 1": {
      "InputPath": "$.heap9[1:]",
      "Next": "hasNext__for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "true__for(val of input.value ?? [1, 2, 3])": {
      "InputPath": "$.input.value",
      "Next": "for(val of input.value ?? [1, 2, 3]) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "true__for(val of input.value || [1, 2, 3])": {
      "InputPath": "$.input.value",
      "Next": "for(val of input.value || [1, 2, 3]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "val": {
      "InputPath": "$.heap4[0]",
      "Next": "a = vala",
      "ResultPath": "$.val",
      "Type": "Pass",
    },
    "val 1": {
      "InputPath": "$.heap9[0]",
      "Next": "a = vala 2",
      "ResultPath": "$.val__1",
      "Type": "Pass",
    },
    "val 2": {
      "InputPath": "$.heap13[0]",
      "Next": "a = vala 4",
      "ResultPath": "$.val__2",
      "Type": "Pass",
    },
    "vala": {
      "Next": "a = vala 1",
      "Parameters": {
        "string.$": "States.Format('{}{}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "vala 1": {
      "Next": "a = vala 3",
      "Parameters": {
        "string.$": "States.Format('{}{}',$.heap6,$.heap7)",
      },
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "vala 2": {
      "Next": "a = vala 5",
      "Parameters": {
        "string.$": "States.Format('{}{}',$.heap10,$.heap11)",
      },
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions $SFN.forEach 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await $SFN.forEach(input.value, function ({ value: b, arr: [ c ] }))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await $SFN.forEach(input.value, function ({ value: b, arr: [ c ] }))": {
      "ItemsPath": "$.input.value",
      "Iterator": {
        "StartAt": "function ({ value: b, arr: [ c ] })",
        "States": {
          "1__return bc": {
            "End": true,
            "InputPath": "$.heap2.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "bc": {
            "Next": "1__return bc",
            "Parameters": {
              "string.$": "States.Format('{}{}',$.heap0,$.heap1)",
            },
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
          "c": {
            "InputPath": "$.heap3['arr'][0]",
            "Next": "return bc",
            "ResultPath": "$.c",
            "Type": "Pass",
          },
          "c 1": {
            "InputPath": "$.c",
            "Next": "bc",
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "function ({ value: b, arr: [ c ] })": {
            "InputPath": "$.heap3['value']",
            "Next": "c",
            "ResultPath": "$.b",
            "Type": "Pass",
          },
          "return bc": {
            "InputPath": "$.b",
            "Next": "c 1",
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "return "success"",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "heap3.$": "$$.Map.Item.Value",
        "input.$": "$.input",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "return "success"": {
      "End": true,
      "Result": "success",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions $SFN.map 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).": {
      "End": true,
      "InputPath": "$.heap6.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })). 1": {
      "ItemsPath": "$.heap4",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "Choices": [
              {
                "IsString": true,
                "Next": "assign__Default 1",
                "Variable": "$.item",
              },
            ],
            "Default": "format__Default",
            "Type": "Choice",
          },
          "assign__Default": {
            "End": true,
            "InputPath": "$.heap7.str",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "assign__Default 1": {
            "InputPath": "$.item",
            "Next": "assign__Default",
            "ResultPath": "$.heap7.str",
            "Type": "Pass",
          },
          "format__Default": {
            "Next": "assign__Default",
            "Parameters": {
              "str.$": "States.JsonToString($.item)",
            },
            "ResultPath": "$.heap7",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__1__return await $SFN.map(input.value, function ({ value: b, arr: [",
      "Parameters": {
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap5",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).joi",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return await $SFN.map(input.value, function ({ value: b, arr: [ ": {
      "Next": "tail__1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ",
      "Parameters": {
        "string.$": "States.Format('{},{}',$.heap6.string,$.heap5[0])",
      },
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "hasNext__1__return await $SFN.map(input.value, function ({ value: b, arr: [": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap5[0]",
            },
            {
              "Not": {
                "IsPresent": true,
                "Variable": "$.heap6",
              },
            },
          ],
          "Next": "initValue__1__return await $SFN.map(input.value, function ({ value: b, arr:",
        },
        {
          "And": [
            {
              "IsPresent": false,
              "Variable": "$.heap5[0]",
            },
            {
              "IsPresent": false,
              "Variable": "$.heap6",
            },
          ],
          "Next": "returnEmpty__1__return await $SFN.map(input.value, function ({ value: b, ar",
        },
        {
          "IsPresent": true,
          "Next": "append__1__return await $SFN.map(input.value, function ({ value: b, arr: [ ",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).",
      "Type": "Choice",
    },
    "initValue__1__return await $SFN.map(input.value, function ({ value: b, arr:": {
      "InputPath": "$.heap5[0]",
      "Next": "tail__1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ",
      "ResultPath": "$.heap6.string",
      "Type": "Pass",
    },
    "return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).joi": {
      "ItemsPath": "$.input.value",
      "Iterator": {
        "StartAt": "function ({ value: b, arr: [ c ] })",
        "States": {
          "1__return bc": {
            "End": true,
            "InputPath": "$.heap2.string",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "bc": {
            "Next": "1__return bc",
            "Parameters": {
              "string.$": "States.Format('{}{}',$.heap0,$.heap1)",
            },
            "ResultPath": "$.heap2",
            "Type": "Pass",
          },
          "c": {
            "InputPath": "$.heap3['arr'][0]",
            "Next": "return bc",
            "ResultPath": "$.c",
            "Type": "Pass",
          },
          "c 1": {
            "InputPath": "$.c",
            "Next": "bc",
            "ResultPath": "$.heap1",
            "Type": "Pass",
          },
          "function ({ value: b, arr: [ c ] })": {
            "InputPath": "$.heap3['value']",
            "Next": "c",
            "ResultPath": "$.b",
            "Type": "Pass",
          },
          "return bc": {
            "InputPath": "$.b",
            "Next": "c 1",
            "ResultPath": "$.heap0",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })). 1",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "heap3.$": "$$.Map.Item.Value",
        "input.$": "$.input",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "returnEmpty__1__return await $SFN.map(input.value, function ({ value: b, ar": {
      "Next": "1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ] })).",
      "Result": "",
      "ResultPath": "$.heap6.string",
      "Type": "Pass",
    },
    "tail__1__return await $SFN.map(input.value, function ({ value: b, arr: [ c ": {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__1__return await $SFN.map(input.value, function ({ value: b, arr: [",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions filter 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.value.filter(function ({ value: b, arr: [ c ] }))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.value.filter(function ({ value: b, arr: [ c ] }))": {
      "End": true,
      "InputPath": "$.input.value[?(@['value']==@['arr'][0])]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions forEach 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return bc": {
      "InputPath": "$.heap3.string",
      "Next": "tail__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "bc": {
      "Next": "1__return bc",
      "Parameters": {
        "string.$": "States.Format('{}{}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "c": {
      "InputPath": "$.heap0.arr[0]['arr'][0]",
      "Next": "return bc",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "c 1": {
      "InputPath": "$.c",
      "Next": "bc",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "check__input.value.forEach(function ({ value: b, arr: [ c ] }))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "{ value: b, arr: [ c ] }",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "Type": "Choice",
    },
    "end__input.value.forEach(function ({ value: b, arr: [ c ] }))": {
      "Next": "return "success"",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.value.forEach(function ({ value: b, arr: [ c ] }))": {
      "Next": "check__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "Parameters": {
        "arr.$": "$.input.value",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return "success"": {
      "End": true,
      "Result": "success",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return bc": {
      "InputPath": "$.b",
      "Next": "c 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__input.value.forEach(function ({ value: b, arr: [ c ] }))": {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__input.value.forEach(function ({ value: b, arr: [ c ] }))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "{ value: b, arr: [ c ] }": {
      "InputPath": "$.heap0.arr[0]['value']",
      "Next": "c",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions map 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return bc": {
      "InputPath": "$.heap3.string",
      "Next": "handleResult__return input.value.map(function ({ value: b, arr: [ c ] })).j",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return input.value.map(function ({ value: b, arr: [ c ] })).join()": {
      "End": true,
      "InputPath": "$.heap5.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return input.value.map(function ({ value: b, arr: [ c ] })).join() 1": {
      "ItemsPath": "$.heap0",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "Choices": [
              {
                "IsString": true,
                "Next": "assign__Default 1",
                "Variable": "$.item",
              },
            ],
            "Default": "format__Default",
            "Type": "Choice",
          },
          "assign__Default": {
            "End": true,
            "InputPath": "$.heap6.str",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "assign__Default 1": {
            "InputPath": "$.item",
            "Next": "assign__Default",
            "ResultPath": "$.heap6.str",
            "Type": "Pass",
          },
          "format__Default": {
            "Next": "assign__Default",
            "Parameters": {
              "str.$": "States.JsonToString($.item)",
            },
            "ResultPath": "$.heap6",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__1__return input.value.map(function ({ value: b, arr: [ c ] })).joi",
      "Parameters": {
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return input.value.map(function ({ value: b, arr: [ c ] })).join": {
      "Next": "tail__1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": {
        "string.$": "States.Format('{},{}',$.heap5.string,$.heap4[0])",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "bc": {
      "Next": "1__return bc",
      "Parameters": {
        "string.$": "States.Format('{}{}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "c": {
      "InputPath": "$.heap0.arr[0]['arr'][0]",
      "Next": "return bc",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "c 1": {
      "InputPath": "$.c",
      "Next": "bc",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "check__return input.value.map(function ({ value: b, arr: [ c ] })).join()": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "{ value: b, arr: [ c ] }",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Type": "Choice",
    },
    "end__return input.value.map(function ({ value: b, arr: [ c ] })).join()": {
      "Next": "set__end__return input.value.map(function ({ value: b, arr: [ c ] })).join(",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.value.map(function ({ value: b, arr: [ c ] })).j": {
      "Next": "check__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__1__return input.value.map(function ({ value: b, arr: [ c ] })).joi": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap4[0]",
            },
            {
              "Not": {
                "IsPresent": true,
                "Variable": "$.heap5",
              },
            },
          ],
          "Next": "initValue__1__return input.value.map(function ({ value: b, arr: [ c ] })).j",
        },
        {
          "And": [
            {
              "IsPresent": false,
              "Variable": "$.heap4[0]",
            },
            {
              "IsPresent": false,
              "Variable": "$.heap5",
            },
          ],
          "Next": "returnEmpty__1__return input.value.map(function ({ value: b, arr: [ c ] }))",
        },
        {
          "IsPresent": true,
          "Next": "append__1__return input.value.map(function ({ value: b, arr: [ c ] })).join",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Type": "Choice",
    },
    "initValue__1__return input.value.map(function ({ value: b, arr: [ c ] })).j": {
      "InputPath": "$.heap4[0]",
      "Next": "tail__1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "return bc": {
      "InputPath": "$.b",
      "Next": "c 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return input.value.map(function ({ value: b, arr: [ c ] })).join()": {
      "Next": "check__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Parameters": {
        "arr.$": "$.input.value",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "returnEmpty__1__return input.value.map(function ({ value: b, arr: [ c ] }))": {
      "Next": "1__return input.value.map(function ({ value: b, arr: [ c ] })).join()",
      "Result": "",
      "ResultPath": "$.heap5.string",
      "Type": "Pass",
    },
    "set__end__return input.value.map(function ({ value: b, arr: [ c ] })).join(": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.value.map(function ({ value: b, arr: [ c ] })).join() 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__1__return input.value.map(function ({ value: b, arr: [ c ] })).join()": {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__1__return input.value.map(function ({ value: b, arr: [ c ] })).joi",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "{ value: b, arr: [ c ] }": {
      "InputPath": "$.heap0.arr[0]['value']",
      "Next": "c",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding functions use in map 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return [1, 2, 3].map(function ()).join()": {
      "End": true,
      "InputPath": "$.heap6.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return [1, 2, 3].map(function ()).join() 1": {
      "ItemsPath": "$.heap1",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "Choices": [
              {
                "IsString": true,
                "Next": "assign__Default 1",
                "Variable": "$.item",
              },
            ],
            "Default": "format__Default",
            "Type": "Choice",
          },
          "assign__Default": {
            "End": true,
            "InputPath": "$.heap7.str",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "assign__Default 1": {
            "InputPath": "$.item",
            "Next": "assign__Default",
            "ResultPath": "$.heap7.str",
            "Type": "Pass",
          },
          "format__Default": {
            "Next": "assign__Default",
            "Parameters": {
              "str.$": "States.JsonToString($.item)",
            },
            "ResultPath": "$.heap7",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__1__return [1, 2, 3].map(function ()).join() 1",
      "Parameters": {
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap5",
      "Type": "Map",
    },
    "1__return [1, 2, 3].map(function ()).join() 2": {
      "Next": "check__1__return [1, 2, 3].map(function ()).join() 2",
      "Parameters": {
        "arr.$": "$.heap0",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "1__return valuev": {
      "InputPath": "$.heap4.string",
      "Next": "handleResult__1__return [1, 2, 3].map(function ()).join() 2",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "{ value, obj }",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "append__1__return [1, 2, 3].map(function ()).join() 1": {
      "Next": "tail__1__return [1, 2, 3].map(function ()).join() 1",
      "Parameters": {
        "string.$": "States.Format('{},{}',$.heap6.string,$.heap5[0])",
      },
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "check__1__return [1, 2, 3].map(function ()).join() 2": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "return valuev",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__1__return [1, 2, 3].map(function ()).join() 2",
      "Type": "Choice",
    },
    "end__1__return [1, 2, 3].map(function ()).join() 2": {
      "Next": "set__end__1__return [1, 2, 3].map(function ()).join() 2",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__1__return [1, 2, 3].map(function ()).join() 2": {
      "Next": "check__1__return [1, 2, 3].map(function ()).join() 2",
      "Parameters": {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap1.arrStr,States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__1__return [1, 2, 3].map(function ()).join() 1": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap5[0]",
            },
            {
              "Not": {
                "IsPresent": true,
                "Variable": "$.heap6",
              },
            },
          ],
          "Next": "initValue__1__return [1, 2, 3].map(function ()).join() 1",
        },
        {
          "And": [
            {
              "IsPresent": false,
              "Variable": "$.heap5[0]",
            },
            {
              "IsPresent": false,
              "Variable": "$.heap6",
            },
          ],
          "Next": "returnEmpty__1__return [1, 2, 3].map(function ()).join() 1",
        },
        {
          "IsPresent": true,
          "Next": "append__1__return [1, 2, 3].map(function ()).join() 1",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "1__return [1, 2, 3].map(function ()).join()",
      "Type": "Choice",
    },
    "initValue__1__return [1, 2, 3].map(function ()).join() 1": {
      "InputPath": "$.heap5[0]",
      "Next": "tail__1__return [1, 2, 3].map(function ()).join() 1",
      "ResultPath": "$.heap6.string",
      "Type": "Pass",
    },
    "obj": {
      "InputPath": "$$.Execution.Input['obj']",
      "Next": "{ value: v } = obj",
      "ResultPath": "$.obj",
      "Type": "Pass",
    },
    "return [1, 2, 3].map(function ()).join()": {
      "Next": "1__return [1, 2, 3].map(function ()).join() 2",
      "Result": [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return valuev": {
      "InputPath": "$.value",
      "Next": "v",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "returnEmpty__1__return [1, 2, 3].map(function ()).join() 1": {
      "Next": "1__return [1, 2, 3].map(function ()).join()",
      "Result": "",
      "ResultPath": "$.heap6.string",
      "Type": "Pass",
    },
    "set__end__1__return [1, 2, 3].map(function ()).join() 2": {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__return [1, 2, 3].map(function ()).join() 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "tail__1__return [1, 2, 3].map(function ()).join() 1": {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__1__return [1, 2, 3].map(function ()).join() 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "v": {
      "InputPath": "$.v",
      "Next": "valuev",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "valuev": {
      "Next": "1__return valuev",
      "Parameters": {
        "string.$": "States.Format('{}{}',$.heap2,$.heap3)",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "{ value, obj }": {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "obj",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "{ value: v } = obj": {
      "InputPath": "$.obj['value']",
      "Next": "return [1, 2, 3].map(function ()).join()",
      "ResultPath": "$.v",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop array 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "b",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": {
      "InputPath": "$$.Execution.Input['arr'][0]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop array rest 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "b",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": {
      "InputPath": "$$.Execution.Input['arr'][1:]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop binding 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "value",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return value": {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop nested 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "b",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": {
      "InputPath": "$$.Execution.Input['value']['b']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop rename 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "b",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "b": {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "return b": {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop with default 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "value = "b"",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__value = "b"": {
      "Next": "value",
      "Result": "b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value": {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": {
      "InputPath": "$.heap0",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value = "b"": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "value__value = "b"",
          "Variable": "$$.Execution.Input['value']",
        },
      ],
      "Default": "default__value = "b"",
      "Type": "Choice",
    },
    "value__value = "b"": {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "value",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding prop with self default 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "{ value, value2 = value }",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__value2 = value": {
      "InputPath": "$.value",
      "Next": "value2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value2": {
      "End": true,
      "InputPath": "$.value2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value2": {
      "InputPath": "$.heap0",
      "Next": "return value2",
      "ResultPath": "$.value2",
      "Type": "Pass",
    },
    "value2 = value": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "value__value2 = value",
          "Variable": "$$.Execution.Input['value2']",
        },
      ],
      "Default": "default__value2 = value",
      "Type": "Choice",
    },
    "value__value2 = value": {
      "InputPath": "$$.Execution.Input['value2']",
      "Next": "value2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "{ value, value2 = value }": {
      "InputPath": "$$.Execution.Input['value']",
      "Next": "value2 = value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable array 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "{ arr: [ b ] } = input",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ arr: [ b ] } = input": {
      "InputPath": "$.input['arr'][0]",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable binding 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "{ value } = input",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return value": {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ value } = input": {
      "InputPath": "$.input['value']",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable nested 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "{ value: { b } } = input",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ value: { b } } = input": {
      "InputPath": "$.input['value']['b']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable rename 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "{ value: b } = input",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return b": {
      "End": true,
      "InputPath": "$.b",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ value: b } = input": {
      "InputPath": "$.input['value']",
      "Next": "return b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
  },
}
`;

exports[`binding variable with default 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "{ value = "b" } = input",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "default__{ value = "b" } = input": {
      "Next": "value",
      "Result": "b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return value": {
      "End": true,
      "InputPath": "$.value",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "value": {
      "InputPath": "$.heap0",
      "Next": "return value",
      "ResultPath": "$.value",
      "Type": "Pass",
    },
    "value__{ value = "b" } = input": {
      "InputPath": "$.input['value']",
      "Next": "value",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "{ value = "b" } = input": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "value__{ value = "b" } = input",
          "Variable": "$.input['value']",
        },
      ],
      "Default": "default__{ value = "b" } = input",
      "Type": "Choice",
    },
  },
}
`;

exports[`boolean logic 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "!input.a && input.b": {
      "Choices": [
        {
          "Next": "true__!input.a && input.b",
          "Not": {
            "And": [
              {
                "And": [
                  {
                    "IsPresent": true,
                    "Variable": "$.heap12",
                  },
                  {
                    "IsNull": false,
                    "Variable": "$.heap12",
                  },
                ],
              },
              {
                "Or": [
                  {
                    "And": [
                      {
                        "IsString": true,
                        "Variable": "$.heap12",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsString": true,
                              "Variable": "$.heap12",
                            },
                            {
                              "StringEquals": "",
                              "Variable": "$.heap12",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsNumeric": true,
                        "Variable": "$.heap12",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsNumeric": true,
                              "Variable": "$.heap12",
                            },
                            {
                              "NumericEquals": 0,
                              "Variable": "$.heap12",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.heap12",
                      },
                      {
                        "BooleanEquals": true,
                        "Variable": "$.heap12",
                      },
                    ],
                  },
                  {
                    "Not": {
                      "Or": [
                        {
                          "IsBoolean": true,
                          "Variable": "$.heap12",
                        },
                        {
                          "IsNumeric": true,
                          "Variable": "$.heap12",
                        },
                        {
                          "IsString": true,
                          "Variable": "$.heap12",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a && input.b",
      "Type": "Choice",
    },
    "!input.a || input.b": {
      "Choices": [
        {
          "Next": "true__!input.a || input.b",
          "Not": {
            "And": [
              {
                "And": [
                  {
                    "IsPresent": true,
                    "Variable": "$.heap15",
                  },
                  {
                    "IsNull": false,
                    "Variable": "$.heap15",
                  },
                ],
              },
              {
                "Or": [
                  {
                    "And": [
                      {
                        "IsString": true,
                        "Variable": "$.heap15",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsString": true,
                              "Variable": "$.heap15",
                            },
                            {
                              "StringEquals": "",
                              "Variable": "$.heap15",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsNumeric": true,
                        "Variable": "$.heap15",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsNumeric": true,
                              "Variable": "$.heap15",
                            },
                            {
                              "NumericEquals": 0,
                              "Variable": "$.heap15",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.heap15",
                      },
                      {
                        "BooleanEquals": true,
                        "Variable": "$.heap15",
                      },
                    ],
                  },
                  {
                    "Not": {
                      "Or": [
                        {
                          "IsBoolean": true,
                          "Variable": "$.heap15",
                        },
                        {
                          "IsNumeric": true,
                          "Variable": "$.heap15",
                        },
                        {
                          "IsString": true,
                          "Variable": "$.heap15",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a || input.b",
      "Type": "Choice",
    },
    "!input.a || input.b && input.a": {
      "Choices": [
        {
          "Next": "true__!input.a || input.b && input.a",
          "Not": {
            "And": [
              {
                "And": [
                  {
                    "IsPresent": true,
                    "Variable": "$.heap19",
                  },
                  {
                    "IsNull": false,
                    "Variable": "$.heap19",
                  },
                ],
              },
              {
                "Or": [
                  {
                    "And": [
                      {
                        "IsString": true,
                        "Variable": "$.heap19",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsString": true,
                              "Variable": "$.heap19",
                            },
                            {
                              "StringEquals": "",
                              "Variable": "$.heap19",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsNumeric": true,
                        "Variable": "$.heap19",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsNumeric": true,
                              "Variable": "$.heap19",
                            },
                            {
                              "NumericEquals": 0,
                              "Variable": "$.heap19",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.heap19",
                      },
                      {
                        "BooleanEquals": true,
                        "Variable": "$.heap19",
                      },
                    ],
                  },
                  {
                    "Not": {
                      "Or": [
                        {
                          "IsBoolean": true,
                          "Variable": "$.heap19",
                        },
                        {
                          "IsNumeric": true,
                          "Variable": "$.heap19",
                        },
                        {
                          "IsString": true,
                          "Variable": "$.heap19",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__!input.a || input.b && input.a",
      "Type": "Choice",
    },
    "!true": {
      "Choices": [
        {
          "Next": "true__!true",
          "Not": {
            "IsNull": false,
            "Variable": "$$.Execution.Id",
          },
        },
      ],
      "Default": "false__!true",
      "Type": "Choice",
    },
    "11__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": {
      "InputPath": "$.heap10",
      "Next": "input.a && input.b",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "13__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": {
      "InputPath": "$.heap13",
      "Next": "input.a || input.b 1",
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "15__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": {
      "InputPath": "$.heap16",
      "Next": "input.a || input.b && input.a",
      "ResultPath": "$.heap17",
      "Type": "Pass",
    },
    "17__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": {
      "InputPath": "$.heap20",
      "Next": "18__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap21",
      "Type": "Pass",
    },
    "18__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": {
      "InputPath": "$.input.s",
      "Next": "input.a && input.s",
      "ResultPath": "$.heap22",
      "Type": "Pass",
    },
    "1__input.b && input.a": {
      "InputPath": "$.heap18",
      "Next": "!input.a || input.b && input.a",
      "ResultPath": "$.heap19",
      "Type": "Pass",
    },
    "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": {
      "End": true,
      "Parameters": {
        "and.$": "$.heap1",
        "andAllConstant": false,
        "andCondition.$": "$.heap5",
        "andFalsyConstantString": "",
        "andTruthyConstantString.$": "$.heap22",
        "andVariable.$": "$.heap24",
        "chain.$": "$.heap21",
        "not.$": "$.heap11",
        "notAnd.$": "$.heap14",
        "notOr.$": "$.heap17",
        "nullCondition.$": "$.heap9",
        "or.$": "$.heap3",
        "orAllConstant": true,
        "orCondition.$": "$.heap7",
        "orFalsyConstantString.$": "$.heap25",
        "orTruthyConstantString": "hi",
        "orVariable.$": "$.heap26",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i 1": {
      "InputPath": "$.heap0",
      "Next": "input.a || input.b",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "20__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": {
      "InputPath": "$.heap23",
      "Next": "21__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap24",
      "Type": "Pass",
    },
    "21__return {and: input.a && input.b, or: input.a || input.b, andCondition: ": {
      "InputPath": "$.input.s",
      "Next": "input.b || input.s",
      "ResultPath": "$.heap25",
      "Type": "Pass",
    },
    "3__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": {
      "InputPath": "$.heap2",
      "Next": "input.a === input.b && input.s === "hello"",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "5__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": {
      "InputPath": "$.heap4",
      "Next": "input.a === input.b || input.s === "hello"",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "7__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": {
      "InputPath": "$.heap6",
      "Next": "input.a === input.b ?? input.s === "hello"",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "9__return {and: input.a && input.b, or: input.a || input.b, andCondition: i": {
      "InputPath": "$.heap8",
      "Next": "!true",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return {and: input.a && input.b, or: input.a || input.b, andCondition: inpu",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__!input.a && input.b": {
      "Next": "13__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": false,
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "false__!input.a || input.b": {
      "Next": "15__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": false,
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "false__!input.a || input.b && input.a": {
      "Next": "17__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": false,
      "ResultPath": "$.heap20",
      "Type": "Pass",
    },
    "false__!true": {
      "Next": "11__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": false,
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "false__input.a && input.b": {
      "InputPath": "$.input.b",
      "Next": "!input.a && input.b",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "false__input.a && input.s": {
      "InputPath": "$.input.s",
      "Next": "20__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap23",
      "Type": "Pass",
    },
    "false__input.a === input.b && input.s === "hello"": {
      "Next": "5__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": false,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "false__input.a === input.b ?? input.s === "hello"": {
      "Next": "9__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": false,
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "false__input.a === input.b || input.s === "hello"": {
      "Next": "7__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": false,
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "false__input.a || input.b": {
      "InputPath": "$.input.b",
      "Next": "3__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "false__input.a || input.b 1": {
      "InputPath": "$.input.b",
      "Next": "!input.a || input.b",
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "false__input.b && input.a": {
      "InputPath": "$.input.a",
      "Next": "1__input.b && input.a",
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "false__input.b || input.s": {
      "InputPath": "$.input.s",
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "ResultPath": "$.heap26",
      "Type": "Pass",
    },
    "false__return {and: input.a && input.b, or: input.a || input.b, andConditio": {
      "InputPath": "$.input.b",
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.a && input.b": {
      "Choices": [
        {
          "Next": "true__input.a && input.b",
          "Not": {
            "And": [
              {
                "And": [
                  {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              {
                "Or": [
                  {
                    "And": [
                      {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                  {
                    "Not": {
                      "Or": [
                        {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.a && input.b",
      "Type": "Choice",
    },
    "input.a && input.s": {
      "Choices": [
        {
          "Next": "true__input.a && input.s",
          "Not": {
            "And": [
              {
                "And": [
                  {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              {
                "Or": [
                  {
                    "And": [
                      {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                  {
                    "Not": {
                      "Or": [
                        {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.a && input.s",
      "Type": "Choice",
    },
    "input.a === input.b && input.s === "hello"": {
      "Choices": [
        {
          "And": [
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsPresent": false,
                      "Variable": "$.input.a",
                    },
                    {
                      "IsPresent": false,
                      "Variable": "$.input.b",
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsPresent": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "IsPresent": true,
                      "Variable": "$.input.b",
                    },
                    {
                      "Or": [
                        {
                          "And": [
                            {
                              "IsNull": true,
                              "Variable": "$.input.a",
                            },
                            {
                              "IsNull": true,
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                        {
                          "And": [
                            {
                              "IsNull": false,
                              "Variable": "$.input.a",
                            },
                            {
                              "IsNull": false,
                              "Variable": "$.input.b",
                            },
                            {
                              "Or": [
                                {
                                  "And": [
                                    {
                                      "IsString": true,
                                      "Variable": "$.input.a",
                                    },
                                    {
                                      "StringEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                                {
                                  "And": [
                                    {
                                      "IsBoolean": true,
                                      "Variable": "$.input.a",
                                    },
                                    {
                                      "BooleanEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                                {
                                  "And": [
                                    {
                                      "IsNumeric": true,
                                      "Variable": "$.input.a",
                                    },
                                    {
                                      "NumericEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.s",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.input.s",
                    },
                    {
                      "And": [
                        {
                          "IsString": true,
                          "Variable": "$.input.s",
                        },
                        {
                          "StringEquals": "hello",
                          "Variable": "$.input.s",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__input.a === input.b && input.s === "hello"",
        },
      ],
      "Default": "false__input.a === input.b && input.s === "hello"",
      "Type": "Choice",
    },
    "input.a === input.b ?? input.s === "hello"": {
      "Choices": [
        {
          "Next": "true__input.a === input.b ?? input.s === "hello"",
          "Or": [
            {
              "And": [
                {
                  "IsPresent": false,
                  "Variable": "$.input.a",
                },
                {
                  "IsPresent": false,
                  "Variable": "$.input.b",
                },
              ],
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                {
                  "IsPresent": true,
                  "Variable": "$.input.b",
                },
                {
                  "Or": [
                    {
                      "And": [
                        {
                          "IsNull": true,
                          "Variable": "$.input.a",
                        },
                        {
                          "IsNull": true,
                          "Variable": "$.input.b",
                        },
                      ],
                    },
                    {
                      "And": [
                        {
                          "IsNull": false,
                          "Variable": "$.input.a",
                        },
                        {
                          "IsNull": false,
                          "Variable": "$.input.b",
                        },
                        {
                          "Or": [
                            {
                              "And": [
                                {
                                  "IsString": true,
                                  "Variable": "$.input.a",
                                },
                                {
                                  "StringEqualsPath": "$.input.b",
                                  "Variable": "$.input.a",
                                },
                              ],
                            },
                            {
                              "And": [
                                {
                                  "IsBoolean": true,
                                  "Variable": "$.input.a",
                                },
                                {
                                  "BooleanEqualsPath": "$.input.b",
                                  "Variable": "$.input.a",
                                },
                              ],
                            },
                            {
                              "And": [
                                {
                                  "IsNumeric": true,
                                  "Variable": "$.input.a",
                                },
                                {
                                  "NumericEqualsPath": "$.input.b",
                                  "Variable": "$.input.a",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "false__input.a === input.b ?? input.s === "hello"",
      "Type": "Choice",
    },
    "input.a === input.b || input.s === "hello"": {
      "Choices": [
        {
          "Next": "true__input.a === input.b || input.s === "hello"",
          "Or": [
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsPresent": false,
                      "Variable": "$.input.a",
                    },
                    {
                      "IsPresent": false,
                      "Variable": "$.input.b",
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsPresent": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "IsPresent": true,
                      "Variable": "$.input.b",
                    },
                    {
                      "Or": [
                        {
                          "And": [
                            {
                              "IsNull": true,
                              "Variable": "$.input.a",
                            },
                            {
                              "IsNull": true,
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                        {
                          "And": [
                            {
                              "IsNull": false,
                              "Variable": "$.input.a",
                            },
                            {
                              "IsNull": false,
                              "Variable": "$.input.b",
                            },
                            {
                              "Or": [
                                {
                                  "And": [
                                    {
                                      "IsString": true,
                                      "Variable": "$.input.a",
                                    },
                                    {
                                      "StringEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                                {
                                  "And": [
                                    {
                                      "IsBoolean": true,
                                      "Variable": "$.input.a",
                                    },
                                    {
                                      "BooleanEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                                {
                                  "And": [
                                    {
                                      "IsNumeric": true,
                                      "Variable": "$.input.a",
                                    },
                                    {
                                      "NumericEqualsPath": "$.input.b",
                                      "Variable": "$.input.a",
                                    },
                                  ],
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.s",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.input.s",
                    },
                    {
                      "And": [
                        {
                          "IsString": true,
                          "Variable": "$.input.s",
                        },
                        {
                          "StringEquals": "hello",
                          "Variable": "$.input.s",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "false__input.a === input.b || input.s === "hello"",
      "Type": "Choice",
    },
    "input.a || input.b": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b",
        },
      ],
      "Default": "false__input.a || input.b",
      "Type": "Choice",
    },
    "input.a || input.b && input.a": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b && input.a",
        },
        {
          "Next": "true__input.b && input.a",
          "Not": {
            "And": [
              {
                "And": [
                  {
                    "IsPresent": true,
                    "Variable": "$.input.b",
                  },
                  {
                    "IsNull": false,
                    "Variable": "$.input.b",
                  },
                ],
              },
              {
                "Or": [
                  {
                    "And": [
                      {
                        "IsString": true,
                        "Variable": "$.input.b",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsString": true,
                              "Variable": "$.input.b",
                            },
                            {
                              "StringEquals": "",
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.b",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsNumeric": true,
                              "Variable": "$.input.b",
                            },
                            {
                              "NumericEquals": 0,
                              "Variable": "$.input.b",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.b",
                      },
                      {
                        "BooleanEquals": true,
                        "Variable": "$.input.b",
                      },
                    ],
                  },
                  {
                    "Not": {
                      "Or": [
                        {
                          "IsBoolean": true,
                          "Variable": "$.input.b",
                        },
                        {
                          "IsNumeric": true,
                          "Variable": "$.input.b",
                        },
                        {
                          "IsString": true,
                          "Variable": "$.input.b",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__input.b && input.a",
      "Type": "Choice",
    },
    "input.a || input.b 1": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.a",
                },
                {
                  "IsNull": false,
                  "Variable": "$.input.a",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.input.a",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.input.a",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.input.a",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.input.a",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.input.a",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__input.a || input.b 1",
        },
      ],
      "Default": "false__input.a || input.b 1",
      "Type": "Choice",
    },
    "input.b || input.s": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.b",
                },
                {
                  "IsNull": false,
                  "Variable": "$.input.b",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.b",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.input.b",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.input.b",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.input.b",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.input.b",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.input.b",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.b",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.b",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.input.b",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__input.b || input.s",
        },
      ],
      "Default": "false__input.b || input.s",
      "Type": "Choice",
    },
    "return {and: input.a && input.b, or: input.a || input.b, andCondition: inpu": {
      "Choices": [
        {
          "Next": "true__return {and: input.a && input.b, or: input.a || input.b, andCondition",
          "Not": {
            "And": [
              {
                "And": [
                  {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              {
                "Or": [
                  {
                    "And": [
                      {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                  {
                    "Not": {
                      "Or": [
                        {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__return {and: input.a && input.b, or: input.a || input.b, andConditio",
      "Type": "Choice",
    },
    "true__!input.a && input.b": {
      "Next": "13__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": true,
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "true__!input.a || input.b": {
      "Next": "15__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": true,
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "true__!input.a || input.b && input.a": {
      "Next": "17__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": true,
      "ResultPath": "$.heap20",
      "Type": "Pass",
    },
    "true__!true": {
      "Next": "11__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "Result": true,
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "true__input.a && input.b": {
      "InputPath": "$.input.a",
      "Next": "!input.a && input.b",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "true__input.a && input.s": {
      "InputPath": "$.input.a",
      "Next": "20__return {and: input.a && input.b, or: input.a || input.b, andCondition: ",
      "ResultPath": "$.heap23",
      "Type": "Pass",
    },
    "true__input.a === input.b && input.s === "hello"": {
      "Next": "5__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": true,
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "true__input.a === input.b ?? input.s === "hello"": {
      "Next": "9__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": true,
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "true__input.a === input.b || input.s === "hello"": {
      "Next": "7__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "Result": true,
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "true__input.a || input.b": {
      "InputPath": "$.input.a",
      "Next": "3__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "true__input.a || input.b && input.a": {
      "InputPath": "$.input.a",
      "Next": "!input.a || input.b && input.a",
      "ResultPath": "$.heap19",
      "Type": "Pass",
    },
    "true__input.a || input.b 1": {
      "InputPath": "$.input.a",
      "Next": "!input.a || input.b",
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "true__input.b && input.a": {
      "InputPath": "$.input.b",
      "Next": "1__input.b && input.a",
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "true__input.b || input.s": {
      "InputPath": "$.input.b",
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i",
      "ResultPath": "$.heap26",
      "Type": "Pass",
    },
    "true__return {and: input.a && input.b, or: input.a || input.b, andCondition": {
      "InputPath": "$.input.a",
      "Next": "1__return {and: input.a && input.b, or: input.a || input.b, andCondition: i 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`boolean return 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return input.a && input.b": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return input.a && input.b",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return input.a && input.b": {
      "InputPath": "$.input.b",
      "Next": "1__return input.a && input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return input.a && input.b": {
      "Choices": [
        {
          "Next": "true__return input.a && input.b",
          "Not": {
            "And": [
              {
                "And": [
                  {
                    "IsPresent": true,
                    "Variable": "$.input.a",
                  },
                  {
                    "IsNull": false,
                    "Variable": "$.input.a",
                  },
                ],
              },
              {
                "Or": [
                  {
                    "And": [
                      {
                        "IsString": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsString": true,
                              "Variable": "$.input.a",
                            },
                            {
                              "StringEquals": "",
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "Not": {
                          "And": [
                            {
                              "IsNumeric": true,
                              "Variable": "$.input.a",
                            },
                            {
                              "NumericEquals": 0,
                              "Variable": "$.input.a",
                            },
                          ],
                        },
                      },
                    ],
                  },
                  {
                    "And": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.a",
                      },
                      {
                        "BooleanEquals": true,
                        "Variable": "$.input.a",
                      },
                    ],
                  },
                  {
                    "Not": {
                      "Or": [
                        {
                          "IsBoolean": true,
                          "Variable": "$.input.a",
                        },
                        {
                          "IsNumeric": true,
                          "Variable": "$.input.a",
                        },
                        {
                          "IsString": true,
                          "Variable": "$.input.a",
                        },
                      ],
                    },
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "false__return input.a && input.b",
      "Type": "Choice",
    },
    "true__return input.a && input.b": {
      "InputPath": "$.input.a",
      "Next": "1__return input.a && input.b",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from do-while-loop 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "break",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "break": {
      "Choices": [
        {
          "IsNull": false,
          "Next": "return null",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from for-loop 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "for(item of input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(item === "hello")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.item",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.item",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.item",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return null",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap0[0]",
      "Next": "if(item === "hello")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`break from while-loop 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "while (true)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (true)": {
      "Choices": [
        {
          "IsNull": false,
          "Next": "return null",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`call AWS.DynamoDB.GetItem, then Lambda and return LiteralExpr 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score}": {
      "End": true,
      "Parameters": {
        "id.$": "$.heap3",
        "name.$": "$.heap4",
        "score.$": "$.score",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score} 1": {
      "InputPath": "$.person.Item.name.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score}",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "1__score = await computeScore({id: person.Item.id.S, name: person.Item.name": {
      "Next": "score",
      "Parameters": {
        "id.$": "$.heap1",
        "name.$": "$.person.Item.name.S",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "person = await personTable.attributes.get({Key: {id: {S: input.id}}})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": {
      "Choices": [
        {
          "Next": "return",
          "Or": [
            {
              "IsPresent": false,
              "Variable": "$.person.Item",
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.person.Item",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.person.Item",
                    },
                    {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "score = await computeScore({id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": {
      "InputPath": "$.heap0",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await personTable.attributes.get({Key: {id: {S: input.id}}})": {
      "Next": "person",
      "Parameters": {
        "Key": {
          "id": {
            "S.$": "$.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S, score: score}": {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S, score: score} 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "score": {
      "InputPath": "$.heap2",
      "Next": "return {id: person.Item.id.S, name: person.Item.name.S, score: score}",
      "ResultPath": "$.score",
      "Type": "Pass",
    },
    "score = await computeScore({id: person.Item.id.S, name: person.Item.name.S}": {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__score = await computeScore({id: person.Item.id.S, name: person.Item.name",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Lambda Function, store as variable, return variable 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "person = await getPerson({id: input.id})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "person": {
      "InputPath": "$.heap0",
      "Next": "return person",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await getPerson({id: input.id})": {
      "Next": "person",
      "Parameters": {
        "id.$": "$.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return person": {
      "End": true,
      "InputPath": "$.person",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`call Lambda Function, store as variable, return variable no block 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return getPerson({id: input.id})": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return getPerson({id: input.id})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return getPerson({id: input.id})": {
      "Next": "1__return getPerson({id: input.id})",
      "Parameters": {
        "id.$": "$.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function describe from another Step Function 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return machine1.describeExecution("hello")": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return machine1.describeExecution("hello")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1.describeExecution("hello")": {
      "Next": "1__return machine1.describeExecution("hello")",
      "Parameters": {
        "ExecutionArn": "hello",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:describeExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function describe from another Step Function from context 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return machine1.describeExecution(input.id)": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return machine1.describeExecution(input.id)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1.describeExecution(input.id)": {
      "Next": "1__return machine1.describeExecution(input.id)",
      "Parameters": {
        "ExecutionArn.$": "$.input.id",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:describeExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return machine1({})": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return machine1({})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({})": {
      "Next": "1__return machine1({})",
      "Parameters": {
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with dynamic input 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return machine1({input: {value: input.value1}})": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return machine1({input: {value: input.value1}})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: {value: input.value1}})": {
      "Next": "1__return machine1({input: {value: input.value1}})",
      "Parameters": {
        "Input": {
          "value.$": "$.input.value1",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with dynamic input field input 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return machine1({input: input})": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return machine1({input: input})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: input})": {
      "Next": "1__return machine1({input: input})",
      "Parameters": {
        "Input.$": "$.input",
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with input 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return machine1({input: {value: "hello"}})": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return machine1({input: {value: "hello"}})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({input: {value: "hello"}})": {
      "Next": "1__return machine1({input: {value: "hello"}})",
      "Parameters": {
        "Input": {
          "value": "hello",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with name and trace 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return machine1({name: "exec1", traceHeader: "1"})": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return machine1({name: "exec1", traceHeader: "1"})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({name: "exec1", traceHeader: "1"})": {
      "Next": "1__return machine1({name: "exec1", traceHeader: "1"})",
      "Parameters": {
        "Name": "exec1",
        "StateMachineArn": "__REPLACED_TOKEN",
        "TraceHeader": "1",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with name and trace from variables 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return machine1({name: input.name, traceHeader: input.header})": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return machine1({name: input.name, traceHeader: input.header})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return machine1({name: input.name, traceHeader: input.header})": {
      "Next": "1__return machine1({name: input.name, traceHeader: input.header})",
      "Parameters": {
        "Name.$": "$.input.name",
        "StateMachineArn": "__REPLACED_TOKEN",
        "TraceHeader.$": "$.input.header",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`call Step Function from another Step Function with null coalesce 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return machine1({input: {value: input.value ?? "default"}})": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return machine1({input: {value: input.value ?? "default"}}) 1": {
      "Next": "1__return machine1({input: {value: input.value ?? "default"}})",
      "Parameters": {
        "Input": {
          "value.$": "$.heap0",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "return machine1({input: {value: input.value ?? "default"}})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return machine1({input: {value: input.value ?? "default"}})": {
      "Next": "1__return machine1({input: {value: input.value ?? "default"}}) 1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return machine1({input: {value: input.value ?? "default"}})": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.value",
            },
            {
              "IsNull": false,
              "Variable": "$.input.value",
            },
          ],
          "Next": "true__return machine1({input: {value: input.value ?? "default"}})",
        },
      ],
      "Default": "false__return machine1({input: {value: input.value ?? "default"}})",
      "Type": "Choice",
    },
    "true__return machine1({input: {value: input.value ?? "default"}})": {
      "InputPath": "$.input.value",
      "Next": "1__return machine1({input: {value: input.value ?? "default"}}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`catch and throw Error 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "throw new StepFunctionError("CustomError", {property: "custom cause"})",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "throw new StepFunctionError("CustomError", {property: "custom cause"})": {
      "Cause": "{"property":"custom cause"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
    "try": {
      "Next": "catch__try",
      "Result": {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`catch and throw new Error 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "throw new StepFunctionError("CustomError", {property: "custom cause"})",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "throw new StepFunctionError("CustomError", {property: "custom cause"})": {
      "Cause": "{"property":"custom cause"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
    "try": {
      "Next": "catch__try",
      "Result": {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`closure from map 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return aitem": {
      "InputPath": "$.heap3.string",
      "Next": "handleResult__return input.list.map(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return input.list.map(function (item))": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "a = "x"",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = "x"": {
      "Next": "return input.list.map(function (item))",
      "Result": "x",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "aitem": {
      "Next": "1__return aitem",
      "Parameters": {
        "string.$": "States.Format('{}{}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "check__return input.list.map(function (item))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.map(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.map(function (item))": {
      "Next": "set__end__return input.list.map(function (item))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.map(function (item))": {
      "Next": "check__return input.list.map(function (item))",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return aitem",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "item 1": {
      "InputPath": "$.item",
      "Next": "aitem",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return aitem": {
      "InputPath": "$.a",
      "Next": "item 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return input.list.map(function (item))": {
      "Next": "check__return input.list.map(function (item))",
      "Parameters": {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__return input.list.map(function (item))": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.map(function (item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`condition on task output 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__if(await task() === 1)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.heap0",
                    },
                    {
                      "NumericEquals": 1,
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "if(await task() === 1)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(await task() === 1)": {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await task() === 1)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally call DynamoDB and then void 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(input.id === "hello")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await personTable.attributes.get({Key: {id: {S: input.id}}})": {
      "Next": "return null",
      "Parameters": {
        "Key": {
          "id": {
            "S.$": "$.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(input.id === "hello")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "await personTable.attributes.get({Key: {id: {S: input.id}}})",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally return void 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(input.id === "hello")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === "hello")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`conditionally return void 2`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(input.id === "hello")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === "hello")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in do..while loop 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(input.key === "sam")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(input.key)": {
      "InputPath": "$.input.key",
      "Next": "if(input.key === "sam")",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(input.key === "sam")": {
      "Choices": [
        {
          "And": [
            {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.key",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.input.key",
                    },
                    {
                      "And": [
                        {
                          "IsString": true,
                          "Variable": "$.input.key",
                        },
                        {
                          "StringEquals": "sam",
                          "Variable": "$.input.key",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "if(input.key === "sam")",
        },
        {
          "IsNull": false,
          "Next": "await task(input.key)",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in for loop 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "for(item of input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(item === "hello")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.item",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.item",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.item",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.item",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "tail__for(item of input.items)",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap0[0]",
      "Next": "if(item === "hello")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`continue in while loop 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "while (true)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(input.key)": {
      "InputPath": "$.input.key",
      "Next": "while (true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (true)": {
      "Choices": [
        {
          "And": [
            {
              "IsNull": false,
              "Variable": "$$.Execution.Id",
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.key",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.input.key",
                    },
                    {
                      "And": [
                        {
                          "IsString": true,
                          "Variable": "$.input.key",
                        },
                        {
                          "StringEquals": "sam",
                          "Variable": "$.input.key",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "while (true)",
        },
        {
          "IsNull": false,
          "Next": "await task(input.key)",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`else if 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(input.val === "a")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === "a")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    {
                      "StringEquals": "a",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "yup"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    {
                      "StringEquals": "b",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "yip"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    {
                      "StringEquals": "c",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "woop"",
        },
      ],
      "Default": "return "noop"",
      "Type": "Choice",
    },
    "return "noop"": {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "woop"": {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "yip"": {
      "End": true,
      "Result": "yip",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "yup"": {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`else if else 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(input.val === "a")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === "a")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    {
                      "StringEquals": "a",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "yup"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    {
                      "StringEquals": "b",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "woop"",
        },
      ],
      "Default": "return "noop"",
      "Type": "Choice",
    },
    "return "noop"": {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "woop"": {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "yup"": {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`empty for 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(_ of [await task(input.items)])": {
      "InputPath": "$.heap0",
      "Next": "[await task(input.items)]",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "for(_ of [await task(input.items)])",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input.items)]": {
      "Next": "for(_ of [await task(input.items)]) 1",
      "Parameters": {
        "out.$": "States.Array($.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "_": {
      "InputPath": "$.heap3[0]",
      "Next": "tail__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$._",
      "Type": "Pass",
    },
    "for(_ of [await task(input.items)])": {
      "InputPath": "$.input.items",
      "Next": "1__for(_ of [await task(input.items)])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(_ of [await task(input.items)]) 1": {
      "InputPath": "$.heap2.out",
      "Next": "hasNext__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "hasNext__for(_ of [await task(input.items)]) 1": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "_",
          "Variable": "$.heap3[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(_ of [await task(input.items)]) 1": {
      "InputPath": "$.heap3[1:]",
      "Next": "hasNext__for(_ of [await task(input.items)]) 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
  },
}
`;

exports[`empty function 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return null",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for (const i in [task(input)]) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await task(await task(i))": {
      "InputPath": "$.heap3",
      "Next": "tail__for(i in [await task(input)]) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "1__for(i in [await task(input)])": {
      "InputPath": "$.heap0",
      "Next": "[await task(input)]",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "1__for(i in [await task(input)]) 1": {
      "ItemsPath": "$.heap5",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in [await task(input)]) 1",
      "Parameters": {
        "index.$": "States.Format('{}',$$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap5",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "for(i in [await task(input)])",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input)]": {
      "Next": "for(i in [await task(input)]) 1",
      "Parameters": {
        "out.$": "States.Array($.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "assignValue__i": {
      "InputPath": "$.heap5[0].item",
      "Next": "await task(await task(i))",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "await task(await task(i))": {
      "InputPath": "$.i",
      "Next": "1__await task(await task(i))",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "for(i in [await task(input)])": {
      "InputPath": "$.input",
      "Next": "1__for(i in [await task(input)])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(i in [await task(input)]) 1": {
      "InputPath": "$.heap2.out",
      "Next": "1__for(i in [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__for(i in [await task(input)]) 1": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": {
      "InputPath": "$.heap5[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in [await task(input)]) 1": {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__for(i in [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`for (const i of [task(input)]) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await task(await task(i))": {
      "InputPath": "$.heap3",
      "Next": "tail__for(i of [await task(input)]) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "1__for(i of [await task(input)])": {
      "InputPath": "$.heap0",
      "Next": "[await task(input)]",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "for(i of [await task(input)])",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[await task(input)]": {
      "Next": "for(i of [await task(input)]) 1",
      "Parameters": {
        "out.$": "States.Array($.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "await task(await task(i))": {
      "InputPath": "$.i",
      "Next": "1__await task(await task(i))",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "for(i of [await task(input)])": {
      "InputPath": "$.input",
      "Next": "1__for(i of [await task(input)])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "for(i of [await task(input)]) 1": {
      "InputPath": "$.heap2.out",
      "Next": "hasNext__for(i of [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__for(i of [await task(input)]) 1": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": {
      "InputPath": "$.heap5[0]",
      "Next": "await task(await task(i))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i of [await task(input)]) 1": {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__for(i of [await task(input)]) 1",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`for assign 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(i in input.items)": {
      "ItemsPath": "$.heap2",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": {
        "index.$": "States.Format('{}',$$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap2",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "a = """,
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = """: {
      "Next": "for(i in input.items)",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = i": {
      "InputPath": "$.i",
      "Next": "i 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "a = i 1": {
      "InputPath": "$.heap1.string",
      "Next": "tail__for(i in input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = i 2": {
      "InputPath": "$.i__1",
      "Next": "i 3",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "a = i 3": {
      "InputPath": "$.heap4.string",
      "Next": "tail__for(i of input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "assignValue__i": {
      "InputPath": "$.heap2[0].item",
      "Next": "a = i",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "for(i of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i 2",
          "Variable": "$.heap5[0]",
        },
      ],
      "Default": "return a",
      "Type": "Choice",
    },
    "i": {
      "InputPath": "$.heap2[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": {
      "Next": "a = i 1",
      "Parameters": {
        "string.$": "States.Format('{}',$.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "i 2": {
      "InputPath": "$.heap5[0]",
      "Next": "a = i 2",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "i 3": {
      "Next": "a = i 3",
      "Parameters": {
        "string.$": "States.Format('{}',$.heap3)",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return a": {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": {
      "InputPath": "$.heap5[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
  },
}
`;

exports[`for break 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(i in input.items)": {
      "ItemsPath": "$.heap0",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": {
        "index.$": "States.Format('{}',$$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "for(i in input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === "1")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return "end"",
      "Type": "Choice",
    },
    "i": {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === "1")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === "1")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i__1",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.i__1",
                    },
                    {
                      "StringEquals": "1",
                      "Variable": "$.i__1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "end"",
        },
      ],
      "Default": "return i",
      "Type": "Choice",
    },
    "if(input.items[i] === "1")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.0__i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.0__i",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.0__i",
                    },
                    {
                      "StringEquals": "1",
                      "Variable": "$.0__i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "for(i of input.items)",
        },
      ],
      "Default": "return input.items[i]",
      "Type": "Choice",
    },
    "return "end"": {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": {
      "End": true,
      "InputPath": "$.0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for const i in items, items[i] 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(i in input.items)": {
      "ItemsPath": "$.heap0",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": {
        "index.$": "States.Format('{}',$$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "for(i in input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = items[i]": {
      "InputPath": "$.0__i",
      "Next": "tail__for(i in input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "assignValue__i": {
      "InputPath": "$.heap0[0].item",
      "Next": "a = items[i]",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for continue 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(i in input.items)": {
      "ItemsPath": "$.heap0",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": {
        "index.$": "States.Format('{}',$$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "for(i in input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === "1")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return "end"",
      "Type": "Choice",
    },
    "i": {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === "1")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === "1")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i__1",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.i__1",
                    },
                    {
                      "StringEquals": "1",
                      "Variable": "$.i__1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "tail__for(i of input.items)",
        },
      ],
      "Default": "return i",
      "Type": "Choice",
    },
    "if(input.items[i] === "1")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.0__i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.0__i",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.0__i",
                    },
                    {
                      "StringEquals": "1",
                      "Variable": "$.0__i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "tail__for(i in input.items)",
        },
      ],
      "Default": "return input.items[i]",
      "Type": "Choice",
    },
    "return "end"": {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": {
      "End": true,
      "InputPath": "$.0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for i in items, items[i] 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(i in input.items)": {
      "ItemsPath": "$.heap0",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": {
        "index.$": "States.Format('{}',$$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "for(i in input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = items[i]": {
      "InputPath": "$.0__i",
      "Next": "tail__for(i in input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "assignValue__i": {
      "InputPath": "$.heap0[0].item",
      "Next": "a = items[i]",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "i": {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for return 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(i in input.items)": {
      "ItemsPath": "$.heap0",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(i in input.items)",
      "Parameters": {
        "index.$": "States.Format('{}',$$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "for(i in input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__i": {
      "InputPath": "$.heap0[0].item",
      "Next": "if(input.items[i] === "1")",
      "ResultPath": "$.0__i",
      "Type": "Pass",
    },
    "for(i in input.items)": {
      "InputPath": "$.input.items",
      "Next": "1__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(i in input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "for(i of input.items)",
      "Type": "Choice",
    },
    "hasNext__for(i of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "i 1",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "return "end"",
      "Type": "Choice",
    },
    "i": {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__i",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": {
      "InputPath": "$.heap1[0]",
      "Next": "if(i === "1")",
      "ResultPath": "$.i__1",
      "Type": "Pass",
    },
    "if(i === "1")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i__1",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i__1",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.i__1",
                    },
                    {
                      "StringEquals": "1",
                      "Variable": "$.i__1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return i",
        },
      ],
      "Default": "tail__for(i of input.items)",
      "Type": "Choice",
    },
    "if(input.items[i] === "1")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.0__i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.0__i",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.0__i",
                    },
                    {
                      "StringEquals": "1",
                      "Variable": "$.0__i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return input.items[i]",
        },
      ],
      "Default": "tail__for(i in input.items)",
      "Type": "Choice",
    },
    "return "end"": {
      "End": true,
      "Result": "end",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return i": {
      "End": true,
      "InputPath": "$.i__1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items[i]": {
      "End": true,
      "InputPath": "$.0__i",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(i in input.items)": {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(i in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(i of input.items)": {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(i of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) empty 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "for(;;)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "body__for(;;)": {
      "Next": "increment__for(;;)",
      "Type": "Pass",
    },
    "for(;;)": {
      "Next": "body__for(;;)",
      "Type": "Pass",
    },
    "increment__for(;;)": {
      "Next": "for(;;)",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(i = 0;i < 3;i = if(i === 0))": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    {
                      "NumericLessThan": 3,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "await task(i)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "1__if(i === 1)": {
      "InputPath": "$.heap1",
      "Next": "i = if(i === 0) 1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "for(i = 0;i < 3;i = if(i === 0))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(i)": {
      "InputPath": "$.i",
      "Next": "i = if(i === 0)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "false__if(i === 1)": {
      "Next": "1__if(i === 1)",
      "Result": 3,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(i = 0;i < 3;i = if(i === 0))": {
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "Result": 0,
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = if(i === 0)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__i = if(i === 0)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    {
                      "NumericEquals": 1,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__if(i === 1)",
        },
      ],
      "Default": "false__if(i === 1)",
      "Type": "Choice",
    },
    "i = if(i === 0) 1": {
      "InputPath": "$.heap2",
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__i = if(i === 0)": {
      "Next": "i = if(i === 0) 1",
      "Result": 1,
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "true__if(i === 1)": {
      "Next": "1__if(i === 1)",
      "Result": 2,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop complex 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await task({i: i, j: j})": {
      "Next": "i = i.slice(1) , j = j.slice(1)",
      "Parameters": {
        "i.$": "$.heap0",
        "j.$": "$.j",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.i[0]",
                },
                {
                  "IsNull": false,
                  "Variable": "$.i[0]",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.i[0]",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.i[0]",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.i[0]",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.i[0]",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.i[0]",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.i[0]",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.i[0]",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.i[0]",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.i[0]",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.i[0]",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.i[0]",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "await task({i: i, j: j})",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task({i: i, j: j})": {
      "InputPath": "$.i",
      "Next": "1__await task({i: i, j: j})",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))": {
      "Next": "j",
      "Result": [
        1,
        2,
      ],
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = i.slice(1) , j = j.slice(1)": {
      "InputPath": "$.i[1:]",
      "Next": "j = j.slice(1)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "j": {
      "Next": "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "Result": [
        3,
        4,
      ],
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "j = j.slice(1)": {
      "InputPath": "$.j[1:]",
      "Next": "2__for(i = [1, 2],j = [3, 4];i[0];i = i.slice(1) , j = j.slice(1))",
      "ResultPath": "$.j",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) loop empty body 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(i = 0;i < 3;i = if(i === 0))": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.i",
                    },
                    {
                      "And": [
                        {
                          "IsNumeric": true,
                          "Variable": "$.i",
                        },
                        {
                          "NumericLessThan": 3,
                          "Variable": "$.i",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.i",
                    },
                    {
                      "And": [
                        {
                          "IsNumeric": true,
                          "Variable": "$.i",
                        },
                        {
                          "NumericEquals": 0,
                          "Variable": "$.i",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__i = if(i === 0)",
        },
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.i",
                    },
                    {
                      "And": [
                        {
                          "IsNumeric": true,
                          "Variable": "$.i",
                        },
                        {
                          "NumericLessThan": 3,
                          "Variable": "$.i",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.i",
                    },
                    {
                      "And": [
                        {
                          "IsNumeric": true,
                          "Variable": "$.i",
                        },
                        {
                          "NumericEquals": 1,
                          "Variable": "$.i",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "true__if(i === 1)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    {
                      "NumericLessThan": 3,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "false__if(i === 1)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "1__if(i === 1)": {
      "InputPath": "$.heap0",
      "Next": "i = if(i === 0) 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "for(i = 0;i < 3;i = if(i === 0))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__if(i === 1)": {
      "Next": "1__if(i === 1)",
      "Result": 3,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(i = 0;i < 3;i = if(i === 0))": {
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "Result": 0,
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i = if(i === 0) 1": {
      "InputPath": "$.heap1",
      "Next": "1__for(i = 0;i < 3;i = if(i === 0))",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__i = if(i === 0)": {
      "Next": "i = if(i === 0) 1",
      "Result": 1,
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "true__if(i === 1)": {
      "Next": "1__if(i === 1)",
      "Result": 2,
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for(;;) no statement 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await task()",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task()": {
      "InputPath": "$.fnl_context.null",
      "Next": "return null",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-in-loop variable initializer 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "for(x of input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(x of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(x of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(x of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "x",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return x": {
      "End": true,
      "InputPath": "$.x",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "x": {
      "InputPath": "$.heap0[0]",
      "Next": "return x",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop and do nothing 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "for(item of input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = item": {
      "InputPath": "$.item",
      "Next": "tail__for(item of input.items)",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(item of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap0[0]",
      "Next": "a = item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop inline array 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "for(item of [1, 2, 3])",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = item": {
      "InputPath": "$.item",
      "Next": "tail__for(item of [1, 2, 3])",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "for(item of [1, 2, 3])": {
      "Next": "hasNext__for(item of [1, 2, 3])",
      "Result": [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of [1, 2, 3])": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap0[0]",
      "Next": "a = item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of [1, 2, 3])": {
      "InputPath": "$.heap0[1:]",
      "Next": "hasNext__for(item of [1, 2, 3])",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-loop over a list literal 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await computeScore({id: input.id, name: name})": {
      "Next": "tail__for(name of people)",
      "Parameters": {
        "id.$": "$.heap0",
        "name.$": "$.name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "people = ["sam", "sam"]",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: name})": {
      "InputPath": "$.input.id",
      "Next": "1__await computeScore({id: input.id, name: name})",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "for(name of people)": {
      "InputPath": "$.people",
      "Next": "hasNext__for(name of people)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "hasNext__for(name of people)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "name",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "name": {
      "InputPath": "$.heap2[0]",
      "Next": "await computeScore({id: input.id, name: name})",
      "ResultPath": "$.name",
      "Type": "Pass",
    },
    "people = ["sam", "sam"]": {
      "Next": "for(name of people)",
      "Result": [
        "sam",
        "sam",
      ],
      "ResultPath": "$.people",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(name of people)": {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(name of people)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`for-of { try { task() } catch (err) { if(err) throw } finally { task() } } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__catch__try": {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "tail__for(item of input.items)",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "for(item of input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === "you dun' goofed")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": {
      "Next": "1__catch__try",
      "Parameters": {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "for(item of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap2[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "if(err.message === "you dun' goofed")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    {
                      "StringEquals": "you dun' goofed",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error("little")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap2[0]",
      "Next": "try",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": {
      "InputPath": "$.heap2[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "throw new Error("little")": {
      "Next": "finally",
      "Result": {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
    "try": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "InputPath": "$.item",
      "Next": "finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`for-of-loop variable initializer 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(x in input.items)": {
      "ItemsPath": "$.heap0",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(x in input.items)",
      "Parameters": {
        "index.$": "States.Format('{}',$$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "for(x in input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "assignValue__x": {
      "InputPath": "$.heap0[0].item",
      "Next": "return x",
      "ResultPath": "$.0__x",
      "Type": "Pass",
    },
    "for(x in input.items)": {
      "InputPath": "$.input.items",
      "Next": "1__for(x in input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(x in input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "x",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return x": {
      "End": true,
      "InputPath": "$.x",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "x": {
      "InputPath": "$.heap0[0].index",
      "Next": "assignValue__x",
      "ResultPath": "$.x",
      "Type": "Pass",
    },
  },
}
`;

exports[`iam policy for AWS.SDK.CloudWatch.describeAlarms 1`] = `
{
  "Mappings": {
    "ServiceprincipalMap": {
      "af-south-1": {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-west-1": {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "FC4345940": {
      "DependsOn": [
        "FServiceRole3AC82EE1",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function() { return null; }",
        },
        "FunctionName": "testFunction",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "FServiceRole3AC82EE1",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "FServiceRole3AC82EE1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TableCD117FA1": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5,
        },
        "TableName": "testTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "fn5FF616E3": {
      "DependsOn": [
        "fnRoleDefaultPolicy4FB655BE",
        "fnRole50A611CF",
      ],
      "Properties": {
        "DefinitionString": "{"StartAt":"Initialize Functionless Context","States":{"Initialize Functionless Context":{"Type":"Pass","Parameters":{"fnl_context":{"null":null}},"ResultPath":"$","Next":"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso"},"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso":{"Type":"Task","Resource":"arn:aws:states:::aws-sdk:cloudwatch:describeAlarms","Next":"MetricAlarms","Parameters":{},"ResultPath":"$.heap0"},"MetricAlarms":{"Type":"Pass","Next":"return MetricAlarms","ResultPath":"$.MetricAlarms","InputPath":"$.heap0['MetricAlarms']"},"return MetricAlarms":{"Type":"Pass","End":true,"ResultPath":"$","InputPath":"$.MetricAlarms"}}}",
        "RoleArn": {
          "Fn::GetAtt": [
            "fnRole50A611CF",
            "Arn",
          ],
        },
        "StateMachineType": "EXPRESS",
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "fnRole50A611CF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "fnRoleDefaultPolicy4FB655BE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:DescribeAlarms",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "fnRoleDefaultPolicy4FB655BE",
        "Roles": [
          {
            "Ref": "fnRole50A611CF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`if (?? === typeof x) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__if_1__if(input.id === undefined)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    {
                      "StringEquals": "undefined",
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "undefined"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_2__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_2__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_2__if(input.id === undefined)",
        },
        {
          "IsPresent": true,
          "Next": "object__if_2__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_2__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_2__if(input.id === undefined)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap1",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap1",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap1",
                    },
                    {
                      "StringEquals": "string",
                      "Variable": "$.heap1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "string"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_3__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_3__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_3__if(input.id === undefined)",
        },
        {
          "IsPresent": true,
          "Next": "object__if_3__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_3__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_3__if(input.id === undefined)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap2",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "StringEquals": "boolean",
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "boolean"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_4__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_4__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_4__if(input.id === undefined)",
        },
        {
          "IsPresent": true,
          "Next": "object__if_4__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_4__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_4__if(input.id === undefined)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap3",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap3",
                    },
                    {
                      "StringEquals": "number",
                      "Variable": "$.heap3",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "number"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_5__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_5__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_5__if(input.id === undefined)",
        },
        {
          "IsPresent": true,
          "Next": "object__if_5__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_5__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_5__if(input.id === undefined)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap4",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap4",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap4",
                    },
                    {
                      "StringEquals": "bigint",
                      "Variable": "$.heap4",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "bigint"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "if(input.id === undefined)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__if_1__if(input.id === undefined)": {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__if_2__if(input.id === undefined)": {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "boolean__if_3__if(input.id === undefined)": {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__if_4__if(input.id === undefined)": {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__if_5__if(input.id === undefined)": {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "if(input.id === undefined)": {
      "Choices": [
        {
          "Next": "return "null"",
          "Or": [
            {
              "IsPresent": false,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.input.id",
                    },
                    {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_1__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_1__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_1__if(input.id === undefined)",
        },
        {
          "IsPresent": true,
          "Next": "object__if_1__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_1__if(input.id === undefined)",
      "Type": "Choice",
    },
    "number__if_1__if(input.id === undefined)": {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__if_2__if(input.id === undefined)": {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "number__if_3__if(input.id === undefined)": {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__if_4__if(input.id === undefined)": {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__if_5__if(input.id === undefined)": {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "object__if_1__if(input.id === undefined)": {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__if_2__if(input.id === undefined)": {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "object__if_3__if(input.id === undefined)": {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__if_4__if(input.id === undefined)": {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__if_5__if(input.id === undefined)": {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return "bigint"": {
      "End": true,
      "Result": "bigint",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "boolean"": {
      "End": true,
      "Result": "boolean",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "null"": {
      "End": true,
      "Result": "null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "number"": {
      "End": true,
      "Result": "number",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "string"": {
      "End": true,
      "Result": "string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "undefined"": {
      "End": true,
      "Result": "undefined",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "string__if_1__if(input.id === undefined)": {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__if_2__if(input.id === undefined)": {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "string__if_3__if(input.id === undefined)": {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__if_4__if(input.id === undefined)": {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__if_5__if(input.id === undefined)": {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "undefined__if_1__if(input.id === undefined)": {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__if_2__if(input.id === undefined)": {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "undefined__if_3__if(input.id === undefined)": {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__if_4__if(input.id === undefined)": {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__if_5__if(input.id === undefined)": {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`if (typeof x === ??) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__if_1__if(input.id === undefined)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    {
                      "StringEquals": "undefined",
                      "Variable": "$.heap0",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "undefined"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_2__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_2__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_2__if(input.id === undefined)",
        },
        {
          "IsPresent": true,
          "Next": "object__if_2__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_2__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_2__if(input.id === undefined)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap1",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap1",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap1",
                    },
                    {
                      "StringEquals": "string",
                      "Variable": "$.heap1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "string"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_3__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_3__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_3__if(input.id === undefined)",
        },
        {
          "IsPresent": true,
          "Next": "object__if_3__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_3__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_3__if(input.id === undefined)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap2",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap2",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap2",
                    },
                    {
                      "StringEquals": "boolean",
                      "Variable": "$.heap2",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "boolean"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_4__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_4__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_4__if(input.id === undefined)",
        },
        {
          "IsPresent": true,
          "Next": "object__if_4__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_4__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_4__if(input.id === undefined)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap3",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap3",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap3",
                    },
                    {
                      "StringEquals": "number",
                      "Variable": "$.heap3",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "number"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_5__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_5__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_5__if(input.id === undefined)",
        },
        {
          "IsPresent": true,
          "Next": "object__if_5__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_5__if(input.id === undefined)",
      "Type": "Choice",
    },
    "1__if_5__if(input.id === undefined)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap4",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.heap4",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap4",
                    },
                    {
                      "StringEquals": "bigint",
                      "Variable": "$.heap4",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "bigint"",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "if(input.id === undefined)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__if_1__if(input.id === undefined)": {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "boolean__if_2__if(input.id === undefined)": {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "boolean__if_3__if(input.id === undefined)": {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "boolean__if_4__if(input.id === undefined)": {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "boolean__if_5__if(input.id === undefined)": {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "boolean",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "if(input.id === undefined)": {
      "Choices": [
        {
          "Next": "return "null"",
          "Or": [
            {
              "IsPresent": false,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.input.id",
                    },
                    {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__if_1__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__if_1__if(input.id === undefined)",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__if_1__if(input.id === undefined)",
        },
        {
          "IsPresent": true,
          "Next": "object__if_1__if(input.id === undefined)",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__if_1__if(input.id === undefined)",
      "Type": "Choice",
    },
    "number__if_1__if(input.id === undefined)": {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__if_2__if(input.id === undefined)": {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "number__if_3__if(input.id === undefined)": {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "number__if_4__if(input.id === undefined)": {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "number__if_5__if(input.id === undefined)": {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "number",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "object__if_1__if(input.id === undefined)": {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__if_2__if(input.id === undefined)": {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "object__if_3__if(input.id === undefined)": {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "object__if_4__if(input.id === undefined)": {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "object__if_5__if(input.id === undefined)": {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "object",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return "bigint"": {
      "End": true,
      "Result": "bigint",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "boolean"": {
      "End": true,
      "Result": "boolean",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "null"": {
      "End": true,
      "Result": "null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "number"": {
      "End": true,
      "Result": "number",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "string"": {
      "End": true,
      "Result": "string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "undefined"": {
      "End": true,
      "Result": "undefined",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "string__if_1__if(input.id === undefined)": {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "string__if_2__if(input.id === undefined)": {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "string__if_3__if(input.id === undefined)": {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "string__if_4__if(input.id === undefined)": {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "string__if_5__if(input.id === undefined)": {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "string",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "undefined__if_1__if(input.id === undefined)": {
      "Next": "1__if_1__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__if_2__if(input.id === undefined)": {
      "Next": "1__if_2__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "undefined__if_3__if(input.id === undefined)": {
      "Next": "1__if_3__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "undefined__if_4__if(input.id === undefined)": {
      "Next": "1__if_4__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "undefined__if_5__if(input.id === undefined)": {
      "Next": "1__if_5__if(input.id === undefined)",
      "Result": "undefined",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`if 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(true)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(true)": {
      "Choices": [
        {
          "IsNull": false,
          "Next": "return "yup"",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return "noop"",
      "Type": "Choice",
    },
    "return "noop"": {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "yup"": {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if else 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(input.val === "a")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val === "a")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.val",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.val",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.val",
                    },
                    {
                      "StringEquals": "a",
                      "Variable": "$.input.val",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "yup"",
        },
      ],
      "Default": "return "noop"",
      "Type": "Choice",
    },
    "return "noop"": {
      "End": true,
      "Result": "noop",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "yup"": {
      "End": true,
      "Result": "yup",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if if 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(input.val !== "a")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.val !== "a")": {
      "Choices": [
        {
          "And": [
            {
              "Not": {
                "And": [
                  {
                    "IsPresent": true,
                    "Variable": "$.input.val",
                  },
                  {
                    "And": [
                      {
                        "IsNull": false,
                        "Variable": "$.input.val",
                      },
                      {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.input.val",
                          },
                          {
                            "StringEquals": "a",
                            "Variable": "$.input.val",
                          },
                        ],
                      },
                    ],
                  },
                ],
              },
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.val",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.input.val",
                    },
                    {
                      "And": [
                        {
                          "IsString": true,
                          "Variable": "$.input.val",
                        },
                        {
                          "StringEquals": "b",
                          "Variable": "$.input.val",
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "hullo"",
        },
        {
          "Next": "return "woop"",
          "Not": {
            "And": [
              {
                "IsPresent": true,
                "Variable": "$.input.val",
              },
              {
                "And": [
                  {
                    "IsNull": false,
                    "Variable": "$.input.val",
                  },
                  {
                    "And": [
                      {
                        "IsString": true,
                        "Variable": "$.input.val",
                      },
                      {
                        "StringEquals": "a",
                        "Variable": "$.input.val",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        },
      ],
      "Default": "return "woop"",
      "Type": "Choice",
    },
    "return "hullo"": {
      "End": true,
      "Result": "hullo",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "woop"": {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if invoke 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__if(await task())": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.heap0",
                },
                {
                  "IsNull": false,
                  "Variable": "$.heap0",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.heap0",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.heap0",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.heap0",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.heap0",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.heap0",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.heap0",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.heap0",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.heap0",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.heap0",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.heap0",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "return "hi"",
        },
      ],
      "Default": "return "woop"",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "if(await task())",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(await task())": {
      "InputPath": "$.fnl_context.null",
      "Next": "1__if(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return "hi"": {
      "End": true,
      "Result": "hi",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "woop"": {
      "End": true,
      "Result": "woop",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if-else 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(input.id === "hello")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === "hello")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "hello"",
        },
      ],
      "Default": "return "world"",
      "Type": "Choice",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "world"": {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`if-else-if 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "if(input.id === "hello")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(input.id === "hello")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "hello"",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "world",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "world"",
        },
      ],
      "Default": "return",
      "Type": "Choice",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "world"": {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`import from express state machine into machine 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await machine({input: {id: "hi"}})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await machine({input: {id: "hi"}})": {
      "Next": "return null",
      "Parameters": {
        "Input": {
          "id": "hi",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startSyncExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`import from state machine into state machine 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await machine({input: {id: "hi"}})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await machine({input: {id: "hi"}})": {
      "Next": "return null",
      "Parameters": {
        "Input": {
          "id": "hi",
        },
        "StateMachineArn": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sfn:startExecution",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`input.b ? task() : task(input) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__false__return if(input.b)": {
      "InputPath": "$.heap1",
      "Next": "1__return if(input.b)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return if(input.b)": {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__true__return if(input.b)": {
      "InputPath": "$.heap0",
      "Next": "1__return if(input.b)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return if(input.b)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return if(input.b)": {
      "InputPath": "$.input",
      "Next": "1__false__return if(input.b)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return if(input.b)": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.b",
                },
                {
                  "IsNull": false,
                  "Variable": "$.input.b",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.b",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.input.b",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.input.b",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.input.b",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.input.b",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.input.b",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.input.b",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.b",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.b",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.input.b",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__return if(input.b)",
        },
      ],
      "Default": "false__return if(input.b)",
      "Type": "Choice",
    },
    "true__return if(input.b)": {
      "InputPath": "$.fnl_context.null",
      "Next": "1__true__return if(input.b)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`input.list.map((item) => item).filter((item) => item.length > 2) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return input.list.map(function (item)).filter(function (item))": {
      "End": true,
      "InputPath": "$.heap0[?(@.length>2)]",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return input.list.map(function (item)).filter(function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.map(function (item)).filter(function (item))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.map(function (item)).filter(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.map(function (item)).filter(function (item))": {
      "Next": "set__end__return input.list.map(function (item)).filter(function (item))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.map(function (item)).filter(function (item)": {
      "Next": "check__return input.list.map(function (item)).filter(function (item))",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.map(function (item)).filter(function (item))": {
      "Next": "check__return input.list.map(function (item)).filter(function (item))",
      "Parameters": {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": {
      "InputPath": "$.item",
      "Next": "handleResult__return input.list.map(function (item)).filter(function (item)",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "set__end__return input.list.map(function (item)).filter(function (item))": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.map(function (item)).filter(function (item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`let and set 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "a = null",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = "hello"": {
      "Next": "a = "hello" + " world"",
      "Result": "hello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = "hello" + " world"": {
      "Next": "a = "hello" + 1",
      "Result": "hello world",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = "hello" + 1": {
      "Next": "a = 1 + "hello"",
      "Result": "hello1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = "hello" + ["world"]": {
      "Next": "return a",
      "Result": "helloworld",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = "hello" + null": {
      "Next": "a = [null]",
      "Result": "hellonull",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = "hello" + true": {
      "Next": "a = false + "hello"",
      "Result": "hellotrue",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = "hello" + {place: "world"}": {
      "Next": "a = "hello" + ["world"]",
      "Result": "hello[object Object]",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = -1": {
      "Next": "a = -100",
      "Result": -1,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = -100": {
      "Next": "a = 1 + 2",
      "Result": -100,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 0": {
      "Next": "a = -1",
      "Result": 0,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1 + "hello"": {
      "Next": "a = "hello" + true",
      "Result": "1hello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = 1 + 2": {
      "Next": "a = "hello"",
      "Result": 3,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [-1]": {
      "Next": "a = [true]",
      "Result": [
        -1,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [1]": {
      "Next": "a = [-1]",
      "Result": [
        1,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [null]": {
      "Next": "a = [1]",
      "Result": [
        null,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [true]": {
      "Next": "a = [{key: "value"}]",
      "Result": [
        true,
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = [{key: "value"}]": {
      "Next": "a = {key: "value"}",
      "Result": [
        {
          "key": "value",
        },
      ],
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = a": {
      "InputPath": "$.a",
      "Next": "a = "hello" + {place: "world"}",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = false": {
      "Next": "a = 0",
      "Result": false,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = false + "hello"": {
      "Next": "a = null + "hello"",
      "Result": "falsehello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null": {
      "InputPath": "$.fnl_context.null",
      "Next": "a = true",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = null + "hello"": {
      "Next": "a = "hello" + null",
      "Result": "nullhello",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = true": {
      "Next": "a = false",
      "Result": true,
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {1: "value"}": {
      "Next": "a = a",
      "Result": {
        "1": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = {key: "value"}": {
      "Next": "a = {1: "value"}",
      "Result": {
        "key": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return a": {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`let cond; do { cond = task() } while (cond) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "cond = await task()",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": {
      "Choices": [
        {
          "Next": "cond = await task() 1",
          "Or": [
            {
              "And": [
                {
                  "IsPresent": false,
                  "Variable": "$.cond",
                },
                {
                  "IsPresent": false,
                  "Variable": "$.fnl_context.null",
                },
              ],
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.cond",
                },
                {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.null",
                },
                {
                  "Or": [
                    {
                      "And": [
                        {
                          "IsNull": true,
                          "Variable": "$.cond",
                        },
                        {
                          "IsNull": true,
                          "Variable": "$.fnl_context.null",
                        },
                      ],
                    },
                    {
                      "And": [
                        {
                          "IsNull": false,
                          "Variable": "$.cond",
                        },
                        {
                          "IsNull": false,
                          "Variable": "$.fnl_context.null",
                        },
                        {
                          "Or": [
                            {
                              "And": [
                                {
                                  "IsString": true,
                                  "Variable": "$.cond",
                                },
                                {
                                  "StringEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            {
                              "And": [
                                {
                                  "IsBoolean": true,
                                  "Variable": "$.cond",
                                },
                                {
                                  "BooleanEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            {
                              "And": [
                                {
                                  "IsNumeric": true,
                                  "Variable": "$.cond",
                                },
                                {
                                  "NumericEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "cond = await task() 1": {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 2": {
      "InputPath": "$.heap0",
      "Next": "cond = await task()",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`let empty 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "a = "b"",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = "b"": {
      "Next": "return a",
      "Result": "b",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "return a": {
      "End": true,
      "InputPath": "$.a",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.filter(item => item.length > 2).map(item => item) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return input.list.filter(function (item)).map(function (item))": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return input.list.filter(function (item)).map(function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.filter(function (item)).map(function (item))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.filter(function (item)).map(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.filter(function (item)).map(function (item))": {
      "Next": "set__end__return input.list.filter(function (item)).map(function (item))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return input.list.filter(function (item)).map(function (item)": {
      "Next": "check__return input.list.filter(function (item)).map(function (item))",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return item",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.filter(function (item)).map(function (item))": {
      "Next": "check__return input.list.filter(function (item)).map(function (item))",
      "Parameters": {
        "arr.$": "$.input.list[?(@.length>2)]",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return item": {
      "InputPath": "$.item",
      "Next": "handleResult__return input.list.filter(function (item)).map(function (item)",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "set__end__return input.list.filter(function (item)).map(function (item))": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return input.list.filter(function (item)).map(function (item))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.filter(item => item.length > 2).map(item => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return Promise.all(input.list.filter(function (item)).map(function (item": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.filter(function (item)).map(fun",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return Promise.all(input.list.filter(function (item)).map(function (item)))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.filter(function (item)).map(function (": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.filter(function (item)).map(function (it",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.filter(function (item)).map(function (it": {
      "Next": "set__end__return Promise.all(input.list.filter(function (item)).map(functio",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.filter(function (item)).map(fun": {
      "Next": "check__return Promise.all(input.list.filter(function (item)).map(function (",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return Promise.all(input.list.filter(function (item)).map(function (item)))": {
      "Next": "check__return Promise.all(input.list.filter(function (item)).map(function (",
      "Parameters": {
        "arr.$": "$.input.list[?(@.length>2)]",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.filter(function (item)).map(functio": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.filter(function (item)).map(function (item",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach((item, i) => if (i == 0) task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return input.list.forEach(function (item,i))": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return input.list.forEach(function (item,i))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item,i))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item,i))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item,i))": {
      "Next": "1__return input.list.forEach(function (item,i))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "i": {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return input.list.forEach(function (item,i))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return input.list.forEach(function (item,i))",
      "Parameters": {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": {
        "arr.$": "$",
      },
      "Type": "Map",
    },
    "return null": {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "return task(item)": {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function (item,i))": {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach((item, i, list) => if (i == 0) task(item) else task(list[0])) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return input.list.forEach(function (item,i))": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(input.list[0])": {
      "InputPath": "$.heap2",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return task(item)": {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return input.list.forEach(function (item,i))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item,i))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item,i))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item,i))": {
      "Next": "1__return input.list.forEach(function (item,i))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "i": {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return task(input.list[0])",
      "Type": "Choice",
    },
    "return input.list.forEach(function (item,i))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return input.list.forEach(function (item,i))",
      "Parameters": {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": {
        "arr.$": "$",
      },
      "Type": "Map",
    },
    "return task(input.list[0])": {
      "InputPath": "$.input.list[0]",
      "Next": "1__return task(input.list[0])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return task(item)": {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function (item,i))": {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item,i))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach(item => ) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "a = """,
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = """: {
      "Next": "input.list.forEach(function (item))",
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = aitem": {
      "InputPath": "$.a",
      "Next": "item 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "a = aitem 1": {
      "InputPath": "$.heap3.string",
      "Next": "return null 1",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "aitem": {
      "Next": "a = aitem 1",
      "Parameters": {
        "string.$": "States.Format('{}{}',$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "check__input.list.forEach(function (item))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__input.list.forEach(function (item))",
      "Type": "Choice",
    },
    "end__input.list.forEach(function (item))": {
      "Next": "return null",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.list.forEach(function (item))": {
      "Next": "check__input.list.forEach(function (item))",
      "Parameters": {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "a = aitem",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "item 1": {
      "InputPath": "$.item",
      "Next": "aitem",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null 1": {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "tail__input.list.forEach(function (item))": {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.forEach(item => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return input.list.forEach(function (item))": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return input.list.forEach(function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item))": {
      "Next": "1__return input.list.forEach(function (item))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.forEach(function (item))": {
      "Next": "check__return input.list.forEach(function (item))",
      "Parameters": {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__return input.list.forEach(function (item))": {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map((item, i) => if (i == 0) task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return Promise.all(input.list.map(function (item,i)))": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return Promise.all(input.list.map(function (item,i)))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item,i)))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item,i)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item,i)))": {
      "Next": "set__end__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item,i)))": {
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "return Promise.all(input.list.map(function (item,i)))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "return null": {
      "InputPath": "$.fnl_context.null",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "return task(item)": {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function (item,i)))": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map((item, i, list) => if (i == 0) task(item) else task(list[0])) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return Promise.all(input.list.map(function (item,i)))": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(input.list[0])": {
      "InputPath": "$.heap2",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return task(item)": {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return Promise.all(input.list.map(function (item,i)))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item,i)))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "function (item,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item,i)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item,i)))": {
      "Next": "set__end__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (item,i)": {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item,i)))": {
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "if(i === 0)",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "if(i === 0)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.i",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.i",
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.i",
                    },
                    {
                      "NumericEquals": 0,
                      "Variable": "$.i",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return task(item)",
        },
      ],
      "Default": "return task(input.list[0])",
      "Type": "Choice",
    },
    "return Promise.all(input.list.map(function (item,i)))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__return Promise.all(input.list.map(function (item,i)))",
      "Parameters": {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "return task(input.list[0])": {
      "InputPath": "$.input.list[0]",
      "Next": "1__return task(input.list[0])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return task(item)": {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function (item,i)))": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item,i)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`list.map(item => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return Promise.all(input.list.map(function (item)))": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(item)": {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return Promise.all(input.list.map(function (item)))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item)))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item)))": {
      "Next": "set__end__return Promise.all(input.list.map(function (item)))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item)))": {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function (item)))": {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return task(item)": {
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__return Promise.all(input.list.map(function (item)))": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`nested try-catch 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "Cause": "{"message":"error3"}",
      "Error": "Error",
      "Type": "Fail",
    },
    "catch__try 1": {
      "Next": "catch__try",
      "Result": {
        "message": "error2",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": {
      "Next": "catch__try 1",
      "Result": {
        "message": "error1",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`non-literal params AWS.SDK.CloudWatch.deleteAlarms 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(fun": {
      "Next": "return null",
      "Parameters": {
        "AlarmNames.$": "$.heap1",
      },
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:deleteAlarms",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "MetricAlarms": {
      "InputPath": "$.heap0['MetricAlarms']",
      "Next": "if(MetricAlarms === undefined)",
      "ResultPath": "$.MetricAlarms",
      "Type": "Pass",
    },
    "a": {
      "InputPath": "$.heap1.arr[0]",
      "Next": "return a.AlarmName",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(functi": {
      "Next": "check__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map",
      "Parameters": {
        "arr.$": "$.MetricAlarms",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "check__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "a",
          "Variable": "$.heap1.arr[0]",
        },
      ],
      "Default": "end__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(f",
      "Type": "Choice",
    },
    "end__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(f": {
      "Next": "set__end__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap1.arrStr))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "handleResult__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAla": {
      "Next": "check__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map",
      "Parameters": {
        "arr.$": "$.heap1.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap1.arrStr,States.JsonToString($.heap1.arr[0]))",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "if(MetricAlarms === undefined)": {
      "Choices": [
        {
          "Next": "return",
          "Or": [
            {
              "IsPresent": false,
              "Variable": "$.MetricAlarms",
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.MetricAlarms",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.MetricAlarms",
                    },
                    {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(functi",
      "Type": "Choice",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return a.AlarmName": {
      "InputPath": "$.a.AlarmName",
      "Next": "handleResult__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAla",
      "ResultPath": "$.heap1.arr[0]",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "set__end__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.": {
      "InputPath": "$.heap1.result[1:]",
      "Next": "1__await $AWS.SDK.CloudWatch.deleteAlarms({AlarmNames: MetricAlarms.map(fun",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso": {
      "Next": "MetricAlarms",
      "Parameters": {},
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`null coalesce logic 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return {null: input.a ?? input.b}": {
      "End": true,
      "Parameters": {
        "null.$": "$.heap0",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return {null: input.a ?? input.b}",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return {null: input.a ?? input.b}": {
      "InputPath": "$.input.b",
      "Next": "1__return {null: input.a ?? input.b}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return {null: input.a ?? input.b}": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.a",
            },
            {
              "IsNull": false,
              "Variable": "$.input.a",
            },
          ],
          "Next": "true__return {null: input.a ?? input.b}",
        },
      ],
      "Default": "false__return {null: input.a ?? input.b}",
      "Type": "Choice",
    },
    "true__return {null: input.a ?? input.b}": {
      "InputPath": "$.input.a",
      "Next": "1__return {null: input.a ?? input.b}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`overwrite aslServiceName AWS.SDK.CloudWatch.describeAlarms 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "MetricAlarms": {
      "InputPath": "$.heap0['MetricAlarms']",
      "Next": "return MetricAlarms",
      "ResultPath": "$.MetricAlarms",
      "Type": "Pass",
    },
    "return MetricAlarms": {
      "End": true,
      "InputPath": "$.MetricAlarms",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso": {
      "Next": "MetricAlarms",
      "Parameters": {},
      "Resource": "arn:aws:states:::aws-sdk:cw:describeAlarms",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`overwrite iamActions AWS.SDK.CloudWatch.describeAlarms 1`] = `
{
  "Mappings": {
    "ServiceprincipalMap": {
      "af-south-1": {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-southeast-1": {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-north-1": {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-south-1": {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-west-1": {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "FC4345940": {
      "DependsOn": [
        "FServiceRole3AC82EE1",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "exports.handler = function() { return null; }",
        },
        "FunctionName": "testFunction",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "FServiceRole3AC82EE1",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "FServiceRole3AC82EE1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "TableCD117FA1": {
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5,
        },
        "TableName": "testTable",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Retain",
    },
    "fn5FF616E3": {
      "DependsOn": [
        "fnRoleDefaultPolicy4FB655BE",
        "fnRole50A611CF",
      ],
      "Properties": {
        "DefinitionString": "{"StartAt":"Initialize Functionless Context","States":{"Initialize Functionless Context":{"Type":"Pass","Parameters":{"fnl_context":{"null":null}},"ResultPath":"$","Next":"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso"},"{ MetricAlarms } = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {reso":{"Type":"Task","Resource":"arn:aws:states:::aws-sdk:cloudwatch:describeAlarms","Next":"MetricAlarms","Parameters":{},"ResultPath":"$.heap0"},"MetricAlarms":{"Type":"Pass","Next":"return MetricAlarms","ResultPath":"$.MetricAlarms","InputPath":"$.heap0['MetricAlarms']"},"return MetricAlarms":{"Type":"Pass","End":true,"ResultPath":"$","InputPath":"$.MetricAlarms"}}}",
        "RoleArn": {
          "Fn::GetAtt": [
            "fnRole50A611CF",
            "Arn",
          ],
        },
        "StateMachineType": "EXPRESS",
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "fnRole50A611CF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "fnRoleDefaultPolicy4FB655BE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "cloudwatch:Describe*",
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "fnRoleDefaultPolicy4FB655BE",
        "Roles": [
          {
            "Ref": "fnRole50A611CF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

exports[`parse json 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return JSON.parse("{ a: 'a', b: { c: 'c' } }")": {
      "End": true,
      "InputPath": "$.heap1.out",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return JSON.parse("{ a: 'a', b: { c: 'c' } }") 1": {
      "Next": "1__return JSON.parse("{ a: 'a', b: { c: 'c' } }")",
      "Parameters": {
        "out.$": "States.StringToJson($.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return JSON.parse("{ a: 'a', b: { c: 'c' } }")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.parse("{ a: 'a', b: { c: 'c' } }")": {
      "Next": "1__return JSON.parse("{ a: 'a', b: { c: 'c' } }") 1",
      "Result": "{ a: 'a', b: { c: 'c' } }",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`purge SQS Queue 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await queue.purge()",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.purge()": {
      "Next": "return null",
      "Parameters": {
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:purgeQueue",
      "ResultPath": null,
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`put an event bus event 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await bus.putEvents({detail-type: "someEvent", source: "sfnTest", detail: {",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await bus.putEvents({detail-type: "someEvent", source: "sfnTest", detail: {": {
      "Next": "return null",
      "Parameters": {
        "Entries": [
          {
            "Account": "123456789012",
            "Detail": {
              "value.$": "$.input.id",
            },
            "DetailType": "someEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Id": "bbbbbbbb-eeee-eeee-eeee-ffffffffffff",
            "Region": "us-east-1",
            "Resources": [
              "__REPLACED_ARN",
            ],
            "Source": "sfnTest",
            "Time": "2022-08-05T16:19:03Z",
            "Version": "1",
          },
        ],
      },
      "Resource": "arn:aws:states:::events:putEvents",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`put multiple event bus events 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await bus.putEvents({detail-type: "someEvent", source: "sfnTest", detail: {",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await bus.putEvents({detail-type: "someEvent", source: "sfnTest", detail: {": {
      "Next": "return null",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "value.$": "$.input.id",
            },
            "DetailType": "someEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
          {
            "Detail": {
              "constant": "hi",
              "value.$": "$.input.id",
            },
            "DetailType": "someOtherEvent",
            "EventBusName": "__REPLACED_TOKEN",
            "Source": "sfnTest",
          },
        ],
      },
      "Resource": "arn:aws:states:::events:putEvents",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`receiveMessage with JSON serialization 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await queue.receiveMessage()",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.receiveMessage()": {
      "Next": "parseIfMessages__await queue.receiveMessage()",
      "Parameters": {
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:receiveMessage",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "parseIfMessages__await queue.receiveMessage()": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "parse__await queue.receiveMessage()",
          "Variable": "$.heap0.Messages",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "parse__await queue.receiveMessage()": {
      "ItemsPath": "$.heap0.Messages",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "Next": "UnwrapMessage__Default",
            "Parameters": {
              "parsed.$": "States.StringToJson($.message.Body)",
            },
            "ResultPath": "$.message.Message",
            "Type": "Pass",
          },
          "UnwrapMessage__Default": {
            "End": true,
            "InputPath": "$.message.Message.parsed",
            "OutputPath": "$.message",
            "ResultPath": "$.message.Message",
            "Type": "Pass",
          },
        },
      },
      "Next": "return null",
      "Parameters": {
        "message.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0.Messages",
      "Type": "Map",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`receiveMessage with Text serialization 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return queue.receiveMessage()": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return queue.receiveMessage()",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return queue.receiveMessage()": {
      "Next": "1__return queue.receiveMessage()",
      "Parameters": {
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:receiveMessage",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`result = $SFN.forEach(list, (item) => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return $SFN.forEach(input.list, function (item))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return $SFN.forEach(input.list, function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function (item))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "return task(item)",
        "States": {
          "1__return task(item)": {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function (item))",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`result = $SFN.map(list, (item) => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "result = await $SFN.map(input.list, function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "result": {
      "InputPath": "$.heap1",
      "Next": "return result",
      "ResultPath": "$.result",
      "Type": "Pass",
    },
    "result = await $SFN.map(input.list, function (item))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "return task(item)",
        "States": {
          "1__return task(item)": {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "result",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
    "return result": {
      "End": true,
      "InputPath": "$.result",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return $SFN.forEach(list, (item) => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return $SFN.forEach(input.list, function (item))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return $SFN.forEach(input.list, function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function (item))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "await task(item)",
        "States": {
          "await task(item)": {
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "return null": {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function (item))",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.forEach(list, (item) => try { task(item)) } catch { return null } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return $SFN.forEach(input.list, function (item))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return $SFN.forEach(input.list, function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, function (item))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "await task(item)",
        "States": {
          "await task(item)": {
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL",
                ],
                "Next": "catch__await task(item)",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "catch__await task(item)": {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return null": {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "1__return $SFN.forEach(input.list, function (item))",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.forEach(list, {maxConcurrency: 2} (item) => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "await task(item)",
        "States": {
          "await task(item)": {
            "InputPath": "$.item",
            "Next": "return null",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
          "return null": {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "MaxConcurrency": 2,
      "Next": "1__return $SFN.forEach(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, (item) => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return $SFN.map(input.list, function (item))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return $SFN.map(input.list, function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, function (item))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "return task(item)",
        "States": {
          "1__return task(item)": {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.map(input.list, function (item))",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, (item) => try { task(item)) } catch { return null } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return $SFN.map(input.list, function (item))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return $SFN.map(input.list, function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, function (item))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "try",
        "States": {
          "1__try": {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "catch__try": {
            "End": true,
            "InputPath": "$.fnl_context.null",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "try": {
            "Catch": [
              {
                "ErrorEquals": [
                  "States.ALL",
                ],
                "Next": "catch__try",
                "ResultPath": null,
              },
            ],
            "InputPath": "$.item",
            "Next": "1__try",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__return $SFN.map(input.list, function (item))",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.map(list, {maxConcurrency: 2} (item) => task(item)) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return $SFN.map(input.list, {maxConcurrency: 2}, function (item))": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return $SFN.map(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.map(input.list, {maxConcurrency: 2}, function (item))": {
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "return task(item)",
        "States": {
          "1__return task(item)": {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "MaxConcurrency": 2,
      "Next": "1__return $SFN.map(input.list, {maxConcurrency: 2}, function (item))",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`return $SFN.parallel(() => "hello", () => "world")) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return $SFN.parallel(function (), function ())": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return $SFN.parallel(function (), function ())",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel(function (), function ())": {
      "Branches": [
        {
          "StartAt": "return "hello"",
          "States": {
            "return "hello"": {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        {
          "StartAt": "return "world"",
          "States": {
            "return "world"": {
              "End": true,
              "Result": "world",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel(function (), function ())",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return $SFN.parallel(() => {})) } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return $SFN.parallel(function ())": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return $SFN.parallel(function ())",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return $SFN.parallel(function ())": {
      "Branches": [
        {
          "StartAt": "return null",
          "States": {
            "return null": {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Next": "1__return $SFN.parallel(function ())",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return $SFN.parallel(() => try { task() } catch { return null })) } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__try 1": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try 1",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try 1": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try 1": {
      "Branches": [
        {
          "StartAt": "try",
          "States": {
            "1__try": {
              "End": true,
              "InputPath": "$.heap0",
              "ResultPath": "$",
              "Type": "Pass",
            },
            "catch__try": {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
            "try": {
              "Catch": [
                {
                  "ErrorEquals": [
                    "States.ALL",
                  ],
                  "Next": "catch__try",
                  "ResultPath": null,
                },
              ],
              "InputPath": "$.fnl_context.null",
              "Next": "1__try",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap0",
              "Type": "Task",
            },
          },
        },
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try 1",
          "ResultPath": null,
        },
      ],
      "Next": "1__try 1",
      "ResultPath": "$.heap1",
      "Type": "Parallel",
    },
  },
}
`;

exports[`return AWS.DynamoDB.GetItem 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return {id: person.Item.id.S, name: person.Item.name.S}": {
      "End": true,
      "Parameters": {
        "id.$": "$.heap1",
        "name.$": "$.person.Item.name.S",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "person = await personTable.attributes.get({Key: {id: {S: input.id}}})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": {
      "Choices": [
        {
          "Next": "return",
          "Or": [
            {
              "IsPresent": false,
              "Variable": "$.person.Item",
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.person.Item",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.person.Item",
                    },
                    {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return {id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": {
      "InputPath": "$.heap0",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await personTable.attributes.get({Key: {id: {S: input.id}}})": {
      "Next": "person",
      "Parameters": {
        "Key": {
          "id": {
            "S.$": "$.input.id",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S}": {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S}",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.DynamoDB.GetItem dynamic parameters 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__person = await personTable.attributes.get({Key: {id: {S: input.id ?? "de": {
      "Next": "person",
      "Parameters": {
        "Key": {
          "id": {
            "S.$": "$.heap0",
          },
        },
        "TableName": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:dynamodb:getItem",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "1__return {id: person.Item.id.S, name: person.Item.name.S}": {
      "End": true,
      "Parameters": {
        "id.$": "$.heap2",
        "name.$": "$.person.Item.name.S",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "person = await personTable.attributes.get({Key: {id: {S: input.id ?? "defau",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__person = await personTable.attributes.get({Key: {id: {S: input.id ??": {
      "Next": "1__person = await personTable.attributes.get({Key: {id: {S: input.id ?? "de",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(person.Item === undefined)": {
      "Choices": [
        {
          "Next": "return",
          "Or": [
            {
              "IsPresent": false,
              "Variable": "$.person.Item",
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.person.Item",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.person.Item",
                    },
                    {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return {id: person.Item.id.S, name: person.Item.name.S}",
      "Type": "Choice",
    },
    "person": {
      "InputPath": "$.heap1",
      "Next": "if(person.Item === undefined)",
      "ResultPath": "$.person",
      "Type": "Pass",
    },
    "person = await personTable.attributes.get({Key: {id: {S: input.id ?? "defau": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNull": false,
              "Variable": "$.input.id",
            },
          ],
          "Next": "true__person = await personTable.attributes.get({Key: {id: {S: input.id ?? ",
        },
      ],
      "Default": "false__person = await personTable.attributes.get({Key: {id: {S: input.id ??",
      "Type": "Choice",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {id: person.Item.id.S, name: person.Item.name.S}": {
      "InputPath": "$.person.Item.id.S",
      "Next": "1__return {id: person.Item.id.S, name: person.Item.name.S}",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "true__person = await personTable.attributes.get({Key: {id: {S: input.id ?? ": {
      "InputPath": "$.input.id",
      "Next": "1__person = await personTable.attributes.get({Key: {id: {S: input.id ?? "de",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.Lambda.Invoke dynamic parameters 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ": {
      "End": true,
      "InputPath": "$.heap1.Payload",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1": {
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ",
      "Parameters": {
        "FunctionName": "__REPLACED_TOKEN",
        "Payload": {
          "id.$": "$.heap0",
        },
      },
      "Resource": "arn:aws:states:::lambda:invoke",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ?? ",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input": {
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id ?? ": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNull": false,
              "Variable": "$.input.id",
            },
          ],
          "Next": "true__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.",
        },
      ],
      "Default": "false__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input",
      "Type": "Choice",
    },
    "true__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.": {
      "InputPath": "$.input.id",
      "Next": "1__return await $AWS.Lambda.Invoke({Function: task, Payload: {id: input.id  1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.SDK.CloudWatch.describeAlarms 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "alarms = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {resources: ["*",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "alarms": {
      "InputPath": "$.heap0",
      "Next": "if(alarms.MetricAlarms === undefined)",
      "ResultPath": "$.alarms",
      "Type": "Pass",
    },
    "alarms = await $AWS.SDK.CloudWatch.describeAlarms({}, {iam: {resources: ["*": {
      "Next": "alarms",
      "Parameters": {},
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "if(alarms.MetricAlarms === undefined)": {
      "Choices": [
        {
          "Next": "return",
          "Or": [
            {
              "IsPresent": false,
              "Variable": "$.alarms.MetricAlarms",
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.alarms.MetricAlarms",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.alarms.MetricAlarms",
                    },
                    {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return alarms.MetricAlarms",
      "Type": "Choice",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return alarms.MetricAlarms": {
      "End": true,
      "InputPath": "$.alarms.MetricAlarms",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return AWS.SDK.CloudWatch.describeAlarms dynamic parameters 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: inpu": {
      "Next": "alarms",
      "Parameters": {
        "AlarmNamePrefix.$": "$.heap0",
      },
      "Resource": "arn:aws:states:::aws-sdk:cloudwatch:describeAlarms",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: input.p",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "alarms": {
      "InputPath": "$.heap1",
      "Next": "if(alarms.MetricAlarms === undefined)",
      "ResultPath": "$.alarms",
      "Type": "Pass",
    },
    "alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: input.p": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.prefix",
            },
            {
              "IsNull": false,
              "Variable": "$.input.prefix",
            },
          ],
          "Next": "true__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: i",
        },
      ],
      "Default": "false__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: ",
      "Type": "Choice",
    },
    "false__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: ": {
      "Next": "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: inpu",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(alarms.MetricAlarms === undefined)": {
      "Choices": [
        {
          "Next": "return",
          "Or": [
            {
              "IsPresent": false,
              "Variable": "$.alarms.MetricAlarms",
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.alarms.MetricAlarms",
                },
                {
                  "And": [
                    {
                      "IsNull": false,
                      "Variable": "$.alarms.MetricAlarms",
                    },
                    {
                      "IsNull": true,
                      "Variable": "$$.Execution.Id",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return alarms.MetricAlarms",
      "Type": "Choice",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return alarms.MetricAlarms": {
      "End": true,
      "InputPath": "$.alarms.MetricAlarms",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "true__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: i": {
      "InputPath": "$.input.prefix",
      "Next": "1__alarms = await $AWS.SDK.CloudWatch.describeAlarms({AlarmNamePrefix: inpu",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.input["id special"]",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input["id special"]": {
      "End": true,
      "InputPath": "$.input.input['id special']",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr number 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.input.arr[0]",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.arr[0]": {
      "End": true,
      "InputPath": "$.input.input.arr[0]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return ElementAccessExpr number reference 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return input.input.arr[id]": {
      "End": true,
      "InputPath": "$.heap0.out",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "id = 0",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "array__return input.input.arr[id]": {
      "Next": "1__return input.input.arr[id]",
      "Parameters": {
        "out.$": "States.ArrayGetItem($.input.input.arr,$.id)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "checkString__return input.input.arr[id]": {
      "Choices": [
        {
          "And": [
            {
              "IsString": true,
              "Variable": "$.heap0.out.str",
            },
            {
              "StringEquals": "[]",
              "Variable": "$.heap0.out.str",
            },
          ],
          "Next": "array__return input.input.arr[id]",
        },
      ],
      "Default": "object__return input.input.arr[id]",
      "Type": "Choice",
    },
    "id = 0": {
      "Next": "return input.input.arr[id]",
      "Result": 0,
      "ResultPath": "$.id",
      "Type": "Pass",
    },
    "object__return input.input.arr[id]": {
      "Cause": "Reference element access is not valid for objects.",
      "Error": "Functionless.InvalidAccess",
      "Type": "Fail",
    },
    "return input.input.arr[id]": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "array__return input.input.arr[id]",
          "Variable": "$.input.input.arr[0]",
        },
      ],
      "Default": "stringify__return input.input.arr[id]",
      "Type": "Choice",
    },
    "stringify__return input.input.arr[id]": {
      "Next": "checkString__return input.input.arr[id]",
      "Parameters": {
        "str.$": "States.JsonToString($.input.input.arr)",
      },
      "ResultPath": "$.heap0.out",
      "Type": "Pass",
    },
  },
}
`;

exports[`return PropAccessExpr 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.input.id",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.id": {
      "End": true,
      "InputPath": "$.input.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return a single Lambda Function call 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return getPerson({id: input.id})": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return getPerson({id: input.id})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return getPerson({id: input.id})": {
      "Next": "1__return getPerson({id: input.id})",
      "Parameters": {
        "id.$": "$.input.id",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return await task(await task()) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task(await task())": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(await task()) 1": {
      "InputPath": "$.heap0",
      "Next": "1__return task(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "return task(await task())",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(await task())": {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return task(await task()) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return cond ? task(1) : task(2) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__false__return if(input.cond)": {
      "InputPath": "$.heap1",
      "Next": "1__return if(input.cond)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return if(input.cond)": {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__true__return if(input.cond)": {
      "InputPath": "$.heap0",
      "Next": "1__return if(input.cond)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return if(input.cond)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__return if(input.cond)": {
      "Next": "1__false__return if(input.cond)",
      "Parameters": 2,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return if(input.cond)": {
      "Choices": [
        {
          "And": [
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.input.cond",
                },
                {
                  "IsNull": false,
                  "Variable": "$.input.cond",
                },
              ],
            },
            {
              "Or": [
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.cond",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsString": true,
                            "Variable": "$.input.cond",
                          },
                          {
                            "StringEquals": "",
                            "Variable": "$.input.cond",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsNumeric": true,
                      "Variable": "$.input.cond",
                    },
                    {
                      "Not": {
                        "And": [
                          {
                            "IsNumeric": true,
                            "Variable": "$.input.cond",
                          },
                          {
                            "NumericEquals": 0,
                            "Variable": "$.input.cond",
                          },
                        ],
                      },
                    },
                  ],
                },
                {
                  "And": [
                    {
                      "IsBoolean": true,
                      "Variable": "$.input.cond",
                    },
                    {
                      "BooleanEquals": true,
                      "Variable": "$.input.cond",
                    },
                  ],
                },
                {
                  "Not": {
                    "Or": [
                      {
                        "IsBoolean": true,
                        "Variable": "$.input.cond",
                      },
                      {
                        "IsNumeric": true,
                        "Variable": "$.input.cond",
                      },
                      {
                        "IsString": true,
                        "Variable": "$.input.cond",
                      },
                    ],
                  },
                },
              ],
            },
          ],
          "Next": "true__return if(input.cond)",
        },
      ],
      "Default": "false__return if(input.cond)",
      "Type": "Choice",
    },
    "true__return if(input.cond)": {
      "Next": "1__true__return if(input.cond)",
      "Parameters": 1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return identifier 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.id",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.id": {
      "End": true,
      "InputPath": "$.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(-1) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.items.slice(-1)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(-1)": {
      "End": true,
      "InputPath": "$.input.items[-1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(0, -1) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.items.slice(0, -1)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(0, -1)": {
      "End": true,
      "InputPath": "$.input.items[0:-1]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.items.slice(1)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1)": {
      "End": true,
      "InputPath": "$.input.items[1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1, 3) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.items.slice(1, 3)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1, 3)": {
      "End": true,
      "InputPath": "$.input.items[1:3]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return items.slice(1, undefined) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.items.slice(1, undefined)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.items.slice(1, undefined)": {
      "End": true,
      "InputPath": "$.input.items[1:]",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return optional PropAccessExpr 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return input.input.id",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return input.input.id": {
      "End": true,
      "InputPath": "$.input.input.id",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task({ key: items.filter(*) }) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task({equals: input.items.filter(function (item)), and: input.ite": {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({equals: input.items.filter(function (item)), and: input.ite 1": {
      "Next": "1__return task({equals: input.items.filter(function (item)), and: input.ite",
      "Parameters": {
        "and.$": "$.heap1",
        "equals.$": "$.heap0",
        "or.$": "$.input.items[?(@.str=='hello'||@.items[0]=='hello')]",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "1__return task({equals: input.items.filter(function (item)), and: input.ite 2": {
      "InputPath": "$.input.items[?(@.str=='hello'&&@.items[0]=='hello')]",
      "Next": "1__return task({equals: input.items.filter(function (item)), and: input.ite 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return task({equals: input.items.filter(function (item)), and: input.items.",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({equals: input.items.filter(function (item)), and: input.items.": {
      "InputPath": "$.input.items[?(@.str=='hello')]",
      "Next": "1__return task({equals: input.items.filter(function (item)), and: input.ite 2",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task({key: items.slice(1, 3)}) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task({key: input.items.slice(1, 3)})": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return task({key: input.items.slice(1, 3)})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({key: input.items.slice(1, 3)})": {
      "Next": "1__return task({key: input.items.slice(1, 3)})",
      "Parameters": {
        "key.$": "$.input.items[1:3]",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return task(1) ?? task(2) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__false__await task(1) ?? await task(2)": {
      "InputPath": "$.heap1",
      "Next": "1__return await task(1) ?? await task(2)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return await task(1) ?? await task(2)": {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return await task(1) ?? await task(2)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(1) ?? await task(2)": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.heap0",
            },
            {
              "IsNull": false,
              "Variable": "$.heap0",
            },
          ],
          "Next": "true__await task(1) ?? await task(2)",
        },
      ],
      "Default": "false__await task(1) ?? await task(2)",
      "Type": "Choice",
    },
    "false__await task(1) ?? await task(2)": {
      "Next": "1__false__await task(1) ?? await task(2)",
      "Parameters": 2,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return await task(1) ?? await task(2)": {
      "Next": "await task(1) ?? await task(2)",
      "Parameters": 1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "true__await task(1) ?? await task(2)": {
      "InputPath": "$.heap0",
      "Next": "1__return await task(1) ?? await task(2)",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
  },
}
`;

exports[`return task(await task()) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task(await task())": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task(await task()) 1": {
      "InputPath": "$.heap0",
      "Next": "1__return task(await task())",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "return task(await task())",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(await task())": {
      "InputPath": "$.fnl_context.null",
      "Next": "1__return task(await task()) 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`return typeof x 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return typeof input.id": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return typeof input.id",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "boolean__return typeof input.id": {
      "Next": "1__return typeof input.id",
      "Result": "boolean",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "number__return typeof input.id": {
      "Next": "1__return typeof input.id",
      "Result": "number",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "object__return typeof input.id": {
      "Next": "1__return typeof input.id",
      "Result": "object",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return typeof input.id": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsString": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "string__return typeof input.id",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsBoolean": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "boolean__return typeof input.id",
        },
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "IsNumeric": true,
              "Variable": "$.input.id",
            },
          ],
          "Next": "number__return typeof input.id",
        },
        {
          "IsPresent": true,
          "Next": "object__return typeof input.id",
          "Variable": "$.input.id",
        },
      ],
      "Default": "undefined__return typeof input.id",
      "Type": "Choice",
    },
    "string__return typeof input.id": {
      "Next": "1__return typeof input.id",
      "Result": "string",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "undefined__return typeof input.id": {
      "Next": "1__return typeof input.id",
      "Result": "undefined",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`return void 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessage JSON array 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await queue.sendMessage({MessageBody: [input]})": {
      "Next": "return null",
      "Parameters": {
        "MessageBody.$": "States.JsonToString($.heap1.out)",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "await queue.sendMessage({MessageBody: [input]})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "[input]": {
      "Next": "1__await queue.sendMessage({MessageBody: [input]})",
      "Parameters": {
        "out.$": "States.Array($.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "await queue.sendMessage({MessageBody: [input]})": {
      "InputPath": "$.input",
      "Next": "[input]",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessage TextSerializer 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await queue.sendMessage({MessageBody: input.message})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessage({MessageBody: input.message})": {
      "Next": "return null",
      "Parameters": {
        "MessageBody.$": "$.input.message",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessage TextSerializer literal string 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await queue.sendMessage({MessageBody: "hello world"})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessage({MessageBody: "hello world"})": {
      "Next": "return null",
      "Parameters": {
        "MessageBody": "hello world",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessage object literal with JSON Path to SQS Queue 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await queue.sendMessage({MessageBody: {orderId: input.orderId}})": {
      "Next": "return null",
      "Parameters": {
        "MessageBody.$": "States.JsonToString($.heap0)",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "await queue.sendMessage({MessageBody: {orderId: input.orderId}})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessage({MessageBody: {orderId: input.orderId}})": {
      "Next": "1__await queue.sendMessage({MessageBody: {orderId: input.orderId}})",
      "Parameters": {
        "orderId.$": "$.input.orderId",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessage when whole message is JSON Path 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await queue.sendMessage({MessageBody: input})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessage({MessageBody: input})": {
      "Next": "return null",
      "Parameters": {
        "MessageBody.$": "States.JsonToString($.input)",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessage",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessageBatch with JSON serialization 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess": {
      "Next": "2__await queue.sendMessageBatch({Entries: input.messages.map(function (mess",
      "Parameters": {
        "Entries.$": "$.heap0",
      },
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "1__return {Id: i, MessageBody: message}": {
      "Next": "handleResult__await queue.sendMessageBatch({Entries: input.messages.map(fun",
      "Parameters": {
        "Id.$": "$.heap3",
        "MessageBody.$": "$.message",
      },
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return {Id: i, MessageBody: message} 1": {
      "InputPath": "$.heap2.string",
      "Next": "1__return {Id: i, MessageBody: message}",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "2__await queue.sendMessageBatch({Entries: input.messages.map(function (mess": {
      "ItemsPath": "$.heap4.Entries",
      "Iterator": {
        "StartAt": "Default 1",
        "States": {
          "Default 1": {
            "Next": "unwrap Message__Default 1",
            "Parameters": {
              "value.$": "States.JsonToString($.entry.MessageBody)",
            },
            "ResultPath": "$.entry.MessageBody",
            "Type": "Pass",
          },
          "unwrap Message__Default 1": {
            "End": true,
            "InputPath": "$.entry.MessageBody.value",
            "OutputPath": "$.entry",
            "ResultPath": "$.entry.MessageBody",
            "Type": "Pass",
          },
        },
      },
      "Next": "send message batch__2__await queue.sendMessageBatch({Entries: input.message",
      "Parameters": {
        "entry.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap5",
      "Type": "Map",
    },
    "Initialize Functionless Context": {
      "Next": "await queue.sendMessageBatch({Entries: input.messages.map(function (message",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessageBatch({Entries: input.messages.map(function (message": {
      "ItemsPath": "$.input.messages",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__await queue.sendMessageBatch({Entries: input.messages.map(function (",
      "Parameters": {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "check__await queue.sendMessageBatch({Entries: input.messages.map(function (": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "function (message,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__await queue.sendMessageBatch({Entries: input.messages.map(function (me",
      "Type": "Choice",
    },
    "end__await queue.sendMessageBatch({Entries: input.messages.map(function (me": {
      "Next": "set__end__await queue.sendMessageBatch({Entries: input.messages.map(functio",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (message,i)": {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.message",
      "Type": "Pass",
    },
    "handleResult__await queue.sendMessageBatch({Entries: input.messages.map(fun": {
      "Next": "check__await queue.sendMessageBatch({Entries: input.messages.map(function (",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "return {Id: i, MessageBody: message}",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": {
      "Next": "1__return {Id: i, MessageBody: message} 1",
      "Parameters": {
        "string.$": "States.Format('{}',$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {Id: i, MessageBody: message}": {
      "InputPath": "$.i",
      "Next": "i 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "send message batch__2__await queue.sendMessageBatch({Entries: input.message": {
      "Next": "return null",
      "Parameters": {
        "Entries.$": "$.heap5",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessageBatch",
      "ResultPath": "$.heap5",
      "Type": "Task",
    },
    "set__end__await queue.sendMessageBatch({Entries: input.messages.map(functio": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`sendMessageBatch with Text serialization 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess": {
      "Next": "return null",
      "Parameters": {
        "Entries.$": "$.heap0",
        "QueueUrl": "__REPLACED_TOKEN",
      },
      "Resource": "arn:aws:states:::aws-sdk:sqs:sendMessageBatch",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "1__return {Id: i, MessageBody: message}": {
      "Next": "handleResult__await queue.sendMessageBatch({Entries: input.messages.map(fun",
      "Parameters": {
        "Id.$": "$.heap3",
        "MessageBody.$": "$.message",
      },
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__return {Id: i, MessageBody: message} 1": {
      "InputPath": "$.heap2.string",
      "Next": "1__return {Id: i, MessageBody: message}",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "await queue.sendMessageBatch({Entries: input.messages.map(function (message",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await queue.sendMessageBatch({Entries: input.messages.map(function (message": {
      "ItemsPath": "$.input.messages",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "check__await queue.sendMessageBatch({Entries: input.messages.map(function (",
      "Parameters": {
        "index.$": "$$.Map.Item.Index",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap0",
      "ResultSelector": {
        "arr.$": "$",
        "arrStr": "[null",
      },
      "Type": "Map",
    },
    "check__await queue.sendMessageBatch({Entries: input.messages.map(function (": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "function (message,i)",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__await queue.sendMessageBatch({Entries: input.messages.map(function (me",
      "Type": "Choice",
    },
    "end__await queue.sendMessageBatch({Entries: input.messages.map(function (me": {
      "Next": "set__end__await queue.sendMessageBatch({Entries: input.messages.map(functio",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "function (message,i)": {
      "InputPath": "$.heap0.arr[0].item",
      "Next": "i",
      "ResultPath": "$.message",
      "Type": "Pass",
    },
    "handleResult__await queue.sendMessageBatch({Entries: input.messages.map(fun": {
      "Next": "check__await queue.sendMessageBatch({Entries: input.messages.map(function (",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "i": {
      "InputPath": "$.heap0.arr[0].index",
      "Next": "return {Id: i, MessageBody: message}",
      "ResultPath": "$.i",
      "Type": "Pass",
    },
    "i 1": {
      "Next": "1__return {Id: i, MessageBody: message} 1",
      "Parameters": {
        "string.$": "States.Format('{}',$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {Id: i, MessageBody: message}": {
      "InputPath": "$.i",
      "Next": "i 1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "set__end__await queue.sendMessageBatch({Entries: input.messages.map(functio": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__await queue.sendMessageBatch({Entries: input.messages.map(function (mess",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`set obj 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return {a: a, b: b, c: c}": {
      "End": true,
      "Parameters": {
        "a.$": "$.heap0",
        "b.$": "$.heap1",
        "c.$": "$.c",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {a: a, b: b, c: c} 1": {
      "InputPath": "$.b",
      "Next": "1__return {a: a, b: b, c: c}",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "a = {1: "value"}",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = {1: "value"}": {
      "Next": "b = a[1]",
      "Result": {
        "1": "value",
      },
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "b = a[1]": {
      "InputPath": "$.a[1]",
      "Next": "c = a["1"]",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "c = a["1"]": {
      "InputPath": "$.a['1']",
      "Next": "return {a: a, b: b, c: c}",
      "ResultPath": "$.c",
      "Type": "Pass",
    },
    "return {a: a, b: b, c: c}": {
      "InputPath": "$.a",
      "Next": "1__return {a: a, b: b, c: c} 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`shadow 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__for(b in [1, 2, 3])": {
      "ItemsPath": "$.heap4",
      "Iterator": {
        "StartAt": "Default",
        "States": {
          "Default": {
            "End": true,
            "ResultPath": "$",
            "Type": "Pass",
          },
        },
      },
      "Next": "hasNext__for(b in [1, 2, 3])",
      "Parameters": {
        "index.$": "States.Format('{}',$$.Map.Item.Index)",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap4",
      "Type": "Map",
    },
    "1__return aa__2": {
      "End": true,
      "InputPath": "$.heap7.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return aba__1": {
      "End": true,
      "InputPath": "$.heap3.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "a = """,
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "a = """: {
      "Next": "a__2 = """,
      "Result": "",
      "ResultPath": "$.a",
      "Type": "Pass",
    },
    "a = "" 1": {
      "Next": "a__1 = """,
      "Result": "",
      "ResultPath": "$.a__1",
      "Type": "Pass",
    },
    "a = "" 2": {
      "Next": "return aba__1",
      "Result": "",
      "ResultPath": "$.a__3",
      "Type": "Pass",
    },
    "a__1": {
      "InputPath": "$.a__1__1",
      "Next": "aba__1",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "a__1 = """: {
      "Next": "if(a === "")",
      "Result": "",
      "ResultPath": "$.a__1__1",
      "Type": "Pass",
    },
    "a__2": {
      "InputPath": "$.a__2",
      "Next": "aa__2",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "a__2 = """: {
      "Next": "for(b in [1, 2, 3])",
      "Result": "",
      "ResultPath": "$.a__2",
      "Type": "Pass",
    },
    "aa__2": {
      "Next": "1__return aa__2",
      "Parameters": {
        "string.$": "States.Format('{}{}',$.heap5,$.heap6)",
      },
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "aba__1": {
      "Next": "1__return aba__1",
      "Parameters": {
        "string.$": "States.Format('{}{}{}',$.heap0,$.heap1,$.heap2)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "assignValue__b": {
      "InputPath": "$.heap4[0].item",
      "Next": "a = "" 1",
      "ResultPath": "$.0__b",
      "Type": "Pass",
    },
    "b": {
      "InputPath": "$.heap4[0].index",
      "Next": "assignValue__b",
      "ResultPath": "$.b",
      "Type": "Pass",
    },
    "b 1": {
      "InputPath": "$.b",
      "Next": "a__1",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "for(b in [1, 2, 3])": {
      "Next": "1__for(b in [1, 2, 3])",
      "Result": [
        1,
        2,
        3,
      ],
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "hasNext__for(b in [1, 2, 3])": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "b",
          "Variable": "$.heap4[0]",
        },
      ],
      "Default": "return aa__2",
      "Type": "Choice",
    },
    "if(a === "")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.a__1",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.a__1",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.a__1",
                    },
                    {
                      "StringEquals": "",
                      "Variable": "$.a__1",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "a = "" 2",
        },
      ],
      "Default": "tail__for(b in [1, 2, 3])",
      "Type": "Choice",
    },
    "return aa__2": {
      "InputPath": "$.a",
      "Next": "a__2",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "return aba__1": {
      "InputPath": "$.a__3",
      "Next": "b 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__for(b in [1, 2, 3])": {
      "InputPath": "$.heap4[1:]",
      "Next": "hasNext__for(b in [1, 2, 3])",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
  },
}
`;

exports[`single quotes in StringLiteralExpr should be escaped in a JSON Path filter expression 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task({escape: input.items.filter(function (item))})": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return task({escape: input.items.filter(function (item))})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task({escape: input.items.filter(function (item))})": {
      "Next": "1__return task({escape: input.items.filter(function (item))})",
      "Parameters": {
        "escape.$": "$.input.items[?(@.str=='hello\\'world')]",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`spread any object 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return {a: {...input}, b: {x: 1, ...input, y: input}, c: {...input, ...i": {
      "End": true,
      "Parameters": {
        "a.$": "$.heap0",
        "b.$": "$.heap4",
        "c.$": "$.heap8",
        "d": {
          "x": 1,
          "y": 3,
        },
        "e.$": "$.heap9.out",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__{...input, ...input, ...input}": {
      "InputPath": "$.input",
      "Next": "2__{...input, ...input, ...input}",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "1__{x: 1, ...input, y: input}": {
      "Next": "2__{x: 1, ...input, y: input}",
      "Parameters": {
        "y.$": "$.input",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "2__return {a: {...input}, b: {x: 1, ...input, y: input}, c: {...input, ...i": {
      "InputPath": "$.heap3.out",
      "Next": "{...input, ...input, ...input}",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "2__{...input, ...input, ...input}": {
      "Next": "4__return {a: {...input}, b: {x: 1, ...input, y: input}, c: {...input, ...i",
      "Parameters": {
        "out.$": "States.JsonMerge(States.JsonMerge($.heap5,$.heap6,false),$.input,false)",
      },
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "2__{x: 1, ...input, y: input}": {
      "Next": "2__return {a: {...input}, b: {x: 1, ...input, y: input}, c: {...input, ...i",
      "Parameters": {
        "out.$": "States.JsonMerge(States.JsonMerge(States.StringToJson('{"x":1}'),$.heap1,false),$.heap2,false)",
      },
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "4__return {a: {...input}, b: {x: 1, ...input, y: input}, c: {...input, ...i": {
      "InputPath": "$.heap7.out",
      "Next": "5__return {a: {...input}, b: {x: 1, ...input, y: input}, c: {...input, ...i",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "5__return {a: {...input}, b: {x: 1, ...input, y: input}, c: {...input, ...i": {
      "Next": "1__return {a: {...input}, b: {x: 1, ...input, y: input}, c: {...input, ...i",
      "Parameters": {
        "out.$": "States.JsonMerge(States.StringToJson('{"x":2}'),$.input,false)",
      },
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return {a: {...input}, b: {x: 1, ...input, y: input}, c: {...input, ...inpu",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {a: {...input}, b: {x: 1, ...input, y: input}, c: {...input, ...inpu": {
      "InputPath": "$.input",
      "Next": "{x: 1, ...input, y: input}",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "{...input, ...input, ...input}": {
      "InputPath": "$.input",
      "Next": "1__{...input, ...input, ...input}",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "{x: 1, ...input, y: input}": {
      "InputPath": "$.input",
      "Next": "1__{x: 1, ...input, y: input}",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
  },
}
`;

exports[`spread constant array and object 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return {array: [0, ...array, 3], object: {key: "value", ...object}}",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {array: [0, ...array, 3], object: {key: "value", ...object}}": {
      "End": true,
      "Result": {
        "array": [
          0,
          1,
          2,
          3,
        ],
        "object": {
          "hello": "world",
          "key": "value",
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`spread limits 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "10__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "11__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap10",
      "Type": "Pass",
    },
    "11__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "12__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap11",
      "Type": "Pass",
    },
    "12__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "13__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap12",
      "Type": "Pass",
    },
    "13__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "14__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap13",
      "Type": "Pass",
    },
    "14__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "15__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap14",
      "Type": "Pass",
    },
    "15__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "16__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap15",
      "Type": "Pass",
    },
    "16__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "17__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap16",
      "Type": "Pass",
    },
    "17__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "18__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap17",
      "Type": "Pass",
    },
    "18__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "19__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap18",
      "Type": "Pass",
    },
    "19__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "20__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap19",
      "Type": "Pass",
    },
    "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu": {
      "Next": "1__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .",
      "Parameters": {
        "out.$": "States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge($.heap73.out.d0,$.heap64,false),$.heap65,false),$.heap73.out.d1,false),$.heap66,false),$.heap67,false),$.heap68,false),$.heap69,false),$.heap70,false),$.heap71,false),$.heap72,false)",
      },
      "ResultPath": "$.heap73",
      "Type": "Pass",
    },
    "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 1": {
      "Next": "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu",
      "Parameters": {
        "d0.$": "States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge($.heap73.out.d0.d0,$.heap54,false),$.heap55,false),$.heap56,false),$.heap57,false),$.heap58,false),$.heap59,false),$.heap60,false),$.heap61,false),$.heap62,false),$.heap63,false)",
        "d1.$": "States.StringToJson('{"x":7,"y":8,"z":9,"a":1,"m":4}')",
      },
      "ResultPath": "$.heap73.out",
      "Type": "Pass",
    },
    "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 2": {
      "Next": "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 1",
      "Parameters": {
        "d0.$": "States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge($.heap73.out.d0.d0.d0,$.heap44,false),$.heap45,false),$.heap46,false),$.heap47,false),$.heap48,false),$.heap49,false),$.heap50,false),$.heap51,false),$.heap52,false),$.heap53,false)",
      },
      "ResultPath": "$.heap73.out.d0",
      "Type": "Pass",
    },
    "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 3": {
      "Next": "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 2",
      "Parameters": {
        "d0.$": "States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge($.heap73.out.d0.d0.d0.d0,$.heap34,false),$.heap35,false),$.heap36,false),$.heap37,false),$.heap38,false),$.heap39,false),$.heap40,false),$.heap41,false),$.heap42,false),$.heap43,false)",
      },
      "ResultPath": "$.heap73.out.d0.d0",
      "Type": "Pass",
    },
    "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 4": {
      "Next": "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 3",
      "Parameters": {
        "d0.$": "States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge($.heap73.out.d0.d0.d0.d0.d0,$.heap24,false),$.heap25,false),$.heap26,false),$.heap27,false),$.heap28,false),$.heap29,false),$.heap30,false),$.heap31,false),$.heap32,false),$.heap33,false)",
      },
      "ResultPath": "$.heap73.out.d0.d0.d0",
      "Type": "Pass",
    },
    "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 5": {
      "Next": "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 4",
      "Parameters": {
        "d0.$": "States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge($.heap73.out.d0.d0.d0.d0.d0.d0,$.heap15,false),$.heap16,false),$.heap17,false),$.heap18,false),$.heap73.out.d0.d0.d0.d0.d0.d1,false),$.heap19,false),$.heap20,false),$.heap21,false),$.heap22,false),$.heap23,false)",
      },
      "ResultPath": "$.heap73.out.d0.d0.d0.d0",
      "Type": "Pass",
    },
    "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 6": {
      "Next": "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 5",
      "Parameters": {
        "d0.$": "States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge($.heap73.out.d0.d0.d0.d0.d0.d0.d0,$.heap5,false),$.heap6,false),$.heap7,false),$.heap8,false),$.heap9,false),$.heap10,false),$.heap11,false),$.heap12,false),$.heap13,false),$.heap14,false)",
        "d1.$": "States.StringToJson('{"m":0,"n":5,"o":6}')",
      },
      "ResultPath": "$.heap73.out.d0.d0.d0.d0.d0",
      "Type": "Pass",
    },
    "1__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .": {
      "End": true,
      "InputPath": "$.heap73.out",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, . 1": {
      "InputPath": "$.input",
      "Next": "2__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "20__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "21__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap20",
      "Type": "Pass",
    },
    "21__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "22__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap21",
      "Type": "Pass",
    },
    "22__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "23__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap22",
      "Type": "Pass",
    },
    "23__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "24__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap23",
      "Type": "Pass",
    },
    "24__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "25__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap24",
      "Type": "Pass",
    },
    "25__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "26__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap25",
      "Type": "Pass",
    },
    "26__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "27__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap26",
      "Type": "Pass",
    },
    "27__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "28__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap27",
      "Type": "Pass",
    },
    "28__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "29__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap28",
      "Type": "Pass",
    },
    "29__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "30__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap29",
      "Type": "Pass",
    },
    "2__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .": {
      "InputPath": "$.input",
      "Next": "3__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .",
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "30__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "31__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap30",
      "Type": "Pass",
    },
    "31__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "32__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap31",
      "Type": "Pass",
    },
    "32__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "33__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap32",
      "Type": "Pass",
    },
    "33__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "34__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap33",
      "Type": "Pass",
    },
    "34__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "35__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap34",
      "Type": "Pass",
    },
    "35__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "36__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap35",
      "Type": "Pass",
    },
    "36__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "37__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap36",
      "Type": "Pass",
    },
    "37__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "38__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap37",
      "Type": "Pass",
    },
    "38__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "39__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap38",
      "Type": "Pass",
    },
    "39__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "40__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap39",
      "Type": "Pass",
    },
    "3__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .": {
      "InputPath": "$.input",
      "Next": "4__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "40__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "41__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap40",
      "Type": "Pass",
    },
    "41__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "42__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap41",
      "Type": "Pass",
    },
    "42__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "43__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap42",
      "Type": "Pass",
    },
    "43__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "44__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap43",
      "Type": "Pass",
    },
    "44__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "45__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap44",
      "Type": "Pass",
    },
    "45__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "46__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap45",
      "Type": "Pass",
    },
    "46__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "47__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap46",
      "Type": "Pass",
    },
    "47__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "48__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap47",
      "Type": "Pass",
    },
    "48__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "49__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap48",
      "Type": "Pass",
    },
    "49__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "50__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap49",
      "Type": "Pass",
    },
    "4__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .": {
      "InputPath": "$.input",
      "Next": "5__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "50__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "51__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap50",
      "Type": "Pass",
    },
    "51__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "52__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap51",
      "Type": "Pass",
    },
    "52__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "53__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap52",
      "Type": "Pass",
    },
    "53__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "54__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap53",
      "Type": "Pass",
    },
    "54__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "55__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap54",
      "Type": "Pass",
    },
    "55__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "56__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap55",
      "Type": "Pass",
    },
    "56__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "57__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap56",
      "Type": "Pass",
    },
    "57__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "58__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap57",
      "Type": "Pass",
    },
    "58__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "59__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap58",
      "Type": "Pass",
    },
    "59__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "60__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap59",
      "Type": "Pass",
    },
    "5__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .": {
      "InputPath": "$.input",
      "Next": "6__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .",
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "60__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "61__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap60",
      "Type": "Pass",
    },
    "61__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "62__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap61",
      "Type": "Pass",
    },
    "62__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "63__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap62",
      "Type": "Pass",
    },
    "63__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "64__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap63",
      "Type": "Pass",
    },
    "64__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "65__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap64",
      "Type": "Pass",
    },
    "65__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "66__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap65",
      "Type": "Pass",
    },
    "66__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "67__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap66",
      "Type": "Pass",
    },
    "67__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "68__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap67",
      "Type": "Pass",
    },
    "68__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "69__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap68",
      "Type": "Pass",
    },
    "69__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "70__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap69",
      "Type": "Pass",
    },
    "6__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .": {
      "InputPath": "$.input",
      "Next": "7__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .",
      "ResultPath": "$.heap6",
      "Type": "Pass",
    },
    "70__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "71__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap70",
      "Type": "Pass",
    },
    "71__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "InputPath": "$.input",
      "Next": "72__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap71",
      "Type": "Pass",
    },
    "72__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "Next": "73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "Parameters": {
        "someKey.$": "$.input",
      },
      "ResultPath": "$.heap72",
      "Type": "Pass",
    },
    "73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ": {
      "Next": "1__73__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...inpu 6",
      "Parameters": {
        "d0.$": "States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.JsonMerge(States.StringToJson('{"a":0,"b":2,"c":3}'),$.heap0,false),$.heap1,false),$.heap2,false),$.heap3,false),$.heap4,false)",
      },
      "ResultPath": "$.heap73.out.d0.d0.d0.d0.d0.d0",
      "Type": "Pass",
    },
    "7__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .": {
      "InputPath": "$.input",
      "Next": "8__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .",
      "ResultPath": "$.heap7",
      "Type": "Pass",
    },
    "8__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .": {
      "InputPath": "$.input",
      "Next": "9__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .",
      "ResultPath": "$.heap8",
      "Type": "Pass",
    },
    "9__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, .": {
      "InputPath": "$.input",
      "Next": "10__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ",
      "ResultPath": "$.heap9",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ...i",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, ...i": {
      "InputPath": "$.input",
      "Next": "1__return {...{a: 0, b: 2, c: 3}, ...input, ...input, ...input, ...input, . 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify json 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return JSON.stringify(input)": {
      "End": true,
      "InputPath": "$.heap0.out",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return JSON.stringify(input)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify(input)": {
      "Next": "1__return JSON.stringify(input)",
      "Parameters": {
        "out.$": "States.JsonToString($.input)",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify object literal 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return JSON.stringify({a: "a", b: {c: "c"}})": {
      "End": true,
      "InputPath": "$.heap1.out",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return JSON.stringify({a: "a", b: {c: "c"}}) 1": {
      "Next": "1__return JSON.stringify({a: "a", b: {c: "c"}})",
      "Parameters": {
        "out.$": "States.JsonToString($.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return JSON.stringify({a: "a", b: {c: "c"}})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify({a: "a", b: {c: "c"}})": {
      "Next": "1__return JSON.stringify({a: "a", b: {c: "c"}}) 1",
      "Result": {
        "a": "a",
        "b": {
          "c": "c",
        },
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`stringify undefined 2 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return JSON.stringify(undefined)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return JSON.stringify(undefined)": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`task(-1) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task(-1)": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return task(-1)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(-1)": {
      "Next": "1__return task(-1)",
      "Parameters": -1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`task(any) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await task()",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task("hello" + " world")": {
      "Next": "await task("hello" + 1)",
      "Parameters": "hello world",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap9",
      "Type": "Task",
    },
    "await task("hello" + 1)": {
      "Next": "await task(1 + "hello")",
      "Parameters": "hello1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap10",
      "Type": "Task",
    },
    "await task("hello" + ["world"])": {
      "Next": "return null",
      "Parameters": "helloworld",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap23",
      "Type": "Task",
    },
    "await task("hello" + null)": {
      "Next": "await task([null])",
      "Parameters": "hellonull",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap15",
      "Type": "Task",
    },
    "await task("hello" + true)": {
      "Next": "await task(false + "hello")",
      "Parameters": "hellotrue",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap12",
      "Type": "Task",
    },
    "await task("hello" + {place: "world"})": {
      "Next": "await task("hello" + ["world"])",
      "Parameters": "hello[object Object]",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap22",
      "Type": "Task",
    },
    "await task("hello")": {
      "Next": "await task("hello" + " world")",
      "Parameters": "hello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap8",
      "Type": "Task",
    },
    "await task()": {
      "InputPath": "$.fnl_context.null",
      "Next": "await task(null)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "await task(-1)": {
      "Next": "await task(-100)",
      "Parameters": -1,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap5",
      "Type": "Task",
    },
    "await task(-100)": {
      "Next": "await task(1 + 2)",
      "Parameters": -100,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap6",
      "Type": "Task",
    },
    "await task(0)": {
      "Next": "await task(-1)",
      "Parameters": 0,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap4",
      "Type": "Task",
    },
    "await task(1 + "hello")": {
      "Next": "await task("hello" + true)",
      "Parameters": "1hello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap11",
      "Type": "Task",
    },
    "await task(1 + 2)": {
      "Next": "await task("hello")",
      "Parameters": 3,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap7",
      "Type": "Task",
    },
    "await task([-1])": {
      "Next": "await task([true])",
      "Parameters": [
        -1,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap18",
      "Type": "Task",
    },
    "await task([1])": {
      "Next": "await task([-1])",
      "Parameters": [
        1,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap17",
      "Type": "Task",
    },
    "await task([null])": {
      "Next": "await task([1])",
      "Parameters": [
        null,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap16",
      "Type": "Task",
    },
    "await task([true])": {
      "Next": "await task([{key: "value"}])",
      "Parameters": [
        true,
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap19",
      "Type": "Task",
    },
    "await task([{key: "value"}])": {
      "Next": "await task({key: "value"})",
      "Parameters": [
        {
          "key": "value",
        },
      ],
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap20",
      "Type": "Task",
    },
    "await task(false + "hello")": {
      "Next": "await task(null + "hello")",
      "Parameters": "falsehello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap13",
      "Type": "Task",
    },
    "await task(false)": {
      "Next": "await task(0)",
      "Parameters": false,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "await task(null + "hello")": {
      "Next": "await task("hello" + null)",
      "Parameters": "nullhello",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap14",
      "Type": "Task",
    },
    "await task(null)": {
      "InputPath": "$.fnl_context.null",
      "Next": "await task(true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "await task(true)": {
      "Next": "await task(false)",
      "Parameters": true,
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "await task({key: "value"})": {
      "Next": "await task("hello" + {place: "world"})",
      "Parameters": {
        "key": "value",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap21",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`task(input.list[-1]) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task(input.list[-1])": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return task(input.list[-1])",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(input.list[-1])": {
      "InputPath": "$.input.list[-1]",
      "Next": "1__return task(input.list[-1])",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`template literal strings 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    " input.obj.str "hello"input.obj.items[0]": {
      "Next": "1__return task({key:  input.obj.str "hello"input.obj.items[0]}) 1",
      "Parameters": {
        "string.$": "States.Format('{} hello {}',$.heap0,$.heap1)",
      },
      "ResultPath": "$.heap2",
      "Type": "Pass",
    },
    "1__return task({key:  input.obj.str "hello"input.obj.items[0]})": {
      "End": true,
      "InputPath": "$.heap3",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key:  input.obj.str "hello"input.obj.items[0]}) 1": {
      "Next": "1__return task({key:  input.obj.str "hello"input.obj.items[0]})",
      "Parameters": {
        "key.$": "$.heap2.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap3",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "return task({key:  input.obj.str "hello"input.obj.items[0]})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "input.obj.items[0]": {
      "InputPath": "$.input.obj.items[0]",
      "Next": " input.obj.str "hello"input.obj.items[0]",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return task({key:  input.obj.str "hello"input.obj.items[0]})": {
      "InputPath": "$.input.obj.str",
      "Next": "input.obj.items[0]",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`template literal strings complex 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    " hello input.obj.str ?? "default"": {
      "InputPath": "$.heap0",
      "Next": "input.obj.items[0] ?? await task()",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    " hello input.obj.str ?? "default" "hello"input.obj.items[0] ?? await task()": {
      "Next": "1__return task({key:  hello input.obj.str ?? "default" "hello"input.obj.ite 1",
      "Parameters": {
        "string.$": "States.Format('{} hello hello {}',$.heap1,$.heap4)",
      },
      "ResultPath": "$.heap5",
      "Type": "Pass",
    },
    "1__false__input.obj.items[0] ?? await task()": {
      "InputPath": "$.heap2",
      "Next": "input.obj.items[0] ?? await task() 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "1__return task({key:  hello input.obj.str ?? "default" "hello"input.obj.ite": {
      "End": true,
      "InputPath": "$.heap6",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return task({key:  hello input.obj.str ?? "default" "hello"input.obj.ite 1": {
      "Next": "1__return task({key:  hello input.obj.str ?? "default" "hello"input.obj.ite",
      "Parameters": {
        "key.$": "$.heap5.string",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap6",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "return task({key:  hello input.obj.str ?? "default" "hello"input.obj.items[",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "false__input.obj.items[0] ?? await task()": {
      "InputPath": "$.fnl_context.null",
      "Next": "1__false__input.obj.items[0] ?? await task()",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "false__return task({key:  hello input.obj.str ?? "default" "hello"input.obj": {
      "Next": " hello input.obj.str ?? "default"",
      "Result": "default",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "input.obj.items[0] ?? await task()": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.obj.items[0]",
            },
            {
              "IsNull": false,
              "Variable": "$.input.obj.items[0]",
            },
          ],
          "Next": "true__input.obj.items[0] ?? await task()",
        },
      ],
      "Default": "false__input.obj.items[0] ?? await task()",
      "Type": "Choice",
    },
    "input.obj.items[0] ?? await task() 1": {
      "InputPath": "$.heap3",
      "Next": " hello input.obj.str ?? "default" "hello"input.obj.items[0] ?? await task()",
      "ResultPath": "$.heap4",
      "Type": "Pass",
    },
    "return task({key:  hello input.obj.str ?? "default" "hello"input.obj.items[": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.obj.str",
            },
            {
              "IsNull": false,
              "Variable": "$.input.obj.str",
            },
          ],
          "Next": "true__return task({key:  hello input.obj.str ?? "default" "hello"input.obj.",
        },
      ],
      "Default": "false__return task({key:  hello input.obj.str ?? "default" "hello"input.obj",
      "Type": "Choice",
    },
    "true__input.obj.items[0] ?? await task()": {
      "InputPath": "$.input.obj.items[0]",
      "Next": "input.obj.items[0] ?? await task() 1",
      "ResultPath": "$.heap3",
      "Type": "Pass",
    },
    "true__return task({key:  hello input.obj.str ?? "default" "hello"input.obj.": {
      "InputPath": "$.input.obj.str",
      "Next": " hello input.obj.str ?? "default"",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`throw Error 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "throw Error("cause")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error("cause")": {
      "Cause": "{"message":"cause"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw in for-of 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "for(item of input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap0[0]",
      "Next": "throw new Error("err")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error("err")": {
      "Cause": "{"message":"err"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new Error 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "throw new Error("cause")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error("cause")": {
      "Cause": "{"message":"cause"}",
      "Error": "Error",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new StepFunctionError 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "throw new StepFunctionError("CustomError", {property: "cause"})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new StepFunctionError("CustomError", {property: "cause"})": {
      "Cause": "{"property":"cause"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
  },
}
`;

exports[`throw new functionless.StepFunctionError 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "throw new functionless.StepFunctionError("CustomError", {property: "cause"}",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new functionless.StepFunctionError("CustomError", {property: "cause"}": {
      "Cause": "{"property":"cause"}",
      "Error": "CustomError",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { $SFN.forEach(list, (item) => task(item)) } catch { return null } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__try": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "return task(item)",
        "States": {
          "1__return task(item)": {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__try",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { $SFN.map(list, (item) => task(item)) } catch { return null } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__try": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "ItemsPath": "$.input.list",
      "Iterator": {
        "StartAt": "return task(item)",
        "States": {
          "1__return task(item)": {
            "End": true,
            "InputPath": "$.heap0",
            "ResultPath": "$",
            "Type": "Pass",
          },
          "return task(item)": {
            "InputPath": "$.item",
            "Next": "1__return task(item)",
            "Resource": "__REPLACED_TOKEN",
            "ResultPath": "$.heap0",
            "Type": "Task",
          },
        },
      },
      "Next": "1__try",
      "Parameters": {
        "fnl_context.$": "$.fnl_context",
        "input.$": "$.input",
        "item.$": "$$.Map.Item.Value",
      },
      "ResultPath": "$.heap1",
      "Type": "Map",
    },
  },
}
`;

exports[`try { for-of } catch { (maybe) throw } finally { task } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__catch__for(item of input.items)": {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "for(item of input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task(item)": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__for(item of input.items)",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "InputPath": "$.item",
      "Next": "tail__for(item of input.items)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === "you dun' goofed")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": {
      "Next": "1__catch__for(item of input.items)",
      "Parameters": {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "for(item of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap1[0]",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "if(err.message === "you dun' goofed")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    {
                      "StringEquals": "you dun' goofed",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error("little")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap1[0]",
      "Next": "await task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "tail__for(item of input.items)": {
      "InputPath": "$.heap1[1:]",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "throw new Error("little")": {
      "Next": "finally",
      "Result": {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { list.forEach(item => task(item)) } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task(item)": {
      "InputPath": "$.heap1",
      "Next": "tail__try",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__try": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return task(item)": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "tail__try": {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__try",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "try": {
      "Next": "check__try",
      "Parameters": {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.forEach(item => task(item)) } 2`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return input.list.forEach(function (item))": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__try": {
      "InputPath": "$.heap1",
      "Next": "tail__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return input.list.forEach(function (item))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "InputPath": "$.fnl_context.null",
      "Next": "tail__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "check__return input.list.forEach(function (item))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return input.list.forEach(function (item))",
      "Type": "Choice",
    },
    "end__return input.list.forEach(function (item))": {
      "Next": "1__return input.list.forEach(function (item))",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "try",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return input.list.forEach(function (item))": {
      "Next": "check__return input.list.forEach(function (item))",
      "Parameters": {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "tail__return input.list.forEach(function (item))": {
      "InputPath": "$.heap0.arr[1:]",
      "Next": "check__return input.list.forEach(function (item))",
      "ResultPath": "$.heap0.arr",
      "Type": "Pass",
    },
    "try": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__try",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`try { list.forEach(item => throw) } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__try": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw new Error("cause")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error("cause")": {
      "Next": "catch__try",
      "Result": {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": {
      "Next": "check__try",
      "Parameters": {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.forEach(item => throw) } catch (err) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__try": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === "cause")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "check__try": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw new Error("cause")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": {
      "Next": "1__try",
      "Result": "$.fnl_context.null",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(err.message === "cause")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return 0",
        },
      ],
      "Default": "return 1",
      "Type": "Choice",
    },
    "return 0": {
      "End": true,
      "Result": 0,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return 1": {
      "End": true,
      "Result": 1,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error("cause")": {
      "Next": "catch__try",
      "Result": {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": {
      "Next": "check__try",
      "Parameters": {
        "arr.$": "$.input.list",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => task(item)) } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task(item)": {
      "InputPath": "$.heap1",
      "Next": "handleResult__try",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "1__try": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": {
      "Next": "set__end__try",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__try": {
      "Next": "check__try",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "return task(item)",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return task(item)": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__return task(item)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "set__end__try": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "try": {
      "Next": "check__try",
      "Parameters": {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => task(item)) } 2`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return Promise.all(input.list.map(function (item)))": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__try": {
      "InputPath": "$.heap1",
      "Next": "handleResult__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return Promise.all(input.list.map(function (item)))",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "InputPath": "$.fnl_context.null",
      "Next": "handleResult__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0.arr[0]",
      "Type": "Pass",
    },
    "check__return Promise.all(input.list.map(function (item)))": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__return Promise.all(input.list.map(function (item)))",
      "Type": "Choice",
    },
    "end__return Promise.all(input.list.map(function (item)))": {
      "Next": "set__end__return Promise.all(input.list.map(function (item)))",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "handleResult__return Promise.all(input.list.map(function (item)))": {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": {
        "arr.$": "$.heap0.arr[1:]",
        "arrStr.$": "States.Format('{},{}',$.heap0.arrStr,States.JsonToString($.heap0.arr[0]))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "item": {
      "InputPath": "$.heap0.arr[0]",
      "Next": "try",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return Promise.all(input.list.map(function (item)))": {
      "Next": "check__return Promise.all(input.list.map(function (item)))",
      "Parameters": {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__return Promise.all(input.list.map(function (item)))": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__return Promise.all(input.list.map(function (item)))",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "try": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.item",
      "Next": "1__try",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
  },
}
`;

exports[`try { list.map(item => throw) } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__try": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "check__try": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw new Error("cause")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": {
      "Next": "set__end__try",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "set__end__try": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error("cause")": {
      "Next": "catch__try",
      "Result": {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "try": {
      "Next": "check__try",
      "Parameters": {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { list.map(item => throw) } catch (err) 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__try": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === "cause")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "check__try": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw new Error("cause")",
          "Variable": "$.heap0.arr[0]",
        },
      ],
      "Default": "end__try",
      "Type": "Choice",
    },
    "end__try": {
      "Next": "set__end__try",
      "Parameters": {
        "result.$": "States.StringToJson(States.Format('{}]',$.heap0.arrStr))",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "if(err.message === "cause")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return 0",
        },
      ],
      "Default": "return 1",
      "Type": "Choice",
    },
    "return 0": {
      "End": true,
      "Result": 0,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return 1": {
      "End": true,
      "Result": 1,
      "ResultPath": "$",
      "Type": "Pass",
    },
    "set__end__try": {
      "InputPath": "$.heap0.result[1:]",
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "throw new Error("cause")": {
      "Next": "catch__try",
      "Result": {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": {
      "Next": "check__try",
      "Parameters": {
        "arr.$": "$.input.list",
        "arrStr": "[null",
      },
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try { return $SFN.parallel(() => "hello", () => "world")) } catch { return null } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__try": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Branches": [
        {
          "StartAt": "return "hello"",
          "States": {
            "return "hello"": {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        {
          "StartAt": "return "world"",
          "States": {
            "return "world"": {
              "End": true,
              "Result": "world",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "1__try",
      "ResultPath": "$.heap0",
      "Type": "Parallel",
    },
  },
}
`;

exports[`try { return $SFN.parallel(() => "hello", async () => { await task(); await task(); })) } catch { return null } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__try": {
      "End": true,
      "InputPath": "$.heap2",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Branches": [
        {
          "StartAt": "return "hello"",
          "States": {
            "return "hello"": {
              "End": true,
              "Result": "hello",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
        {
          "StartAt": "await task()",
          "States": {
            "await task()": {
              "InputPath": "$.fnl_context.null",
              "Next": "await task() 1",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap0",
              "Type": "Task",
            },
            "await task() 1": {
              "InputPath": "$.fnl_context.null",
              "Next": "return null",
              "Resource": "__REPLACED_TOKEN",
              "ResultPath": "$.heap1",
              "Type": "Task",
            },
            "return null": {
              "End": true,
              "InputPath": "$.fnl_context.null",
              "ResultPath": "$",
              "Type": "Pass",
            },
          },
        },
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "1__try",
      "ResultPath": "$.heap2",
      "Type": "Parallel",
    },
  },
}
`;

exports[`try { task } catch { throw } finally { task() } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__finally": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "await task()",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task()": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__await task()",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task()": {
      "Next": "finally",
      "Result": {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "finally": {
      "Next": "1__finally",
      "Parameters": "recover",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw__1__finally": {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch { (maybe) throw } finally { task } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__finally": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "await task("1")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task("1")": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__await task("1")",
          "ResultPath": null,
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task("1")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "sam",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error("little")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "finally": {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error("little")": {
      "Next": "finally",
      "Result": {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch { task() } finally { task() } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__finally": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "await task("1")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task("1")": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__await task("1")",
          "ResultPath": null,
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch__await task("1")": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "finally",
          "ResultPath": "$.fnl_tmp_1",
        },
      ],
      "Next": "finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "finally": {
      "Next": "1__finally",
      "Parameters": "3",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap2",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw__1__finally": {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { task() } catch(err) { (maybe) throw } finally { task } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__catch__await task("1")": {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__finally": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "await task("1")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await task("1")": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__await task("1")",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "finally",
      "Parameters": "1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "catch(err)": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === "sam")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__await task("1")": {
      "Next": "1__catch__await task("1")",
      "Parameters": {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "finally": {
      "Next": "1__finally",
      "Parameters": "2",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "if(err.message === "sam")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    {
                      "StringEquals": "sam",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error("little")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error("little")": {
      "Next": "finally",
      "Result": {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try { throw } catch { (maybe) throw } finally { task } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__finally": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "throw__1__finally",
          "Variable": "$.fnl_tmp_1",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "Initialize Functionless Context": {
      "Next": "throw new Error("go")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__throw new Error("go")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "sam",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error("little")",
        },
      ],
      "Default": "finally",
      "Type": "Choice",
    },
    "finally": {
      "InputPath": "$.fnl_context.null",
      "Next": "1__finally",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error("go")": {
      "Next": "catch__throw new Error("go")",
      "Result": {
        "message": "go",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "throw new Error("little")": {
      "Next": "finally",
      "Result": {
        "message": "little",
      },
      "ResultPath": "$.fnl_tmp_1",
      "Type": "Pass",
    },
    "throw__1__finally": {
      "Cause": "an error was re-thrown from a finally block which is unsupported by Step Functions",
      "Error": "ReThrowFromFinally",
      "Type": "Fail",
    },
  },
}
`;

exports[`try, task, empty catch 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "await computeScore({id: "id", name: "name"})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: "id", name: "name"})": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "return null",
          "ResultPath": null,
        },
      ],
      "Next": "return null",
      "Parameters": {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw Error('error'), empty catch 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "throw Error("cause")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error("cause")": {
      "Next": "return null",
      "Result": {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, catch, throw, finally, return 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "Next": "return "rock-star"",
      "Result": {
        "message": "little",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
    "return "rock-star"": {
      "End": true,
      "Result": "rock-star",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Next": "catch__try",
      "Result": {
        "message": "go",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, empty catch 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "throw new StepFunctionError("CustomError", {property: "cause"})",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new StepFunctionError("CustomError", {property: "cause"})": {
      "Next": "return null",
      "Result": {
        "property": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try, throw, finally 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Next": "return "hello"",
      "Result": {
        "message": "cause",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch with guaranteed throw new Error 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === "cause")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "if(err.message === "cause")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "hello"",
        },
      ],
      "Default": "return "world"",
      "Type": "Choice",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "world"": {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Next": "catch__try",
      "Result": {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch with inner return and a catch variable 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__catch__try": {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "return err.message",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": {
      "Next": "1__catch__try",
      "Parameters": {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return err.message": {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return "hello"",
      "Parameters": {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`try-catch with inner return and no catch variable 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "Next": "return "hello"",
      "Parameters": {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`try-catch with optional return of task 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await computeScore({id: input.id, name: "sam"})": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return "hello world"",
      "Parameters": {
        "id.$": "$.heap0",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "1__catch__try": {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: "sam"})": {
      "InputPath": "$.input.id",
      "Next": "1__await computeScore({id: input.id, name: "sam"})",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "catch(err)": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === "cause")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": {
      "Next": "1__catch__try",
      "Parameters": {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === "cause")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "hello"",
        },
      ],
      "Default": "return "world"",
      "Type": "Choice",
    },
    "return "hello world"": {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "world"": {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "await computeScore({id: input.id, name: "sam"})",
        },
      ],
      "Default": "return "hello world"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional return of task 2`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__catch__try": {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "1__return await computeScore({id: input.id, name: "sam"})": {
      "End": true,
      "InputPath": "$.heap1",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "1__return await computeScore({id: input.id, name: "sam"}) 1": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "1__return await computeScore({id: input.id, name: "sam"})",
      "Parameters": {
        "id.$": "$.heap0",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch(err)": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === "cause")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": {
      "Next": "1__catch__try",
      "Parameters": {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === "cause")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "hello"",
        },
      ],
      "Default": "return "world"",
      "Type": "Choice",
    },
    "return "hello world"": {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "world"": {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return await computeScore({id: input.id, name: "sam"})": {
      "InputPath": "$.input.id",
      "Next": "1__return await computeScore({id: input.id, name: "sam"}) 1",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "try": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return await computeScore({id: input.id, name: "sam"})",
        },
      ],
      "Default": "return "hello world"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional task 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__await computeScore({id: input.id, name: "sam"})": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": "$.fnl_tmp_0",
        },
      ],
      "Next": "return "hello world"",
      "Parameters": {
        "id.$": "$.heap0",
        "name": "sam",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap1",
      "Type": "Task",
    },
    "1__catch__try": {
      "InputPath": "$.fnl_tmp_0.0_ParsedError",
      "Next": "catch(err)",
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "await computeScore({id: input.id, name: "sam"})": {
      "InputPath": "$.input.id",
      "Next": "1__await computeScore({id: input.id, name: "sam"})",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "catch(err)": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === "cause")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "catch__try": {
      "Next": "1__catch__try",
      "Parameters": {
        "0_ParsedError.$": "States.StringToJson($.fnl_tmp_0.Cause)",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "if(err.message === "cause")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "hello"",
        },
      ],
      "Default": "return "world"",
      "Type": "Choice",
    },
    "return "hello world"": {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "world"": {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "await computeScore({id: input.id, name: "sam"})",
        },
      ],
      "Default": "return "hello world"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch with optional throw of an Error 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "if(err.message === "cause")",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "if(err.message === "cause")": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.err.message",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.err.message",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.err.message",
                    },
                    {
                      "StringEquals": "cause",
                      "Variable": "$.err.message",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "return "hello"",
        },
      ],
      "Default": "return "world"",
      "Type": "Choice",
    },
    "return "hello world"": {
      "End": true,
      "Result": "hello world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "world"": {
      "End": true,
      "Result": "world",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error("cause")": {
      "Next": "catch__try",
      "Result": {
        "message": "cause",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
    "try": {
      "Choices": [
        {
          "And": [
            {
              "IsPresent": true,
              "Variable": "$.input.id",
            },
            {
              "And": [
                {
                  "IsNull": false,
                  "Variable": "$.input.id",
                },
                {
                  "And": [
                    {
                      "IsString": true,
                      "Variable": "$.input.id",
                    },
                    {
                      "StringEquals": "hello",
                      "Variable": "$.input.id",
                    },
                  ],
                },
              ],
            },
          ],
          "Next": "throw new Error("cause")",
        },
      ],
      "Default": "return "hello world"",
      "Type": "Choice",
    },
  },
}
`;

exports[`try-catch, err variable, contains for-of, throw Error 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "for(item of input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "return err.message",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "for(item of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap0[0]",
      "Next": "throw Error("err")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return err.message": {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw Error("err")": {
      "Next": "catch__for(item of input.items)",
      "Result": {
        "message": "err",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch, err variable, contains for-of, throw new Error 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "for(item of input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": {
      "InputPath": "$.fnl_tmp_0",
      "Next": "return err.message",
      "ResultPath": "$.err",
      "Type": "Pass",
    },
    "for(item of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap0[0]",
      "Next": "throw new Error("err")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return err.message": {
      "End": true,
      "InputPath": "$.err.message",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error("err")": {
      "Next": "catch__for(item of input.items)",
      "Result": {
        "message": "err",
      },
      "ResultPath": "$.fnl_tmp_0",
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch, no variable, contains for-of, throw 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "for(item of input.items)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__for(item of input.items)": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "for(item of input.items)": {
      "InputPath": "$.input.items",
      "Next": "hasNext__for(item of input.items)",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
    "hasNext__for(item of input.items)": {
      "Choices": [
        {
          "IsPresent": true,
          "Next": "item",
          "Variable": "$.heap0[0]",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
    "item": {
      "InputPath": "$.heap0[0]",
      "Next": "throw new Error("err")",
      "ResultPath": "$.item",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "throw new Error("err")": {
      "Next": "catch__for(item of input.items)",
      "Result": {
        "message": "err",
      },
      "ResultPath": null,
      "Type": "Pass",
    },
  },
}
`;

exports[`try-catch-finally 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "try",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return "hello"": {
      "End": true,
      "Result": "hello",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "return "hello"",
          "ResultPath": null,
        },
      ],
      "Next": "return "hello"",
      "Parameters": {
        "id": "id",
        "name": "name",
      },
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context in object 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return {a: context.Execution.Name}",
      "Parameters": {
        "_.$": "$$.Execution.Input",
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return {a: context.Execution.Name}": {
      "End": true,
      "Parameters": {
        "a.$": "$$.Execution.Name",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`use context object 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task(context)": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return task(context)",
      "Parameters": {
        "_.$": "$$.Execution.Input",
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(context)": {
      "InputPath": "$$",
      "Next": "1__return task(context)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context parameter 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "return context.Execution.Name",
      "Parameters": {
        "_.$": "$$.Execution.Input",
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return context.Execution.Name": {
      "End": true,
      "InputPath": "$$.Execution.Name",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`use context parameter in function call 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return task(context.Execution.Id)": {
      "End": true,
      "InputPath": "$.heap0",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return task(context.Execution.Id)",
      "Parameters": {
        "_.$": "$$.Execution.Input",
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return task(context.Execution.Id)": {
      "InputPath": "$$.Execution.Id",
      "Next": "1__return task(context.Execution.Id)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
  },
}
`;

exports[`use context parameter in template 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "1__return name: context.Execution.Id": {
      "End": true,
      "InputPath": "$.heap1.string",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "Initialize Functionless Context": {
      "Next": "return name: context.Execution.Id",
      "Parameters": {
        "_.$": "$$.Execution.Input",
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "name: context.Execution.Id": {
      "Next": "1__return name: context.Execution.Id",
      "Parameters": {
        "string.$": "States.Format('name: {}',$.heap0)",
      },
      "ResultPath": "$.heap1",
      "Type": "Pass",
    },
    "return name: context.Execution.Id": {
      "InputPath": "$$.Execution.Id",
      "Next": "name: context.Execution.Id",
      "ResultPath": "$.heap0",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor literal number of seconds 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "$SFN.waitFor(1)": {
      "Next": "return null",
      "Seconds": 1,
      "Type": "Wait",
    },
    "Initialize Functionless Context": {
      "Next": "$SFN.waitFor(1)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor literal timestamp 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "$SFN.waitUntil("2022-08-01T00:00:00Z")": {
      "Next": "return null",
      "Timestamp": "2022-08-01T00:00:00Z",
      "Type": "Wait",
    },
    "Initialize Functionless Context": {
      "Next": "$SFN.waitUntil("2022-08-01T00:00:00Z")",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitFor reference number of seconds 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "$SFN.waitFor(input.seconds)": {
      "Next": "return null",
      "SecondsPath": "$.input.seconds",
      "Type": "Wait",
    },
    "Initialize Functionless Context": {
      "Next": "$SFN.waitFor(input.seconds)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`waitUntil reference timestamp 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "$SFN.waitUntil(input.until)": {
      "Next": "return null",
      "TimestampPath": "$.input.until",
      "Type": "Wait",
    },
    "Initialize Functionless Context": {
      "Next": "$SFN.waitUntil(input.until)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
        "input.$": "$$.Execution.Input",
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
  },
}
`;

exports[`while (cond) { cond = task() } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "while (cond === null)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 1": {
      "InputPath": "$.heap0",
      "Next": "while (cond === null)",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (cond === null)": {
      "Choices": [
        {
          "Next": "cond = await task()",
          "Or": [
            {
              "And": [
                {
                  "IsPresent": false,
                  "Variable": "$.cond",
                },
                {
                  "IsPresent": false,
                  "Variable": "$.fnl_context.null",
                },
              ],
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.cond",
                },
                {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.null",
                },
                {
                  "Or": [
                    {
                      "And": [
                        {
                          "IsNull": true,
                          "Variable": "$.cond",
                        },
                        {
                          "IsNull": true,
                          "Variable": "$.fnl_context.null",
                        },
                      ],
                    },
                    {
                      "And": [
                        {
                          "IsNull": false,
                          "Variable": "$.cond",
                        },
                        {
                          "IsNull": false,
                          "Variable": "$.fnl_context.null",
                        },
                        {
                          "Or": [
                            {
                              "And": [
                                {
                                  "IsString": true,
                                  "Variable": "$.cond",
                                },
                                {
                                  "StringEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            {
                              "And": [
                                {
                                  "IsBoolean": true,
                                  "Variable": "$.cond",
                                },
                                {
                                  "BooleanEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            {
                              "And": [
                                {
                                  "IsNumeric": true,
                                  "Variable": "$.cond",
                                },
                                {
                                  "NumericEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`while (cond); cond = task() 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "while (cond === null)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "cond = await task()": {
      "InputPath": "$.fnl_context.null",
      "Next": "cond = await task() 1",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "cond = await task() 1": {
      "InputPath": "$.heap0",
      "Next": "while (cond === null)",
      "ResultPath": "$.cond",
      "Type": "Pass",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "while (cond === null)": {
      "Choices": [
        {
          "Next": "cond = await task()",
          "Or": [
            {
              "And": [
                {
                  "IsPresent": false,
                  "Variable": "$.cond",
                },
                {
                  "IsPresent": false,
                  "Variable": "$.fnl_context.null",
                },
              ],
            },
            {
              "And": [
                {
                  "IsPresent": true,
                  "Variable": "$.cond",
                },
                {
                  "IsPresent": true,
                  "Variable": "$.fnl_context.null",
                },
                {
                  "Or": [
                    {
                      "And": [
                        {
                          "IsNull": true,
                          "Variable": "$.cond",
                        },
                        {
                          "IsNull": true,
                          "Variable": "$.fnl_context.null",
                        },
                      ],
                    },
                    {
                      "And": [
                        {
                          "IsNull": false,
                          "Variable": "$.cond",
                        },
                        {
                          "IsNull": false,
                          "Variable": "$.fnl_context.null",
                        },
                        {
                          "Or": [
                            {
                              "And": [
                                {
                                  "IsString": true,
                                  "Variable": "$.cond",
                                },
                                {
                                  "StringEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            {
                              "And": [
                                {
                                  "IsBoolean": true,
                                  "Variable": "$.cond",
                                },
                                {
                                  "BooleanEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                            {
                              "And": [
                                {
                                  "IsNumeric": true,
                                  "Variable": "$.cond",
                                },
                                {
                                  "NumericEqualsPath": "$.fnl_context.null",
                                  "Variable": "$.cond",
                                },
                              ],
                            },
                          ],
                        },
                      ],
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;

exports[`while(true) { try { } catch { wait } 1`] = `
{
  "StartAt": "Initialize Functionless Context",
  "States": {
    "Initialize Functionless Context": {
      "Next": "while (true)",
      "Parameters": {
        "fnl_context": {
          "null": null,
        },
      },
      "ResultPath": "$",
      "Type": "Pass",
    },
    "catch__try": {
      "Next": "while (true)",
      "Seconds": 1,
      "Type": "Wait",
    },
    "return null": {
      "End": true,
      "InputPath": "$.fnl_context.null",
      "ResultPath": "$",
      "Type": "Pass",
    },
    "try": {
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL",
          ],
          "Next": "catch__try",
          "ResultPath": null,
        },
      ],
      "InputPath": "$.fnl_context.null",
      "Next": "while (true)",
      "Resource": "__REPLACED_TOKEN",
      "ResultPath": "$.heap0",
      "Type": "Task",
    },
    "while (true)": {
      "Choices": [
        {
          "IsNull": false,
          "Next": "try",
          "Variable": "$$.Execution.Id",
        },
      ],
      "Default": "return null",
      "Type": "Choice",
    },
  },
}
`;
