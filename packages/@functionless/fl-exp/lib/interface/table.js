"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableAttributesClient = exports.TableDocumentClient = exports.Table = exports.isTableDecl = exports.TableKind = void 0;
const dynamodb_1 = __importDefault(require("aws-sdk/clients/dynamodb"));
const dynamodb_2 = require("aws-sdk/clients/dynamodb");
const util_1 = require("../util");
const client_1 = require("./client");
exports.TableKind = "fl.Table";
function isTableDecl(a) {
    return (a === null || a === void 0 ? void 0 : a.kind) === exports.TableKind;
}
exports.isTableDecl = isTableDecl;
const documentClient = (0, client_1.createClientFactory)(dynamodb_2.DocumentClient);
const dynamoClient = (0, client_1.createClientFactory)(dynamodb_1.default);
function Table(props, 
/**
 * Injected by the compiler.
 */
resourceId, 
/**
 * Injected by the compiler.
 */
roleArn) {
    return new TableDocumentClient(props, resourceId, roleArn);
}
exports.Table = Table;
class TableDocumentClient {
    constructor(props, resourceId, roleArn) {
        this.props = props;
        this.resourceId = resourceId;
        this.roleArn = roleArn;
        this.kind = exports.TableKind;
        this.attributes = new TableAttributesClient(resourceId, roleArn);
    }
    getEnvironmentKey() {
        return (0, util_1.getEnvironmentVariableName)(this.resourceId);
    }
    getTableArn() {
        return process.env[`${this.getEnvironmentKey()}_ARN`];
    }
    getTableName() {
        return process.env[`${this.getEnvironmentKey()}_NAME`];
    }
    async get(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await documentClient(this.roleArn)).get(input).promise();
    }
    async put(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await documentClient(this.roleArn)).put(input).promise();
    }
    async update(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await documentClient(this.roleArn)).update(input).promise();
    }
    async delete(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await documentClient(this.roleArn)).delete(input).promise();
    }
    async query(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await documentClient(this.roleArn)).query(input).promise();
    }
    async scan(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await documentClient(this.roleArn)).scan(input).promise();
    }
    async batchGet(request) {
        var _a;
        const input = {
            RequestItems: {
                [this.getTableName()]: request,
            },
        };
        const response = await (await documentClient(this.roleArn))
            .batchGet(input)
            .promise();
        return {
            ...response,
            Items: (_a = response.Responses) === null || _a === void 0 ? void 0 : _a[this.getTableName()],
        };
    }
    async batchWrite(request) {
        var _a;
        const input = {
            RequestItems: {
                [this.getTableName()]: request,
            },
        };
        const response = await (await documentClient(this.roleArn))
            .batchWrite(input)
            .promise();
        return {
            ...response,
            UnprocessedItems: (_a = response.UnprocessedItems) === null || _a === void 0 ? void 0 : _a[this.getTableName()],
        };
    }
    async transactGet({ TransactItems }) {
        var _a;
        const input = {
            TransactItems: TransactItems.map((item) => ({
                Get: {
                    ...item.Get,
                    TableName: this.getTableName(),
                },
            })),
        };
        const response = await (await documentClient(this.roleArn))
            .transactGet(input)
            .promise();
        return {
            Items: (_a = response.Responses) === null || _a === void 0 ? void 0 : _a.map(({ Item }) => Item),
        };
    }
    async transactWrite({ TransactItems }) {
        const input = {
            TransactItems: TransactItems.flatMap((item) => Object.keys(item).map((key) => ({
                [key]: {
                    ...item[key],
                    TableName: this.getTableName(),
                },
            }))),
        };
        return await (await documentClient(this.roleArn))
            .transactWrite(input)
            .promise();
    }
}
exports.TableDocumentClient = TableDocumentClient;
class TableAttributesClient {
    constructor(resourceId, roleArn) {
        this.resourceId = resourceId;
        this.roleArn = roleArn;
    }
    getEnvironmentKey() {
        return (0, util_1.getEnvironmentVariableName)(this.resourceId);
    }
    getTableArn() {
        return process.env[`${this.getEnvironmentKey()}_ARN`];
    }
    getTableName() {
        return process.env[`${this.getEnvironmentKey()}_NAME`];
    }
    async get(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await dynamoClient(this.roleArn)).getItem(input).promise();
    }
    async put(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await dynamoClient(this.roleArn)).putItem(input).promise();
    }
    async update(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await dynamoClient(this.roleArn)).updateItem(input).promise();
    }
    async delete(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await dynamoClient(this.roleArn)).deleteItem(input).promise();
    }
    async query(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await dynamoClient(this.roleArn)).query(input).promise();
    }
    async scan(request) {
        const input = {
            ...request,
            TableName: this.getTableName(),
        };
        return await (await dynamoClient(this.roleArn)).scan(input).promise();
    }
    async batchGet(request) {
        var _a;
        const input = {
            RequestItems: {
                [this.getTableName()]: request,
            },
        };
        const response = await (await dynamoClient(this.roleArn))
            .batchGetItem(input)
            .promise();
        return {
            ...response,
            Items: (_a = response.Responses) === null || _a === void 0 ? void 0 : _a[this.getTableName()],
        };
    }
    async batchWrite(request) {
        var _a;
        const input = {
            RequestItems: {
                [this.getTableName()]: request,
            },
        };
        const response = await (await dynamoClient(this.roleArn))
            .batchWriteItem(input)
            .promise();
        return {
            ...response,
            UnprocessedItems: (_a = response.UnprocessedItems) === null || _a === void 0 ? void 0 : _a[this.getTableName()],
        };
    }
    async transactGet({ TransactItems }) {
        var _a;
        const input = {
            TransactItems: TransactItems.map((item) => ({
                Get: {
                    ...item.Get,
                    TableName: this.getTableName(),
                },
            })),
        };
        const response = await (await dynamoClient(this.roleArn))
            .transactGetItems(input)
            .promise();
        return {
            Items: (_a = response.Responses) === null || _a === void 0 ? void 0 : _a.map(({ Item }) => Item),
        };
    }
    async transactWrite({ TransactItems }) {
        const input = {
            TransactItems: TransactItems.flatMap((item) => Object.keys(item).map((key) => ({
                [key]: {
                    ...item[key],
                    TableName: this.getTableName(),
                },
            }))),
        };
        return await (await dynamoClient(this.roleArn))
            .transactWriteItems(input)
            .promise();
    }
}
exports.TableAttributesClient = TableAttributesClient;
//# sourceMappingURL=data:application/json;base64,