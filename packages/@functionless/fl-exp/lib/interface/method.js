"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Method = exports.isMethod = exports.MethodKind = void 0;
exports.MethodKind = "fl.Method";
function isMethod(a) {
    return (a === null || a === void 0 ? void 0 : a.kind) === exports.MethodKind;
}
exports.isMethod = isMethod;
function Method(handlerOrProps, handlerOrUndefined) {
    const handler = typeof handlerOrProps === "function" ? handlerOrProps : handlerOrUndefined;
    const props = typeof handlerOrProps === "object" ? handlerOrProps : undefined;
    function method(event, ...args) {
        /* eslint-disable turbo/no-undeclared-env-vars */
        if (
        // @ts-ignore
        process.env.RESOURCE_ID === handler.resourceId ||
            process.env.FL_LOCAL === "true") {
            /* eslint-enable turbo/no-undeclared-env-vars */
            const merged = {
                ...(event.body ? JSON.parse(event.body) : {}),
                ...event.pathParameters,
                _request: event,
            };
            // this is the API being invoked
            // @ts-ignore
            return handler(merged, ...args);
        }
        else {
            // this is a Lambda Function directly invoking this API
            // axios
            throw new Error("Not Implemented");
        }
    }
    Object.assign(method, {
        kind: exports.MethodKind,
        handler,
        props,
    });
    Object.defineProperty(handler, "RESOURCE_ID", {
        // @ts-ignore
        get: () => method.RESOURCE_ID,
    });
    return method;
}
exports.Method = Method;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0aG9kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ludGVyZmFjZS9tZXRob2QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBb0NhLFFBQUEsVUFBVSxHQUFHLFdBQVcsQ0FBQztBQTBCdEMsU0FBZ0IsUUFBUSxDQUFDLENBQU07SUFDN0IsT0FBTyxDQUFBLENBQUMsYUFBRCxDQUFDLHVCQUFELENBQUMsQ0FBRSxJQUFJLE1BQUssa0JBQVUsQ0FBQztBQUNoQyxDQUFDO0FBRkQsNEJBRUM7QUFpQkQsU0FBZ0IsTUFBTSxDQUlwQixjQUFxRSxFQUNyRSxrQkFBNEQ7SUFFNUQsTUFBTSxPQUFPLEdBQ1gsT0FBTyxjQUFjLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLGtCQUFtQixDQUFDO0lBQzlFLE1BQU0sS0FBSyxHQUFHLE9BQU8sY0FBYyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFOUUsU0FBUyxNQUFNLENBQUMsS0FBMkIsRUFBRSxHQUFHLElBQVc7UUFDekQsaURBQWlEO1FBQ2pEO1FBQ0UsYUFBYTtRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxLQUFLLE9BQU8sQ0FBQyxVQUFVO1lBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLE1BQU0sRUFDL0I7WUFDQSxnREFBZ0Q7WUFDaEQsTUFBTSxNQUFNLEdBQWtDO2dCQUM1QyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDN0MsR0FBRyxLQUFLLENBQUMsY0FBYztnQkFDdkIsUUFBUSxFQUFFLEtBQUs7YUFDaEIsQ0FBQztZQUVGLGdDQUFnQztZQUNoQyxhQUFhO1lBQ2IsT0FBTyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7U0FDakM7YUFBTTtZQUNMLHVEQUF1RDtZQUN2RCxRQUFRO1lBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFnQztRQUNsRCxJQUFJLEVBQUUsa0JBQVU7UUFDaEIsT0FBTztRQUNQLEtBQUs7S0FDTixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUU7UUFDNUMsYUFBYTtRQUNiLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsV0FBVztLQUM5QixDQUFDLENBQUM7SUFDSCxPQUFPLE1BQWEsQ0FBQztBQUN2QixDQUFDO0FBNUNELHdCQTRDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgYXdzX2FwaWdhdGV3YXkgfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7IEV4cHJlc3NTdGVwRnVuY3Rpb24gfSBmcm9tIFwiLi9leHByZXNzLXN0ZXAtZnVuY3Rpb25cIjtcbmltcG9ydCB7IExhbWJkYUZ1bmN0aW9uIH0gZnJvbSBcIi4vbGFtYmRhLWZ1bmN0aW9uXCI7XG5pbXBvcnQgeyBBUElHYXRld2F5UHJveHlFdmVudCwgQVBJR2F0ZXdheVByb3h5UmVzdWx0IH0gZnJvbSBcImF3cy1sYW1iZGFcIjtcblxudHlwZSBUYWdnZWRQYXJhbTxUYWcgZXh0ZW5kcyBzdHJpbmcsIFZhbHVlPiA9IHtcbiAgdGFnOiBUYWc7XG4gIHZhbHVlOiBWYWx1ZTtcbn07XG5cbmV4cG9ydCB0eXBlIFBhdGhQYXJhbTxUPiA9IFRhZ2dlZFBhcmFtPFwicGF0aFwiLCBUPjtcblxudHlwZSBUYWdnZWRLZXlzPFRhZyBleHRlbmRzIHN0cmluZywgVCBleHRlbmRzIG9iamVjdD4gPSB7XG4gIFtLIGluIGtleW9mIFRdOiBUW0tdIGV4dGVuZHMgVGFnZ2VkUGFyYW08VGFnLCBhbnk+ID8gSyA6IG5ldmVyO1xufVtrZXlvZiBUXTtcblxudHlwZSBUYWdnZWRQYXJhbXM8VGFnIGV4dGVuZHMgc3RyaW5nLCBUIGV4dGVuZHMgb2JqZWN0PiA9IHtcbiAgW0sgaW4gVGFnZ2VkS2V5czxUYWcsIFQ+XTogVFtLXSBleHRlbmRzIFRhZ2dlZEtleXM8VGFnLCBpbmZlciBJbm5lcj5cbiAgICA/IElubmVyXG4gICAgOiBuZXZlcjtcbn07XG5cbnR5cGUgUmVtb3ZlVGFnczxUIGV4dGVuZHMgb2JqZWN0PiA9IHtcbiAgW0sgaW4ga2V5b2YgVF06IFRbS10gZXh0ZW5kcyBUYWdnZWRQYXJhbTxhbnksIGluZmVyIElubmVyPiA/IElubmVyIDogVFtLXTtcbn07XG5cbmV4cG9ydCB0eXBlIEFwaVJlcXVlc3RFdmVudDxSZXF1ZXN0IGV4dGVuZHMgb2JqZWN0PiA9IHtcbiAgX3JlcXVlc3Q/OiBBUElHYXRld2F5UHJveHlFdmVudCAmIHtcbiAgICBwYXRoUGFyYW1zOiBUYWdnZWRQYXJhbXM8XCJwYXRoXCIsIFJlcXVlc3Q+O1xuICB9O1xufSAmIFJlbW92ZVRhZ3M8UmVxdWVzdD47XG5cbmV4cG9ydCB0eXBlIE1ldGhvZEhhbmRsZXJGdW5jdGlvbjxpbiBJbiA9IGFueSwgT3V0ID0gYW55PiA9IChcbiAgaW5wdXQ6IEluXG4pID0+IFByb21pc2U8T3V0PjtcblxuZXhwb3J0IGNvbnN0IE1ldGhvZEtpbmQgPSBcImZsLk1ldGhvZFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1ldGhvZFByb3BzXG4gIGV4dGVuZHMgUGljazxhd3NfYXBpZ2F0ZXdheS5NZXRob2RQcm9wcywgXCJodHRwTWV0aG9kXCI+IHt9XG5cbmV4cG9ydCB0eXBlIE1ldGhvZEhhbmRsZXI8XG4gIFJlcXVlc3RFdmVudCBleHRlbmRzIG9iamVjdCxcbiAgUmVzdWx0IGV4dGVuZHMgQVBJR2F0ZXdheVByb3h5UmVzdWx0ID0gQVBJR2F0ZXdheVByb3h5UmVzdWx0XG4+ID0gKHJlcXVlc3Q6IEFwaVJlcXVlc3RFdmVudDxSZXF1ZXN0RXZlbnQ+KSA9PiBQcm9taXNlPFJlc3VsdD47XG5cbmV4cG9ydCB0eXBlIE1ldGhvZEludGVncmF0aW9uPFxuICBSZXF1ZXN0RXZlbnQgZXh0ZW5kcyBvYmplY3QsXG4gIFJlc3VsdCBleHRlbmRzIEFQSUdhdGV3YXlQcm94eVJlc3VsdCA9IEFQSUdhdGV3YXlQcm94eVJlc3VsdFxuPiA9XG4gIHwgTGFtYmRhRnVuY3Rpb248TWV0aG9kSGFuZGxlcjxSZXF1ZXN0RXZlbnQsIFJlc3VsdD4+XG4gIHwgRXhwcmVzc1N0ZXBGdW5jdGlvbjxNZXRob2RIYW5kbGVyPFJlcXVlc3RFdmVudCwgUmVzdWx0Pj47XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0aG9kPFxuICBSZXF1ZXN0RXZlbnQgZXh0ZW5kcyBvYmplY3QgPSBvYmplY3QsXG4gIFJlc3VsdCBleHRlbmRzIEFQSUdhdGV3YXlQcm94eVJlc3VsdCA9IEFQSUdhdGV3YXlQcm94eVJlc3VsdFxuPiB7XG4gIGtpbmQ6IHR5cGVvZiBNZXRob2RLaW5kO1xuICBoYW5kbGVyOiBNZXRob2RJbnRlZ3JhdGlvbjxSZXF1ZXN0RXZlbnQsIFJlc3VsdD47XG4gIHByb3BzOiBNZXRob2RQcm9wcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTWV0aG9kKGE6IGFueSk6IGEgaXMgTWV0aG9kIHtcbiAgcmV0dXJuIGE/LmtpbmQgPT09IE1ldGhvZEtpbmQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBNZXRob2Q8XG4gIFJlcXVlc3RFdmVudCBleHRlbmRzIG9iamVjdCxcbiAgUmVzdWx0IGV4dGVuZHMgQVBJR2F0ZXdheVByb3h5UmVzdWx0ID0gQVBJR2F0ZXdheVByb3h5UmVzdWx0XG4+KFxuICBoYW5kbGVyOiBNZXRob2RJbnRlZ3JhdGlvbjxSZXF1ZXN0RXZlbnQsIFJlc3VsdD5cbik6IE1ldGhvZDxSZXF1ZXN0RXZlbnQsIFJlc3VsdD47XG5cbmV4cG9ydCBmdW5jdGlvbiBNZXRob2Q8XG4gIFJlcXVlc3RFdmVudCBleHRlbmRzIG9iamVjdCxcbiAgUmVzdWx0IGV4dGVuZHMgQVBJR2F0ZXdheVByb3h5UmVzdWx0ID0gQVBJR2F0ZXdheVByb3h5UmVzdWx0XG4+KFxuICBwcm9wczogTWV0aG9kUHJvcHMsXG4gIGhhbmRsZXI6IE1ldGhvZEludGVncmF0aW9uPFJlcXVlc3RFdmVudCwgUmVzdWx0PlxuKTogTWV0aG9kPFJlcXVlc3RFdmVudCwgUmVzdWx0PjtcblxuZXhwb3J0IGZ1bmN0aW9uIE1ldGhvZDxcbiAgUmVxdWVzdEV2ZW50IGV4dGVuZHMgb2JqZWN0LFxuICBSZXN1bHQgZXh0ZW5kcyBBUElHYXRld2F5UHJveHlSZXN1bHQgPSBBUElHYXRld2F5UHJveHlSZXN1bHRcbj4oXG4gIGhhbmRsZXJPclByb3BzOiBNZXRob2RJbnRlZ3JhdGlvbjxSZXF1ZXN0RXZlbnQsIFJlc3VsdD4gfCBNZXRob2RQcm9wcyxcbiAgaGFuZGxlck9yVW5kZWZpbmVkPzogTWV0aG9kSW50ZWdyYXRpb248UmVxdWVzdEV2ZW50LCBSZXN1bHQ+XG4pOiBNZXRob2Q8UmVxdWVzdEV2ZW50LCBSZXN1bHQ+IHtcbiAgY29uc3QgaGFuZGxlciA9XG4gICAgdHlwZW9mIGhhbmRsZXJPclByb3BzID09PSBcImZ1bmN0aW9uXCIgPyBoYW5kbGVyT3JQcm9wcyA6IGhhbmRsZXJPclVuZGVmaW5lZCE7XG4gIGNvbnN0IHByb3BzID0gdHlwZW9mIGhhbmRsZXJPclByb3BzID09PSBcIm9iamVjdFwiID8gaGFuZGxlck9yUHJvcHMgOiB1bmRlZmluZWQ7XG5cbiAgZnVuY3Rpb24gbWV0aG9kKGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudCwgLi4uYXJnczogYW55W10pIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSB0dXJiby9uby11bmRlY2xhcmVkLWVudi12YXJzICovXG4gICAgaWYgKFxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgcHJvY2Vzcy5lbnYuUkVTT1VSQ0VfSUQgPT09IGhhbmRsZXIucmVzb3VyY2VJZCB8fFxuICAgICAgcHJvY2Vzcy5lbnYuRkxfTE9DQUwgPT09IFwidHJ1ZVwiXG4gICAgKSB7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIHR1cmJvL25vLXVuZGVjbGFyZWQtZW52LXZhcnMgKi9cbiAgICAgIGNvbnN0IG1lcmdlZDogQXBpUmVxdWVzdEV2ZW50PFJlcXVlc3RFdmVudD4gPSB7XG4gICAgICAgIC4uLihldmVudC5ib2R5ID8gSlNPTi5wYXJzZShldmVudC5ib2R5KSA6IHt9KSxcbiAgICAgICAgLi4uZXZlbnQucGF0aFBhcmFtZXRlcnMsXG4gICAgICAgIF9yZXF1ZXN0OiBldmVudCxcbiAgICAgIH07XG5cbiAgICAgIC8vIHRoaXMgaXMgdGhlIEFQSSBiZWluZyBpbnZva2VkXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICByZXR1cm4gaGFuZGxlcihtZXJnZWQsIC4uLmFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aGlzIGlzIGEgTGFtYmRhIEZ1bmN0aW9uIGRpcmVjdGx5IGludm9raW5nIHRoaXMgQVBJXG4gICAgICAvLyBheGlvc1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm90IEltcGxlbWVudGVkXCIpO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKG1ldGhvZCwgPE1ldGhvZDxSZXF1ZXN0RXZlbnQsIFJlc3VsdD4+e1xuICAgIGtpbmQ6IE1ldGhvZEtpbmQsXG4gICAgaGFuZGxlcixcbiAgICBwcm9wcyxcbiAgfSk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShoYW5kbGVyLCBcIlJFU09VUkNFX0lEXCIsIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZ2V0OiAoKSA9PiBtZXRob2QuUkVTT1VSQ0VfSUQsXG4gIH0pO1xuICByZXR1cm4gbWV0aG9kIGFzIGFueTtcbn1cbiJdfQ==