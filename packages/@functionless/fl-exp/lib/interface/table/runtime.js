"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"runtime.js","sourceRoot":"","sources":["../../../src/interface/table/runtime.ts"],"names":[],"mappings":"","sourcesContent":["import { JsonFormat } from \"typesafe-dynamodb\";\nimport {\n  BatchGetItem,\n  BatchGetItemInput,\n  BatchGetItemOutput,\n} from \"./batch-get-item\";\nimport { BatchWriteItem, PutRequest, DeleteRequest } from \"./batch-write-item\";\nimport {\n  DeleteItem,\n  DeleteItemReturnValues,\n  DeleteItemInput,\n  DeleteItemOutput,\n} from \"./delete-item\";\nimport { GetItem, GetItemInput, GetItemOutput } from \"./get-item\";\nimport { PutItem, PutItemInput, PutItemOutput } from \"./put-item\";\nimport { Query } from \"./query\";\nimport { ReturnValues } from \"./return-value\";\nimport { Scan } from \"./scan\";\nimport { TransactGetItems, TransactGetItem, Get } from \"./transact-get-item\";\nimport {\n  TransactWriteItems,\n  TransactWriteItemsInput,\n  TransactWriteItemsOutput,\n  ConditionCheck,\n  Update,\n  Put,\n  Delete,\n} from \"./transact-write-item\";\nimport { UpdateItem, UpdateItemInput, UpdateItemOutput } from \"./update-item\";\n\ndeclare const a: AWS.DynamoDB;\n\n/**\n * The Runtime API for a DynamoDB {@link Table}.\n *\n * @tparam {@link Item} - the type of data in the DynamoDB Table\n * @tparam {@link PartitionKey} - the name of the Partition Key field\n * @tparam {@link RangeKey} - the name of the Range Key field if specified, otherwise undefined\n * @tparam {@link Format} - the data format of the values ({@link JsonFormat.AttributeValue} or {@link JsonFormat.Document})\n */\ninterface TableRuntimeApi<\n  Item extends object,\n  PartitionKey extends keyof Item,\n  RangeKey extends keyof Item | undefined,\n  Format extends JsonFormat\n> {\n  batchGet: BatchGetItem<Item, PartitionKey, RangeKey, Format>;\n  batchWrite: BatchWriteItem<Item, PartitionKey, RangeKey, Format>;\n  delete: DeleteItem<Item, PartitionKey, RangeKey, Format>;\n  get: GetItem<Item, PartitionKey, RangeKey, Format>;\n  put: PutItem<Item, Format>;\n  query: Query<Item, PartitionKey, RangeKey, Format>;\n  scan: Scan<Item, PartitionKey, RangeKey, Format>;\n  transactGet: TransactGetItems<Item, PartitionKey, RangeKey, Format>;\n  transactWrite: TransactWriteItems<Item, PartitionKey, RangeKey, Format>;\n  update: UpdateItem<Item, PartitionKey, RangeKey, Format>;\n}\n\nexport interface TableDocumentApi<\n  Item extends object,\n  PartitionKey extends keyof Item,\n  RangeKey extends keyof Item | undefined\n> extends TableRuntimeApi<Item, PartitionKey, RangeKey, JsonFormat.Document> {}\n\n/**\n * The Runtime API for a DynamoDB {@link Table} using the Document JSON format.\n *\n * @tparam {@link Item} - the type of data in the DynamoDB Table\n * @tparam {@link PartitionKey} - the name of the Partition Key field\n * @tparam {@link RangeKey} - the name of the Range Key field if specified, otherwise undefined\n */\nexport interface TableDocumentApi<\n  Item extends object,\n  PartitionKey extends keyof Item,\n  RangeKey extends keyof Item | undefined\n> extends TableRuntimeApi<Item, PartitionKey, RangeKey, JsonFormat.Document> {\n  /**\n   * The `get` operation returns a set of attributes for the item with the given\n   * primary key. If there is no matching item, `get` does not return any data\n   * and there will be no `Item` element in the response.\n   *\n   *\n   * ```ts\n   * declare const table: Table<Item, \"pk\">\n   *\n   * const response = await table.get({\n   *   Key: {\n   *     pk: \"key\"\n   *   }\n   * });\n   *\n   * response.Item; // Item | undefined\n   * ```\n   *\n   * `get` provides an eventually consistent read by default. If your application\n   * requires a strongly consistent read, set `ConsistentRead` to `true`. Although a\n   * strongly consistent read might take more time than an eventually consistent\n   * read,it always returns the last updated value.\n   *\n   * ```ts\n   * await table.get({\n   *   Key: {\n   *     pk: \"key\"\n   *   },\n   *   ConsistentRead: true\n   * });\n   * ```\n   *\n   * @see {@link GetItem}\n   * @see {@link GetItemInput}\n   * @see {@link GetItemOutput}\n   * @see [AWS API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html)\n   */\n  readonly get: GetItem<Item, PartitionKey, RangeKey, JsonFormat.Document>;\n\n  /**\n   * Creates a new item, or replaces an old item with a new item. If an item that\n   * has the same primary key as the new item already exists in the specified table,\n   * the new item completely replaces the existing item.\n   *\n   * ```ts\n   * await table.put({\n   *   Item: newItem\n   * });\n   * ```\n   *\n   * You can perform a conditional put operation (add a new item if one with the\n   * specified primary key doesn't exist), or replace an existing item if it has certain\n   * attribute values.\n   *\n   * ```ts\n   * await table.put({\n   *   Item: newItem,\n   *   ConditionExpression: \"attribute = value\"\n   * });\n   * ```\n   *\n   * You can return the item's attribute values in the same operation, using the\n   * {@link ReturnValues} parameter.\n   * ```ts\n   * await table.put({\n   *   Item: newItem,\n   *   ReturnValues: \"ALL_OLD\"\n   * });\n   * ```\n   *\n   * When you add an item, the primary key attributes are the only required attributes.\n   * Attribute values cannot be `null`. Empty String and Binary attribute values are\n   * allowed. Attribute values of type String and Binary must have a length greater than\n   * zero if the attribute is used as a key attribute for a table or index. Set type\n   * attributes cannot be empty. Invalid Requests with empty values will be rejected with\n   * a `ValidationException` exception.\n   *\n   * To prevent a new item from replacing an existing item, use a conditional expression\n   * that contains the `attribute_not_exists` function with the name of the attribute being\n   * used as the partition key for the table. Since every record must contain that attribute,\n   * the attribute_not_exists function will only succeed if no matching item exists.\n   *\n   * ```ts\n   * await table.put({\n   *   Item: newItem,\n   *   // ensure the item doesn't already exist\n   *   ConditionExpression: \"attribute_not_exists(pk)\"\n   * });\n   * ```\n   *\n   * @see {@link PutItem}\n   * @see {@link PutItemInput}\n   * @see {@link PutItemOutput}\n   * @see [PutItem API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html)\n   * @see [Condition Expressions Documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html)\n   */\n  readonly put: PutItem<Item, JsonFormat.Document>;\n\n  /**\n   * Edits an existing item's attributes, or adds a new item to the table if it does not\n   * already exist. You can put, delete, or add attribute values.\n   * ```ts\n   * await table.update({\n   *   Key: key,\n   *   UpdateExpression: \"SET attribute = <val>\"\n   * })\n   * ```\n   *\n   * Not all names and values are supported in an `UpdateExpression`, such as reserved\n   * words, keys with complex names and complex values. To alias names, specify it in the\n   * `ExpressionAttributeNames` map with a name prefixed by a `#`. Then, use the alias\n   * in your `UpdateExpression`\n   * ```ts\n   * await table.update({\n   *   Key: key,\n   *   UpdateExpression: \"SET #attribute = <val>\",\n   *   ExpressionAttributeNames: {\n   *     \"#attribute\": \"special name\"\n   *   }\n   * })\n   * ```\n   *\n   * Similarly, to alias a value for use in an `UpdateExpression`, provide  value in the\n   * `ExpressionAttributeValues` map prefixed with `:`. Then, use the alias in your\n   * `UpdateExpression`.\n   * ```ts\n   * await table.update({\n   *   Key: key,\n   *   UpdateExpression: \"SET attribute = :val\",\n   *   ExpressionAttributeValues: {\n   *     \":val\": \"my value\"\n   *   }\n   * })\n   * ```\n   *\n   * You can also perform a conditional update on an existing item (insert a new attribute\n   * name-value pair if it doesn't exist, or replace an existing name-value pair if it has\n   * certain expected attribute values).\n   *\n   * ```ts\n   * await table.update({\n   *   Key: key,\n   *   UpdateExpression: \"SET attribute = <new-val>\",\n   *   ConditionExpression: \"attribute = <old-val>\"\n   * })\n   * ```\n   *\n   * You can also return the item's attribute values in the same `update` operation using\n   * the {@link ReturnValues} parameter.\n   * ```ts\n   * const response = await table.update({\n   *   Key: key,\n   *   UpdateExpression: \"SET attribute = <new-val>\",\n   *   ReturnValues: \"ALL_OLD\"\n   * });\n   *\n   * response.Attributes; // attributes of the old item (its state prior to this `update` request).\n   * ```\n   *\n   * @see {@link UpdateItem}\n   * @see {@link UpdateItemInput}\n   * @see {@link UpdateItemOutput}\n   * @see [Update Expressions Documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.UpdateExpressions.html)\n   * @see [Condition Expressions Documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html)\n   * @see [UpdateItem API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html)\n   */\n  readonly update: UpdateItem<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.Document\n  >;\n\n  /**\n   * Deletes a single item in a table by primary key.\n   *\n   * ```ts\n   * await table.delete({\n   *   Key: {\n   *     pk: \"partition key\"\n   *   }\n   * });\n   * ```\n   *\n   * You can perform a conditional delete operation that deletes the item if it has an expected\n   * attribute value.\n   * ```ts\n   * await table.delete({\n   *   Key: key,\n   *   ConditionExpression: \"attribute = <val>\"\n   * });\n   * ```\n   *\n   * Not all names and values are supported in a `ConditionExpression`, such as reserved\n   * words, keys with complex names and complex values. To alias names, specify it in the\n   * `ExpressionAttributeNames` map with a name prefixed by a `#`. Then, use the alias\n   * in your `ConditionExpression`\n   * ```ts\n   * await table.delete({\n   *   Key: key,\n   *   ConditionExpression: \"$attribute = <val>\",\n   *   ExpressionAttributeNames: {\n   *     \"#attribute\": \"special name\"\n   *   }\n   * })\n   * ```\n   *\n   * Similarly, to alias a value for use in an `ConditionExpression`, provide  value in the\n   * `ExpressionAttributeValues` map prefixed with `:`. Then, use the alias in your\n   * `ConditionExpression`.\n   * ```ts\n   * await table.delete({\n   *   Key: key,\n   *   ConditionExpression: \"attribute = :val\",\n   *   ExpressionAttributeValues: {\n   *     \":val\": \"my value\"\n   *   }\n   * })\n   * ```\n   *\n   * In addition to deleting an item, you can also return the item's attribute values in the same\n   * operation, using the `ReturnValues` parameter. Unless you specify conditions, the DeleteItem is\n   * an idempotent operation; running it multiple times on the same item or attribute does not\n   * result in an error response. Conditional deletes are useful for deleting items only if specific\n   * conditions are met. If those conditions are met, DynamoDB performs the delete. Otherwise, the\n   * item is not deleted.\n   *\n   * @see {@link DeleteItem}\n   * @see {@link DeleteItemInput}\n   * @see {@link DeleteItemOutput}\n   * @see {@link DeleteItemReturnValues}\n   * @see [Condition Expressions Documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html)\n   * @see [DeleteItem API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html)\n   */\n  readonly delete: DeleteItem<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.Document\n  >;\n\n  /**\n   * `query` returns all items that contain a partition key value. Use the `KeyConditionExpression`\n   * parameter to provide a specific value for the partition key. The `query` operation will return\n   * all of the items from the table or index with that partition key value.\n   *\n   * ```ts\n   * await table.query({\n   *   KeyConditionExpression: \"pk = :pk\",\n   *   ExpressionAttributeValues: {\n   *     \":pk\": \"partition key\"\n   *   }\n   * })\n   * ```\n   *\n   * You can optionally narrow the scope of the `query` operation by specifying a sort key value\n   * and a comparison operator in `KeyConditionExpression`.\n   * ```ts\n   * await table.query({\n   *   KeyConditionExpression: \"pk = :pk AND starts_with(sk, :prefix)\",\n   *   ExpressionAttributeValues: {\n   *     \":pk\": \"partition key\",\n   *     \":prefix\": \"prefix\"\n   *   }\n   * })\n   * ```\n   *\n   * To further refine the `query` results, you can optionally provide a `FilterExpression`. A `FilterExpression`\n   * determines which items within the results should be returned to you. All of the other results are\n   * discarded.\n   *\n   * ```ts\n   * await table.query({\n   *   KeyConditionExpression: \"pk = :pk AND starts_with(sk, :prefix)\",\n   *   FilterExpression: \"field < 0\"\n   *   ..\n   * });\n   * ```\n   *\n   * `Query` results are always sorted by the sort key value. If the data type of the sort key is `Number`, the\n   * results are returned in numeric order; otherwise, the results are returned in order of UTF-8 bytes. By\n   * default, the sort order is ascending. To reverse the order, set the `ScanIndexForward` parameter to false.\n   *\n   * ```ts\n   * await table.query({\n   *   KeyConditionExpression: \"pk = :pk\",\n   *   // query in reverse-order\n   *   ScanIndexForward: false\n   * });\n   * ```\n   *\n   * A single `Query` operation will read up to the maximum number of items set (if using the `Limit` parameter)\n   * or a maximum of **1 MB** of data and then apply any filtering to the results using `FilterExpression`.\n   *\n   * ```ts\n   * await table.query({\n   *   ..,\n   *   Limit: 10\n   * });\n   * ```\n   *\n   * If `LastEvaluatedKey` is present in the response, you will need to paginate the result set by\n   * setting the `ExclusiveStartKey` in subsequent requests.\n   * ```ts\n   * const KeyConditionExpression: string = ..\n   * const response = await table.query({\n   *   KeyConditionExpression\n   * });\n   * if (response.LastEvaluatedKey) {\n   *   await table.query({\n   *     // the KeyConditionExpression must be the same across query requests\n   *     KeyConditionExpression,\n   *     // use the LastEvaluatedKey as the starting point\n   *     ExclusiveStartKey: response.LastEvaluatedKey\n   *   });\n   * }\n   * ```\n   *\n   * `FilterExpression` is applied after a `Query` finishes, but before the results are returned.\n   * A `FilterExpression` cannot contain partition key or sort key attributes. You need to specify\n   * those attributes in the `KeyConditionExpression`.\n   * ```ts\n   * const response = await table.query({\n   *   KeyConditionExpression: ..,\n   *   FilterExpression: \"#field = :val\"\n   * });\n   * ```\n   *\n   * A `Query` operation can return an empty result set and a `LastEvaluatedKey` if all the items\n   * read for the page of results are filtered out.\n   *\n   * You can query a table, a local secondary index, or a global secondary index. For a query on a table or on\n   * a local secondary index, you can set the `ConsistentRead` parameter to true and obtain a strongly consistent\n   * result. Global secondary indexes support eventually consistent reads only, so do not specify `ConsistentRead`\n   * when querying a global secondary index.\n   *\n   * A `query` operation always returns a result set. If no matching items are found, the result set will be\n   * empty. Queries that do not return results consume the minimum number of read capacity units for that\n   * type of read operation. DynamoDB calculates the number of read capacity units consumed based on item\n   * size, not on the amount of data that is returned to an application. The number of capacity units consumed\n   * will be the same whether you request all of the attributes (the default behavior) or just some of\n   * them (using a projection expression). The number will also be the same whether or not you use a\n   * `FilterExpression`.\n   */\n  readonly query: Query<Item, PartitionKey, RangeKey, JsonFormat.Document>;\n\n  /**\n   * The `scan` operation returns one or more items and item attributes by accessing every item in\n   * table or a secondary index.\n   * ```ts\n   * const response = await table.scan();\n   *\n   * response.Items // Item[] | undefined;\n   * ```\n   *\n   * To have DynamoDB return fewer items, you can provide a `FilterExpression` operation.\n   * ```ts\n   * await table.scan({\n   *   FilterExpression: \"#field = :val\"\n   * });\n   * ```\n   *\n   * If the total number of scanned items exceeds the maximum dataset size limit of **1 MB**,\n   * the scan stops and results are returned to the user along with a `LastEvaluatedKey` value to\n   * continue the scan in a subsequent operation. The results also include the number of\n   * items exceeding the limit.\n   *\n   * ```ts\n   * const response = await table.scan();\n   *\n   * if (response.LastEvaluatedKey) {\n   *   await table.scan({\n   *     ExclusiveStartKey: response.LastEvaluatedKey\n   *   });\n   * }\n   * ```\n   *\n   * A single `scan` operation reads up to the maximum number of items set (if using the Limit\n   * parameter) or a maximum of 1 MB of data and then apply any filtering to the results using\n   * `FilterExpression`. If `LastEvaluatedKey` is present in the response, you need to paginate the\n   * result set.\n   *\n   * `scan` operations proceed sequentially; however, for faster performance on a large table or\n   * secondary index, applications can request a parallel `scan` operation by providing the `Segment`\n   * and `TotalSegments` parameters.\n   *\n   * `scan` uses eventually consistent reads when accessing the data in a table; therefore, the result\n   * set might not include the changes to data in the table immediately before the operation began.\n   * If you need a consistent copy of the data, as of the time that the `scan` begins, you can set the\n   * `ConsistentRead` parameter to true.\n   */\n  readonly scan: Scan<Item, PartitionKey, RangeKey, JsonFormat.Document>;\n\n  /**\n   * The `batchGet` operation returns a list of items for each of the given primary\n   * keys. If there are no matching items, both the `Items` and `UnprocessedKeys` properties\n   * will be empty in the response.\n   *\n   * ```ts\n   * const response = await table.batchGet({\n   *   Keys: [\n   *     {\n   *       pk: \"pk\",\n   *       sk: \"sk\",\n   *     },\n   *     {\n   *       ..\n   *     }\n   *   ],\n   * });\n   *\n   * response.Items; // Item[]\n   * ```\n   *\n   * A request can have partial failures where some of the requested keys are not\n   * retrieved successfully. The failed keys are available on the `UnprocessedKeys`\n   * property and should be retried by the caller.\n   *\n   * ```ts\n   * const response = await table.batchGet({ .. })\n   *\n   * if (response.UnprocessedKeys) {\n   *   // retry the failed keys\n   *   const retryResponse = await table.batchGet({\n   *     Keys: response.UnprocessedKeys\n   *   });\n   * }\n   * ```\n   *\n   * @see {@link BatchGetItem}\n   * @see {@link BatchGetItemInput}\n   * @see {@link BatchGetItemOutput}\n   * @see [BatchGetItem API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchGetItem.html)\n   */\n  readonly batchGet: BatchGetItem<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.Document\n  >;\n\n  /**\n   * The `batchWrite` operation puts or deletes multiple items in one or more tables.\n   *\n   * ```ts\n   * let batchWrite = await table.batchWrite({\n   *   RequestItems: [\n   *     {\n   *       DeleteRequest: {\n   *         Key: {\n   *           pk: \"partition key 1\",\n   *         },\n   *       },\n   *     },\n   *     {\n   *       PutRequest: {\n   *         Item: {\n   *           pk: \"partition key 2\",\n   *           .. // rest of the item\n   *         },\n   *       },\n   *     },\n   *   ],\n   * });\n   * ```\n   *\n   * A single call to `batchWrite` can transmit up to 16MB of data over the network, consisting\n   * of up to 25 item put or delete operations. While individual items can be up to 400 KB once stored,\n   * it's important to note that an item's representation might be greater than 400KB while being\n   * sent in DynamoDB's JSON format for the API call. For more details on this distinction, see\n   * [Naming Rules and Data Types](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html).\n   *\n   * `batchWrite` cannot update items. To update items, use the {@link update} action.\n   *\n   * The individual {@link put} and {@link delete} operations specified in `batchWrite` are atomic;\n   * however `batchWrite` as a whole is not. If any requested operations fail because the table's\n   * provisioned throughput is exceeded or an internal processing failure occurs, the failed\n   * operations are returned in the `UnprocessedItems` response parameter.\n   *\n   * ```ts\n   * const response = await table.batchWrite(..);\n   *\n   * response.UnprocessedItems; // items that failed to process will be available here\n   * ```\n   *\n   *\n   * You can investigate and optionally resend the requests. Typically, you would call `batchWrite`\n   * in a loop. Each iteration would check for unprocessed items and submit a new `batchWrite`\n   * request with those unprocessed items until all items have been processed.\n   * ```ts\n   * let writeItems;\n   * do {\n   *   writeItems = await table.batchWrite(..);\n   * } while (writeItems?.UnprocessedItems?.length);\n   * ```\n   *\n   * If none of the items can be processed due to insufficient provisioned throughput\n   * on all of the tables in the request, then `batchWrite` throws a `ProvisionedThroughputExceededException`.\n   * ```ts\n   * try {\n   *   await table.batchWrite(..);\n   * } catch (err) {\n   *   if (err.code === \"ProvisionedThroughputExceededException\") {\n   *     // handle\n   *   }\n   * }\n   * ```\n   *\n   * However, we strongly recommend that you use an exponential backoff algorithm. If you retry the\n   * batch operation immediately, the underlying read or write requests can still fail due to\n   * throttling on the individual tables. If you delay the batch operation using exponential backoff,\n   * the individual requests in the batch are much more likely to succeed. For more information,\n   * see [Batch Operations and Error Handling](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.BatchOperations).\n   *\n   * ```ts\n   * let writeItems;\n   * let backoff = 100;\n   * let maxRetries = 10;\n   * let attempt = 0;\n   * while (attempt < maxRetries) {\n   *   writeItems = await table.batchWrite(..);\n   *   if (!writeItems.UnprocessedItems?.length) {\n   *     break;\n   *   }\n   *   attempt += 1;\n   *   if (attempt > maxRetries) {\n   *     // don't retry forever, fail after so many attempts\n   *     throw new Error(\"failed\");\n   *   }\n   *   // sleep for some time before trying again\n   *   await new Promise((resolve) => setTimeout(resolve, backoff);\n   *   backoff *= 2; // exponentially increases backoff\n   * }\n   * ```\n   *\n   * With `batchWrite`, you can efficiently write or delete large amounts of data, such as from Amazon EMR,\n   * or copy data from another database into DynamoDB. In order to improve performance with these large-scale\n   * operations, `batchWrite` does not behave in the same way as individual {@link put} and {@link delete} calls\n   * would. For example, you cannot specify conditions on individual put and delete requests, and\n   * `batchWrite` does not return deleted items in the response. `batchWrite` performs the specified put\n   * and delete operations in parallel, giving you the power of the thread pool approach without having to\n   * introduce complexity into your application. Parallel processing reduces latency, but each specified put\n   * and delete request consumes the same number of write capacity units whether it is processed in parallel\n   * or not. Delete operations on nonexistent items consume one write capacity unit.\n   *\n   * If one or more of the following is true, DynamoDB rejects the entire batch write operation:\n   * * One or more tables specified in the `batchWrite` request does not exist.\n   * * Primary key attributes specified on an item in the request do not match those in the corresponding table's primary key schema.\n   * * You try to perform multiple operations on the same item in the same `batchWrite` request. For example, you cannot put and delete the same item\n   * in the same `batchWrite` request.\n   * * Your request contains at least two items with identical hash and range keys (which essentially is two put operations).\n   * * There are more than 25 requests in the batch.\n   * * Any individual item in a batch exceeds 400 KB. The total request size exceeds 16 MB.\n   *\n   * @see {@link DeleteRequest}\n   * @see {@link PutRequest}\n   * @see {@link BatchWriteItem}\n   * @see [BatchWriteItem API](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html)\n   */\n  readonly batchWrite: BatchWriteItem<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.Document\n  >;\n\n  /**\n   * `transactGet` is a synchronous operation that atomically retrieves multiple items\n   * from a table. A `transactGet` call can contain up to `25` {@link TransactGetItem} objects,\n   * each of which contains a {@link Get} structure that specifies an item to retrieve from the\n   * table.\n   *\n   * ```ts\n   * const response = await table.transactGet({\n   *   TransactItems: [\n   *     {\n   *       Get: {\n   *         Key: {\n   *           pk: \"partition key\",\n   *           sk: \"sort key\",\n   *         },\n   *       },\n   *     },\n   *     ...\n   *   ],\n   * });\n   * ```\n   *\n   * Unlike the {@link batchGet} operation where some requested keys can fail, `transactGet`\n   * ensures that all (or none) {@link Get} requests are successfully retrieved - i.e. the\n   * whole operation happens within a single transaction. This comes with the added cost of\n   * each {@link Get} request consuming 2 Read Capacity Units.\n   *\n   * The aggregate size of the items in the transaction cannot exceed **4 MB**. DynamoDB rejects\n   * the entire `transactGet` request if any of the following is true:\n   * * A conflicting operation is in the process of updating an item to be read.\n   * * There is insufficient provisioned capacity for the transaction to be completed.\n   * * There is a user error, such as an invalid data format.\n   * * The aggregate size of the items in the transaction cannot exceed 4 MB.\n   *\n   * @see {@link TransactGetItems}\n   * @see {@link TransactGetItemsInput}\n   * @see {@link TransactGetItemsOutput}\n   * @see {@link Get}\n   * @see [TransactGetItems API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html)\n   */\n  readonly transactGet: TransactGetItems<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.Document\n  >;\n\n  /**\n   * TransactWriteItems is a synchronous write operation that groups up to **25** action\n   * requests. No two actions can target the same item. For example, you cannot both\n   * {@link ConditionCheck} and {@link Update} the same item.\n   *\n   * ```ts\n   * await table.transactWrite({\n   *   TransactItems: [\n   *     {\n   *       Put: {\n   *         Item: item1,\n   *       },\n   *     },\n   *     {\n   *       Update: {\n   *         Key: key1,\n   *         UpdateExpression: \"SET ..\"\n   *       },\n   *     },\n   *     {\n   *       Delete: {\n   *         Key: key2\n   *       }\n   *     },\n   *     {\n   *       ConditionCheck: {\n   *         Key: key3,\n   *         ConditionExpression: \"..\"\n   *       }\n   *     }\n   *   ],\n   * });\n   * ```\n   *\n   * Unlike {@link batchWrite}, the actions are completed atomically so that either all\n   * of them succeed, or all of them fail. Supported actions include:\n   * * {@link Put} — Initiates a `PutItem` operation to write a new item. This structure\n   * specifies the primary key of the item to be written, an optional condition expression\n   * that must be satisfied for the write to succeed, a list of the item's attributes, and\n   * a field indicating whether to retrieve the item's attributes if the condition is not met.\n   * * {@link Update} — Initiates an UpdateItem operation to update an existing item. This\n   * structure specifies the primary key of the item to be updated, an optional condition\n   * expression that must be satisfied for the update to succeed, an expression that defines\n   * one or more attributes to be updated, and a field indicating whether to retrieve the\n   * item's attributes if the condition is not met.\n   * * {@link Delete} — Initiates a DeleteItem operation to delete an existing item. This\n   * structure specifies the primary key of the item to be deleted, an optional condition\n   * expression that must be satisfied for the deletion to succeed, and a field indicating\n   * whether to retrieve the item's attributes if the condition is not met.\n   * {@link ConditionCheck} — Applies a condition to an item that is not being modified by\n   * the transaction. This structure specifies the primary key of the item to be checked\n   * a condition expression that must be satisfied for the transaction to succeed, and a\n   * field indicating whether to retrieve the item's attributes if the condition is not met.\n   *\n   * DynamoDB rejects the entire TransactWriteItems request if any of the following is true:\n   * * A condition in one of the condition expressions is not met.\n   * * An ongoing operation is in the process of updating the same item.\n   * * There is insufficient provisioned capacity for the transaction to be completed.\n   * * An item size becomes too large (bigger than **400 KB**), a local secondary index\n   * (LSI) becomes too large, or a similar validation error occurs because of changes made\n   * by the transaction.   T\n   * * The aggregate size of the items in the transaction exceeds **4 MB**.\n   * * There is a user error, such as an invalid data format.\n   *\n   * @see {@link TransactWriteItems}\n   * @see {@link TransactWriteItemsInput}\n   * @see {@link TransactWriteItemsOutput}\n   * @see {@link Put}\n   * @see {@link Update}\n   * @see {@link Delete}\n   * @see {@link ConditionCheck}\n   * @see [Condition Expressions Documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html)\n   * @see [TransactWriteItems API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html)\n   */\n  readonly transactWrite: TransactWriteItems<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.Document\n  >;\n}\n\nexport interface TableAttributesApi<\n  Item extends object,\n  PartitionKey extends keyof Item,\n  RangeKey extends keyof Item | undefined\n> extends TableRuntimeApi<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.AttributeValue\n  > {}\n\n/**\n * The Runtime API for a DynamoDB {@link Table} using the Attribute Value JSON format.\n *\n * @tparam {@link Item} - the type of data in the DynamoDB Table\n * @tparam {@link PartitionKey} - the name of the Partition Key field\n * @tparam {@link RangeKey} - the name of the Range Key field if specified, otherwise undefined\n */\nexport interface TableAttributesApi<\n  Item extends object,\n  PartitionKey extends keyof Item,\n  RangeKey extends keyof Item | undefined\n> {\n  /**\n   * The `get` operation returns a set of attributes for the item with the given\n   * primary key. If there is no matching item, `get` does not return any data\n   * and there will be no `Item` element in the response.\n   *\n   * ```ts\n   * declare const table: Table<Item, \"pk\">\n   *\n   * const response = await table.attributes.get({\n   *   Key: {\n   *     pk: {\n   *       S: \"key\"\n   *     }\n   *   }\n   * });\n   *\n   * response.Item?.pk.S // string | undefined\n   * ```\n   *\n   * `get` provides an eventually consistent read by default. If your application\n   * requires a strongly consistent read, set `ConsistentRead` to `true`. Although a\n   * strongly consistent read might take more time than an eventually consistent\n   * read,it always returns the last updated value.\n   *\n   * ```ts\n   * await table.attributes.get({\n   *   Key: {\n   *     pk: {\n   *       S: \"key\"\n   *     }\n   *   },\n   *   ConsistentRead: true\n   * });\n   * ```\n   *\n   * @see https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_GetItem.html\n   * @see https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_AttributeValue.html\n   */\n  readonly get: GetItem<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.AttributeValue\n  >;\n\n  /**\n   * Creates a new item, or replaces an old item with a new item. If an item that\n   * has the same primary key as the new item already exists in the specified table,\n   * the new item completely replaces the existing item.\n   *\n   * ```ts\n   * await table.attributes.put({\n   *   Item: newItem\n   * });\n   * ```\n   *\n   * You can perform a conditional put operation (add a new item if one with the\n   * specified primary key doesn't exist), or replace an existing item if it has certain\n   * attribute values.\n   *\n   * ```ts\n   * await table.attributes.put({\n   *   Item: newItem,\n   *   ConditionExpression: \"attribute = value\"\n   * });\n   * ```\n   *\n   * You can return the item's attribute values in the same operation, using the\n   * {@link ReturnValues} parameter.\n   * ```ts\n   * await table.attributes.put({\n   *   Item: newItem,\n   *   ReturnValues: \"ALL_OLD\"\n   * });\n   * ```\n   *\n   * When you add an item, the primary key attributes are the only required attributes.\n   * Attribute values cannot be `null`. Empty String and Binary attribute values are\n   * allowed. Attribute values of type String and Binary must have a length greater than\n   * zero if the attribute is used as a key attribute for a table or index. Set type\n   * attributes cannot be empty. Invalid Requests with empty values will be rejected with\n   * a `ValidationException` exception.\n   *\n   * To prevent a new item from replacing an existing item, use a conditional expression\n   * that contains the `attribute_not_exists` function with the name of the attribute being\n   * used as the partition key for the table. Since every record must contain that attribute,\n   * the attribute_not_exists function will only succeed if no matching item exists.\n   *\n   * ```ts\n   * await table.attributes.put({\n   *   Item: newItem,\n   *   // ensure the item doesn't already exist\n   *   ConditionExpression: \"attribute_not_exists(pk)\"\n   * });\n   * ```\n   *\n   * @see {@link PutItem}\n   * @see {@link PutItemInput}\n   * @see {@link PutItemOutput}\n   * @see [PutItem API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_PutItem.html)\n   * @see [Condition Expressions Documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html)\n   */\n  readonly put: PutItem<Item, JsonFormat.AttributeValue>;\n\n  /**\n   * Edits an existing item's attributes, or adds a new item to the table if it does not\n   * already exist. You can put, delete, or add attribute values.\n   * ```ts\n   * await table.attributes.update({\n   *   Key: key,\n   *   UpdateExpression: \"SET attribute = <val>\"\n   * })\n   * ```\n   *\n   * Not all names and values are supported in an `UpdateExpression`, such as reserved\n   * words, keys with complex names and complex values. To alias names, specify it in the\n   * `ExpressionAttributeNames` map with a name prefixed by a `#`. Then, use the alias\n   * in your `UpdateExpression`\n   * ```ts\n   * await table.attributes.update({\n   *   Key: key,\n   *   UpdateExpression: \"SET #attribute = <val>\",\n   *   ExpressionAttributeNames: {\n   *     \"#attribute\": \"special name\"\n   *   }\n   * })\n   * ```\n   *\n   * Similarly, to alias a value for use in an `UpdateExpression`, provide  value in the\n   * `ExpressionAttributeValues` map prefixed with `:`. Then, use the alias in your\n   * `UpdateExpression`.\n   * ```ts\n   * await table.attributes.update({\n   *   Key: key,\n   *   UpdateExpression: \"SET attribute = :val\",\n   *   ExpressionAttributeValues: {\n   *     \":val\": \"my value\"\n   *   }\n   * })\n   * ```\n   *\n   * You can also perform a conditional update on an existing item (insert a new attribute\n   * name-value pair if it doesn't exist, or replace an existing name-value pair if it has\n   * certain expected attribute values).\n   *\n   * ```ts\n   * await table.attributes.update({\n   *   Key: key,\n   *   UpdateExpression: \"SET attribute = <new-val>\",\n   *   ConditionExpression: \"attribute = <old-val>\"\n   * })\n   * ```\n   *\n   * You can also return the item's attribute values in the same `update` operation using\n   * the {@link ReturnValues} parameter.\n   * ```ts\n   * const response = await table.attributes.update({\n   *   Key: key,\n   *   UpdateExpression: \"SET attribute = <new-val>\",\n   *   ReturnValues: \"ALL_OLD\"\n   * });\n   *\n   * response.Attributes; // attributes of the old item (its state prior to this `update` request).\n   * ```\n   *\n   * @see {@link UpdateItem}\n   * @see {@link UpdateItemInput}\n   * @see {@link UpdateItemOutput}\n   * @see [Update Expressions Documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.UpdateExpressions.html)\n   * @see [Condition Expressions Documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html)\n   * @see [UpdateItem API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_UpdateItem.html)\n   */\n  readonly update: UpdateItem<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.AttributeValue\n  >;\n\n  /**\n   * Deletes a single item in a table by primary key.\n   *\n   * ```ts\n   * await table.attributes.delete({\n   *   Key: {\n   *     pk: {\n   *       S: \"partition key\"\n   *     }\n   *   }\n   * });\n   * ```\n   *\n   * You can perform a conditional delete operation that deletes the item if it has an expected\n   * attribute value.\n   * ```ts\n   * await table.attributes.delete({\n   *   Key: key,\n   *   ConditionExpression: \"attribute = <val>\"\n   * });\n   * ```\n   *\n   * Not all names and values are supported in a `ConditionExpression`, such as reserved\n   * words, keys with complex names and complex values. To alias names, specify it in the\n   * `ExpressionAttributeNames` map with a name prefixed by a `#`. Then, use the alias\n   * in your `ConditionExpression`\n   * ```ts\n   * await table.attributes.delete({\n   *   Key: key,\n   *   ConditionExpression: \"$attribute = <val>\",\n   *   ExpressionAttributeNames: {\n   *     \"#attribute\": \"special name\"\n   *   }\n   * })\n   * ```\n   *\n   * Similarly, to alias a value for use in an `ConditionExpression`, provide  value in the\n   * `ExpressionAttributeValues` map prefixed with `:`. Then, use the alias in your\n   * `ConditionExpression`.\n   * ```ts\n   * await table.attributes.delete({\n   *   Key: key,\n   *   ConditionExpression: \"attribute = :val\",\n   *   ExpressionAttributeValues: {\n   *     \":val\": {\n   *       S: \"my value\"\n   *     }\n   *   }\n   * })\n   * ```\n   *\n   * In addition to deleting an item, you can also return the item's attribute values in the same\n   * operation, using the `ReturnValues` parameter. Unless you specify conditions, the DeleteItem is\n   * an idempotent operation; running it multiple times on the same item or attribute does not\n   * result in an error response. Conditional deletes are useful for deleting items only if specific\n   * conditions are met. If those conditions are met, DynamoDB performs the delete. Otherwise, the\n   * item is not deleted.\n   *\n   * @see {@link DeleteItem}\n   * @see {@link DeleteItemInput}\n   * @see {@link DeleteItemOutput}\n   * @see {@link DeleteItemReturnValues}\n   * @see [Condition Expressions Documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html)\n   * @see [DeleteItem API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DeleteItem.html)\n   */\n  readonly delete: DeleteItem<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.AttributeValue\n  >;\n\n  /**\n   * `query` returns all items that contain a partition key value. Use the `KeyConditionExpression`\n   * parameter to provide a specific value for the partition key. The `query` operation will return\n   * all of the items from the table or index with that partition key value.\n   *\n   * ```ts\n   * await table.attributes.query({\n   *   KeyConditionExpression: \"pk = :pk\",\n   *   ExpressionAttributeValues: {\n   *     \":pk\": {\n   *       S: \"partition key\"\n   *     }\n   *   }\n   * })\n   * ```\n   *\n   * You can optionally narrow the scope of the `query` operation by specifying a sort key value\n   * and a comparison operator in `KeyConditionExpression`.\n   * ```ts\n   * await table.attributes.query({\n   *   KeyConditionExpression: \"pk = :pk AND starts_with(sk, :prefix)\",\n   *   ExpressionAttributeValues: {\n   *     \":pk\": { S: \"partition key\" },\n   *     \":prefix\": { S: \"prefix\" }\n   *   }\n   * })\n   * ```\n   *\n   * To further refine the `query` results, you can optionally provide a `FilterExpression`. A `FilterExpression`\n   * determines which items within the results should be returned to you. All of the other results are\n   * discarded.\n   *\n   * ```ts\n   * await table.attributes.query({\n   *   KeyConditionExpression: \"pk = :pk AND starts_with(sk, :prefix)\",\n   *   FilterExpression: \"field < 0\"\n   *   ..\n   * });\n   * ```\n   *\n   * `Query` results are always sorted by the sort key value. If the data type of the sort key is `Number`, the\n   * results are returned in numeric order; otherwise, the results are returned in order of UTF-8 bytes. By\n   * default, the sort order is ascending. To reverse the order, set the `ScanIndexForward` parameter to false.\n   *\n   * ```ts\n   * await table.attributes.query({\n   *   KeyConditionExpression: \"pk = :pk\",\n   *   // query in reverse-order\n   *   ScanIndexForward: false\n   * });\n   * ```\n   *\n   * A single `Query` operation will read up to the maximum number of items set (if using the `Limit` parameter)\n   * or a maximum of **1 MB** of data and then apply any filtering to the results using `FilterExpression`.\n   *\n   * ```ts\n   * await table.attributes.query({\n   *   ..,\n   *   Limit: 10\n   * });\n   * ```\n   *\n   * If `LastEvaluatedKey` is present in the response, you will need to paginate the result set by\n   * setting the `ExclusiveStartKey` in subsequent requests.\n   * ```ts\n   * const KeyConditionExpression: string = ..\n   * const response = await table.attributes.query({\n   *   KeyConditionExpression\n   * });\n   * if (response.LastEvaluatedKey) {\n   *   await table.attributes.query({\n   *     // the KeyConditionExpression must be the same across query requests\n   *     KeyConditionExpression,\n   *     // use the LastEvaluatedKey as the starting point\n   *     ExclusiveStartKey: response.LastEvaluatedKey\n   *   });\n   * }\n   * ```\n   *\n   * `FilterExpression` is applied after a `Query` finishes, but before the results are returned.\n   * A `FilterExpression` cannot contain partition key or sort key attributes. You need to specify\n   * those attributes in the `KeyConditionExpression`.\n   * ```ts\n   * const response = await table.attributes.query({\n   *   KeyConditionExpression: ..,\n   *   FilterExpression: \"#field = :val\"\n   * });\n   * ```\n   *\n   * A `Query` operation can return an empty result set and a `LastEvaluatedKey` if all the items\n   * read for the page of results are filtered out.\n   *\n   * You can query a table, a local secondary index, or a global secondary index. For a query on a table or on\n   * a local secondary index, you can set the `ConsistentRead` parameter to true and obtain a strongly consistent\n   * result. Global secondary indexes support eventually consistent reads only, so do not specify `ConsistentRead`\n   * when querying a global secondary index.\n   *\n   * A `query` operation always returns a result set. If no matching items are found, the result set will be\n   * empty. Queries that do not return results consume the minimum number of read capacity units for that\n   * type of read operation. DynamoDB calculates the number of read capacity units consumed based on item\n   * size, not on the amount of data that is returned to an application. The number of capacity units consumed\n   * will be the same whether you request all of the attributes (the default behavior) or just some of\n   * them (using a projection expression). The number will also be the same whether or not you use a\n   * `FilterExpression`.\n   */\n  readonly query: Query<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.AttributeValue\n  >;\n\n  /**\n   * The `scan` operation returns one or more items and item attributes by accessing every item in\n   * table or a secondary index.\n   * ```ts\n   * const response = await table.scan();\n   *\n   * response.Items?.forEach(item => ..);\n   * ```\n   *\n   * To have DynamoDB return fewer items, you can provide a `FilterExpression` operation.\n   * ```ts\n   * await table.scan({\n   *   FilterExpression: \"#field = :val\"\n   * });\n   * ```\n   *\n   * If the total number of scanned items exceeds the maximum dataset size limit of **1 MB**,\n   * the scan stops and results are returned to the user along with a `LastEvaluatedKey` value to\n   * continue the scan in a subsequent operation. The results also include the number of\n   * items exceeding the limit.\n   *\n   * ```ts\n   * const response = await table.scan();\n   *\n   * if (response.LastEvaluatedKey) {\n   *   await table.scan({\n   *     ExclusiveStartKey: response.LastEvaluatedKey\n   *   });\n   * }\n   * ```\n   *\n   * A single `scan` operation reads up to the maximum number of items set (if using the Limit\n   * parameter) or a maximum of 1 MB of data and then apply any filtering to the results using\n   * `FilterExpression`. If `LastEvaluatedKey` is present in the response, you need to paginate the\n   * result set.\n   *\n   * `scan` operations proceed sequentially; however, for faster performance on a large table or\n   * secondary index, applications can request a parallel `scan` operation by providing the `Segment`\n   * and `TotalSegments` parameters.\n   *\n   * `scan` uses eventually consistent reads when accessing the data in a table; therefore, the result\n   * set might not include the changes to data in the table immediately before the operation began.\n   * If you need a consistent copy of the data, as of the time that the `scan` begins, you can set the\n   * `ConsistentRead` parameter to true.\n   */\n  readonly scan: Scan<Item, PartitionKey, RangeKey, JsonFormat.AttributeValue>;\n\n  /**\n   * The `batchGet` operation returns a list of items for each of the given primary\n   * keys. If there are no matching items, both the `Items` and `UnprocessedKeys` properties\n   * will be empty in the response.\n   *\n   * ```ts\n   * const response = await table.attributes.batchGet({\n   *   Keys: [\n   *     {\n   *       pk: { S: \"pk\" },\n   *       sk: { S: \"sk\" },\n   *     },\n   *     {\n   *       ..\n   *     }\n   *   ],\n   * });\n   *\n   * response.Items; // Array<{ pk: { S: string }, sk: { S: string }, .. }>\n   * ```\n   *\n   * A request can have partial failures where some of the requested keys are not\n   * retrieved successfully. The failed keys are available on the `UnprocessedKeys`\n   * property and should be retried by the caller.\n   *\n   * ```ts\n   * const response = await table.attributes.batchGet({ .. })\n   *\n   * if (response.UnprocessedKeys) {\n   *   // retry the failed keys\n   *   const retryResponse = await table.attributes.batchGet({\n   *     Keys: response.UnprocessedKeys\n   *   });\n   * }\n   * ```\n   *\n   * @see https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchGetItem.html\n   */\n  readonly batchGet: BatchGetItem<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.AttributeValue\n  >;\n\n  /**\n   * The `batchWrite` operation puts or deletes multiple items in one or more tables.\n   *\n   * ```ts\n   * let batchWrite = await table.batchWrite({\n   *   RequestItems: [\n   *     {\n   *       DeleteRequest: {\n   *         Key: {\n   *           pk: { S: \"partition key 1\" },\n   *         },\n   *       },\n   *     },\n   *     {\n   *       PutRequest: {\n   *         Item: {\n   *           pk: { S: \"partition key 2\" },\n   *           .. // rest of the item\n   *         },\n   *       },\n   *     },\n   *   ],\n   * });\n   * ```\n   *\n   * A single call to `batchWrite` can transmit up to 16MB of data over the network, consisting\n   * of up to 25 item put or delete operations. While individual items can be up to 400 KB once stored,\n   * it's important to note that an item's representation might be greater than 400KB while being\n   * sent in DynamoDB's JSON format for the API call. For more details on this distinction, see\n   * [Naming Rules and Data Types](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html).\n   *\n   * `batchWrite` cannot update items. To update items, use the {@link update} action.\n   *\n   * The individual {@link put} and {@link delete} operations specified in `batchWrite` are atomic;\n   * however `batchWrite` as a whole is not. If any requested operations fail because the table's\n   * provisioned throughput is exceeded or an internal processing failure occurs, the failed\n   * operations are returned in the `UnprocessedItems` response parameter.\n   *\n   * ```ts\n   * const response = await table.batchWrite(..);\n   *\n   * response.UnprocessedItems; // items that failed to process will be available here\n   * ```\n   *\n   *\n   * You can investigate and optionally resend the requests. Typically, you would call `batchWrite`\n   * in a loop. Each iteration would check for unprocessed items and submit a new `batchWrite`\n   * request with those unprocessed items until all items have been processed.\n   * ```ts\n   * let writeItems;\n   * do {\n   *   writeItems = await table.batchWrite(..);\n   * } while (writeItems?.UnprocessedItems?.length);\n   * ```\n   *\n   * If none of the items can be processed due to insufficient provisioned throughput\n   * on all of the tables in the request, then `batchWrite` throws a `ProvisionedThroughputExceededException`.\n   * ```ts\n   * try {\n   *   await table.batchWrite(..);\n   * } catch (err) {\n   *   if (err.code === \"ProvisionedThroughputExceededException\") {\n   *     // handle\n   *   }\n   * }\n   * ```\n   *\n   * However, we strongly recommend that you use an exponential backoff algorithm. If you retry the\n   * batch operation immediately, the underlying read or write requests can still fail due to\n   * throttling on the individual tables. If you delay the batch operation using exponential backoff,\n   * the individual requests in the batch are much more likely to succeed. For more information,\n   * see [Batch Operations and Error Handling](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Programming.Errors.html#Programming.Errors.BatchOperations).\n   *\n   * ```ts\n   * let writeItems;\n   * let backoff = 100;\n   * let maxRetries = 10;\n   * let attempt = 0;\n   * while (attempt < maxRetries) {\n   *   writeItems = await table.batchWrite(..);\n   *   if (!writeItems.UnprocessedItems?.length) {\n   *     break;\n   *   }\n   *   attempt += 1;\n   *   if (attempt > maxRetries) {\n   *     // don't retry forever, fail after so many attempts\n   *     throw new Error(\"failed\");\n   *   }\n   *   // sleep for some time before trying again\n   *   await new Promise((resolve) => setTimeout(resolve, backoff);\n   *   backoff *= 2; // exponentially increases backoff\n   * }\n   * ```\n   *\n   * With `batchWrite`, you can efficiently write or delete large amounts of data, such as from Amazon EMR,\n   * or copy data from another database into DynamoDB. In order to improve performance with these large-scale\n   * operations, `batchWrite` does not behave in the same way as individual {@link put} and {@link delete} calls\n   * would. For example, you cannot specify conditions on individual put and delete requests, and\n   * `batchWrite` does not return deleted items in the response. `batchWrite` performs the specified put\n   * and delete operations in parallel, giving you the power of the thread pool approach without having to\n   * introduce complexity into your application. Parallel processing reduces latency, but each specified put\n   * and delete request consumes the same number of write capacity units whether it is processed in parallel\n   * or not. Delete operations on nonexistent items consume one write capacity unit.\n   *\n   * If one or more of the following is true, DynamoDB rejects the entire batch write operation:\n   * * One or more tables specified in the `batchWrite` request does not exist.\n   * * Primary key attributes specified on an item in the request do not match those in the corresponding table's primary key schema.\n   * * You try to perform multiple operations on the same item in the same `batchWrite` request. For example, you cannot put and delete the same item\n   * in the same `batchWrite` request.\n   * * Your request contains at least two items with identical hash and range keys (which essentially is two put operations).\n   * * There are more than 25 requests in the batch.\n   * * Any individual item in a batch exceeds 400 KB. The total request size exceeds 16 MB.\n   *\n   * @see {@link DeleteRequest}\n   * @see {@link PutRequest}\n   * @see {@link BatchWriteItem}\n   * @see [BatchWriteItem API](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html)\n   */\n  readonly batchWrite: BatchWriteItem<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.AttributeValue\n  >;\n\n  /**\n   * `transactGet` is a synchronous operation that atomically retrieves multiple items\n   * from a table. A `transactGet` call can contain up to `25` {@link TransactGetItem} objects,\n   * each of which contains a {@link Get} structure that specifies an item to retrieve from the\n   * table.\n   *\n   * ```ts\n   * const response = await table.transactGet({\n   *   TransactItems: [\n   *     {\n   *       Get: {\n   *         Key: {\n   *           pk: { S: \"partition key\" },\n   *           sk: { S: \"sort key\" },\n   *         },\n   *       },\n   *     },\n   *     ...\n   *   ],\n   * });\n   * ```\n   *\n   * Unlike the {@link batchGet} operation where some requested keys can fail, `transactGet`\n   * ensures that all (or none) {@link Get} requests are successfully retrieved - i.e. the\n   * whole operation happens within a single transaction. This comes with the added cost of\n   * each {@link Get} request consuming 2 Read Capacity Units.\n   *\n   * The aggregate size of the items in the transaction cannot exceed **4 MB**. DynamoDB rejects\n   * the entire `transactGet` request if any of the following is true:\n   * * A conflicting operation is in the process of updating an item to be read.\n   * * There is insufficient provisioned capacity for the transaction to be completed.\n   * * There is a user error, such as an invalid data format.\n   * * The aggregate size of the items in the transaction cannot exceed 4 MB.\n   *\n   * @see {@link TransactGetItems}\n   * @see {@link TransactGetItemsInput}\n   * @see {@link TransactGetItemsOutput}\n   * @see {@link Get}\n   * @see [TransactGetItems API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactGetItems.html)\n   */\n  readonly transactGet: TransactGetItems<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.AttributeValue\n  >;\n\n  /**\n   * TransactWriteItems is a synchronous write operation that groups up to **25** action\n   * requests. No two actions can target the same item. For example, you cannot both\n   * {@link ConditionCheck} and {@link Update} the same item.\n   *\n   * ```ts\n   * await table.transactWrite({\n   *   TransactItems: [\n   *     {\n   *       Put: {\n   *         Item: item1,\n   *       },\n   *     },\n   *     {\n   *       Update: {\n   *         Key: key1,\n   *         UpdateExpression: \"SET ..\"\n   *       },\n   *     },\n   *     {\n   *       Delete: {\n   *         Key: key2\n   *       }\n   *     },\n   *     {\n   *       ConditionCheck: {\n   *         Key: key3,\n   *         ConditionExpression: \"..\"\n   *       }\n   *     }\n   *   ],\n   * });\n   * ```\n   *\n   * Unlike {@link batchWrite}, the actions are completed atomically so that either all\n   * of them succeed, or all of them fail. Supported actions include:\n   * * {@link Put} — Initiates a `PutItem` operation to write a new item. This structure\n   * specifies the primary key of the item to be written, an optional condition expression\n   * that must be satisfied for the write to succeed, a list of the item's attributes, and\n   * a field indicating whether to retrieve the item's attributes if the condition is not met.\n   * * {@link Update} — Initiates an UpdateItem operation to update an existing item. This\n   * structure specifies the primary key of the item to be updated, an optional condition\n   * expression that must be satisfied for the update to succeed, an expression that defines\n   * one or more attributes to be updated, and a field indicating whether to retrieve the\n   * item's attributes if the condition is not met.\n   * * {@link Delete} — Initiates a DeleteItem operation to delete an existing item. This\n   * structure specifies the primary key of the item to be deleted, an optional condition\n   * expression that must be satisfied for the deletion to succeed, and a field indicating\n   * whether to retrieve the item's attributes if the condition is not met.\n   * {@link ConditionCheck} — Applies a condition to an item that is not being modified by\n   * the transaction. This structure specifies the primary key of the item to be checked\n   * a condition expression that must be satisfied for the transaction to succeed, and a\n   * field indicating whether to retrieve the item's attributes if the condition is not met.\n   *\n   * DynamoDB rejects the entire TransactWriteItems request if any of the following is true:\n   * * A condition in one of the condition expressions is not met.\n   * * An ongoing operation is in the process of updating the same item.\n   * * There is insufficient provisioned capacity for the transaction to be completed.\n   * * An item size becomes too large (bigger than **400 KB**), a local secondary index\n   * (LSI) becomes too large, or a similar validation error occurs because of changes made\n   * by the transaction.   T\n   * * The aggregate size of the items in the transaction exceeds **4 MB**.\n   * * There is a user error, such as an invalid data format.\n   *\n   * @see {@link TransactWriteItems}\n   * @see {@link TransactWriteItemsInput}\n   * @see {@link TransactWriteItemsOutput}\n   * @see {@link Put}\n   * @see {@link Update}\n   * @see {@link Delete}\n   * @see {@link ConditionCheck}\n   * @see [Condition Expressions Documentation](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html)\n   * @see [TransactWriteItems API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_TransactWriteItems.html)\n   */\n  readonly transactWrite: TransactWriteItems<\n    Item,\n    PartitionKey,\n    RangeKey,\n    JsonFormat.AttributeValue\n  >;\n}\n"]}